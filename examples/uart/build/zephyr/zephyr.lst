
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	00 1d 00 20 69 19 00 00 f5 44 00 00 3d 19 00 00     ... i....D..=...
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
  10:	3d 19 00 00 3d 19 00 00 3d 19 00 00 3d 19 00 00     =...=...=...=...
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	f1 15 00 00 3d 19 00 00 00 00 00 00 99 15 00 00     ....=...........
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  3c:	3d 19 00 00                                         =...

00000040 <_irq_vector_table>:
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
  40:	71 16 00 00 71 16 00 00 71 16 00 00 71 16 00 00     q...q...q...q...
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
  50:	71 16 00 00 71 16 00 00 71 16 00 00 71 16 00 00     q...q...q...q...
		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
				*(const char **)buf = s;
  60:	71 16 00 00 71 16 00 00 71 16 00 00 71 16 00 00     q...q...q...q...
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
  70:	71 16 00 00 71 16 00 00 71 16 00 00 71 16 00 00     q...q...q...q...
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
  80:	71 16 00 00 71 16 00 00 71 16 00 00 71 16 00 00     q...q...q...q...
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
  90:	71 16 00 00 71 16 00 00 71 16 00 00 71 16 00 00     q...q...q...q...
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
					str_ptr_arg[s_idx] = arg_idx;
  a0:	71 16 00 00 71 16 00 00 71 16 00 00 71 16 00 00     q...q...q...q...
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
						s_ro_cnt++;
					} else {
						s_rw_cnt++;
  b0:	71 16 00 00 71 16 00 00 71 16 00 00 71 16 00 00     q...q...q...q...
			switch (*fmt) {
  c0:	71 16 00 00 71 16 00 00 71 16 00 00 71 16 00 00     q...q...q...q...
  d0:	71 16 00 00 71 16 00 00 71 16 00 00 71 16 00 00     q...q...q...q...
  e0:	71 16 00 00 71 16 00 00 71 16 00 00 71 16 00 00     q...q...q...q...
  f0:	71 16 00 00 71 16 00 00 71 16 00 00 71 16 00 00     q...q...q...q...
 100:	71 16 00 00 71 16 00 00 71 16 00 00 71 16 00 00     q...q...q...q...
 110:	71 16 00 00 71 16 00 00 71 16 00 00 71 16 00 00     q...q...q...q...
				align = VA_STACK_ALIGN(void *);
 120:	71 16 00 00 71 16 00 00 71 16 00 00 71 16 00 00     q...q...q...q...
			switch (*fmt) {
 130:	71 16 00 00 71 16 00 00 71 16 00 00 71 16 00 00     q...q...q...q...
 140:	71 16 00 00 71 16 00 00 71 16 00 00 71 16 00 00     q...q...q...q...
		if (buf0 != NULL && BUF_OFFSET + size > len) {
 150:	71 16 00 00                                         q...

Disassembly of section text:

00000154 <__aeabi_uldivmod>:
     154:	b953      	cbnz	r3, 16c <__aeabi_uldivmod+0x18>
     156:	b94a      	cbnz	r2, 16c <__aeabi_uldivmod+0x18>
     158:	2900      	cmp	r1, #0
     15a:	bf08      	it	eq
     15c:	2800      	cmpeq	r0, #0
		if (is_str_arg) {
     15e:	bf1c      	itt	ne
     160:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     164:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
			int v = va_arg(ap, int);
     168:	f000 b80c 	b.w	184 <__aeabi_idiv0>

			if (buf0 != NULL) {
				*(int *)buf = v;
			}
			buf += sizeof(int);
     16c:	f1ad 0c08 	sub.w	ip, sp, #8
     170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
				arg_idx--;
     174:	f000 f808 	bl	188 <__udivmoddi4>
				parsing = false;
     178:	f8dd e004 	ldr.w	lr, [sp, #4]
				continue;
     17c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
				if (fmt[-1] == 'l') {
     180:	b004      	add	sp, #16
     182:	4770      	bx	lr

00000184 <__aeabi_idiv0>:
     184:	4770      	bx	lr
					if (fmt[-2] == 'l') {
     186:	bf00      	nop

00000188 <__udivmoddi4>:
     188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				parsing = false;
     18c:	4686      	mov	lr, r0
					if (fmt[-2] == 'l') {
     18e:	468c      	mov	ip, r1
     190:	4608      	mov	r0, r1
						align = VA_STACK_ALIGN(long long);
     192:	9e08      	ldr	r6, [sp, #32]
     194:	4615      	mov	r5, r2
				size = sizeof(void *);
     196:	4674      	mov	r4, lr
     198:	4619      	mov	r1, r3
					v.ld = va_arg(ap, long double);
     19a:	2b00      	cmp	r3, #0
     19c:	f040 80c1 	bne.w	322 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa2>
     1a0:	4285      	cmp	r5, r0
				buf = (void *) ROUND_UP(buf, align);
     1a2:	fab2 f282 	clz	r2, r2
     1a6:	d945      	bls.n	234 <CONFIG_SRAM_SIZE+0x34>
					v.ld = va_arg(ap, long double);
     1a8:	b14a      	cbz	r2, 1be <__udivmoddi4+0x36>
     1aa:	f1c2 0320 	rsb	r3, r2, #32
					if (BUF_OFFSET + size > len) {
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	4095      	lsls	r5, r2
     1b4:	4094      	lsls	r4, r2
     1b6:	fa2e f303 	lsr.w	r3, lr, r3
						*(long double *)buf = v.ld;
     1ba:	ea43 0c0c 	orr.w	ip, r3, ip
				parsing = false;
     1be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
			switch (*fmt) {
     1c2:	b2a8      	uxth	r0, r5
     1c4:	0c23      	lsrs	r3, r4, #16
     1c6:	fbbc f8fe 	udiv	r8, ip, lr
			if (*++fmt == '\0') {
     1ca:	fb0e cc18 	mls	ip, lr, r8, ip
     1ce:	fb08 f900 	mul.w	r9, r8, r0
			if (!parsing) {
     1d2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     1d6:	4599      	cmp	r9, r3
				if (*fmt == '%') {
     1d8:	d928      	bls.n	22c <CONFIG_SRAM_SIZE+0x2c>
     1da:	18eb      	adds	r3, r5, r3
					parsing = true;
     1dc:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
					arg_idx++;
     1e0:	d204      	bcs.n	1ec <__udivmoddi4+0x64>
     1e2:	4599      	cmp	r9, r3
     1e4:	d902      	bls.n	1ec <__udivmoddi4+0x64>
				align = VA_STACK_ALIGN(size_t);
     1e6:	f1a8 0702 	sub.w	r7, r8, #2
     1ea:	442b      	add	r3, r5
			switch (*fmt) {
     1ec:	eba3 0309 	sub.w	r3, r3, r9
     1f0:	b2a4      	uxth	r4, r4
				parsing = false;
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     1f6:	fb0e 331c 	mls	r3, lr, ip, r3
					return -EINVAL;
     1fa:	fb0c f000 	mul.w	r0, ip, r0
     1fe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
			long long v = va_arg(ap, long long);
     202:	42a0      	cmp	r0, r4
     204:	d914      	bls.n	230 <CONFIG_SRAM_SIZE+0x30>
     206:	192c      	adds	r4, r5, r4
     208:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     20c:	d204      	bcs.n	218 <CONFIG_SRAM_SIZE+0x18>
     20e:	42a0      	cmp	r0, r4
				}
			}
			buf += sizeof(long long);
     210:	d902      	bls.n	218 <CONFIG_SRAM_SIZE+0x18>
     212:	f1ac 0302 	sub.w	r3, ip, #2
		if (is_str_arg) {
     216:	442c      	add	r4, r5
		} else if (size == sizeof(int)) {
     218:	1a24      	subs	r4, r4, r0
     21a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
			int v = va_arg(ap, int);
     21e:	b11e      	cbz	r6, 228 <CONFIG_SRAM_SIZE+0x28>
			if (buf0 != NULL) {
     220:	40d4      	lsrs	r4, r2
		} else if (size == sizeof(long long)) {
     222:	2300      	movs	r3, #0
     224:	6034      	str	r4, [r6, #0]
			long long v = va_arg(ap, long long);
     226:	6073      	str	r3, [r6, #4]
     228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     22c:	4647      	mov	r7, r8
     22e:	e7dd      	b.n	1ec <__udivmoddi4+0x64>
     230:	4663      	mov	r3, ip
			if (buf0 != NULL) {
     232:	e7f1      	b.n	218 <CONFIG_SRAM_SIZE+0x18>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     234:	bb92      	cbnz	r2, 29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     236:	1b43      	subs	r3, r0, r5
     238:	2101      	movs	r1, #1
			s = va_arg(ap, char *);
     23a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     23e:	b2af      	uxth	r7, r5
     240:	0c20      	lsrs	r0, r4, #16
			if (is_ro && !do_ro) {
     242:	fbb3 fcfe 	udiv	ip, r3, lr
     246:	fb0e 331c 	mls	r3, lr, ip, r3
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     24a:	fb0c f807 	mul.w	r8, ip, r7
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     24e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     252:	4598      	cmp	r8, r3
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     254:	d961      	bls.n	31a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9a>
     256:	18eb      	adds	r3, r5, r3
     258:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     25c:	d204      	bcs.n	268 <CONFIG_SRAM_SIZE+0x68>
				if (buf0 != NULL) {
     25e:	4598      	cmp	r8, r3
					str_ptr_pos[s_idx] = s_ptr_idx;
     260:	d902      	bls.n	268 <CONFIG_SRAM_SIZE+0x68>
     262:	f1ac 0002 	sub.w	r0, ip, #2
     266:	442b      	add	r3, r5
					str_ptr_arg[s_idx] = arg_idx;
     268:	eba3 0308 	sub.w	r3, r3, r8
					str_ptr_pos[s_idx] = s_ptr_idx;
     26c:	b2a4      	uxth	r4, r4
     26e:	fbb3 fcfe 	udiv	ip, r3, lr
					str_ptr_arg[s_idx] = arg_idx;
     272:	fb0e 331c 	mls	r3, lr, ip, r3
					if (is_ro) {
     276:	fb0c f707 	mul.w	r7, ip, r7
     27a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     27e:	42a7      	cmp	r7, r4
     280:	d94d      	bls.n	31e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9e>
     282:	192c      	adds	r4, r5, r4
						s_ro_cnt++;
     284:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
				s_idx++;
     288:	d204      	bcs.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
					if (BUF_OFFSET + size > len) {
     28a:	42a7      	cmp	r7, r4
     28c:	d902      	bls.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
			switch (*fmt) {
     28e:	f1ac 0302 	sub.w	r3, ip, #2
			buf += sizeof(char *);
     292:	442c      	add	r4, r5
					if (BUF_OFFSET + size > len) {
     294:	1be4      	subs	r4, r4, r7
     296:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     29a:	e7c0      	b.n	21e <CONFIG_SRAM_SIZE+0x1e>
     29c:	f1c2 0320 	rsb	r3, r2, #32
				} else if (is_ro) {
     2a0:	4095      	lsls	r5, r2
     2a2:	4094      	lsls	r4, r2
					len += 1;
     2a4:	fa20 f103 	lsr.w	r1, r0, r3
				} else if (rws_pos_en) {
     2a8:	fa2e f303 	lsr.w	r3, lr, r3
     2ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
					len += strlen(s) + 1 + 1;
     2b0:	4090      	lsls	r0, r2
     2b2:	b2af      	uxth	r7, r5
     2b4:	4303      	orrs	r3, r0
     2b6:	fbb1 fcfe 	udiv	ip, r1, lr
     2ba:	fb0e 101c 	mls	r0, lr, ip, r1
     2be:	0c19      	lsrs	r1, r3, #16
     2c0:	fb0c f807 	mul.w	r8, ip, r7
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     2c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2c8:	4588      	cmp	r8, r1

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     2ca:	d922      	bls.n	312 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x92>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     2cc:	1869      	adds	r1, r5, r1
     2ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     2d2:	d204      	bcs.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     2d4:	4588      	cmp	r8, r1
     2d6:	d902      	bls.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     2d8:	f1ac 0002 	sub.w	r0, ip, #2
	*(char **)buf0 = NULL;

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);

	if (rws_pos_en) {
     2dc:	4429      	add	r1, r5
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     2de:	eba1 0108 	sub.w	r1, r1, r8
     2e2:	b29b      	uxth	r3, r3
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2e4:	fbb1 fcfe 	udiv	ip, r1, lr
	if (rws_pos_en) {
     2e8:	fb0e 111c 	mls	r1, lr, ip, r1
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     2ec:	fb0c f707 	mul.w	r7, ip, r7
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     2f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2f4:	429f      	cmp	r7, r3
		for (i = 0; i < s_idx; i++) {
     2f6:	d90e      	bls.n	316 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x96>
     2f8:	18eb      	adds	r3, r5, r3
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
     2fa:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
		for (i = 0; i < s_idx; i++) {
     2fe:	d204      	bcs.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     300:	429f      	cmp	r7, r3
			continue;
		}

		if (rws_pos_en) {
			size = 0;
			*buf++ = str_ptr_arg[i];
     302:	d902      	bls.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     304:	f1ac 0102 	sub.w	r1, ip, #2
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     308:	442b      	add	r3, r5
     30a:	1bdb      	subs	r3, r3, r7
     30c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
			*buf++ = str_ptr_arg[i];
     310:	e793      	b.n	23a <CONFIG_SRAM_SIZE+0x3a>
     312:	4660      	mov	r0, ip
	for (i = 0; i < s_idx; i++) {
     314:	e7e3      	b.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     316:	4661      	mov	r1, ip
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     318:	e7f7      	b.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     31a:	4660      	mov	r0, ip
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     31c:	e7a4      	b.n	268 <CONFIG_SRAM_SIZE+0x68>
		pkg_hdr->desc.rw_str_cnt = 0;
     31e:	4663      	mov	r3, ip
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     320:	e7b8      	b.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     322:	4283      	cmp	r3, r0
     324:	d906      	bls.n	334 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb4>
     326:	b916      	cbnz	r6, 32e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xae>
			if (BUF_OFFSET + 1 > len) {
     328:	2100      	movs	r1, #0
     32a:	4608      	mov	r0, r1
     32c:	e77c      	b.n	228 <CONFIG_SRAM_SIZE+0x28>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     32e:	e9c6 e000 	strd	lr, r0, [r6]
			if (BUF_OFFSET + 1 > len) {
     332:	e7f9      	b.n	328 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa8>
     334:	fab3 f783 	clz	r7, r3
			*buf++ = pos;
     338:	b98f      	cbnz	r7, 35e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xde>
		for (i = 0; i < s_idx; i++) {
     33a:	4283      	cmp	r3, r0
     33c:	d301      	bcc.n	342 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc2>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     33e:	4572      	cmp	r2, lr
     340:	d808      	bhi.n	354 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd4>
     342:	ebbe 0402 	subs.w	r4, lr, r2
     346:	eb60 0303 	sbc.w	r3, r0, r3
     34a:	2001      	movs	r0, #1
		if (rws_pos_en) {
     34c:	469c      	mov	ip, r3
     34e:	b91e      	cbnz	r6, 358 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd8>
			*buf++ = str_ptr_arg[i];
     350:	2100      	movs	r1, #0
     352:	e769      	b.n	228 <CONFIG_SRAM_SIZE+0x28>
     354:	4638      	mov	r0, r7
     356:	e7fa      	b.n	34e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xce>
			size = 0;
     358:	e9c6 4c00 	strd	r4, ip, [r6]
		if (BUF_OFFSET + 1 + size > len) {
     35c:	e7f8      	b.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     35e:	f1c7 0c20 	rsb	ip, r7, #32
     362:	40bb      	lsls	r3, r7
     364:	fa0e f507 	lsl.w	r5, lr, r7
		*buf++ = str_ptr_pos[i];
     368:	fa22 f40c 	lsr.w	r4, r2, ip
     36c:	fa2e f10c 	lsr.w	r1, lr, ip
		memcpy(buf, s, size);
     370:	40ba      	lsls	r2, r7
     372:	431c      	orrs	r4, r3
     374:	fa20 f30c 	lsr.w	r3, r0, ip
		buf += size;
     378:	40b8      	lsls	r0, r7
     37a:	ea4f 4914 	mov.w	r9, r4, lsr #16
	for (i = 0; i < s_idx; i++) {
     37e:	4301      	orrs	r1, r0
     380:	fa1f fe84 	uxth.w	lr, r4
     384:	fbb3 f8f9 	udiv	r8, r3, r9
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     388:	fb09 3018 	mls	r0, r9, r8, r3
     38c:	0c0b      	lsrs	r3, r1, #16
     38e:	fb08 fa0e 	mul.w	sl, r8, lr
			size = strlen(s) + 1;
     392:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     396:	459a      	cmp	sl, r3
			size = strlen(s) + 1;
     398:	d940      	bls.n	41c <CONFIG_FLASH_SIZE+0x1c>
     39a:	18e3      	adds	r3, r4, r3
     39c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
		return -EFAULT;
     3a0:	d204      	bcs.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     3a2:	459a      	cmp	sl, r3
     3a4:	d902      	bls.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     3a6:	f1a8 0002 	sub.w	r0, r8, #2
     3aa:	4423      	add	r3, r4
     3ac:	eba3 030a 	sub.w	r3, r3, sl
     3b0:	b289      	uxth	r1, r1
     3b2:	fbb3 f8f9 	udiv	r8, r3, r9
     3b6:	fb09 3318 	mls	r3, r9, r8, r3
     3ba:	fb08 fe0e 	mul.w	lr, r8, lr
     3be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     3c2:	458e      	cmp	lr, r1
     3c4:	d92c      	bls.n	420 <CONFIG_FLASH_SIZE+0x20>
     3c6:	1861      	adds	r1, r4, r1
     3c8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     3cc:	d204      	bcs.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>
     3ce:	458e      	cmp	lr, r1
     3d0:	d902      	bls.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>
     3d2:	f1a8 0302 	sub.w	r3, r8, #2
     3d6:	4421      	add	r1, r4
     3d8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     3dc:	eba1 010e 	sub.w	r1, r1, lr
     3e0:	fba0 9802 	umull	r9, r8, r0, r2
     3e4:	4541      	cmp	r1, r8
     3e6:	46ce      	mov	lr, r9
     3e8:	4643      	mov	r3, r8
     3ea:	d302      	bcc.n	3f2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x172>
     3ec:	d106      	bne.n	3fc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x17c>
     3ee:	454d      	cmp	r5, r9
     3f0:	d204      	bcs.n	3fc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x17c>
     3f2:	3801      	subs	r0, #1
     3f4:	ebb9 0e02 	subs.w	lr, r9, r2
     3f8:	eb68 0304 	sbc.w	r3, r8, r4
     3fc:	2e00      	cmp	r6, #0
     3fe:	d0a7      	beq.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     400:	ebb5 020e 	subs.w	r2, r5, lr
     404:	eb61 0103 	sbc.w	r1, r1, r3
     408:	fa01 fc0c 	lsl.w	ip, r1, ip
     40c:	fa22 f307 	lsr.w	r3, r2, r7
     410:	40f9      	lsrs	r1, r7
     412:	ea4c 0303 	orr.w	r3, ip, r3
     416:	e9c6 3100 	strd	r3, r1, [r6]
     41a:	e799      	b.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     41c:	4640      	mov	r0, r8
     41e:	e7c5      	b.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     420:	4643      	mov	r3, r8
     422:	e7d9      	b.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>

00000424 <serial_cb>:
/*
 * Read characters from UART until line end is detected. Afterwards push the
 * data to the message queue.
 */
void serial_cb(const struct device *dev, void *user_data)
{
     424:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
__syscall int uart_irq_update(const struct device *dev);

static inline int z_impl_uart_irq_update(const struct device *dev)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
     428:	4d1c      	ldr	r5, [pc, #112]	; (49c <serial_cb+0x78>)
     42a:	68ac      	ldr	r4, [r5, #8]
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
     42c:	6c63      	ldr	r3, [r4, #68]	; 0x44
     42e:	bb13      	cbnz	r3, 476 <serial_cb+0x52>
	if (api->irq_rx_ready == NULL) {
     430:	6b63      	ldr	r3, [r4, #52]	; 0x34
     432:	bb3b      	cbnz	r3, 484 <serial_cb+0x60>
	return api->fifo_read(dev, rx_data, size);
     434:	f8df 8064 	ldr.w	r8, [pc, #100]	; 49c <serial_cb+0x78>
     438:	4c19      	ldr	r4, [pc, #100]	; (4a0 <serial_cb+0x7c>)
			k_msgq_put(&uart_msgq, &rx_buf, K_NO_WAIT);

			/* reset the buffer (it was copied to the msgq) */
			rx_buf_pos = 0;
		} else if (rx_buf_pos < (sizeof(rx_buf) - 1)) {
			rx_buf[rx_buf_pos++] = c;
     43a:	4e1a      	ldr	r6, [pc, #104]	; (4a4 <serial_cb+0x80>)
	if (api->fifo_read == NULL) {
     43c:	68ab      	ldr	r3, [r5, #8]
     43e:	699b      	ldr	r3, [r3, #24]
     440:	b1eb      	cbz	r3, 47e <serial_cb+0x5a>
	return api->fifo_read(dev, rx_data, size);
     442:	2201      	movs	r2, #1
     444:	4640      	mov	r0, r8
     446:	f10d 0107 	add.w	r1, sp, #7
     44a:	4798      	blx	r3
	while (uart_fifo_read(uart_dev, &c, 1) == 1) {
     44c:	2801      	cmp	r0, #1
     44e:	d116      	bne.n	47e <serial_cb+0x5a>
		if ((c == '\n' || c == '\r') && rx_buf_pos > 0) {
     450:	f89d 2007 	ldrb.w	r2, [sp, #7]
     454:	2a0a      	cmp	r2, #10
     456:	d001      	beq.n	45c <serial_cb+0x38>
     458:	2a0d      	cmp	r2, #13
     45a:	d118      	bne.n	48e <serial_cb+0x6a>
     45c:	6823      	ldr	r3, [r4, #0]
     45e:	2b00      	cmp	r3, #0
     460:	dd15      	ble.n	48e <serial_cb+0x6a>
			rx_buf[rx_buf_pos] = '\0';
     462:	2700      	movs	r7, #0
     464:	54f7      	strb	r7, [r6, r3]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_MSGQ_PUT);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_put(msgq, data, timeout);
     466:	2200      	movs	r2, #0
     468:	2300      	movs	r3, #0
     46a:	490e      	ldr	r1, [pc, #56]	; (4a4 <serial_cb+0x80>)
     46c:	480e      	ldr	r0, [pc, #56]	; (4a8 <serial_cb+0x84>)
     46e:	f002 fe15 	bl	309c <z_impl_k_msgq_put>
			rx_buf_pos = 0;
     472:	6027      	str	r7, [r4, #0]
		if ((c == '\n' || c == '\r') && rx_buf_pos > 0) {
     474:	e7e2      	b.n	43c <serial_cb+0x18>
		return -ENOSYS;
	}
	return api->irq_update(dev);
     476:	4628      	mov	r0, r5
     478:	4798      	blx	r3
	if (!uart_irq_update(uart_dev)) {
     47a:	2800      	cmp	r0, #0
     47c:	d1d8      	bne.n	430 <serial_cb+0xc>
		}
		/* else: characters beyond buffer size are dropped */
	}
}
     47e:	b002      	add	sp, #8
     480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return api->irq_rx_ready(dev);
     484:	4805      	ldr	r0, [pc, #20]	; (49c <serial_cb+0x78>)
     486:	4798      	blx	r3
	if (!uart_irq_rx_ready(uart_dev)) {
     488:	2800      	cmp	r0, #0
     48a:	d1d3      	bne.n	434 <serial_cb+0x10>
     48c:	e7f7      	b.n	47e <serial_cb+0x5a>
		} else if (rx_buf_pos < (sizeof(rx_buf) - 1)) {
     48e:	6823      	ldr	r3, [r4, #0]
     490:	2b1e      	cmp	r3, #30
			rx_buf[rx_buf_pos++] = c;
     492:	bf9e      	ittt	ls
     494:	1c59      	addls	r1, r3, #1
     496:	6021      	strls	r1, [r4, #0]
     498:	54f2      	strbls	r2, [r6, r3]
     49a:	e7cf      	b.n	43c <serial_cb+0x18>
     49c:	000050ac 	.word	0x000050ac
     4a0:	20000290 	.word	0x20000290
     4a4:	20000b68 	.word	0x20000b68
     4a8:	20000124 	.word	0x20000124

000004ac <print_uart>:

/*
 * Print a null-terminated string character by character to the UART interface
 */
void print_uart(char *buf)
{
     4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     4ae:	4606      	mov	r6, r0
	int msg_len = strlen(buf);
     4b0:	f004 f85b 	bl	456a <strlen>

	for (int i = 0; i < msg_len; i++) {
     4b4:	2400      	movs	r4, #0
	int msg_len = strlen(buf);
     4b6:	4605      	mov	r5, r0
	api->poll_out(dev, out_char);
     4b8:	4f05      	ldr	r7, [pc, #20]	; (4d0 <print_uart+0x24>)
	for (int i = 0; i < msg_len; i++) {
     4ba:	42ac      	cmp	r4, r5
     4bc:	db00      	blt.n	4c0 <print_uart+0x14>
		uart_poll_out(uart_dev, buf[i]);
	}
}
     4be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, buf[i]);
     4c0:	5d31      	ldrb	r1, [r6, r4]
     4c2:	68bb      	ldr	r3, [r7, #8]
     4c4:	4802      	ldr	r0, [pc, #8]	; (4d0 <print_uart+0x24>)
     4c6:	685b      	ldr	r3, [r3, #4]
     4c8:	4798      	blx	r3
	for (int i = 0; i < msg_len; i++) {
     4ca:	3401      	adds	r4, #1
     4cc:	e7f5      	b.n	4ba <print_uart+0xe>
     4ce:	bf00      	nop
     4d0:	000050ac 	.word	0x000050ac

000004d4 <main>:

int main(void)
{
     4d4:	b570      	push	{r4, r5, r6, lr}
     4d6:	b088      	sub	sp, #32
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     4d8:	4c1f      	ldr	r4, [pc, #124]	; (558 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x70>)
     4da:	4620      	mov	r0, r4
     4dc:	f004 fc42 	bl	4d64 <z_device_is_ready>
	char tx_buf[MSG_SIZE];

	if (!device_is_ready(uart_dev)) {
     4e0:	b928      	cbnz	r0, 4ee <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6>
		printk("UART device not found!");
     4e2:	481e      	ldr	r0, [pc, #120]	; (55c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x74>)

	if (ret < 0) {
		if (ret == -ENOTSUP) {
			printk("Interrupt-driven UART API support not enabled\n");
		} else if (ret == -ENOSYS) {
			printk("UART device does not support interrupt-driven API\n");
     4e4:	f003 fdca 	bl	407c <printk>
		printk("Echo: ");
		printk(tx_buf);
		printk("\r\n");
	}
	return 0;
}
     4e8:	2000      	movs	r0, #0
     4ea:	b008      	add	sp, #32
     4ec:	bd70      	pop	{r4, r5, r6, pc}
static inline int uart_irq_callback_user_data_set(const struct device *dev,
						  uart_irq_callback_user_data_t cb,
						  void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
     4ee:	68a5      	ldr	r5, [r4, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
     4f0:	b36d      	cbz	r5, 54e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x66>
     4f2:	6cab      	ldr	r3, [r5, #72]	; 0x48
     4f4:	b35b      	cbz	r3, 54e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x66>
		api->irq_callback_set(dev, cb, user_data);
     4f6:	2200      	movs	r2, #0
     4f8:	4620      	mov	r0, r4
     4fa:	4919      	ldr	r1, [pc, #100]	; (560 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x78>)
     4fc:	4798      	blx	r3
	if (api->irq_rx_enable != NULL) {
     4fe:	6aab      	ldr	r3, [r5, #40]	; 0x28
     500:	bb3b      	cbnz	r3, 552 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6a>
	print_uart("Hello! I'm your echo bot.\r\n");
     502:	4818      	ldr	r0, [pc, #96]	; (564 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x7c>)
     504:	f7ff ffd2 	bl	4ac <print_uart>
	print_uart("Tell me something and press enter:\r\n");
     508:	4817      	ldr	r0, [pc, #92]	; (568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>)
     50a:	f7ff ffcf 	bl	4ac <print_uart>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
     50e:	4e17      	ldr	r6, [pc, #92]	; (56c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x84>)
		print_uart("Echo: ");
     510:	4c17      	ldr	r4, [pc, #92]	; (570 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x88>)
		print_uart("\r\n");
     512:	4d18      	ldr	r5, [pc, #96]	; (574 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8c>)
     514:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     518:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     51c:	4669      	mov	r1, sp
     51e:	4630      	mov	r0, r6
     520:	f002 fe0c 	bl	313c <z_impl_k_msgq_get>
	while (k_msgq_get(&uart_msgq, &tx_buf, K_FOREVER) == 0) {
     524:	2800      	cmp	r0, #0
     526:	d1df      	bne.n	4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>
		print_uart("Echo: ");
     528:	4620      	mov	r0, r4
     52a:	f7ff ffbf 	bl	4ac <print_uart>
		print_uart(tx_buf);
     52e:	4668      	mov	r0, sp
     530:	f7ff ffbc 	bl	4ac <print_uart>
		print_uart("\r\n");
     534:	4628      	mov	r0, r5
     536:	f7ff ffb9 	bl	4ac <print_uart>
		printk("Echo: ");
     53a:	4620      	mov	r0, r4
     53c:	f003 fd9e 	bl	407c <printk>
		printk(tx_buf);
     540:	4668      	mov	r0, sp
     542:	f003 fd9b 	bl	407c <printk>
		printk("\r\n");
     546:	4628      	mov	r0, r5
     548:	f003 fd98 	bl	407c <printk>
     54c:	e7e2      	b.n	514 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c>
			printk("UART device does not support interrupt-driven API\n");
     54e:	480a      	ldr	r0, [pc, #40]	; (578 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x90>)
     550:	e7c8      	b.n	4e4 <main+0x10>
		api->irq_rx_enable(dev);
     552:	4620      	mov	r0, r4
     554:	4798      	blx	r3
     556:	e7d4      	b.n	502 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a>
     558:	000050ac 	.word	0x000050ac
     55c:	00005520 	.word	0x00005520
     560:	00000425 	.word	0x00000425
     564:	0000556a 	.word	0x0000556a
     568:	00005586 	.word	0x00005586
     56c:	20000124 	.word	0x20000124
     570:	000055ab 	.word	0x000055ab
     574:	00005583 	.word	0x00005583
     578:	00005537 	.word	0x00005537

0000057c <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
     57c:	4b01      	ldr	r3, [pc, #4]	; (584 <char_out+0x8>)
     57e:	681b      	ldr	r3, [r3, #0]
     580:	4718      	bx	r3
     582:	bf00      	nop
     584:	20000000 	.word	0x20000000

00000588 <__printk_hook_install>:
	_char_out = fn;
     588:	4b01      	ldr	r3, [pc, #4]	; (590 <__printk_hook_install+0x8>)
     58a:	6018      	str	r0, [r3, #0]
}
     58c:	4770      	bx	lr
     58e:	bf00      	nop
     590:	20000000 	.word	0x20000000

00000594 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
     594:	b507      	push	{r0, r1, r2, lr}
     596:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     598:	2100      	movs	r1, #0
     59a:	4602      	mov	r2, r0
     59c:	9100      	str	r1, [sp, #0]
     59e:	4803      	ldr	r0, [pc, #12]	; (5ac <vprintk+0x18>)
     5a0:	f000 f914 	bl	7cc <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     5a4:	b003      	add	sp, #12
     5a6:	f85d fb04 	ldr.w	pc, [sp], #4
     5aa:	bf00      	nop
     5ac:	0000057d 	.word	0x0000057d

000005b0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     5b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     5b4:	8b05      	ldrh	r5, [r0, #24]
{
     5b6:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     5b8:	0728      	lsls	r0, r5, #28
{
     5ba:	4690      	mov	r8, r2
	if (processing) {
     5bc:	d411      	bmi.n	5e2 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
     5be:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     5c0:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     5c4:	f040 80cd 	bne.w	762 <process_event+0x1b2>
			evt = process_recheck(mgr);
     5c8:	4620      	mov	r0, r4
     5ca:	f003 fe48 	bl	425e <process_recheck>
		}

		if (evt == EVT_NOP) {
     5ce:	b178      	cbz	r0, 5f0 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
     5d0:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5d2:	8b21      	ldrh	r1, [r4, #24]
     5d4:	2804      	cmp	r0, #4
     5d6:	d811      	bhi.n	5fc <process_event+0x4c>
     5d8:	e8df f000 	tbb	[pc, r0]
     5dc:	856d10c3 	.word	0x856d10c3
     5e0:	95          	.byte	0x95
     5e1:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
     5e2:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     5e4:	bf0c      	ite	eq
     5e6:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
     5ea:	f045 0520 	orrne.w	r5, r5, #32
     5ee:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     5f0:	f388 8811 	msr	BASEPRI, r8
     5f4:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     5f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     5fc:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     600:	45aa      	cmp	sl, r5
     602:	f000 80a6 	beq.w	752 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
     606:	2700      	movs	r7, #0
     608:	46b9      	mov	r9, r7
     60a:	463e      	mov	r6, r7
     60c:	68a3      	ldr	r3, [r4, #8]
     60e:	2b00      	cmp	r3, #0
     610:	f000 80bd 	beq.w	78e <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     614:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     618:	8321      	strh	r1, [r4, #24]
     61a:	f388 8811 	msr	BASEPRI, r8
     61e:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     622:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     624:	2900      	cmp	r1, #0
     626:	f000 80bb 	beq.w	7a0 <process_event+0x1f0>
	return node->next;
     62a:	680d      	ldr	r5, [r1, #0]
     62c:	2900      	cmp	r1, #0
     62e:	f000 80b7 	beq.w	7a0 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
     632:	4633      	mov	r3, r6
     634:	4652      	mov	r2, sl
     636:	4620      	mov	r0, r4
     638:	f8d1 8004 	ldr.w	r8, [r1, #4]
     63c:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     63e:	2d00      	cmp	r5, #0
     640:	d076      	beq.n	730 <process_event+0x180>
     642:	682b      	ldr	r3, [r5, #0]
     644:	4629      	mov	r1, r5
     646:	461d      	mov	r5, r3
     648:	e7f0      	b.n	62c <process_event+0x7c>
     64a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     64e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     650:	2a01      	cmp	r2, #1
     652:	d81b      	bhi.n	68c <process_event+0xdc>
	list->head = NULL;
     654:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     656:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     65a:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     65c:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     65e:	b289      	uxth	r1, r1
	list->tail = NULL;
     660:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     664:	d109      	bne.n	67a <process_event+0xca>
     666:	463b      	mov	r3, r7
     668:	e003      	b.n	672 <process_event+0xc2>
				mgr->refs += 1U;
     66a:	8b62      	ldrh	r2, [r4, #26]
     66c:	3201      	adds	r2, #1
     66e:	8362      	strh	r2, [r4, #26]
	return node->next;
     670:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     672:	2b00      	cmp	r3, #0
     674:	d1f9      	bne.n	66a <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     676:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
     67a:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
     67c:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     67e:	f003 fdee 	bl	425e <process_recheck>
     682:	2800      	cmp	r0, #0
     684:	d07b      	beq.n	77e <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     686:	f041 0120 	orr.w	r1, r1, #32
     68a:	e077      	b.n	77c <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
     68c:	2b04      	cmp	r3, #4
     68e:	d10a      	bne.n	6a6 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     690:	f021 0107 	bic.w	r1, r1, #7
     694:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
     696:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
     698:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     69a:	f003 fde0 	bl	425e <process_recheck>
     69e:	b110      	cbz	r0, 6a6 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     6a0:	f041 0120 	orr.w	r1, r1, #32
     6a4:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     6a6:	8b21      	ldrh	r1, [r4, #24]
     6a8:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     6ac:	45aa      	cmp	sl, r5
     6ae:	d050      	beq.n	752 <process_event+0x1a2>
     6b0:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
     6b2:	46b9      	mov	r9, r7
     6b4:	e7aa      	b.n	60c <process_event+0x5c>
			transit = mgr->transitions->start;
     6b6:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6b8:	f021 0107 	bic.w	r1, r1, #7
     6bc:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
     6c0:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
     6c2:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
     6c6:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     6c8:	d12d      	bne.n	726 <process_event+0x176>
		    || (transit != NULL)) {
     6ca:	f1b9 0f00 	cmp.w	r9, #0
     6ce:	d040      	beq.n	752 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     6d0:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     6d4:	8321      	strh	r1, [r4, #24]
     6d6:	f388 8811 	msr	BASEPRI, r8
     6da:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
     6de:	4620      	mov	r0, r4
     6e0:	4939      	ldr	r1, [pc, #228]	; (7c8 <process_event+0x218>)
     6e2:	47c8      	blx	r9
     6e4:	e029      	b.n	73a <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6e6:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
     6ea:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6ec:	f041 0104 	orr.w	r1, r1, #4
     6f0:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     6f2:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
     6f4:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
     6f8:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     6fa:	d0e6      	beq.n	6ca <process_event+0x11a>
     6fc:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     6fe:	f04f 0a04 	mov.w	sl, #4
		res = 0;
     702:	463e      	mov	r6, r7
     704:	e782      	b.n	60c <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     706:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
     70a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     70c:	f041 0105 	orr.w	r1, r1, #5
     710:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     712:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
     714:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
     718:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     71a:	d0d6      	beq.n	6ca <process_event+0x11a>
     71c:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     71e:	f04f 0a05 	mov.w	sl, #5
		res = 0;
     722:	463e      	mov	r6, r7
     724:	e772      	b.n	60c <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
     726:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     728:	f04f 0a06 	mov.w	sl, #6
		res = 0;
     72c:	463e      	mov	r6, r7
     72e:	e76d      	b.n	60c <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     730:	462b      	mov	r3, r5
     732:	e787      	b.n	644 <process_event+0x94>
			if (transit != NULL) {
     734:	f1b9 0f00 	cmp.w	r9, #0
     738:	d1d1      	bne.n	6de <process_event+0x12e>
	__asm__ volatile(
     73a:	f04f 0320 	mov.w	r3, #32
     73e:	f3ef 8811 	mrs	r8, BASEPRI
     742:	f383 8812 	msr	BASEPRI_MAX, r3
     746:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     74a:	8b23      	ldrh	r3, [r4, #24]
     74c:	f023 0308 	bic.w	r3, r3, #8
     750:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     752:	8b25      	ldrh	r5, [r4, #24]
     754:	06ea      	lsls	r2, r5, #27
     756:	d52e      	bpl.n	7b6 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     758:	f025 0310 	bic.w	r3, r5, #16
     75c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     75e:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
     762:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     764:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     766:	2e00      	cmp	r6, #0
     768:	f6bf af6f 	bge.w	64a <process_event+0x9a>
	list->head = NULL;
     76c:	2300      	movs	r3, #0
		*clients = mgr->clients;
     76e:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
     770:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     774:	f021 0107 	bic.w	r1, r1, #7
     778:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
     77c:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     77e:	8b21      	ldrh	r1, [r4, #24]
     780:	f04f 0900 	mov.w	r9, #0
     784:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     788:	45aa      	cmp	sl, r5
     78a:	f47f af3f 	bne.w	60c <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
     78e:	2f00      	cmp	r7, #0
     790:	d09b      	beq.n	6ca <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     792:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     796:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
     798:	f388 8811 	msr	BASEPRI, r8
     79c:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
     7a0:	2f00      	cmp	r7, #0
     7a2:	d0c7      	beq.n	734 <process_event+0x184>
	return node->next;
     7a4:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
     7a6:	4639      	mov	r1, r7
     7a8:	4633      	mov	r3, r6
     7aa:	4652      	mov	r2, sl
     7ac:	4620      	mov	r0, r4
     7ae:	f003 fd82 	bl	42b6 <notify_one>
	list->head = node;
     7b2:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
     7b4:	e7f4      	b.n	7a0 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     7b6:	06ab      	lsls	r3, r5, #26
     7b8:	f57f af1a 	bpl.w	5f0 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     7bc:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     7c0:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     7c2:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     7c6:	e6ff      	b.n	5c8 <process_event+0x18>
     7c8:	000042e3 	.word	0x000042e3

000007cc <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7d0:	4681      	mov	r9, r0
     7d2:	468b      	mov	fp, r1
     7d4:	4617      	mov	r7, r2
     7d6:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     7d8:	2500      	movs	r5, #0
{
     7da:	b095      	sub	sp, #84	; 0x54
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     7dc:	7838      	ldrb	r0, [r7, #0]
     7de:	b908      	cbnz	r0, 7e4 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
     7e0:	4628      	mov	r0, r5
     7e2:	e357      	b.n	e94 <CONFIG_ISR_STACK_SIZE+0x694>
			OUTC(*fp++);
     7e4:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
     7e6:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     7e8:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
     7ea:	d006      	beq.n	7fa <z_cbvprintf_impl+0x2e>
			OUTC('%');
     7ec:	4659      	mov	r1, fp
     7ee:	47c8      	blx	r9
     7f0:	2800      	cmp	r0, #0
     7f2:	f2c0 834f 	blt.w	e94 <CONFIG_ISR_STACK_SIZE+0x694>
     7f6:	3501      	adds	r5, #1
		if (bps == NULL) {
     7f8:	e1fb      	b.n	bf2 <CONFIG_ISR_STACK_SIZE+0x3f2>
		} state = {
     7fa:	2218      	movs	r2, #24
     7fc:	2100      	movs	r1, #0
     7fe:	a80e      	add	r0, sp, #56	; 0x38
     800:	f003 fece 	bl	45a0 <memset>
	if (*sp == '%') {
     804:	787b      	ldrb	r3, [r7, #1]
     806:	2b25      	cmp	r3, #37	; 0x25
     808:	d07d      	beq.n	906 <CONFIG_ISR_STACK_SIZE+0x106>
     80a:	2300      	movs	r3, #0
     80c:	4698      	mov	r8, r3
     80e:	469e      	mov	lr, r3
     810:	469c      	mov	ip, r3
     812:	461e      	mov	r6, r3
     814:	1c78      	adds	r0, r7, #1
     816:	4601      	mov	r1, r0
		switch (*sp) {
     818:	f810 2b01 	ldrb.w	r2, [r0], #1
     81c:	2a2b      	cmp	r2, #43	; 0x2b
     81e:	f000 80a1 	beq.w	964 <CONFIG_ISR_STACK_SIZE+0x164>
     822:	f200 8098 	bhi.w	956 <CONFIG_ISR_STACK_SIZE+0x156>
     826:	2a20      	cmp	r2, #32
     828:	f000 809f 	beq.w	96a <CONFIG_ISR_STACK_SIZE+0x16a>
     82c:	2a23      	cmp	r2, #35	; 0x23
     82e:	f000 809f 	beq.w	970 <CONFIG_ISR_STACK_SIZE+0x170>
     832:	b12b      	cbz	r3, 840 <CONFIG_ISR_STACK_SIZE+0x40>
     834:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     83c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     840:	f1b8 0f00 	cmp.w	r8, #0
     844:	d005      	beq.n	852 <CONFIG_ISR_STACK_SIZE+0x52>
     846:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     84a:	f043 0320 	orr.w	r3, r3, #32
     84e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     852:	f1be 0f00 	cmp.w	lr, #0
     856:	d005      	beq.n	864 <CONFIG_ISR_STACK_SIZE+0x64>
     858:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     85c:	f043 0310 	orr.w	r3, r3, #16
     860:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     864:	f1bc 0f00 	cmp.w	ip, #0
     868:	d005      	beq.n	876 <CONFIG_ISR_STACK_SIZE+0x76>
     86a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     86e:	f043 0308 	orr.w	r3, r3, #8
     872:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     876:	b12e      	cbz	r6, 884 <CONFIG_ISR_STACK_SIZE+0x84>
     878:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     87c:	f043 0304 	orr.w	r3, r3, #4
     880:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
     884:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     888:	f003 0044 	and.w	r0, r3, #68	; 0x44
     88c:	2844      	cmp	r0, #68	; 0x44
     88e:	d103      	bne.n	898 <CONFIG_ISR_STACK_SIZE+0x98>
		conv->flag_zero = false;
     890:	f36f 1386 	bfc	r3, #6, #1
     894:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
     898:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
     89c:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
     89e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     8a2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
     8a6:	d17f      	bne.n	9a8 <CONFIG_ISR_STACK_SIZE+0x1a8>
		conv->width_star = true;
     8a8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
     8ac:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     8ae:	f042 0201 	orr.w	r2, r2, #1
     8b2:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
     8b6:	781a      	ldrb	r2, [r3, #0]
     8b8:	2a2e      	cmp	r2, #46	; 0x2e
     8ba:	bf0c      	ite	eq
     8bc:	2101      	moveq	r1, #1
     8be:	2100      	movne	r1, #0
     8c0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     8c4:	f361 0241 	bfi	r2, r1, #1, #1
     8c8:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
     8cc:	d178      	bne.n	9c0 <CONFIG_ISR_STACK_SIZE+0x1c0>
	if (*sp == '*') {
     8ce:	785a      	ldrb	r2, [r3, #1]
     8d0:	2a2a      	cmp	r2, #42	; 0x2a
     8d2:	d06e      	beq.n	9b2 <CONFIG_ISR_STACK_SIZE+0x1b2>
	size_t val = 0;
     8d4:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     8d6:	f04f 0c0a 	mov.w	ip, #10
	++sp;
     8da:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     8dc:	4619      	mov	r1, r3
     8de:	f811 0b01 	ldrb.w	r0, [r1], #1
     8e2:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
     8e6:	2e09      	cmp	r6, #9
     8e8:	f240 8095 	bls.w	a16 <CONFIG_ISR_STACK_SIZE+0x216>
	conv->unsupported |= ((conv->prec_value < 0)
     8ec:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
     8f0:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
     8f2:	f3c1 0040 	ubfx	r0, r1, #1, #1
     8f6:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
     8fa:	460a      	mov	r2, r1
     8fc:	f360 0241 	bfi	r2, r0, #1, #1
     900:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
     904:	e05c      	b.n	9c0 <CONFIG_ISR_STACK_SIZE+0x1c0>
		conv->specifier = *sp++;
     906:	1cba      	adds	r2, r7, #2
     908:	9203      	str	r2, [sp, #12]
     90a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
     90e:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
     912:	07da      	lsls	r2, r3, #31
     914:	f140 812e 	bpl.w	b74 <CONFIG_ISR_STACK_SIZE+0x374>
			width = va_arg(ap, int);
     918:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
     91c:	f1b8 0f00 	cmp.w	r8, #0
     920:	da07      	bge.n	932 <CONFIG_ISR_STACK_SIZE+0x132>
				conv->flag_dash = true;
     922:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				width = -width;
     926:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
     92a:	f042 0204 	orr.w	r2, r2, #4
     92e:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
		if (conv->prec_star) {
     932:	075e      	lsls	r6, r3, #29
     934:	f140 8127 	bpl.w	b86 <CONFIG_ISR_STACK_SIZE+0x386>
			int arg = va_arg(ap, int);
     938:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
     93c:	f1ba 0f00 	cmp.w	sl, #0
     940:	f280 8126 	bge.w	b90 <CONFIG_ISR_STACK_SIZE+0x390>
				conv->prec_present = false;
     944:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
     948:	f36f 0341 	bfc	r3, #1, #1
     94c:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
     950:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
     954:	e11c      	b.n	b90 <CONFIG_ISR_STACK_SIZE+0x390>
		switch (*sp) {
     956:	2a2d      	cmp	r2, #45	; 0x2d
     958:	d00d      	beq.n	976 <CONFIG_ISR_STACK_SIZE+0x176>
     95a:	2a30      	cmp	r2, #48	; 0x30
     95c:	f47f af69 	bne.w	832 <CONFIG_ISR_STACK_SIZE+0x32>
     960:	2301      	movs	r3, #1
	} while (loop);
     962:	e758      	b.n	816 <CONFIG_ISR_STACK_SIZE+0x16>
		switch (*sp) {
     964:	f04f 0c01 	mov.w	ip, #1
     968:	e755      	b.n	816 <CONFIG_ISR_STACK_SIZE+0x16>
     96a:	f04f 0e01 	mov.w	lr, #1
     96e:	e752      	b.n	816 <CONFIG_ISR_STACK_SIZE+0x16>
     970:	f04f 0801 	mov.w	r8, #1
     974:	e74f      	b.n	816 <CONFIG_ISR_STACK_SIZE+0x16>
     976:	2601      	movs	r6, #1
     978:	e74d      	b.n	816 <CONFIG_ISR_STACK_SIZE+0x16>
		val = 10U * val + *sp++ - '0';
     97a:	4603      	mov	r3, r0
     97c:	fb0e 6202 	mla	r2, lr, r2, r6
     980:	3a30      	subs	r2, #48	; 0x30
     982:	4618      	mov	r0, r3
     984:	f810 6b01 	ldrb.w	r6, [r0], #1
     988:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
     98c:	f1bc 0f09 	cmp.w	ip, #9
     990:	d9f3      	bls.n	97a <CONFIG_ISR_STACK_SIZE+0x17a>
	if (sp != wp) {
     992:	4299      	cmp	r1, r3
     994:	d08f      	beq.n	8b6 <CONFIG_ISR_STACK_SIZE+0xb6>
		conv->unsupported |= ((conv->width_value < 0)
     996:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
     99a:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
     99c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     99e:	f362 0141 	bfi	r1, r2, #1, #1
     9a2:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
     9a6:	e786      	b.n	8b6 <CONFIG_ISR_STACK_SIZE+0xb6>
     9a8:	460b      	mov	r3, r1
	size_t val = 0;
     9aa:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     9ac:	f04f 0e0a 	mov.w	lr, #10
     9b0:	e7e7      	b.n	982 <CONFIG_ISR_STACK_SIZE+0x182>
		conv->prec_star = true;
     9b2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
     9b6:	3302      	adds	r3, #2
		conv->prec_star = true;
     9b8:	f042 0204 	orr.w	r2, r2, #4
     9bc:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	switch (*sp) {
     9c0:	781a      	ldrb	r2, [r3, #0]
     9c2:	2a6c      	cmp	r2, #108	; 0x6c
     9c4:	d047      	beq.n	a56 <CONFIG_ISR_STACK_SIZE+0x256>
     9c6:	d82b      	bhi.n	a20 <CONFIG_ISR_STACK_SIZE+0x220>
     9c8:	2a68      	cmp	r2, #104	; 0x68
     9ca:	d031      	beq.n	a30 <CONFIG_ISR_STACK_SIZE+0x230>
     9cc:	2a6a      	cmp	r2, #106	; 0x6a
     9ce:	d04b      	beq.n	a68 <CONFIG_ISR_STACK_SIZE+0x268>
     9d0:	2a4c      	cmp	r2, #76	; 0x4c
     9d2:	d051      	beq.n	a78 <CONFIG_ISR_STACK_SIZE+0x278>
	conv->specifier = *sp++;
     9d4:	461a      	mov	r2, r3
     9d6:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
     9da:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
     9dc:	9203      	str	r2, [sp, #12]
     9de:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->length_mod == LENGTH_UPPER_L) {
     9e2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	switch (conv->specifier) {
     9e6:	f200 80be 	bhi.w	b66 <CONFIG_ISR_STACK_SIZE+0x366>
     9ea:	2b6d      	cmp	r3, #109	; 0x6d
     9ec:	d851      	bhi.n	a92 <CONFIG_ISR_STACK_SIZE+0x292>
     9ee:	2b69      	cmp	r3, #105	; 0x69
     9f0:	f200 80b9 	bhi.w	b66 <CONFIG_ISR_STACK_SIZE+0x366>
     9f4:	2b57      	cmp	r3, #87	; 0x57
     9f6:	d867      	bhi.n	ac8 <CONFIG_ISR_STACK_SIZE+0x2c8>
     9f8:	2b41      	cmp	r3, #65	; 0x41
     9fa:	d003      	beq.n	a04 <CONFIG_ISR_STACK_SIZE+0x204>
     9fc:	3b45      	subs	r3, #69	; 0x45
     9fe:	2b02      	cmp	r3, #2
     a00:	f200 80b1 	bhi.w	b66 <CONFIG_ISR_STACK_SIZE+0x366>
		conv->specifier_cat = SPECIFIER_FP;
     a04:	2204      	movs	r2, #4
     a06:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     a0a:	f362 0302 	bfi	r3, r2, #0, #3
     a0e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
     a12:	2301      	movs	r3, #1
			break;
     a14:	e073      	b.n	afe <CONFIG_ISR_STACK_SIZE+0x2fe>
		val = 10U * val + *sp++ - '0';
     a16:	fb0c 0202 	mla	r2, ip, r2, r0
     a1a:	460b      	mov	r3, r1
     a1c:	3a30      	subs	r2, #48	; 0x30
     a1e:	e75d      	b.n	8dc <CONFIG_ISR_STACK_SIZE+0xdc>
	switch (*sp) {
     a20:	2a74      	cmp	r2, #116	; 0x74
     a22:	d025      	beq.n	a70 <CONFIG_ISR_STACK_SIZE+0x270>
     a24:	2a7a      	cmp	r2, #122	; 0x7a
     a26:	d1d5      	bne.n	9d4 <CONFIG_ISR_STACK_SIZE+0x1d4>
		conv->length_mod = LENGTH_Z;
     a28:	2106      	movs	r1, #6
     a2a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     a2e:	e00c      	b.n	a4a <CONFIG_ISR_STACK_SIZE+0x24a>
		if (*++sp == 'h') {
     a30:	785a      	ldrb	r2, [r3, #1]
     a32:	2a68      	cmp	r2, #104	; 0x68
     a34:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     a38:	d106      	bne.n	a48 <CONFIG_ISR_STACK_SIZE+0x248>
			conv->length_mod = LENGTH_HH;
     a3a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     a3c:	f361 02c6 	bfi	r2, r1, #3, #4
     a40:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
     a44:	3302      	adds	r3, #2
     a46:	e7c5      	b.n	9d4 <CONFIG_ISR_STACK_SIZE+0x1d4>
			conv->length_mod = LENGTH_H;
     a48:	2102      	movs	r1, #2
     a4a:	f361 02c6 	bfi	r2, r1, #3, #4
     a4e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
     a52:	3301      	adds	r3, #1
     a54:	e7be      	b.n	9d4 <CONFIG_ISR_STACK_SIZE+0x1d4>
		if (*++sp == 'l') {
     a56:	785a      	ldrb	r2, [r3, #1]
     a58:	2a6c      	cmp	r2, #108	; 0x6c
     a5a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     a5e:	d101      	bne.n	a64 <CONFIG_ISR_STACK_SIZE+0x264>
			conv->length_mod = LENGTH_LL;
     a60:	2104      	movs	r1, #4
     a62:	e7eb      	b.n	a3c <CONFIG_ISR_STACK_SIZE+0x23c>
			conv->length_mod = LENGTH_L;
     a64:	2103      	movs	r1, #3
     a66:	e7f0      	b.n	a4a <CONFIG_ISR_STACK_SIZE+0x24a>
		conv->length_mod = LENGTH_J;
     a68:	2105      	movs	r1, #5
     a6a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     a6e:	e7ec      	b.n	a4a <CONFIG_ISR_STACK_SIZE+0x24a>
		conv->length_mod = LENGTH_T;
     a70:	2107      	movs	r1, #7
     a72:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     a76:	e7e8      	b.n	a4a <CONFIG_ISR_STACK_SIZE+0x24a>
		conv->unsupported = true;
     a78:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
     a7c:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
     a80:	f022 0202 	bic.w	r2, r2, #2
     a84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
     a88:	f042 0202 	orr.w	r2, r2, #2
     a8c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
     a90:	e7df      	b.n	a52 <CONFIG_ISR_STACK_SIZE+0x252>
	switch (conv->specifier) {
     a92:	3b6e      	subs	r3, #110	; 0x6e
     a94:	b2d9      	uxtb	r1, r3
     a96:	2301      	movs	r3, #1
     a98:	408b      	lsls	r3, r1
     a9a:	f240 4182 	movw	r1, #1154	; 0x482
     a9e:	420b      	tst	r3, r1
     aa0:	d137      	bne.n	b12 <CONFIG_ISR_STACK_SIZE+0x312>
     aa2:	f013 0f24 	tst.w	r3, #36	; 0x24
     aa6:	d151      	bne.n	b4c <CONFIG_ISR_STACK_SIZE+0x34c>
     aa8:	07d8      	lsls	r0, r3, #31
     aaa:	d55c      	bpl.n	b66 <CONFIG_ISR_STACK_SIZE+0x366>
		conv->specifier_cat = SPECIFIER_PTR;
     aac:	2103      	movs	r1, #3
     aae:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     ab2:	f361 0302 	bfi	r3, r1, #0, #3
     ab6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
     aba:	f002 0378 	and.w	r3, r2, #120	; 0x78
     abe:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
     ac2:	424b      	negs	r3, r1
     ac4:	414b      	adcs	r3, r1
     ac6:	e01a      	b.n	afe <CONFIG_ISR_STACK_SIZE+0x2fe>
     ac8:	2001      	movs	r0, #1
	switch (conv->specifier) {
     aca:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
     ace:	b2c9      	uxtb	r1, r1
     ad0:	fa00 f101 	lsl.w	r1, r0, r1
     ad4:	f411 4f62 	tst.w	r1, #57856	; 0xe200
     ad8:	d194      	bne.n	a04 <CONFIG_ISR_STACK_SIZE+0x204>
     ada:	f640 0601 	movw	r6, #2049	; 0x801
     ade:	4231      	tst	r1, r6
     ae0:	d11d      	bne.n	b1e <CONFIG_ISR_STACK_SIZE+0x31e>
     ae2:	f411 3f04 	tst.w	r1, #135168	; 0x21000
     ae6:	d03e      	beq.n	b66 <CONFIG_ISR_STACK_SIZE+0x366>
		conv->specifier_cat = SPECIFIER_SINT;
     ae8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     aec:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     af0:	f002 0278 	and.w	r2, r2, #120	; 0x78
     af4:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
     af6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
     afa:	d034      	beq.n	b66 <CONFIG_ISR_STACK_SIZE+0x366>
	bool unsupported = false;
     afc:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
     afe:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
     b02:	f3c2 0140 	ubfx	r1, r2, #1, #1
     b06:	430b      	orrs	r3, r1
     b08:	f363 0241 	bfi	r2, r3, #1, #1
     b0c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
     b10:	e6fd      	b.n	90e <CONFIG_ISR_STACK_SIZE+0x10e>
		conv->specifier_cat = SPECIFIER_UINT;
     b12:	2102      	movs	r1, #2
     b14:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     b18:	f361 0302 	bfi	r3, r1, #0, #3
     b1c:	e7e8      	b.n	af0 <CONFIG_ISR_STACK_SIZE+0x2f0>
     b1e:	2002      	movs	r0, #2
     b20:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
     b24:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     b28:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     b2c:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     b2e:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
     b32:	bf02      	ittt	eq
     b34:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
     b38:	f041 0101 	orreq.w	r1, r1, #1
     b3c:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
     b40:	2b63      	cmp	r3, #99	; 0x63
     b42:	d1db      	bne.n	afc <CONFIG_ISR_STACK_SIZE+0x2fc>
			unsupported = (conv->length_mod != LENGTH_NONE);
     b44:	1e13      	subs	r3, r2, #0
     b46:	bf18      	it	ne
     b48:	2301      	movne	r3, #1
     b4a:	e7d8      	b.n	afe <CONFIG_ISR_STACK_SIZE+0x2fe>
		conv->specifier_cat = SPECIFIER_PTR;
     b4c:	2103      	movs	r1, #3
     b4e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
     b52:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     b56:	f361 0302 	bfi	r3, r1, #0, #3
     b5a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
     b5e:	bf14      	ite	ne
     b60:	2301      	movne	r3, #1
     b62:	2300      	moveq	r3, #0
     b64:	e7cb      	b.n	afe <CONFIG_ISR_STACK_SIZE+0x2fe>
		conv->invalid = true;
     b66:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     b6a:	f043 0301 	orr.w	r3, r3, #1
     b6e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
     b72:	e7c3      	b.n	afc <CONFIG_ISR_STACK_SIZE+0x2fc>
		} else if (conv->width_present) {
     b74:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
     b78:	2a00      	cmp	r2, #0
		int width = -1;
     b7a:	bfac      	ite	ge
     b7c:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
			width = conv->width_value;
     b80:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
     b84:	e6d5      	b.n	932 <CONFIG_ISR_STACK_SIZE+0x132>
		} else if (conv->prec_present) {
     b86:	0798      	lsls	r0, r3, #30
     b88:	f57f aee2 	bpl.w	950 <CONFIG_ISR_STACK_SIZE+0x150>
			precision = conv->prec_value;
     b8c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
		conv->pad0_value = 0;
     b90:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     b92:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
     b96:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
			= (enum length_mod_enum)conv->length_mod;
     b9a:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		enum specifier_cat_enum specifier_cat
     b9e:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     ba2:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     ba4:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     ba8:	d133      	bne.n	c12 <CONFIG_ISR_STACK_SIZE+0x412>
			switch (length_mod) {
     baa:	1ecb      	subs	r3, r1, #3
     bac:	2b04      	cmp	r3, #4
     bae:	d804      	bhi.n	bba <CONFIG_ISR_STACK_SIZE+0x3ba>
     bb0:	e8df f003 	tbb	[pc, r3]
     bb4:	21464621 	.word	0x21464621
     bb8:	21          	.byte	0x21
     bb9:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     bba:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
     bbc:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
     bbe:	ea4f 72e3 	mov.w	r2, r3, asr #31
     bc2:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
     bc6:	d11c      	bne.n	c02 <CONFIG_ISR_STACK_SIZE+0x402>
				value->sint = (signed char)value->sint;
     bc8:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
     bcc:	17da      	asrs	r2, r3, #31
     bce:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
     bd2:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
     bd4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     bd8:	f013 0603 	ands.w	r6, r3, #3
     bdc:	d050      	beq.n	c80 <CONFIG_ISR_STACK_SIZE+0x480>
			OUTS(sp, fp);
     bde:	463a      	mov	r2, r7
     be0:	4659      	mov	r1, fp
     be2:	4648      	mov	r0, r9
     be4:	9b03      	ldr	r3, [sp, #12]
     be6:	f003 fc59 	bl	449c <outs>
     bea:	2800      	cmp	r0, #0
     bec:	f2c0 8152 	blt.w	e94 <CONFIG_ISR_STACK_SIZE+0x694>
     bf0:	4405      	add	r5, r0
			continue;
     bf2:	9f03      	ldr	r7, [sp, #12]
     bf4:	e5f2      	b.n	7dc <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     bf6:	f854 3b04 	ldr.w	r3, [r4], #4
     bfa:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
     bfc:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
     c00:	e7e8      	b.n	bd4 <CONFIG_ISR_STACK_SIZE+0x3d4>
			} else if (length_mod == LENGTH_H) {
     c02:	2902      	cmp	r1, #2
     c04:	d1e5      	bne.n	bd2 <CONFIG_ISR_STACK_SIZE+0x3d2>
				value->sint = (short)value->sint;
     c06:	b21a      	sxth	r2, r3
     c08:	f343 33c0 	sbfx	r3, r3, #15, #1
     c0c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
     c10:	e7df      	b.n	bd2 <CONFIG_ISR_STACK_SIZE+0x3d2>
		} else if (specifier_cat == SPECIFIER_UINT) {
     c12:	2b02      	cmp	r3, #2
     c14:	d124      	bne.n	c60 <CONFIG_ISR_STACK_SIZE+0x460>
			switch (length_mod) {
     c16:	1ecb      	subs	r3, r1, #3
     c18:	2b04      	cmp	r3, #4
     c1a:	d804      	bhi.n	c26 <CONFIG_ISR_STACK_SIZE+0x426>
     c1c:	e8df f003 	tbb	[pc, r3]
     c20:	18101018 	.word	0x18101018
     c24:	18          	.byte	0x18
     c25:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
     c26:	2901      	cmp	r1, #1
     c28:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
     c2c:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     c30:	d014      	beq.n	c5c <CONFIG_ISR_STACK_SIZE+0x45c>
			} else if (length_mod == LENGTH_H) {
     c32:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
     c34:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
     c38:	d1cc      	bne.n	bd4 <CONFIG_ISR_STACK_SIZE+0x3d4>
				value->uint = (unsigned short)value->uint;
     c3a:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
     c3c:	930e      	str	r3, [sp, #56]	; 0x38
     c3e:	e7c9      	b.n	bd4 <CONFIG_ISR_STACK_SIZE+0x3d4>
					(uint_value_type)va_arg(ap,
     c40:	3407      	adds	r4, #7
     c42:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
     c46:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     c4a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
     c4e:	e7c1      	b.n	bd4 <CONFIG_ISR_STACK_SIZE+0x3d4>
					(uint_value_type)va_arg(ap, size_t);
     c50:	f854 3b04 	ldr.w	r3, [r4], #4
     c54:	930e      	str	r3, [sp, #56]	; 0x38
     c56:	2300      	movs	r3, #0
     c58:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
     c5a:	e7bb      	b.n	bd4 <CONFIG_ISR_STACK_SIZE+0x3d4>
				value->uint = (unsigned char)value->uint;
     c5c:	b2db      	uxtb	r3, r3
     c5e:	e7cd      	b.n	bfc <CONFIG_ISR_STACK_SIZE+0x3fc>
		} else if (specifier_cat == SPECIFIER_FP) {
     c60:	2b04      	cmp	r3, #4
     c62:	d108      	bne.n	c76 <CONFIG_ISR_STACK_SIZE+0x476>
					(sint_value_type)va_arg(ap, long long);
     c64:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
     c66:	f024 0407 	bic.w	r4, r4, #7
     c6a:	e9d4 2300 	ldrd	r2, r3, [r4]
     c6e:	3408      	adds	r4, #8
     c70:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
     c74:	e7ae      	b.n	bd4 <CONFIG_ISR_STACK_SIZE+0x3d4>
		} else if (specifier_cat == SPECIFIER_PTR) {
     c76:	2b03      	cmp	r3, #3
     c78:	d1ac      	bne.n	bd4 <CONFIG_ISR_STACK_SIZE+0x3d4>
			value->ptr = va_arg(ap, void *);
     c7a:	f854 3b04 	ldr.w	r3, [r4], #4
     c7e:	e7dd      	b.n	c3c <CONFIG_ISR_STACK_SIZE+0x43c>
		switch (conv->specifier) {
     c80:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
     c84:	2878      	cmp	r0, #120	; 0x78
     c86:	d8b4      	bhi.n	bf2 <CONFIG_ISR_STACK_SIZE+0x3f2>
     c88:	2862      	cmp	r0, #98	; 0x62
     c8a:	d81c      	bhi.n	cc6 <CONFIG_ISR_STACK_SIZE+0x4c6>
     c8c:	2825      	cmp	r0, #37	; 0x25
     c8e:	f43f adad 	beq.w	7ec <z_cbvprintf_impl+0x20>
     c92:	2858      	cmp	r0, #88	; 0x58
     c94:	d1ad      	bne.n	bf2 <CONFIG_ISR_STACK_SIZE+0x3f2>
			bps = encode_uint(value->uint, conv, buf, bpe);
     c96:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
     c9a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     c9e:	9300      	str	r3, [sp, #0]
     ca0:	aa10      	add	r2, sp, #64	; 0x40
     ca2:	ab08      	add	r3, sp, #32
     ca4:	f003 fbb4 	bl	4410 <encode_uint>
			if (precision >= 0) {
     ca8:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
     cac:	4607      	mov	r7, r0
			if (precision >= 0) {
     cae:	f280 8099 	bge.w	de4 <CONFIG_ISR_STACK_SIZE+0x5e4>
		if (bps == NULL) {
     cb2:	2f00      	cmp	r7, #0
     cb4:	d09d      	beq.n	bf2 <CONFIG_ISR_STACK_SIZE+0x3f2>
		size_t nj_len = (bpe - bps);
     cb6:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     cba:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
     cbc:	2e00      	cmp	r6, #0
     cbe:	f000 80c0 	beq.w	e42 <CONFIG_ISR_STACK_SIZE+0x642>
			nj_len += 1U;
     cc2:	3001      	adds	r0, #1
     cc4:	e0bd      	b.n	e42 <CONFIG_ISR_STACK_SIZE+0x642>
		switch (conv->specifier) {
     cc6:	3863      	subs	r0, #99	; 0x63
     cc8:	2815      	cmp	r0, #21
     cca:	d892      	bhi.n	bf2 <CONFIG_ISR_STACK_SIZE+0x3f2>
     ccc:	a201      	add	r2, pc, #4	; (adr r2, cd4 <CONFIG_ISR_STACK_SIZE+0x4d4>)
     cce:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
     cd2:	bf00      	nop
     cd4:	00000da9 	.word	0x00000da9
     cd8:	00000dbb 	.word	0x00000dbb
     cdc:	00000bf3 	.word	0x00000bf3
     ce0:	00000bf3 	.word	0x00000bf3
     ce4:	00000bf3 	.word	0x00000bf3
     ce8:	00000bf3 	.word	0x00000bf3
     cec:	00000dbb 	.word	0x00000dbb
     cf0:	00000bf3 	.word	0x00000bf3
     cf4:	00000bf3 	.word	0x00000bf3
     cf8:	00000bf3 	.word	0x00000bf3
     cfc:	00000bf3 	.word	0x00000bf3
     d00:	00000e47 	.word	0x00000e47
     d04:	00000ddf 	.word	0x00000ddf
     d08:	00000e05 	.word	0x00000e05
     d0c:	00000bf3 	.word	0x00000bf3
     d10:	00000bf3 	.word	0x00000bf3
     d14:	00000d2d 	.word	0x00000d2d
     d18:	00000bf3 	.word	0x00000bf3
     d1c:	00000ddf 	.word	0x00000ddf
     d20:	00000bf3 	.word	0x00000bf3
     d24:	00000bf3 	.word	0x00000bf3
     d28:	00000ddf 	.word	0x00000ddf
			if (precision >= 0) {
     d2c:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
     d30:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
     d32:	db35      	blt.n	da0 <CONFIG_ISR_STACK_SIZE+0x5a0>
				len = strnlen(bps, precision);
     d34:	4651      	mov	r1, sl
     d36:	4638      	mov	r0, r7
     d38:	f003 fc1e 	bl	4578 <strnlen>
			bpe = bps + len;
     d3c:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
     d40:	2f00      	cmp	r7, #0
     d42:	f43f af56 	beq.w	bf2 <CONFIG_ISR_STACK_SIZE+0x3f2>
		char sign = 0;
     d46:	2600      	movs	r6, #0
		if (conv->altform_0c) {
     d48:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     d4c:	f013 0210 	ands.w	r2, r3, #16
     d50:	9205      	str	r2, [sp, #20]
     d52:	f000 8092 	beq.w	e7a <CONFIG_ISR_STACK_SIZE+0x67a>
			nj_len += 2U;
     d56:	3002      	adds	r0, #2
		if (conv->pad_fp) {
     d58:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
     d5a:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
     d5c:	bf48      	it	mi
     d5e:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
     d60:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
     d62:	bf48      	it	mi
     d64:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
     d66:	f1b8 0f00 	cmp.w	r8, #0
		nj_len += conv->pad0_value;
     d6a:	9204      	str	r2, [sp, #16]
		if (width > 0) {
     d6c:	f340 809f 	ble.w	eae <CONFIG_ISR_STACK_SIZE+0x6ae>
			if (!conv->flag_dash) {
     d70:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
     d74:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
     d78:	f3c2 0380 	ubfx	r3, r2, #2, #1
     d7c:	0750      	lsls	r0, r2, #29
     d7e:	9306      	str	r3, [sp, #24]
     d80:	f100 8095 	bmi.w	eae <CONFIG_ISR_STACK_SIZE+0x6ae>
				if (conv->flag_zero) {
     d84:	0651      	lsls	r1, r2, #25
     d86:	f140 8088 	bpl.w	e9a <CONFIG_ISR_STACK_SIZE+0x69a>
					if (sign != 0) {
     d8a:	b13e      	cbz	r6, d9c <CONFIG_ISR_STACK_SIZE+0x59c>
						OUTC(sign);
     d8c:	4659      	mov	r1, fp
     d8e:	4630      	mov	r0, r6
     d90:	47c8      	blx	r9
     d92:	2800      	cmp	r0, #0
     d94:	db7e      	blt.n	e94 <CONFIG_ISR_STACK_SIZE+0x694>
     d96:	9b06      	ldr	r3, [sp, #24]
     d98:	3501      	adds	r5, #1
     d9a:	461e      	mov	r6, r3
					pad = '0';
     d9c:	2230      	movs	r2, #48	; 0x30
     d9e:	e07d      	b.n	e9c <CONFIG_ISR_STACK_SIZE+0x69c>
				len = strlen(bps);
     da0:	4638      	mov	r0, r7
     da2:	f003 fbe2 	bl	456a <strlen>
     da6:	e7c9      	b.n	d3c <CONFIG_ISR_STACK_SIZE+0x53c>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     da8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		char sign = 0;
     daa:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
     dac:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     dae:	f88d 3020 	strb.w	r3, [sp, #32]
			bps = buf;
     db2:	af08      	add	r7, sp, #32
			bpe = buf + 1;
     db4:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
     db8:	e7c6      	b.n	d48 <CONFIG_ISR_STACK_SIZE+0x548>
			if (conv->flag_plus) {
     dba:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
     dbc:	bf5a      	itte	pl
     dbe:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
     dc2:	015e      	lslpl	r6, r3, #5
				sign = '+';
     dc4:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
     dc6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
			if (sint < 0) {
     dca:	2b00      	cmp	r3, #0
     dcc:	f6bf af63 	bge.w	c96 <CONFIG_ISR_STACK_SIZE+0x496>
				value->uint = (uint_value_type)-sint;
     dd0:	4252      	negs	r2, r2
     dd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
     dd6:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
     dd8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
     ddc:	e75b      	b.n	c96 <CONFIG_ISR_STACK_SIZE+0x496>
		switch (conv->specifier) {
     dde:	2600      	movs	r6, #0
     de0:	e759      	b.n	c96 <CONFIG_ISR_STACK_SIZE+0x496>
		char sign = 0;
     de2:	2600      	movs	r6, #0
				conv->flag_zero = false;
     de4:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
     de8:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     dec:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
     dee:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     df2:	459a      	cmp	sl, r3
				conv->flag_zero = false;
     df4:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
     df8:	f67f af5b 	bls.w	cb2 <CONFIG_ISR_STACK_SIZE+0x4b2>
					conv->pad0_value = precision - (int)len;
     dfc:	ebaa 0303 	sub.w	r3, sl, r3
     e00:	9311      	str	r3, [sp, #68]	; 0x44
     e02:	e756      	b.n	cb2 <CONFIG_ISR_STACK_SIZE+0x4b2>
			if (value->ptr != NULL) {
     e04:	980e      	ldr	r0, [sp, #56]	; 0x38
     e06:	b390      	cbz	r0, e6e <CONFIG_ISR_STACK_SIZE+0x66e>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     e08:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     e0c:	9300      	str	r3, [sp, #0]
     e0e:	2100      	movs	r1, #0
     e10:	ab08      	add	r3, sp, #32
     e12:	aa10      	add	r2, sp, #64	; 0x40
     e14:	f003 fafc 	bl	4410 <encode_uint>
				conv->altform_0c = true;
     e18:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
     e1c:	f1ba 0f00 	cmp.w	sl, #0
				conv->altform_0c = true;
     e20:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     e24:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     e28:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
     e2c:	4607      	mov	r7, r0
				conv->altform_0c = true;
     e2e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
     e32:	dad6      	bge.n	de2 <CONFIG_ISR_STACK_SIZE+0x5e2>
		if (bps == NULL) {
     e34:	2800      	cmp	r0, #0
     e36:	f43f aedc 	beq.w	bf2 <CONFIG_ISR_STACK_SIZE+0x3f2>
		char sign = 0;
     e3a:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
     e3c:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     e40:	1a18      	subs	r0, r3, r0
		if (sign != 0) {
     e42:	469a      	mov	sl, r3
     e44:	e780      	b.n	d48 <CONFIG_ISR_STACK_SIZE+0x548>
				store_count(conv, value->ptr, count);
     e46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
     e48:	2907      	cmp	r1, #7
     e4a:	f63f aed2 	bhi.w	bf2 <CONFIG_ISR_STACK_SIZE+0x3f2>
     e4e:	e8df f001 	tbb	[pc, r1]
     e52:	040c      	.short	0x040c
     e54:	08080c06 	.word	0x08080c06
     e58:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
     e5a:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
     e5c:	e6c9      	b.n	bf2 <CONFIG_ISR_STACK_SIZE+0x3f2>
		*(short *)dp = (short)count;
     e5e:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
     e60:	e6c7      	b.n	bf2 <CONFIG_ISR_STACK_SIZE+0x3f2>
		*(intmax_t *)dp = (intmax_t)count;
     e62:	17ea      	asrs	r2, r5, #31
     e64:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
     e68:	e6c3      	b.n	bf2 <CONFIG_ISR_STACK_SIZE+0x3f2>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     e6a:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
     e6c:	e6c1      	b.n	bf2 <CONFIG_ISR_STACK_SIZE+0x3f2>
     e6e:	4f2f      	ldr	r7, [pc, #188]	; (f2c <CONFIG_ISR_STACK_SIZE+0x72c>)
		char sign = 0;
     e70:	4606      	mov	r6, r0
			bpe = bps + 5;
     e72:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
     e76:	2005      	movs	r0, #5
     e78:	e766      	b.n	d48 <CONFIG_ISR_STACK_SIZE+0x548>
		} else if (conv->altform_0) {
     e7a:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
     e7c:	bf48      	it	mi
     e7e:	3001      	addmi	r0, #1
     e80:	e76a      	b.n	d58 <CONFIG_ISR_STACK_SIZE+0x558>
					OUTC(pad);
     e82:	4610      	mov	r0, r2
     e84:	9307      	str	r3, [sp, #28]
     e86:	9206      	str	r2, [sp, #24]
     e88:	4659      	mov	r1, fp
     e8a:	47c8      	blx	r9
     e8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
     e90:	2800      	cmp	r0, #0
     e92:	da04      	bge.n	e9e <CONFIG_ISR_STACK_SIZE+0x69e>
#undef OUTS
#undef OUTC
}
     e94:	b015      	add	sp, #84	; 0x54
     e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     e9a:	2220      	movs	r2, #32
					pad = '0';
     e9c:	4643      	mov	r3, r8
				while (width-- > 0) {
     e9e:	4619      	mov	r1, r3
     ea0:	2900      	cmp	r1, #0
     ea2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
     ea6:	dcec      	bgt.n	e82 <CONFIG_ISR_STACK_SIZE+0x682>
     ea8:	4445      	add	r5, r8
     eaa:	4698      	mov	r8, r3
     eac:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
     eae:	b12e      	cbz	r6, ebc <CONFIG_ISR_STACK_SIZE+0x6bc>
			OUTC(sign);
     eb0:	4659      	mov	r1, fp
     eb2:	4630      	mov	r0, r6
     eb4:	47c8      	blx	r9
     eb6:	2800      	cmp	r0, #0
     eb8:	dbec      	blt.n	e94 <CONFIG_ISR_STACK_SIZE+0x694>
     eba:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
     ebc:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     ec0:	06da      	lsls	r2, r3, #27
     ec2:	d401      	bmi.n	ec8 <CONFIG_ISR_STACK_SIZE+0x6c8>
     ec4:	071b      	lsls	r3, r3, #28
     ec6:	d505      	bpl.n	ed4 <CONFIG_ISR_STACK_SIZE+0x6d4>
				OUTC('0');
     ec8:	4659      	mov	r1, fp
     eca:	2030      	movs	r0, #48	; 0x30
     ecc:	47c8      	blx	r9
     ece:	2800      	cmp	r0, #0
     ed0:	dbe0      	blt.n	e94 <CONFIG_ISR_STACK_SIZE+0x694>
     ed2:	3501      	adds	r5, #1
			if (conv->altform_0c) {
     ed4:	9b05      	ldr	r3, [sp, #20]
     ed6:	b133      	cbz	r3, ee6 <CONFIG_ISR_STACK_SIZE+0x6e6>
				OUTC(conv->specifier);
     ed8:	4659      	mov	r1, fp
     eda:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
     ede:	47c8      	blx	r9
     ee0:	2800      	cmp	r0, #0
     ee2:	dbd7      	blt.n	e94 <CONFIG_ISR_STACK_SIZE+0x694>
     ee4:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     ee6:	9e04      	ldr	r6, [sp, #16]
     ee8:	442e      	add	r6, r5
     eea:	e005      	b.n	ef8 <CONFIG_ISR_STACK_SIZE+0x6f8>
				OUTC('0');
     eec:	4659      	mov	r1, fp
     eee:	2030      	movs	r0, #48	; 0x30
     ef0:	47c8      	blx	r9
     ef2:	2800      	cmp	r0, #0
     ef4:	dbce      	blt.n	e94 <CONFIG_ISR_STACK_SIZE+0x694>
     ef6:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     ef8:	1b73      	subs	r3, r6, r5
     efa:	2b00      	cmp	r3, #0
     efc:	dcf6      	bgt.n	eec <CONFIG_ISR_STACK_SIZE+0x6ec>
			OUTS(bps, bpe);
     efe:	4653      	mov	r3, sl
     f00:	463a      	mov	r2, r7
     f02:	4659      	mov	r1, fp
     f04:	4648      	mov	r0, r9
     f06:	f003 fac9 	bl	449c <outs>
     f0a:	2800      	cmp	r0, #0
     f0c:	dbc2      	blt.n	e94 <CONFIG_ISR_STACK_SIZE+0x694>
     f0e:	4405      	add	r5, r0
		while (width > 0) {
     f10:	44a8      	add	r8, r5
     f12:	eba8 0305 	sub.w	r3, r8, r5
     f16:	2b00      	cmp	r3, #0
     f18:	f77f ae6b 	ble.w	bf2 <CONFIG_ISR_STACK_SIZE+0x3f2>
			OUTC(' ');
     f1c:	4659      	mov	r1, fp
     f1e:	2020      	movs	r0, #32
     f20:	47c8      	blx	r9
     f22:	2800      	cmp	r0, #0
     f24:	dbb6      	blt.n	e94 <CONFIG_ISR_STACK_SIZE+0x694>
     f26:	3501      	adds	r5, #1
			--width;
     f28:	e7f3      	b.n	f12 <CONFIG_ISR_STACK_SIZE+0x712>
     f2a:	bf00      	nop
     f2c:	000055c3 	.word	0x000055c3

00000f30 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
     f30:	4604      	mov	r4, r0
     f32:	b508      	push	{r3, lr}
	__asm__ volatile(
     f34:	f04f 0220 	mov.w	r2, #32
     f38:	f3ef 8311 	mrs	r3, BASEPRI
     f3c:	f382 8812 	msr	BASEPRI_MAX, r2
     f40:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
     f44:	f001 fcde 	bl	2904 <sys_clock_disable>
	}

	sys_arch_reboot(type);
     f48:	4620      	mov	r0, r4
     f4a:	f000 fd3d 	bl	19c8 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
     f4e:	4803      	ldr	r0, [pc, #12]	; (f5c <sys_reboot+0x2c>)
     f50:	f003 f894 	bl	407c <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
     f54:	f000 fa86 	bl	1464 <arch_cpu_idle>
     f58:	e7fc      	b.n	f54 <sys_reboot+0x24>
     f5a:	bf00      	nop
     f5c:	000055c9 	.word	0x000055c9

00000f60 <nrf_gpio_pin_control_select.constprop.0>:

#if NRF_GPIO_HAS_SEL
NRF_STATIC_INLINE void nrf_gpio_pin_control_select(uint32_t pin_number, nrf_gpio_pin_sel_t ctrl)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
     f60:	4b05      	ldr	r3, [pc, #20]	; (f78 <nrf_gpio_pin_control_select.constprop.0+0x18>)
     f62:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     f66:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
     f6a:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_MCUSEL_Pos);
     f6e:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
     f72:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
     f76:	4770      	bx	lr
     f78:	50842500 	.word	0x50842500

00000f7c <nordicsemi_nrf53_init>:
	return ok_to_sleep;
}
#endif /* CONFIG_SOC_NRF53_ANOMALY_160_WORKAROUND */

static int nordicsemi_nrf53_init(void)
{
     f7c:	b508      	push	{r3, lr}
     f7e:	f04f 0320 	mov.w	r3, #32
     f82:	f3ef 8111 	mrs	r1, BASEPRI
     f86:	f383 8812 	msr	BASEPRI_MAX, r3
     f8a:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
     f8e:	2201      	movs	r2, #1
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
     f90:	2002      	movs	r0, #2
     f92:	4b09      	ldr	r3, [pc, #36]	; (fb8 <nordicsemi_nrf53_init+0x3c>)
     f94:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
     f98:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
     f9c:	f8c3 06d0 	str.w	r0, [r3, #1744]	; 0x6d0
#if !defined(CONFIG_BUILD_WITH_TFM)
	/* This can only be done from secure code.
	 * This is handled by the TF-M platform so we skip it when TF-M is
	 * enabled.
	 */
	nrf_gpio_pin_control_select(PIN_XL1, NRF_GPIO_PIN_SEL_PERIPHERAL);
     fa0:	2000      	movs	r0, #0
     fa2:	f7ff ffdd 	bl	f60 <nrf_gpio_pin_control_select.constprop.0>
	nrf_gpio_pin_control_select(PIN_XL2, NRF_GPIO_PIN_SEL_PERIPHERAL);
     fa6:	4610      	mov	r0, r2
     fa8:	f7ff ffda 	bl	f60 <nrf_gpio_pin_control_select.constprop.0>
	__asm__ volatile(
     fac:	f381 8811 	msr	BASEPRI, r1
     fb0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     fb4:	2000      	movs	r0, #0
     fb6:	bd08      	pop	{r3, pc}
     fb8:	50001000 	.word	0x50001000

00000fbc <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
     fbc:	b148      	cbz	r0, fd2 <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
     fbe:	4b05      	ldr	r3, [pc, #20]	; (fd4 <arch_busy_wait+0x18>)
     fc0:	4a05      	ldr	r2, [pc, #20]	; (fd8 <arch_busy_wait+0x1c>)
     fc2:	681b      	ldr	r3, [r3, #0]
     fc4:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
     fc8:	4358      	muls	r0, r3
     fca:	4b04      	ldr	r3, [pc, #16]	; (fdc <arch_busy_wait+0x20>)
     fcc:	f043 0301 	orr.w	r3, r3, #1
     fd0:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
     fd2:	4770      	bx	lr
     fd4:	20000060 	.word	0x20000060
     fd8:	000f4240 	.word	0x000f4240
     fdc:	00005350 	.word	0x00005350

00000fe0 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
     fe0:	2806      	cmp	r0, #6
     fe2:	d107      	bne.n	ff4 <pm_state_set+0x14>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
     fe4:	2201      	movs	r2, #1
     fe6:	4b04      	ldr	r3, [pc, #16]	; (ff8 <pm_state_set+0x18>)
     fe8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     fec:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
     ff0:	bf20      	wfe
    while (true)
     ff2:	e7fd      	b.n	ff0 <pm_state_set+0x10>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
     ff4:	4770      	bx	lr
     ff6:	bf00      	nop
     ff8:	50004000 	.word	0x50004000

00000ffc <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
     ffc:	f001 bcac 	b.w	2958 <SystemInit>

00001000 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    1000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1004:	4605      	mov	r5, r0
	__asm__ volatile(
    1006:	f04f 0320 	mov.w	r3, #32
    100a:	f3ef 8611 	mrs	r6, BASEPRI
    100e:	f383 8812 	msr	BASEPRI_MAX, r3
    1012:	f3bf 8f6f 	isb	sy
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1016:	f04f 090c 	mov.w	r9, #12
	return list->head;
    101a:	4b0d      	ldr	r3, [pc, #52]	; (1050 <pm_state_notify+0x50>)
    101c:	4f0d      	ldr	r7, [pc, #52]	; (1054 <pm_state_notify+0x54>)
    101e:	681c      	ldr	r4, [r3, #0]
    1020:	f8df 8034 	ldr.w	r8, [pc, #52]	; 1058 <pm_state_notify+0x58>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1024:	b92c      	cbnz	r4, 1032 <pm_state_notify+0x32>
	__asm__ volatile(
    1026:	f386 8811 	msr	BASEPRI, r6
    102a:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    102e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    1032:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    1036:	2d00      	cmp	r5, #0
    1038:	bf18      	it	ne
    103a:	4613      	movne	r3, r2
		if (callback) {
    103c:	b12b      	cbz	r3, 104a <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    103e:	f898 2010 	ldrb.w	r2, [r8, #16]
    1042:	fb09 f202 	mul.w	r2, r9, r2
    1046:	5cb8      	ldrb	r0, [r7, r2]
    1048:	4798      	blx	r3
	return node->next;
    104a:	6824      	ldr	r4, [r4, #0]
    104c:	e7ea      	b.n	1024 <pm_state_notify+0x24>
    104e:	bf00      	nop
    1050:	200002ac 	.word	0x200002ac
    1054:	200002a0 	.word	0x200002a0
    1058:	2000095c 	.word	0x2000095c

0000105c <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    105c:	2201      	movs	r2, #1

void pm_system_resume(void)
{
    105e:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    1060:	4b16      	ldr	r3, [pc, #88]	; (10bc <pm_system_resume+0x60>)
    1062:	7c1c      	ldrb	r4, [r3, #16]
    1064:	f004 031f 	and.w	r3, r4, #31
    1068:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    106a:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    106c:	4b14      	ldr	r3, [pc, #80]	; (10c0 <pm_system_resume+0x64>)
    106e:	0961      	lsrs	r1, r4, #5
    1070:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1074:	e8d3 1fef 	ldaex	r1, [r3]
    1078:	ea01 0500 	and.w	r5, r1, r0
    107c:	e8c3 5fe6 	stlex	r6, r5, [r3]
    1080:	2e00      	cmp	r6, #0
    1082:	d1f7      	bne.n	1074 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    1084:	420a      	tst	r2, r1
    1086:	d013      	beq.n	10b0 <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
    1088:	4b0e      	ldr	r3, [pc, #56]	; (10c4 <pm_system_resume+0x68>)
    108a:	4d0f      	ldr	r5, [pc, #60]	; (10c8 <pm_system_resume+0x6c>)
    108c:	b18b      	cbz	r3, 10b2 <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
    108e:	230c      	movs	r3, #12
    1090:	4363      	muls	r3, r4
    1092:	18ea      	adds	r2, r5, r3
    1094:	7851      	ldrb	r1, [r2, #1]
    1096:	5ce8      	ldrb	r0, [r5, r3]
    1098:	f003 fa18 	bl	44cc <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    109c:	2000      	movs	r0, #0
    109e:	f7ff ffaf 	bl	1000 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    10a2:	230c      	movs	r3, #12
    10a4:	435c      	muls	r4, r3
    10a6:	2300      	movs	r3, #0
    10a8:	192a      	adds	r2, r5, r4
    10aa:	512b      	str	r3, [r5, r4]
    10ac:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    10b0:	bd70      	pop	{r4, r5, r6, pc}
    10b2:	f383 8811 	msr	BASEPRI, r3
    10b6:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    10ba:	e7ef      	b.n	109c <pm_system_resume+0x40>
    10bc:	2000095c 	.word	0x2000095c
    10c0:	200002b4 	.word	0x200002b4
    10c4:	000044cd 	.word	0x000044cd
    10c8:	200002a0 	.word	0x200002a0

000010cc <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    10cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    10d0:	4b32      	ldr	r3, [pc, #200]	; (119c <pm_system_suspend+0xd0>)
{
    10d2:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    10d4:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
    10d6:	f04f 0320 	mov.w	r3, #32
    10da:	f3ef 8811 	mrs	r8, BASEPRI
    10de:	f383 8812 	msr	BASEPRI_MAX, r3
    10e2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    10e6:	240c      	movs	r4, #12
    10e8:	436c      	muls	r4, r5
    10ea:	4b2d      	ldr	r3, [pc, #180]	; (11a0 <pm_system_suspend+0xd4>)
    10ec:	4e2d      	ldr	r6, [pc, #180]	; (11a4 <pm_system_suspend+0xd8>)
    10ee:	5d19      	ldrb	r1, [r3, r4]
    10f0:	191a      	adds	r2, r3, r4
    10f2:	2900      	cmp	r1, #0
    10f4:	d047      	beq.n	1186 <pm_system_suspend+0xba>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    10f6:	ca07      	ldmia	r2, {r0, r1, r2}
    10f8:	eb06 0c04 	add.w	ip, r6, r4
    10fc:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    1100:	2200      	movs	r2, #0
    1102:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    1104:	f388 8811 	msr	BASEPRI, r8
    1108:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    110c:	230c      	movs	r3, #12
    110e:	436b      	muls	r3, r5
    1110:	5cf0      	ldrb	r0, [r6, r3]
    1112:	18f2      	adds	r2, r6, r3
    1114:	b3a8      	cbz	r0, 1182 <pm_system_suspend+0xb6>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    1116:	1c7b      	adds	r3, r7, #1
    1118:	d010      	beq.n	113c <pm_system_suspend+0x70>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    111a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    111e:	2100      	movs	r1, #0
    1120:	f8d2 c008 	ldr.w	ip, [r2, #8]
    1124:	4c20      	ldr	r4, [pc, #128]	; (11a8 <pm_system_suspend+0xdc>)
    1126:	2300      	movs	r3, #0
    1128:	fbec 4100 	umlal	r4, r1, ip, r0
    112c:	4a1f      	ldr	r2, [pc, #124]	; (11ac <pm_system_suspend+0xe0>)
    112e:	4620      	mov	r0, r4
    1130:	f7ff f810 	bl	154 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    1134:	2101      	movs	r1, #1
    1136:	1a38      	subs	r0, r7, r0
    1138:	f001 fba8 	bl	288c <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    113c:	f002 fb5e 	bl	37fc <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    1140:	2001      	movs	r0, #1
    1142:	f7ff ff5d 	bl	1000 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1146:	4b1a      	ldr	r3, [pc, #104]	; (11b0 <pm_system_suspend+0xe4>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    1148:	096a      	lsrs	r2, r5, #5
    114a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    114e:	2201      	movs	r2, #1
    1150:	f005 011f 	and.w	r1, r5, #31
    1154:	408a      	lsls	r2, r1
    1156:	e8d3 0fef 	ldaex	r0, [r3]
    115a:	4310      	orrs	r0, r2
    115c:	e8c3 0fe1 	stlex	r1, r0, [r3]
    1160:	2900      	cmp	r1, #0
    1162:	d1f8      	bne.n	1156 <pm_system_suspend+0x8a>
	if (pm_state_set != NULL) {
    1164:	4b13      	ldr	r3, [pc, #76]	; (11b4 <pm_system_suspend+0xe8>)
    1166:	b13b      	cbz	r3, 1178 <pm_system_suspend+0xac>
		pm_state_set(info->state, info->substate_id);
    1168:	230c      	movs	r3, #12
    116a:	fb03 f005 	mul.w	r0, r3, r5
    116e:	1833      	adds	r3, r6, r0
    1170:	7859      	ldrb	r1, [r3, #1]
    1172:	5c30      	ldrb	r0, [r6, r0]
    1174:	f7ff ff34 	bl	fe0 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    1178:	f7ff ff70 	bl	105c <pm_system_resume>
	k_sched_unlock();
    117c:	f002 fb52 	bl	3824 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    1180:	2001      	movs	r0, #1
}
    1182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    1186:	4601      	mov	r1, r0
    1188:	4628      	mov	r0, r5
    118a:	f000 f815 	bl	11b8 <pm_policy_next_state>
		if (info != NULL) {
    118e:	2800      	cmp	r0, #0
    1190:	d0b8      	beq.n	1104 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    1192:	c807      	ldmia	r0, {r0, r1, r2}
    1194:	4434      	add	r4, r6
    1196:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    119a:	e7b3      	b.n	1104 <pm_system_suspend+0x38>
    119c:	2000095c 	.word	0x2000095c
    11a0:	20000294 	.word	0x20000294
    11a4:	200002a0 	.word	0x200002a0
    11a8:	000f423f 	.word	0x000f423f
    11ac:	000f4240 	.word	0x000f4240
    11b0:	200002b4 	.word	0x200002b4
    11b4:	00000fe1 	.word	0x00000fe1

000011b8 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    11b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    11bc:	b085      	sub	sp, #20
    11be:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    11c0:	a903      	add	r1, sp, #12
    11c2:	f000 f843 	bl	124c <pm_state_cpu_get_all>
    11c6:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    11ca:	4604      	mov	r4, r0
    11cc:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    11d0:	4b1b      	ldr	r3, [pc, #108]	; (1240 <pm_policy_next_state+0x88>)
    11d2:	9d03      	ldr	r5, [sp, #12]
    11d4:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    11d8:	1e43      	subs	r3, r0, #1
    11da:	b21b      	sxth	r3, r3
    11dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    11e0:	f8df 8060 	ldr.w	r8, [pc, #96]	; 1244 <pm_policy_next_state+0x8c>
    11e4:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    11e8:	b924      	cbnz	r4, 11f4 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    11ea:	46a1      	mov	r9, r4
}
    11ec:	4648      	mov	r0, r9
    11ee:	b005      	add	sp, #20
    11f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    11f4:	46c4      	mov	ip, r8
    11f6:	4659      	mov	r1, fp
    11f8:	6868      	ldr	r0, [r5, #4]
    11fa:	2300      	movs	r3, #0
    11fc:	fbe0 c107 	umlal	ip, r1, r0, r7
    1200:	4a11      	ldr	r2, [pc, #68]	; (1248 <pm_policy_next_state+0x90>)
    1202:	4660      	mov	r0, ip
    1204:	f7fe ffa6 	bl	154 <__aeabi_uldivmod>
    1208:	46c4      	mov	ip, r8
    120a:	4659      	mov	r1, fp
    120c:	9001      	str	r0, [sp, #4]
    120e:	68a8      	ldr	r0, [r5, #8]
    1210:	2300      	movs	r3, #0
    1212:	fbe0 c107 	umlal	ip, r1, r0, r7
    1216:	4a0c      	ldr	r2, [pc, #48]	; (1248 <pm_policy_next_state+0x90>)
    1218:	4660      	mov	r0, ip
    121a:	f7fe ff9b 	bl	154 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    121e:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
		const struct pm_state_info *state = &cpu_states[i];
    1222:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1224:	d001      	beq.n	122a <pm_policy_next_state+0x72>
    1226:	4582      	cmp	sl, r0
    1228:	d905      	bls.n	1236 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    122a:	1c73      	adds	r3, r6, #1
    122c:	d0de      	beq.n	11ec <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    122e:	9b01      	ldr	r3, [sp, #4]
    1230:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    1232:	42b0      	cmp	r0, r6
    1234:	d9da      	bls.n	11ec <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1236:	3c01      	subs	r4, #1
    1238:	b2a4      	uxth	r4, r4
    123a:	3d0c      	subs	r5, #12
    123c:	e7d4      	b.n	11e8 <pm_policy_next_state+0x30>
    123e:	bf00      	nop
    1240:	20000004 	.word	0x20000004
    1244:	000f423f 	.word	0x000f423f
    1248:	000f4240 	.word	0x000f4240

0000124c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    124c:	b908      	cbnz	r0, 1252 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    124e:	4b02      	ldr	r3, [pc, #8]	; (1258 <pm_state_cpu_get_all+0xc>)
    1250:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    1252:	2000      	movs	r0, #0
    1254:	4770      	bx	lr
    1256:	bf00      	nop
    1258:	00005358 	.word	0x00005358

0000125c <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    125c:	4801      	ldr	r0, [pc, #4]	; (1264 <nrf_cc3xx_platform_abort_init+0x8>)
    125e:	f002 bdc9 	b.w	3df4 <nrf_cc3xx_platform_set_abort>
    1262:	bf00      	nop
    1264:	00005358 	.word	0x00005358

00001268 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1268:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    126a:	4604      	mov	r4, r0
    126c:	b918      	cbnz	r0, 1276 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    126e:	4b0f      	ldr	r3, [pc, #60]	; (12ac <mutex_free_platform+0x44>)
    1270:	480f      	ldr	r0, [pc, #60]	; (12b0 <mutex_free_platform+0x48>)
    1272:	685b      	ldr	r3, [r3, #4]
    1274:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1276:	6861      	ldr	r1, [r4, #4]
    1278:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
    127c:	d00f      	beq.n	129e <mutex_free_platform+0x36>
    127e:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
    1282:	d00c      	beq.n	129e <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1284:	4d0b      	ldr	r5, [pc, #44]	; (12b4 <mutex_free_platform+0x4c>)
    1286:	42a9      	cmp	r1, r5
    1288:	d009      	beq.n	129e <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    128a:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
    128e:	d007      	beq.n	12a0 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1290:	4621      	mov	r1, r4
    1292:	4809      	ldr	r0, [pc, #36]	; (12b8 <mutex_free_platform+0x50>)
    1294:	f003 fdb4 	bl	4e00 <k_mem_slab_free>
        mutex->mutex = NULL;
    1298:	2300      	movs	r3, #0
    129a:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    129c:	6065      	str	r5, [r4, #4]
}
    129e:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    12a0:	2214      	movs	r2, #20
    12a2:	6820      	ldr	r0, [r4, #0]
    12a4:	f003 f97c 	bl	45a0 <memset>
    12a8:	e7f8      	b.n	129c <mutex_free_platform+0x34>
    12aa:	bf00      	nop
    12ac:	20000070 	.word	0x20000070
    12b0:	000055f9 	.word	0x000055f9
    12b4:	a95c5f2c 	.word	0xa95c5f2c
    12b8:	200007b8 	.word	0x200007b8

000012bc <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    12bc:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    12be:	b360      	cbz	r0, 131a <mutex_lock_platform+0x5e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    12c0:	6843      	ldr	r3, [r0, #4]
    12c2:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    12c6:	d00e      	beq.n	12e6 <mutex_lock_platform+0x2a>
    12c8:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    12cc:	d018      	beq.n	1300 <mutex_lock_platform+0x44>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    12ce:	4a14      	ldr	r2, [pc, #80]	; (1320 <mutex_lock_platform+0x64>)
    12d0:	4293      	cmp	r3, r2
    12d2:	d020      	beq.n	1316 <mutex_lock_platform+0x5a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    12d4:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    12d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    12da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    12de:	f001 ff87 	bl	31f0 <z_impl_k_mutex_lock>

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
    12e2:	b158      	cbz	r0, 12fc <mutex_lock_platform+0x40>
    12e4:	e015      	b.n	1312 <mutex_lock_platform+0x56>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    12e6:	2201      	movs	r2, #1
    12e8:	6803      	ldr	r3, [r0, #0]
    12ea:	e8d3 1fef 	ldaex	r1, [r3]
    12ee:	2900      	cmp	r1, #0
    12f0:	d103      	bne.n	12fa <mutex_lock_platform+0x3e>
    12f2:	e8c3 2fe0 	stlex	r0, r2, [r3]
    12f6:	2800      	cmp	r0, #0
    12f8:	d1f7      	bne.n	12ea <mutex_lock_platform+0x2e>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    12fa:	d10a      	bne.n	1312 <mutex_lock_platform+0x56>
            return NRF_CC3XX_PLATFORM_SUCCESS;
    12fc:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    12fe:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    1300:	6803      	ldr	r3, [r0, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_mutex_lock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    1302:	4a08      	ldr	r2, [pc, #32]	; (1324 <mutex_lock_platform+0x68>)
    1304:	781b      	ldrb	r3, [r3, #0]
    1306:	f503 7380 	add.w	r3, r3, #256	; 0x100
    130a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    130e:	2b00      	cmp	r3, #0
    1310:	d0f4      	beq.n	12fc <mutex_lock_platform+0x40>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1312:	4805      	ldr	r0, [pc, #20]	; (1328 <mutex_lock_platform+0x6c>)
    1314:	e7f3      	b.n	12fe <mutex_lock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1316:	4805      	ldr	r0, [pc, #20]	; (132c <mutex_lock_platform+0x70>)
    1318:	e7f1      	b.n	12fe <mutex_lock_platform+0x42>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    131a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    131e:	e7ee      	b.n	12fe <mutex_lock_platform+0x42>
    1320:	a95c5f2c 	.word	0xa95c5f2c
    1324:	50030000 	.word	0x50030000
    1328:	ffff8fe9 	.word	0xffff8fe9
    132c:	ffff8fea 	.word	0xffff8fea

00001330 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1330:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1332:	b320      	cbz	r0, 137e <mutex_unlock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1334:	6843      	ldr	r3, [r0, #4]
    1336:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    133a:	d009      	beq.n	1350 <mutex_unlock_platform+0x20>
    133c:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    1340:	d013      	beq.n	136a <mutex_unlock_platform+0x3a>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1342:	4a11      	ldr	r2, [pc, #68]	; (1388 <mutex_unlock_platform+0x58>)
    1344:	4293      	cmp	r3, r2
    1346:	d01d      	beq.n	1384 <mutex_unlock_platform+0x54>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    1348:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    134a:	f001 ffcb 	bl	32e4 <z_impl_k_mutex_unlock>
    134e:	e014      	b.n	137a <mutex_unlock_platform+0x4a>
    1350:	2200      	movs	r2, #0
    1352:	6803      	ldr	r3, [r0, #0]
    1354:	e8d3 1fef 	ldaex	r1, [r3]
    1358:	2901      	cmp	r1, #1
    135a:	d103      	bne.n	1364 <mutex_unlock_platform+0x34>
    135c:	e8c3 2fe0 	stlex	r0, r2, [r3]
    1360:	2800      	cmp	r0, #0
    1362:	d1f7      	bne.n	1354 <mutex_unlock_platform+0x24>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1364:	d009      	beq.n	137a <mutex_unlock_platform+0x4a>
    1366:	4809      	ldr	r0, [pc, #36]	; (138c <mutex_unlock_platform+0x5c>)

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    1368:	bd08      	pop	{r3, pc}
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    136a:	2100      	movs	r1, #0
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    136c:	6803      	ldr	r3, [r0, #0]
    136e:	4a08      	ldr	r2, [pc, #32]	; (1390 <mutex_unlock_platform+0x60>)
    1370:	781b      	ldrb	r3, [r3, #0]
    1372:	f503 7380 	add.w	r3, r3, #256	; 0x100
    1376:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return NRF_CC3XX_PLATFORM_SUCCESS;
    137a:	2000      	movs	r0, #0
    137c:	e7f4      	b.n	1368 <mutex_unlock_platform+0x38>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    137e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1382:	e7f1      	b.n	1368 <mutex_unlock_platform+0x38>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1384:	4803      	ldr	r0, [pc, #12]	; (1394 <mutex_unlock_platform+0x64>)
    1386:	e7ef      	b.n	1368 <mutex_unlock_platform+0x38>
    1388:	a95c5f2c 	.word	0xa95c5f2c
    138c:	ffff8fe9 	.word	0xffff8fe9
    1390:	50030000 	.word	0x50030000
    1394:	ffff8fea 	.word	0xffff8fea

00001398 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1398:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    139a:	4604      	mov	r4, r0
    139c:	b918      	cbnz	r0, 13a6 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    139e:	4b1d      	ldr	r3, [pc, #116]	; (1414 <mutex_init_platform+0x7c>)
    13a0:	481d      	ldr	r0, [pc, #116]	; (1418 <mutex_init_platform+0x80>)
    13a2:	685b      	ldr	r3, [r3, #4]
    13a4:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    13a6:	6863      	ldr	r3, [r4, #4]
    13a8:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    13ac:	d02f      	beq.n	140e <mutex_init_platform+0x76>
    13ae:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    13b2:	d02c      	beq.n	140e <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    13b4:	4a19      	ldr	r2, [pc, #100]	; (141c <mutex_init_platform+0x84>)
    13b6:	4293      	cmp	r3, r2
    13b8:	d119      	bne.n	13ee <mutex_init_platform+0x56>
    13ba:	6823      	ldr	r3, [r4, #0]
    13bc:	bb03      	cbnz	r3, 1400 <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    13be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    13c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    13c6:	4621      	mov	r1, r4
    13c8:	4815      	ldr	r0, [pc, #84]	; (1420 <mutex_init_platform+0x88>)
    13ca:	f001 fd91 	bl	2ef0 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    13ce:	b908      	cbnz	r0, 13d4 <mutex_init_platform+0x3c>
    13d0:	6823      	ldr	r3, [r4, #0]
    13d2:	b91b      	cbnz	r3, 13dc <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
    13d4:	4b0f      	ldr	r3, [pc, #60]	; (1414 <mutex_init_platform+0x7c>)
    13d6:	4813      	ldr	r0, [pc, #76]	; (1424 <mutex_init_platform+0x8c>)
    13d8:	685b      	ldr	r3, [r3, #4]
    13da:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    13dc:	2214      	movs	r2, #20
    13de:	2100      	movs	r1, #0
    13e0:	6820      	ldr	r0, [r4, #0]
    13e2:	f003 f8dd 	bl	45a0 <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    13e6:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    13ea:	6063      	str	r3, [r4, #4]
    13ec:	e008      	b.n	1400 <mutex_init_platform+0x68>
    switch(flags){
    13ee:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    13f2:	d80d      	bhi.n	1410 <mutex_init_platform+0x78>
    13f4:	2b3a      	cmp	r3, #58	; 0x3a
    13f6:	d003      	beq.n	1400 <mutex_init_platform+0x68>
    13f8:	f640 62ba 	movw	r2, #3770	; 0xeba
    13fc:	4293      	cmp	r3, r2
    13fe:	d1de      	bne.n	13be <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    1400:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    1402:	f003 fd3b 	bl	4e7c <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    1406:	6863      	ldr	r3, [r4, #4]
    1408:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    140c:	6063      	str	r3, [r4, #4]
}
    140e:	bd10      	pop	{r4, pc}
    switch(flags){
    1410:	4a05      	ldr	r2, [pc, #20]	; (1428 <mutex_init_platform+0x90>)
    1412:	e7f3      	b.n	13fc <mutex_init_platform+0x64>
    1414:	20000070 	.word	0x20000070
    1418:	000055f9 	.word	0x000055f9
    141c:	a95c5f2c 	.word	0xa95c5f2c
    1420:	200007b8 	.word	0x200007b8
    1424:	0000561f 	.word	0x0000561f
    1428:	3a00003a 	.word	0x3a00003a

0000142c <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    142c:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    142e:	4906      	ldr	r1, [pc, #24]	; (1448 <nrf_cc3xx_platform_mutex_init+0x1c>)
    1430:	2340      	movs	r3, #64	; 0x40
    1432:	2214      	movs	r2, #20
    1434:	4805      	ldr	r0, [pc, #20]	; (144c <nrf_cc3xx_platform_mutex_init+0x20>)
    1436:	f003 fcd5 	bl	4de4 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    143a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    143e:	4904      	ldr	r1, [pc, #16]	; (1450 <nrf_cc3xx_platform_mutex_init+0x24>)
    1440:	4804      	ldr	r0, [pc, #16]	; (1454 <nrf_cc3xx_platform_mutex_init+0x28>)
    1442:	f002 bd49 	b.w	3ed8 <nrf_cc3xx_platform_set_mutexes>
    1446:	bf00      	nop
    1448:	200002b8 	.word	0x200002b8
    144c:	200007b8 	.word	0x200007b8
    1450:	00005360 	.word	0x00005360
    1454:	00005374 	.word	0x00005374

00001458 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1458:	4901      	ldr	r1, [pc, #4]	; (1460 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    145a:	2210      	movs	r2, #16
	str	r2, [r1]
    145c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    145e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1460:	e000ed10 	.word	0xe000ed10

00001464 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1464:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1466:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1468:	f380 8811 	msr	BASEPRI, r0
	isb
    146c:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    1470:	f3bf 8f4f 	dsb	sy
    1474:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1476:	b662      	cpsie	i
	isb
    1478:	f3bf 8f6f 	isb	sy

	bx	lr
    147c:	4770      	bx	lr
    147e:	bf00      	nop

00001480 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1480:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1482:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1484:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    1488:	f3bf 8f4f 	dsb	sy
    148c:	bf20      	wfe

	msr	BASEPRI, r0
    148e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1492:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1494:	4770      	bx	lr
    1496:	bf00      	nop

00001498 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1498:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    149a:	2800      	cmp	r0, #0
    149c:	db07      	blt.n	14ae <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    149e:	2301      	movs	r3, #1
    14a0:	0941      	lsrs	r1, r0, #5
    14a2:	4a03      	ldr	r2, [pc, #12]	; (14b0 <arch_irq_enable+0x18>)
    14a4:	f000 001f 	and.w	r0, r0, #31
    14a8:	4083      	lsls	r3, r0
    14aa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    14ae:	4770      	bx	lr
    14b0:	e000e100 	.word	0xe000e100

000014b4 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    14b4:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    14b6:	2800      	cmp	r0, #0
    14b8:	db0c      	blt.n	14d4 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    14ba:	2201      	movs	r2, #1
    14bc:	4906      	ldr	r1, [pc, #24]	; (14d8 <arch_irq_disable+0x24>)
    14be:	0943      	lsrs	r3, r0, #5
    14c0:	f000 001f 	and.w	r0, r0, #31
    14c4:	4082      	lsls	r2, r0
    14c6:	3320      	adds	r3, #32
    14c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    14cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    14d0:	f3bf 8f6f 	isb	sy
}
    14d4:	4770      	bx	lr
    14d6:	bf00      	nop
    14d8:	e000e100 	.word	0xe000e100

000014dc <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    14dc:	4b05      	ldr	r3, [pc, #20]	; (14f4 <arch_irq_is_enabled+0x18>)
    14de:	0942      	lsrs	r2, r0, #5
    14e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    14e4:	2301      	movs	r3, #1
    14e6:	f000 001f 	and.w	r0, r0, #31
    14ea:	fa03 f000 	lsl.w	r0, r3, r0
}
    14ee:	4010      	ands	r0, r2
    14f0:	4770      	bx	lr
    14f2:	bf00      	nop
    14f4:	e000e100 	.word	0xe000e100

000014f8 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    14f8:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    14fa:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
    14fc:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1500:	bfac      	ite	ge
    1502:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1506:	4b06      	ldrlt	r3, [pc, #24]	; (1520 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1508:	ea4f 1141 	mov.w	r1, r1, lsl #5
    150c:	b2c9      	uxtb	r1, r1
    150e:	bfab      	itete	ge
    1510:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1514:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1518:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    151c:	5419      	strblt	r1, [r3, r0]
}
    151e:	4770      	bx	lr
    1520:	e000ed14 	.word	0xe000ed14

00001524 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1524:	bf30      	wfi
    b z_SysNmiOnReset
    1526:	f7ff bffd 	b.w	1524 <z_SysNmiOnReset>
    152a:	bf00      	nop

0000152c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    152c:	4a0b      	ldr	r2, [pc, #44]	; (155c <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    152e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1530:	4b0b      	ldr	r3, [pc, #44]	; (1560 <z_arm_prep_c+0x34>)
    1532:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1536:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1538:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    153c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1540:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1544:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1548:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    154c:	f001 fc10 	bl	2d70 <z_bss_zero>
	z_data_copy();
    1550:	f002 fa8e 	bl	3a70 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1554:	f000 f9fc 	bl	1950 <z_arm_interrupt_init>
	z_cstart();
    1558:	f001 fc4a 	bl	2df0 <z_cstart>
    155c:	00000000 	.word	0x00000000
    1560:	e000ed00 	.word	0xe000ed00

00001564 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1564:	4a09      	ldr	r2, [pc, #36]	; (158c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1566:	490a      	ldr	r1, [pc, #40]	; (1590 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1568:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    156a:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    156c:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
    156e:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1570:	4908      	ldr	r1, [pc, #32]	; (1594 <arch_swap+0x30>)
    1572:	684b      	ldr	r3, [r1, #4]
    1574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1578:	604b      	str	r3, [r1, #4]
    157a:	2300      	movs	r3, #0
    157c:	f383 8811 	msr	BASEPRI, r3
    1580:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1584:	6893      	ldr	r3, [r2, #8]
}
    1586:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1588:	4770      	bx	lr
    158a:	bf00      	nop
    158c:	2000095c 	.word	0x2000095c
    1590:	00005478 	.word	0x00005478
    1594:	e000ed00 	.word	0xe000ed00

00001598 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1598:	4913      	ldr	r1, [pc, #76]	; (15e8 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    159a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    159c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    15a0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    15a2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    15a6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    15aa:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    15ac:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    15b0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    15b4:	4f0d      	ldr	r7, [pc, #52]	; (15ec <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    15b6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    15ba:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    15bc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    15be:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    15c0:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    15c2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    15c4:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    15c6:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    15ca:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    15ce:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    15d2:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    15d6:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    15da:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    15dc:	f002 ff91 	bl	4502 <configure_builtin_stack_guard>
    pop {r2, lr}
    15e0:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    15e4:	4770      	bx	lr
    15e6:	0000      	.short	0x0000
    ldr r1, =_kernel
    15e8:	2000095c 	.word	0x2000095c
    ldr v4, =_SCS_ICSR
    15ec:	e000ed04 	.word	0xe000ed04

000015f0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    15f0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    15f4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    15f6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    15fa:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    15fe:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1600:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1604:	2902      	cmp	r1, #2
    beq _oops
    1606:	d0ff      	beq.n	1608 <_oops>

00001608 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1608:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    160a:	f002 ff6b 	bl	44e4 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    160e:	bd01      	pop	{r0, pc}

00001610 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1610:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1614:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    1616:	490b      	ldr	r1, [pc, #44]	; (1644 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    1618:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    161c:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    161e:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    1622:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1626:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    1628:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    162c:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1630:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1634:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1638:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    163a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    163c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    163e:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1640:	4770      	bx	lr
    1642:	bf00      	nop
    1644:	00004097 	.word	0x00004097

00001648 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1648:	4b08      	ldr	r3, [pc, #32]	; (166c <arch_switch_to_main_thread+0x24>)
    164a:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    164c:	6e43      	ldr	r3, [r0, #100]	; 0x64
    164e:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1652:	4610      	mov	r0, r2
    1654:	f381 8809 	msr	PSP, r1
    1658:	2100      	movs	r1, #0
    165a:	b663      	cpsie	if
    165c:	f381 8811 	msr	BASEPRI, r1
    1660:	f3bf 8f6f 	isb	sy
    1664:	2200      	movs	r2, #0
    1666:	2300      	movs	r3, #0
    1668:	f002 fd15 	bl	4096 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    166c:	2000095c 	.word	0x2000095c

00001670 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1670:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1672:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1674:	4a0b      	ldr	r2, [pc, #44]	; (16a4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1676:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    1678:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    167a:	bf1e      	ittt	ne
	movne	r1, #0
    167c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    167e:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    1680:	f003 fbed 	blne	4e5e <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1684:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1686:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    168a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    168e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1692:	4905      	ldr	r1, [pc, #20]	; (16a8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1694:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1696:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1698:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    169a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    169e:	4903      	ldr	r1, [pc, #12]	; (16ac <_isr_wrapper+0x3c>)
	bx r1
    16a0:	4708      	bx	r1
    16a2:	0000      	.short	0x0000
	ldr r2, =_kernel
    16a4:	2000095c 	.word	0x2000095c
	ldr r1, =_sw_isr_table
    16a8:	000050c4 	.word	0x000050c4
	ldr r1, =z_arm_int_exit
    16ac:	000016b1 	.word	0x000016b1

000016b0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    16b0:	4b04      	ldr	r3, [pc, #16]	; (16c4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    16b2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    16b4:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    16b6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    16b8:	d003      	beq.n	16c2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    16ba:	4903      	ldr	r1, [pc, #12]	; (16c8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    16bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    16c0:	600a      	str	r2, [r1, #0]

000016c2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    16c2:	4770      	bx	lr
	ldr r3, =_kernel
    16c4:	2000095c 	.word	0x2000095c
	ldr r1, =_SCS_ICSR
    16c8:	e000ed04 	.word	0xe000ed04

000016cc <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    16cc:	4b15      	ldr	r3, [pc, #84]	; (1724 <usage_fault.constprop.0+0x58>)
    16ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    16d0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    16d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    16d6:	bf14      	ite	ne
    16d8:	201e      	movne	r0, #30
    16da:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    16dc:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    16e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    16e2:	bf18      	it	ne
    16e4:	201f      	movne	r0, #31
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    16e6:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    16ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_STACK_CHK_FAIL;
    16ec:	bf18      	it	ne
    16ee:	2002      	movne	r0, #2
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    16f0:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    16f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    16f6:	bf18      	it	ne
    16f8:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    16fa:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    16fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    1700:	bf18      	it	ne
    1702:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    1704:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1708:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    170a:	bf18      	it	ne
    170c:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    170e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1712:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	return reason;
}
    1714:	bf18      	it	ne
    1716:	2024      	movne	r0, #36	; 0x24
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1718:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    171c:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1720:	629a      	str	r2, [r3, #40]	; 0x28
}
    1722:	4770      	bx	lr
    1724:	e000ed00 	.word	0xe000ed00

00001728 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1728:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    172a:	4b19      	ldr	r3, [pc, #100]	; (1790 <bus_fault.constprop.0+0x68>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    172c:	4602      	mov	r2, r0
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    172e:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1730:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    1732:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    1736:	bf14      	ite	ne
    1738:	2017      	movne	r0, #23
    173a:	2016      	moveq	r0, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
    173c:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1740:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
    1742:	bf18      	it	ne
    1744:	2018      	movne	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1746:	05a4      	lsls	r4, r4, #22
    1748:	d509      	bpl.n	175e <bus_fault.constprop.0+0x36>
		STORE_xFAR(bfar, SCB->BFAR);
    174a:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    174c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    174e:	0400      	lsls	r0, r0, #16
    1750:	d504      	bpl.n	175c <bus_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
    1752:	b11a      	cbz	r2, 175c <bus_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1754:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1756:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    175a:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    175c:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    175e:	4b0c      	ldr	r3, [pc, #48]	; (1790 <bus_fault.constprop.0+0x68>)
    1760:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    1762:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1766:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    1768:	bf18      	it	ne
    176a:	201a      	movne	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    176c:	05d2      	lsls	r2, r2, #23
    176e:	d40c      	bmi.n	178a <bus_fault.constprop.0+0x62>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    1772:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    1776:	bf18      	it	ne
    1778:	201c      	movne	r0, #28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    177a:	4a05      	ldr	r2, [pc, #20]	; (1790 <bus_fault.constprop.0+0x68>)
    177c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    177e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1782:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1784:	2300      	movs	r3, #0
    1786:	700b      	strb	r3, [r1, #0]
}
    1788:	bd10      	pop	{r4, pc}
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    178a:	201b      	movs	r0, #27
    178c:	e7f5      	b.n	177a <bus_fault.constprop.0+0x52>
    178e:	bf00      	nop
    1790:	e000ed00 	.word	0xe000ed00

00001794 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1794:	b510      	push	{r4, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1796:	4b1c      	ldr	r3, [pc, #112]	; (1808 <mem_manage_fault.constprop.0+0x74>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1798:	4602      	mov	r2, r0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    179a:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    179c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    179e:	f010 0f10 	tst.w	r0, #16
    17a2:	bf14      	ite	ne
    17a4:	2011      	movne	r0, #17
    17a6:	2010      	moveq	r0, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
    17a8:	f014 0f08 	tst.w	r4, #8
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    17ac:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
    17ae:	bf18      	it	ne
    17b0:	2012      	movne	r0, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    17b2:	07a4      	lsls	r4, r4, #30
    17b4:	d509      	bpl.n	17ca <mem_manage_fault.constprop.0+0x36>
		uint32_t temp = SCB->MMFAR;
    17b6:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    17b8:	6a98      	ldr	r0, [r3, #40]	; 0x28
    17ba:	0600      	lsls	r0, r0, #24
    17bc:	d504      	bpl.n	17c8 <mem_manage_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
    17be:	b11a      	cbz	r2, 17c8 <mem_manage_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    17c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    17c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    17c6:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    17c8:	2013      	movs	r0, #19
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    17ca:	4b0f      	ldr	r3, [pc, #60]	; (1808 <mem_manage_fault.constprop.0+0x74>)
    17cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    17ce:	f012 0f01 	tst.w	r2, #1
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    17d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    17d4:	bf18      	it	ne
    17d6:	2014      	movne	r0, #20
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    17d8:	f012 0f20 	tst.w	r2, #32
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    17dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    17de:	bf18      	it	ne
    17e0:	2015      	movne	r0, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    17e2:	06d4      	lsls	r4, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    17e4:	bf58      	it	pl
    17e6:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    17e8:	4b07      	ldr	r3, [pc, #28]	; (1808 <mem_manage_fault.constprop.0+0x74>)
    17ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    17ec:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    17ee:	bf42      	ittt	mi
    17f0:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    17f2:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    17f6:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    17f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    17fa:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    17fe:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1800:	2300      	movs	r3, #0
    1802:	700b      	strb	r3, [r1, #0]
}
    1804:	bd10      	pop	{r4, pc}
    1806:	bf00      	nop
    1808:	e000ed00 	.word	0xe000ed00

0000180c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    180c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    180e:	4b44      	ldr	r3, [pc, #272]	; (1920 <z_arm_fault+0x114>)
{
    1810:	4606      	mov	r6, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1812:	685b      	ldr	r3, [r3, #4]
    1814:	2500      	movs	r5, #0
{
    1816:	b08a      	sub	sp, #40	; 0x28
    1818:	f3c3 0308 	ubfx	r3, r3, #0, #9
    181c:	f385 8811 	msr	BASEPRI, r5
    1820:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1824:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    1828:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    182c:	d111      	bne.n	1852 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    182e:	f002 000c 	and.w	r0, r2, #12
    1832:	2808      	cmp	r0, #8
    1834:	d00d      	beq.n	1852 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1836:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    1838:	bf4c      	ite	mi
    183a:	460e      	movmi	r6, r1
			*nested_exc = true;
    183c:	2501      	movpl	r5, #1
	*recoverable = false;
    183e:	2200      	movs	r2, #0
	switch (fault) {
    1840:	3b03      	subs	r3, #3
	*recoverable = false;
    1842:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    1846:	2b03      	cmp	r3, #3
    1848:	d805      	bhi.n	1856 <z_arm_fault+0x4a>
    184a:	e8df f003 	tbb	[pc, r3]
    184e:	5c1e      	.short	0x5c1e
    1850:	5960      	.short	0x5960
		return NULL;
    1852:	462e      	mov	r6, r5
    1854:	e7f3      	b.n	183e <z_arm_fault+0x32>
    1856:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1858:	f89d 3007 	ldrb.w	r3, [sp, #7]
    185c:	b99b      	cbnz	r3, 1886 <z_arm_fault+0x7a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    185e:	2220      	movs	r2, #32
    1860:	4631      	mov	r1, r6
    1862:	a802      	add	r0, sp, #8
    1864:	f002 fe91 	bl	458a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1868:	9b09      	ldr	r3, [sp, #36]	; 0x24
    186a:	2d00      	cmp	r5, #0
    186c:	d053      	beq.n	1916 <z_arm_fault+0x10a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    186e:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1872:	b922      	cbnz	r2, 187e <z_arm_fault+0x72>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1874:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1878:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    187c:	9309      	str	r3, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    187e:	4620      	mov	r0, r4
    1880:	a902      	add	r1, sp, #8
    1882:	f002 fe2d 	bl	44e0 <z_arm_fatal_error>
}
    1886:	b00a      	add	sp, #40	; 0x28
    1888:	bd70      	pop	{r4, r5, r6, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    188a:	4b25      	ldr	r3, [pc, #148]	; (1920 <z_arm_fault+0x114>)
    188c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    188e:	0791      	lsls	r1, r2, #30
    1890:	d4e1      	bmi.n	1856 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1894:	2a00      	cmp	r2, #0
    1896:	dbde      	blt.n	1856 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    189a:	0052      	lsls	r2, r2, #1
    189c:	d5db      	bpl.n	1856 <z_arm_fault+0x4a>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    189e:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    18a0:	69b1      	ldr	r1, [r6, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    18a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    18a6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    18a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    18ac:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    18b0:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    18b2:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    18b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    18ba:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    18bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    18c0:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    18c4:	f64d 7202 	movw	r2, #57090	; 0xdf02
    18c8:	4291      	cmp	r1, r2
    18ca:	d009      	beq.n	18e0 <z_arm_fault+0xd4>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    18cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    18ce:	b2d2      	uxtb	r2, r2
    18d0:	b142      	cbz	r2, 18e4 <z_arm_fault+0xd8>
			reason = mem_manage_fault(esf, 1, recoverable);
    18d2:	2001      	movs	r0, #1
    18d4:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    18d8:	f7ff ff5c 	bl	1794 <mem_manage_fault.constprop.0>
		reason = usage_fault(esf);
    18dc:	4604      	mov	r4, r0
		break;
    18de:	e7bb      	b.n	1858 <z_arm_fault+0x4c>
			reason = esf->basic.r0;
    18e0:	6834      	ldr	r4, [r6, #0]
    18e2:	e7b9      	b.n	1858 <z_arm_fault+0x4c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    18e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    18e6:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    18ea:	d005      	beq.n	18f8 <z_arm_fault+0xec>
			reason = bus_fault(esf, 1, recoverable);
    18ec:	2001      	movs	r0, #1
    18ee:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    18f2:	f7ff ff19 	bl	1728 <bus_fault.constprop.0>
    18f6:	e7f1      	b.n	18dc <z_arm_fault+0xd0>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    18f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    18fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    18fe:	d3aa      	bcc.n	1856 <z_arm_fault+0x4a>
		reason = usage_fault(esf);
    1900:	f7ff fee4 	bl	16cc <usage_fault.constprop.0>
    1904:	e7ea      	b.n	18dc <z_arm_fault+0xd0>
		reason = mem_manage_fault(esf, 0, recoverable);
    1906:	2000      	movs	r0, #0
    1908:	f10d 0107 	add.w	r1, sp, #7
    190c:	e7e4      	b.n	18d8 <z_arm_fault+0xcc>
		reason = bus_fault(esf, 0, recoverable);
    190e:	2000      	movs	r0, #0
    1910:	f10d 0107 	add.w	r1, sp, #7
    1914:	e7ed      	b.n	18f2 <z_arm_fault+0xe6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1916:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    191a:	f023 0301 	bic.w	r3, r3, #1
    191e:	e7ad      	b.n	187c <z_arm_fault+0x70>
    1920:	e000ed00 	.word	0xe000ed00

00001924 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1924:	4b04      	ldr	r3, [pc, #16]	; (1938 <z_arm_fault_init+0x14>)
    1926:	695a      	ldr	r2, [r3, #20]
    1928:	f042 0210 	orr.w	r2, r2, #16
    192c:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    192e:	695a      	ldr	r2, [r3, #20]
    1930:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    1934:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    1936:	4770      	bx	lr
    1938:	e000ed00 	.word	0xe000ed00

0000193c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    193c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1940:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1944:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1946:	4672      	mov	r2, lr
	bl z_arm_fault
    1948:	f7ff ff60 	bl	180c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    194c:	bd01      	pop	{r0, pc}
    194e:	bf00      	nop

00001950 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1950:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1952:	2120      	movs	r1, #32
    1954:	4803      	ldr	r0, [pc, #12]	; (1964 <z_arm_interrupt_init+0x14>)
    1956:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1958:	3301      	adds	r3, #1
    195a:	2b45      	cmp	r3, #69	; 0x45
    195c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1960:	d1f9      	bne.n	1956 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1962:	4770      	bx	lr
    1964:	e000e100 	.word	0xe000e100

00001968 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1968:	2000      	movs	r0, #0
    msr CONTROL, r0
    196a:	f380 8814 	msr	CONTROL, r0
    isb
    196e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    1972:	2000      	movs	r0, #0
    msr MSPLIM, r0
    1974:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    1978:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    197c:	f7ff fb3e 	bl	ffc <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1980:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1982:	490e      	ldr	r1, [pc, #56]	; (19bc <__start+0x54>)
    str r0, [r1]
    1984:	6008      	str	r0, [r1, #0]
    dsb
    1986:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    198a:	480d      	ldr	r0, [pc, #52]	; (19c0 <__start+0x58>)
    msr msp, r0
    198c:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1990:	f000 f83e 	bl	1a10 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1994:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1996:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    199a:	480a      	ldr	r0, [pc, #40]	; (19c4 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    199c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    19a0:	1840      	adds	r0, r0, r1
    msr PSP, r0
    19a2:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    19a6:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    19aa:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    19ac:	4308      	orrs	r0, r1
    msr CONTROL, r0
    19ae:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    19b2:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    19b6:	f7ff fdb9 	bl	152c <z_arm_prep_c>
    19ba:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    19bc:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    19c0:	20001d00 	.word	0x20001d00
    ldr r0, =z_interrupt_stacks
    19c4:	20000fc0 	.word	0x20000fc0

000019c8 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    19c8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    19cc:	4905      	ldr	r1, [pc, #20]	; (19e4 <sys_arch_reboot+0x1c>)
    19ce:	4b06      	ldr	r3, [pc, #24]	; (19e8 <sys_arch_reboot+0x20>)
    19d0:	68ca      	ldr	r2, [r1, #12]
    19d2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    19d6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    19d8:	60cb      	str	r3, [r1, #12]
    19da:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    19de:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    19e0:	e7fd      	b.n	19de <sys_arch_reboot+0x16>
    19e2:	bf00      	nop
    19e4:	e000ed00 	.word	0xe000ed00
    19e8:	05fa0004 	.word	0x05fa0004

000019ec <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    19ec:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    19ee:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    19f0:	4906      	ldr	r1, [pc, #24]	; (1a0c <z_arm_clear_arm_mpu_config+0x20>)
    19f2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    19f6:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    19fa:	4293      	cmp	r3, r2
    19fc:	db00      	blt.n	1a00 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    19fe:	4770      	bx	lr
  mpu->RNR = rnr;
    1a00:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    1a04:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    1a08:	3301      	adds	r3, #1
    1a0a:	e7f6      	b.n	19fa <z_arm_clear_arm_mpu_config+0xe>
    1a0c:	e000ed00 	.word	0xe000ed00

00001a10 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1a10:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1a12:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1a14:	2400      	movs	r4, #0
    1a16:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    1a1a:	f7ff ffe7 	bl	19ec <z_arm_clear_arm_mpu_config>
    1a1e:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1a20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1a24:	4a0c      	ldr	r2, [pc, #48]	; (1a58 <z_arm_init_arch_hw_at_boot+0x48>)
    1a26:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1a2a:	3301      	adds	r3, #1
    1a2c:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    1a2e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1a32:	d1f8      	bne.n	1a26 <z_arm_init_arch_hw_at_boot+0x16>
    1a34:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1a36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1a3a:	4a07      	ldr	r2, [pc, #28]	; (1a58 <z_arm_init_arch_hw_at_boot+0x48>)
    1a3c:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1a40:	3301      	adds	r3, #1
    1a42:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1a44:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1a48:	d1f8      	bne.n	1a3c <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    1a4a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    1a4c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a50:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1a54:	bd10      	pop	{r4, pc}
    1a56:	bf00      	nop
    1a58:	e000e100 	.word	0xe000e100

00001a5c <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    1a5c:	4b08      	ldr	r3, [pc, #32]	; (1a80 <z_impl_k_thread_abort+0x24>)
    1a5e:	689b      	ldr	r3, [r3, #8]
    1a60:	4283      	cmp	r3, r0
    1a62:	d10b      	bne.n	1a7c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1a64:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1a68:	b143      	cbz	r3, 1a7c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1a6a:	4b06      	ldr	r3, [pc, #24]	; (1a84 <z_impl_k_thread_abort+0x28>)
    1a6c:	685a      	ldr	r2, [r3, #4]
    1a6e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1a72:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    1a74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1a76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1a7a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    1a7c:	f001 bf98 	b.w	39b0 <z_thread_abort>
    1a80:	2000095c 	.word	0x2000095c
    1a84:	e000ed00 	.word	0xe000ed00

00001a88 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    1a88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1a8a:	4c09      	ldr	r4, [pc, #36]	; (1ab0 <z_arm_configure_static_mpu_regions+0x28>)
    1a8c:	4a09      	ldr	r2, [pc, #36]	; (1ab4 <z_arm_configure_static_mpu_regions+0x2c>)
    1a8e:	4623      	mov	r3, r4
    1a90:	2101      	movs	r1, #1
    1a92:	4809      	ldr	r0, [pc, #36]	; (1ab8 <z_arm_configure_static_mpu_regions+0x30>)
    1a94:	f000 f8ea 	bl	1c6c <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    1a98:	2300      	movs	r3, #0
    1a9a:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    1a9c:	4b07      	ldr	r3, [pc, #28]	; (1abc <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1a9e:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    1aa0:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1aa2:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    1aa4:	9301      	str	r3, [sp, #4]
    1aa6:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1aa8:	f000 f8ea 	bl	1c80 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    1aac:	b004      	add	sp, #16
    1aae:	bd10      	pop	{r4, pc}
    1ab0:	20080000 	.word	0x20080000
    1ab4:	20000000 	.word	0x20000000
    1ab8:	00005384 	.word	0x00005384
    1abc:	20000150 	.word	0x20000150

00001ac0 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    1ac0:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
    1ac2:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    1ac4:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    1ac6:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
    1aca:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    1ace:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    1ad0:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    1ad2:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    1ad4:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
    1ad8:	4905      	ldr	r1, [pc, #20]	; (1af0 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    1ada:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    1ade:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
    1ae2:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
    1ae6:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
    1aea:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    1aee:	bd10      	pop	{r4, pc}
    1af0:	e000ed00 	.word	0xe000ed00

00001af4 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    1af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1af8:	460f      	mov	r7, r1
    1afa:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    1afc:	4606      	mov	r6, r0
    1afe:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = rnr;
    1b02:	4d4e      	ldr	r5, [pc, #312]	; (1c3c <mpu_configure_regions_and_partition.constprop.0+0x148>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    1b04:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    1b06:	45b8      	cmp	r8, r7
    1b08:	f280 8094 	bge.w	1c34 <mpu_configure_regions_and_partition.constprop.0+0x140>
		if (regions[i].size == 0U) {
    1b0c:	f8d6 9004 	ldr.w	r9, [r6, #4]
    1b10:	f1b9 0f00 	cmp.w	r9, #0
    1b14:	d036      	beq.n	1b84 <mpu_configure_regions_and_partition.constprop.0+0x90>
		&&
    1b16:	f1b9 0f1f 	cmp.w	r9, #31
    1b1a:	f240 8089 	bls.w	1c30 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		&&
    1b1e:	f019 0f1f 	tst.w	r9, #31
    1b22:	f040 8085 	bne.w	1c30 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		((part->start &
    1b26:	f8d6 a000 	ldr.w	sl, [r6]
		&&
    1b2a:	f01a 0f1f 	tst.w	sl, #31
    1b2e:	d17f      	bne.n	1c30 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1b30:	4650      	mov	r0, sl
    1b32:	f002 fcea 	bl	450a <arm_cmse_mpu_region_get>
    1b36:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1b38:	eb09 000a 	add.w	r0, r9, sl
    1b3c:	3801      	subs	r0, #1
    1b3e:	f002 fce4 	bl	450a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    1b42:	4583      	cmp	fp, r0
    1b44:	d174      	bne.n	1c30 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
    1b46:	f11b 0f16 	cmn.w	fp, #22
    1b4a:	d071      	beq.n	1c30 <mpu_configure_regions_and_partition.constprop.0+0x13c>
    1b4c:	455c      	cmp	r4, fp
    1b4e:	dd6f      	ble.n	1c30 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	MPU->RNR = rnr;
    1b50:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    1b54:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
    1b58:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RLAR;
    1b5c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    1b60:	f021 011f 	bic.w	r1, r1, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    1b64:	f043 0a1f 	orr.w	sl, r3, #31
		 * The new memory region is to be placed inside the underlying
		 * region, possibly splitting the underlying region into two.
		 */
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
		uint32_t u_reg_last = mpu_region_get_last_addr(u_reg_index);
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    1b68:	e9d6 3200 	ldrd	r3, r2, [r6]
    1b6c:	441a      	add	r2, r3

		if ((regions[i].start == u_reg_base) &&
    1b6e:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    1b70:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
		if ((regions[i].start == u_reg_base) &&
    1b74:	d11e      	bne.n	1bb4 <mpu_configure_regions_and_partition.constprop.0+0xc0>
    1b76:	45ca      	cmp	sl, r9
    1b78:	d108      	bne.n	1b8c <mpu_configure_regions_and_partition.constprop.0+0x98>
			 * underlying region. In this case we simply
			 * update the partition attributes of the
			 * underlying region with those of the new
			 * region.
			 */
			mpu_configure_region(u_reg_index, &regions[i]);
    1b7a:	4631      	mov	r1, r6
    1b7c:	fa5f f08b 	uxtb.w	r0, fp
    1b80:	f002 fccc 	bl	451c <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    1b84:	f108 0801 	add.w	r8, r8, #1
    1b88:	360c      	adds	r6, #12
    1b8a:	e7bc      	b.n	1b06 <mpu_configure_regions_and_partition.constprop.0+0x12>
			 */
			mpu_region_set_base(u_reg_index,
				regions[i].start + regions[i].size);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    1b8c:	4631      	mov	r1, r6
	MPU->RNR = rnr;
    1b8e:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    1b92:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
    1b96:	f022 021f 	bic.w	r2, r2, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    1b9a:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    1b9e:	4313      	orrs	r3, r2
	MPU->RBAR = rbar;
    1ba0:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    1ba4:	b2e0      	uxtb	r0, r4
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    1ba6:	f002 fcb9 	bl	451c <mpu_configure_region>

			if (reg_index == -EINVAL) {
    1baa:	f110 0f16 	cmn.w	r0, #22
    1bae:	d03f      	beq.n	1c30 <mpu_configure_regions_and_partition.constprop.0+0x13c>

			if (reg_index == -EINVAL) {
				return reg_index;
			}

			reg_index++;
    1bb0:	1c44      	adds	r4, r0, #1
    1bb2:	e7e7      	b.n	1b84 <mpu_configure_regions_and_partition.constprop.0+0x90>
	MPU->RNR = rnr;
    1bb4:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RLAR;
    1bb8:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				regions[i].start - 1);
    1bbc:	3b01      	subs	r3, #1
		     | (limit & MPU_RLAR_LIMIT_Msk));
    1bbe:	f023 031f 	bic.w	r3, r3, #31
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    1bc2:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    1bc6:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    1bc8:	45ca      	cmp	sl, r9
				mpu_configure_region(reg_index, &regions[i]);
    1bca:	4631      	mov	r1, r6
				mpu_configure_region(reg_index, &regions[i]);
    1bcc:	b2e0      	uxtb	r0, r4
	MPU->RLAR = rlar;
    1bce:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		} else if (reg_last == u_reg_last) {
    1bd2:	d0e8      	beq.n	1ba6 <mpu_configure_regions_and_partition.constprop.0+0xb2>
				mpu_configure_region(reg_index, &regions[i]);
    1bd4:	f002 fca2 	bl	451c <mpu_configure_region>
			if (reg_index == -EINVAL) {
    1bd8:	f110 0f16 	cmn.w	r0, #22
    1bdc:	d028      	beq.n	1c30 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	MPU->RNR = rnr;
    1bde:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    1be2:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    1be6:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    1bea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	attr->rbar = mpu_get_rbar() &
    1bee:	f362 0304 	bfi	r3, r2, #0, #5
    1bf2:	f88d 3008 	strb.w	r3, [sp, #8]
	return MPU->RLAR;
    1bf6:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    1bfa:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1bfe:	085b      	lsrs	r3, r3, #1
    1c00:	f363 1247 	bfi	r2, r3, #5, #3
    1c04:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    1c08:	e9d6 3200 	ldrd	r3, r2, [r6]
    1c0c:	4413      	add	r3, r2
    1c0e:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    1c10:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    1c14:	1c41      	adds	r1, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    1c16:	4453      	add	r3, sl
    1c18:	eba3 0309 	sub.w	r3, r3, r9
    1c1c:	b2c8      	uxtb	r0, r1
    1c1e:	f023 031f 	bic.w	r3, r3, #31

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    1c22:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
    1c24:	9303      	str	r3, [sp, #12]
    1c26:	d803      	bhi.n	1c30 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    1c28:	4669      	mov	r1, sp
    1c2a:	f7ff ff49 	bl	1ac0 <region_init>
    1c2e:	e7bf      	b.n	1bb0 <mpu_configure_regions_and_partition.constprop.0+0xbc>
			return -EINVAL;
    1c30:	f06f 0415 	mvn.w	r4, #21
		}
	}

	return reg_index;
}
    1c34:	4620      	mov	r0, r4
    1c36:	b005      	add	sp, #20
    1c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c3c:	e000ed00 	.word	0xe000ed00

00001c40 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1c40:	2205      	movs	r2, #5
    1c42:	4b04      	ldr	r3, [pc, #16]	; (1c54 <arm_core_mpu_enable+0x14>)
    1c44:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    1c48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1c4c:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1c50:	4770      	bx	lr
    1c52:	bf00      	nop
    1c54:	e000ed00 	.word	0xe000ed00

00001c58 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1c58:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1c5c:	2200      	movs	r2, #0
    1c5e:	4b02      	ldr	r3, [pc, #8]	; (1c68 <arm_core_mpu_disable+0x10>)
    1c60:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    1c64:	4770      	bx	lr
    1c66:	bf00      	nop
    1c68:	e000ed00 	.word	0xe000ed00

00001c6c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    1c6c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    1c6e:	4c03      	ldr	r4, [pc, #12]	; (1c7c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    1c70:	7822      	ldrb	r2, [r4, #0]
    1c72:	f7ff ff3f 	bl	1af4 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1c76:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    1c78:	bd10      	pop	{r4, pc}
    1c7a:	bf00      	nop
    1c7c:	20000b88 	.word	0x20000b88

00001c80 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    1c80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c84:	4d29      	ldr	r5, [pc, #164]	; (1d2c <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
    1c86:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
    1c88:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1c8a:	f04f 0800 	mov.w	r8, #0
    1c8e:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
    1c90:	4f27      	ldr	r7, [pc, #156]	; (1d30 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1c92:	45d0      	cmp	r8, sl
    1c94:	da1b      	bge.n	1cce <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    1c96:	f8d6 9004 	ldr.w	r9, [r6, #4]
    1c9a:	f1b9 0f00 	cmp.w	r9, #0
    1c9e:	d03f      	beq.n	1d20 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    1ca0:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1ca2:	4608      	mov	r0, r1
    1ca4:	9101      	str	r1, [sp, #4]
    1ca6:	f002 fc30 	bl	450a <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1caa:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1cac:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1cae:	eb09 0001 	add.w	r0, r9, r1
    1cb2:	3801      	subs	r0, #1
    1cb4:	f002 fc29 	bl	450a <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    1cb8:	4284      	cmp	r4, r0
    1cba:	f04f 0214 	mov.w	r2, #20
    1cbe:	4b1d      	ldr	r3, [pc, #116]	; (1d34 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
    1cc0:	d008      	beq.n	1cd4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    1cc2:	fb02 f308 	mul.w	r3, r2, r8
    1cc6:	f06f 0215 	mvn.w	r2, #21
    1cca:	f84b 2003 	str.w	r2, [fp, r3]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    1cce:	b003      	add	sp, #12
    1cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    1cd4:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    1cd8:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    1cda:	d0f8      	beq.n	1cce <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    1cdc:	7819      	ldrb	r1, [r3, #0]
    1cde:	42a1      	cmp	r1, r4
    1ce0:	ddf5      	ble.n	1cce <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
    1ce2:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
    1ce6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
    1cea:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
    1cee:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    1cf2:	f100 0108 	add.w	r1, r0, #8
    1cf6:	7b00      	ldrb	r0, [r0, #12]
    1cf8:	f364 0004 	bfi	r0, r4, #0, #5
    1cfc:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
    1cfe:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    1d02:	790c      	ldrb	r4, [r1, #4]
    1d04:	0840      	lsrs	r0, r0, #1
    1d06:	f360 1447 	bfi	r4, r0, #5, #3
    1d0a:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
    1d0c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    1d10:	f021 011f 	bic.w	r1, r1, #31
    1d14:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
    1d16:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    1d1a:	f021 011f 	bic.w	r1, r1, #31
    1d1e:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1d20:	f108 0801 	add.w	r8, r8, #1
    1d24:	3514      	adds	r5, #20
    1d26:	360c      	adds	r6, #12
    1d28:	e7b3      	b.n	1c92 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    1d2a:	bf00      	nop
    1d2c:	200007d4 	.word	0x200007d4
    1d30:	e000ed00 	.word	0xe000ed00
    1d34:	20000b88 	.word	0x20000b88

00001d38 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    1d38:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1d3a:	4d0e      	ldr	r5, [pc, #56]	; (1d74 <z_arm_mpu_init+0x3c>)
    1d3c:	682c      	ldr	r4, [r5, #0]
    1d3e:	2c08      	cmp	r4, #8
    1d40:	d815      	bhi.n	1d6e <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1d42:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    1d44:	f7ff ff88 	bl	1c58 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
    1d48:	4b0b      	ldr	r3, [pc, #44]	; (1d78 <z_arm_mpu_init+0x40>)
    1d4a:	4a0c      	ldr	r2, [pc, #48]	; (1d7c <z_arm_mpu_init+0x44>)
    1d4c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1d50:	4284      	cmp	r4, r0
    1d52:	d105      	bne.n	1d60 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1d54:	4b0a      	ldr	r3, [pc, #40]	; (1d80 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    1d56:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
    1d58:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    1d5a:	f7ff ff71 	bl	1c40 <arm_core_mpu_enable>
}
    1d5e:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    1d60:	6869      	ldr	r1, [r5, #4]
    1d62:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    1d66:	f7ff feab 	bl	1ac0 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1d6a:	3001      	adds	r0, #1
    1d6c:	e7f0      	b.n	1d50 <z_arm_mpu_init+0x18>
		return -1;
    1d6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1d72:	e7f4      	b.n	1d5e <z_arm_mpu_init+0x26>
    1d74:	00005390 	.word	0x00005390
    1d78:	e000ed00 	.word	0xe000ed00
    1d7c:	0044ffaa 	.word	0x0044ffaa
    1d80:	20000b88 	.word	0x20000b88

00001d84 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    1d84:	4b01      	ldr	r3, [pc, #4]	; (1d8c <__stdout_hook_install+0x8>)
    1d86:	6018      	str	r0, [r3, #0]
}
    1d88:	4770      	bx	lr
    1d8a:	bf00      	nop
    1d8c:	20000028 	.word	0x20000028

00001d90 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1d90:	4b08      	ldr	r3, [pc, #32]	; (1db4 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1d92:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1d94:	1ac3      	subs	r3, r0, r3
{
    1d96:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1d98:	4907      	ldr	r1, [pc, #28]	; (1db8 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    1d9a:	109b      	asrs	r3, r3, #2
{
    1d9c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1d9e:	4359      	muls	r1, r3
    1da0:	2240      	movs	r2, #64	; 0x40
    1da2:	4806      	ldr	r0, [pc, #24]	; (1dbc <onoff_stop+0x2c>)
    1da4:	f002 fc24 	bl	45f0 <stop>
	notify(mgr, res);
    1da8:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1daa:	4601      	mov	r1, r0
	notify(mgr, res);
    1dac:	4620      	mov	r0, r4
}
    1dae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    1db2:	4718      	bx	r3
    1db4:	200007fc 	.word	0x200007fc
    1db8:	b6db6db7 	.word	0xb6db6db7
    1dbc:	00005094 	.word	0x00005094

00001dc0 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1dc0:	2340      	movs	r3, #64	; 0x40
{
    1dc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1dc4:	4c0b      	ldr	r4, [pc, #44]	; (1df4 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1dc6:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    1dc8:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1dca:	460b      	mov	r3, r1
{
    1dcc:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1dce:	490a      	ldr	r1, [pc, #40]	; (1df8 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
    1dd0:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1dd2:	4361      	muls	r1, r4
{
    1dd4:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1dd6:	4a09      	ldr	r2, [pc, #36]	; (1dfc <onoff_start+0x3c>)
    1dd8:	4809      	ldr	r0, [pc, #36]	; (1e00 <onoff_start+0x40>)
    1dda:	f002 fc36 	bl	464a <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    1dde:	1e01      	subs	r1, r0, #0
    1de0:	da05      	bge.n	1dee <onoff_start+0x2e>
		notify(mgr, err);
    1de2:	4630      	mov	r0, r6
    1de4:	462b      	mov	r3, r5
	}
}
    1de6:	b002      	add	sp, #8
    1de8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    1dec:	4718      	bx	r3
}
    1dee:	b002      	add	sp, #8
    1df0:	bd70      	pop	{r4, r5, r6, pc}
    1df2:	bf00      	nop
    1df4:	200007fc 	.word	0x200007fc
    1df8:	b6db6db7 	.word	0xb6db6db7
    1dfc:	000046b7 	.word	0x000046b7
    1e00:	00005094 	.word	0x00005094

00001e04 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    1e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1e08:	2200      	movs	r2, #0
    1e0a:	2101      	movs	r1, #1
{
    1e0c:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1e0e:	2005      	movs	r0, #5
    1e10:	f7ff fb72 	bl	14f8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1e14:	4811      	ldr	r0, [pc, #68]	; (1e5c <clk_init+0x58>)
    1e16:	f000 fe9d 	bl	2b54 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1e1a:	4b11      	ldr	r3, [pc, #68]	; (1e60 <clk_init+0x5c>)
    1e1c:	4298      	cmp	r0, r3
    1e1e:	d119      	bne.n	1e54 <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1e20:	f002 fed3 	bl	4bca <nrfx_clock_enable>
    1e24:	2400      	movs	r4, #0
	return &data->mgr[type];
    1e26:	f04f 091c 	mov.w	r9, #28
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1e2a:	270c      	movs	r7, #12
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1e2c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 1e64 <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
    1e30:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1e32:	4641      	mov	r1, r8
    1e34:	fb09 5004 	mla	r0, r9, r4, r5
    1e38:	f002 fa61 	bl	42fe <onoff_manager_init>
		if (err < 0) {
    1e3c:	2800      	cmp	r0, #0
    1e3e:	db07      	blt.n	1e50 <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1e40:	2301      	movs	r3, #1
    1e42:	fb07 5504 	mla	r5, r7, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    1e46:	441c      	add	r4, r3
    1e48:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1e4a:	67ab      	str	r3, [r5, #120]	; 0x78
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    1e4c:	d1f0      	bne.n	1e30 <clk_init+0x2c>
	}

	return 0;
    1e4e:	2000      	movs	r0, #0
}
    1e50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    1e54:	f06f 0004 	mvn.w	r0, #4
    1e58:	e7fa      	b.n	1e50 <clk_init+0x4c>
    1e5a:	bf00      	nop
    1e5c:	00001e9d 	.word	0x00001e9d
    1e60:	0bad0000 	.word	0x0bad0000
    1e64:	000053b8 	.word	0x000053b8

00001e68 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    1e68:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    1e6a:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    1e6c:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    1e6e:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    1e70:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    1e72:	4808      	ldr	r0, [pc, #32]	; (1e94 <clkstarted_handle.constprop.0+0x2c>)
    1e74:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    1e76:	3378      	adds	r3, #120	; 0x78
    1e78:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
    1e7a:	e9d4 561c 	ldrd	r5, r6, [r4, #112]	; 0x70
	sub_data->cb = NULL;
    1e7e:	6722      	str	r2, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    1e80:	f002 fba3 	bl	45ca <set_on_state>
	if (callback) {
    1e84:	b12d      	cbz	r5, 1e92 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    1e86:	4632      	mov	r2, r6
    1e88:	462b      	mov	r3, r5
}
    1e8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    1e8e:	4802      	ldr	r0, [pc, #8]	; (1e98 <clkstarted_handle.constprop.0+0x30>)
    1e90:	4718      	bx	r3
}
    1e92:	bd70      	pop	{r4, r5, r6, pc}
    1e94:	200007fc 	.word	0x200007fc
    1e98:	00005094 	.word	0x00005094

00001e9c <clock_event_handler>:
	switch (event) {
    1e9c:	2805      	cmp	r0, #5
    1e9e:	d811      	bhi.n	1ec4 <clock_event_handler+0x28>
    1ea0:	e8df f000 	tbb	[pc, r0]
    1ea4:	10100e03 	.word	0x10100e03
    1ea8:	0a0c      	.short	0x0a0c
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1eaa:	4b07      	ldr	r3, [pc, #28]	; (1ec8 <clock_event_handler+0x2c>)
    1eac:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1eae:	f010 0007 	ands.w	r0, r0, #7
    1eb2:	d107      	bne.n	1ec4 <clock_event_handler+0x28>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1eb4:	f7ff bfd8 	b.w	1e68 <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    1eb8:	2002      	movs	r0, #2
    1eba:	e7fb      	b.n	1eb4 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    1ebc:	2003      	movs	r0, #3
    1ebe:	e7f9      	b.n	1eb4 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1ec0:	2001      	movs	r0, #1
    1ec2:	e7f7      	b.n	1eb4 <clock_event_handler+0x18>
}
    1ec4:	4770      	bx	lr
    1ec6:	bf00      	nop
    1ec8:	200007fc 	.word	0x200007fc

00001ecc <generic_hfclk_start>:
{
    1ecc:	b508      	push	{r3, lr}
	__asm__ volatile(
    1ece:	f04f 0320 	mov.w	r3, #32
    1ed2:	f3ef 8111 	mrs	r1, BASEPRI
    1ed6:	f383 8812 	msr	BASEPRI_MAX, r3
    1eda:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1ede:	4a12      	ldr	r2, [pc, #72]	; (1f28 <generic_hfclk_start+0x5c>)
    1ee0:	6813      	ldr	r3, [r2, #0]
    1ee2:	f043 0002 	orr.w	r0, r3, #2
    1ee6:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1ee8:	07da      	lsls	r2, r3, #31
    1eea:	d408      	bmi.n	1efe <generic_hfclk_start+0x32>
	__asm__ volatile(
    1eec:	f381 8811 	msr	BASEPRI, r1
    1ef0:	f3bf 8f6f 	isb	sy
}
    1ef4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    1ef8:	2001      	movs	r0, #1
    1efa:	f002 be78 	b.w	4bee <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1efe:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1f02:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1f06:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1f0a:	07d3      	lsls	r3, r2, #31
    1f0c:	d5ee      	bpl.n	1eec <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    1f0e:	4807      	ldr	r0, [pc, #28]	; (1f2c <generic_hfclk_start+0x60>)
    1f10:	f002 fb5b 	bl	45ca <set_on_state>
    1f14:	f381 8811 	msr	BASEPRI, r1
    1f18:	f3bf 8f6f 	isb	sy
}
    1f1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    1f20:	2000      	movs	r0, #0
    1f22:	f7ff bfa1 	b.w	1e68 <clkstarted_handle.constprop.0>
    1f26:	bf00      	nop
    1f28:	2000089c 	.word	0x2000089c
    1f2c:	20000874 	.word	0x20000874

00001f30 <api_blocking_start>:
{
    1f30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1f32:	2200      	movs	r2, #0
    1f34:	2301      	movs	r3, #1
    1f36:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1f3a:	466b      	mov	r3, sp
    1f3c:	4a08      	ldr	r2, [pc, #32]	; (1f60 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1f3e:	f8cd d000 	str.w	sp, [sp]
    1f42:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1f46:	f002 fbaf 	bl	46a8 <api_start>
	if (err < 0) {
    1f4a:	2800      	cmp	r0, #0
    1f4c:	db05      	blt.n	1f5a <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    1f4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1f52:	2300      	movs	r3, #0
    1f54:	4668      	mov	r0, sp
    1f56:	f001 fa21 	bl	339c <z_impl_k_sem_take>
}
    1f5a:	b005      	add	sp, #20
    1f5c:	f85d fb04 	ldr.w	pc, [sp], #4
    1f60:	000046ed 	.word	0x000046ed

00001f64 <generic_hfclk_stop>:
{
    1f64:	b510      	push	{r4, lr}
	__asm__ volatile(
    1f66:	f04f 0320 	mov.w	r3, #32
    1f6a:	f3ef 8411 	mrs	r4, BASEPRI
    1f6e:	f383 8812 	msr	BASEPRI_MAX, r3
    1f72:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    1f76:	4a07      	ldr	r2, [pc, #28]	; (1f94 <generic_hfclk_stop+0x30>)
    1f78:	6813      	ldr	r3, [r2, #0]
    1f7a:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    1f7e:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    1f80:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    1f82:	d402      	bmi.n	1f8a <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    1f84:	2001      	movs	r0, #1
    1f86:	f002 fe91 	bl	4cac <nrfx_clock_stop>
	__asm__ volatile(
    1f8a:	f384 8811 	msr	BASEPRI, r4
    1f8e:	f3bf 8f6f 	isb	sy
}
    1f92:	bd10      	pop	{r4, pc}
    1f94:	2000089c 	.word	0x2000089c

00001f98 <z_nrf_clock_control_lf_on>:
{
    1f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1f9c:	2201      	movs	r2, #1
    1f9e:	4607      	mov	r7, r0
    1fa0:	4937      	ldr	r1, [pc, #220]	; (2080 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x80>)
    1fa2:	e8d1 3fef 	ldaex	r3, [r1]
    1fa6:	e8c1 2fe0 	stlex	r0, r2, [r1]
    1faa:	2800      	cmp	r0, #0
    1fac:	d1f9      	bne.n	1fa2 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    1fae:	b933      	cbnz	r3, 1fbe <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1fb0:	4934      	ldr	r1, [pc, #208]	; (2084 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x84>)
		err = onoff_request(mgr, &cli);
    1fb2:	4835      	ldr	r0, [pc, #212]	; (2088 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x88>)
    1fb4:	604b      	str	r3, [r1, #4]
    1fb6:	60cb      	str	r3, [r1, #12]
    1fb8:	608a      	str	r2, [r1, #8]
    1fba:	f002 f9b3 	bl	4324 <onoff_request>
	switch (start_mode) {
    1fbe:	1e7b      	subs	r3, r7, #1
    1fc0:	2b01      	cmp	r3, #1
    1fc2:	d82b      	bhi.n	201c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1fc4:	2f01      	cmp	r7, #1
    1fc6:	d107      	bne.n	1fd8 <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1fc8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1fcc:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1fd0:	f003 0303 	and.w	r3, r3, #3
    1fd4:	2b02      	cmp	r3, #2
    1fd6:	d021      	beq.n	201c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1fd8:	f002 ff3b 	bl	4e52 <k_is_in_isr>
    1fdc:	4605      	mov	r5, r0
    1fde:	b9f8      	cbnz	r0, 2020 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x20>
	return !z_sys_post_kernel;
    1fe0:	4b2a      	ldr	r3, [pc, #168]	; (208c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8c>)
    1fe2:	781b      	ldrb	r3, [r3, #0]
    1fe4:	b1e3      	cbz	r3, 2020 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x20>
    p_reg->INTENCLR = mask;
    1fe6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1fea:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    1fec:	4606      	mov	r6, r0
    1fee:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1ff2:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ff6:	f8df 8098 	ldr.w	r8, [pc, #152]	; 2090 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x90>
    1ffa:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    1ffe:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    2002:	03d2      	lsls	r2, r2, #15
    2004:	d516      	bpl.n	2034 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x34>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    2006:	f003 0303 	and.w	r3, r3, #3
    200a:	2b02      	cmp	r3, #2
    200c:	d001      	beq.n	2012 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x12>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    200e:	2f01      	cmp	r7, #1
    2010:	d110      	bne.n	2034 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x34>
	if (isr_mode) {
    2012:	b375      	cbz	r5, 2072 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x72>
    2014:	f386 8811 	msr	BASEPRI, r6
    2018:	f3bf 8f6f 	isb	sy
}
    201c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    2020:	f04f 0320 	mov.w	r3, #32
    2024:	f3ef 8611 	mrs	r6, BASEPRI
    2028:	f383 8812 	msr	BASEPRI_MAX, r3
    202c:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2030:	2501      	movs	r5, #1
    2032:	e7de      	b.n	1ff2 <z_nrf_clock_control_lf_on+0x5a>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    2034:	b1c5      	cbz	r5, 2068 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x68>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    2036:	4630      	mov	r0, r6
    2038:	f7ff fa22 	bl	1480 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    203c:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2040:	b2db      	uxtb	r3, r3
    2042:	2b01      	cmp	r3, #1
    2044:	d1d9      	bne.n	1ffa <z_nrf_clock_control_lf_on+0x62>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2046:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    204a:	2a00      	cmp	r2, #0
    204c:	d0d5      	beq.n	1ffa <z_nrf_clock_control_lf_on+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    204e:	2200      	movs	r2, #0
    2050:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    2054:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    2058:	2202      	movs	r2, #2
    205a:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
    205e:	2220      	movs	r2, #32
    2060:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2064:	60a3      	str	r3, [r4, #8]
}
    2066:	e7c8      	b.n	1ffa <z_nrf_clock_control_lf_on+0x62>
	return z_impl_k_sleep(timeout);
    2068:	2100      	movs	r1, #0
    206a:	2021      	movs	r0, #33	; 0x21
    206c:	f001 fc80 	bl	3970 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2070:	e7e4      	b.n	203c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3c>
    p_reg->INTENSET = mask;
    2072:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2076:	2202      	movs	r2, #2
    2078:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    207c:	e7ce      	b.n	201c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1c>
    207e:	bf00      	nop
    2080:	200007f8 	.word	0x200007f8
    2084:	200007e8 	.word	0x200007e8
    2088:	20000818 	.word	0x20000818
    208c:	20000fbc 	.word	0x20000fbc
    2090:	e000e100 	.word	0xe000e100

00002094 <rtt_console_init>:

	return character;
}

static int rtt_console_init(void)
{
    2094:	b510      	push	{r4, lr}

#ifdef CONFIG_PRINTK
	__printk_hook_install(rtt_console_out);
    2096:	4c04      	ldr	r4, [pc, #16]	; (20a8 <rtt_console_init+0x14>)
    2098:	4620      	mov	r0, r4
    209a:	f7fe fa75 	bl	588 <__printk_hook_install>
#endif
	__stdout_hook_install(rtt_console_out);
    209e:	4620      	mov	r0, r4
    20a0:	f7ff fe70 	bl	1d84 <__stdout_hook_install>

	return 0;
}
    20a4:	2000      	movs	r0, #0
    20a6:	bd10      	pop	{r4, pc}
    20a8:	000020ad 	.word	0x000020ad

000020ac <rtt_console_out>:
{
    20ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    20ae:	4604      	mov	r4, r0
	char c = (char)character;
    20b0:	2503      	movs	r5, #3
    20b2:	4e13      	ldr	r6, [pc, #76]	; (2100 <rtt_console_out+0x54>)
    20b4:	f88d 0007 	strb.w	r0, [sp, #7]
		SEGGER_RTT_LOCK();
    20b8:	f3ef 8711 	mrs	r7, BASEPRI
    20bc:	f04f 0120 	mov.w	r1, #32
    20c0:	f381 8811 	msr	BASEPRI, r1
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    20c4:	2201      	movs	r2, #1
    20c6:	f10d 0107 	add.w	r1, sp, #7
    20ca:	2000      	movs	r0, #0
    20cc:	f000 fde6 	bl	2c9c <SEGGER_RTT_WriteNoLock>
		SEGGER_RTT_UNLOCK();
    20d0:	f387 8811 	msr	BASEPRI, r7
		if (cnt) {
    20d4:	b120      	cbz	r0, 20e0 <rtt_console_out+0x34>
			host_present = true;
    20d6:	2301      	movs	r3, #1
    20d8:	7033      	strb	r3, [r6, #0]
}
    20da:	4620      	mov	r0, r4
    20dc:	b003      	add	sp, #12
    20de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (host_present) {
    20e0:	7833      	ldrb	r3, [r6, #0]
    20e2:	2b00      	cmp	r3, #0
    20e4:	d0f9      	beq.n	20da <rtt_console_out+0x2e>
			if (max_cnt) {
    20e6:	3d01      	subs	r5, #1
    20e8:	d008      	beq.n	20fc <rtt_console_out+0x50>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
    20ea:	f002 feb2 	bl	4e52 <k_is_in_isr>
    20ee:	2800      	cmp	r0, #0
    20f0:	d1e2      	bne.n	20b8 <rtt_console_out+0xc>
    20f2:	2100      	movs	r1, #0
    20f4:	2042      	movs	r0, #66	; 0x42
    20f6:	f001 fc3b 	bl	3970 <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
    20fa:	e7dd      	b.n	20b8 <rtt_console_out+0xc>
				host_present = false;
    20fc:	7035      	strb	r5, [r6, #0]
    20fe:	e7ec      	b.n	20da <rtt_console_out+0x2e>
    2100:	20000b89 	.word	0x20000b89

00002104 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    2104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2108:	2701      	movs	r7, #1
        case 1: return NRF_P1;
    210a:	4d3c      	ldr	r5, [pc, #240]	; (21fc <pinctrl_configure_pins+0xf8>)
    210c:	4e3c      	ldr	r6, [pc, #240]	; (2200 <pinctrl_configure_pins+0xfc>)
    210e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    2112:	4281      	cmp	r1, r0
    2114:	d102      	bne.n	211c <pinctrl_configure_pins+0x18>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    2116:	2000      	movs	r0, #0
}
    2118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    211c:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    211e:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    2122:	f3c4 2a43 	ubfx	sl, r4, #9, #4
			pin = 0xFFFFFFFFU;
    2126:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    2128:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
    212c:	bf08      	it	eq
    212e:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
    2132:	2c06      	cmp	r4, #6
    2134:	d85e      	bhi.n	21f4 <pinctrl_configure_pins+0xf0>
    2136:	e8df f004 	tbb	[pc, r4]
    213a:	1504      	.short	0x1504
    213c:	59201d1a 	.word	0x59201d1a
    2140:	1d          	.byte	0x1d
    2141:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
    2142:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    2146:	ea4f 1e53 	mov.w	lr, r3, lsr #5
        case 1: return NRF_P1;
    214a:	f1be 0f01 	cmp.w	lr, #1
    214e:	bf14      	ite	ne
    2150:	46ac      	movne	ip, r5
    2152:	46b4      	moveq	ip, r6
    *p_pin = pin_number & 0x1F;
    2154:	f003 041f 	and.w	r4, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2158:	fa07 f404 	lsl.w	r4, r7, r4
    p_reg->OUTSET = set_mask;
    215c:	f8cc 4008 	str.w	r4, [ip, #8]
    2160:	2401      	movs	r4, #1
    2162:	e002      	b.n	216a <pinctrl_configure_pins+0x66>
			NRF_PSEL_UART(reg, RXD) = pin;
    2164:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2168:	2400      	movs	r4, #0
    216a:	46a4      	mov	ip, r4
    216c:	e017      	b.n	219e <pinctrl_configure_pins+0x9a>
			NRF_PSEL_UART(reg, RTS) = pin;
    216e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    if (value == 0)
    2172:	e7e8      	b.n	2146 <pinctrl_configure_pins+0x42>
			NRF_PSEL_UART(reg, CTS) = pin;
    2174:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    2178:	e7f6      	b.n	2168 <pinctrl_configure_pins+0x64>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    217a:	2400      	movs	r4, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
    217c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return pin_number >> 5;
    2180:	ea4f 1853 	mov.w	r8, r3, lsr #5
        case 1: return NRF_P1;
    2184:	f1b8 0f01 	cmp.w	r8, #1
    2188:	bf14      	ite	ne
    218a:	46ae      	movne	lr, r5
    218c:	46b6      	moveq	lr, r6
    *p_pin = pin_number & 0x1F;
    218e:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2192:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
    2196:	f8ce c00c 	str.w	ip, [lr, #12]
    219a:	f04f 0c01 	mov.w	ip, #1
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    219e:	f850 9b04 	ldr.w	r9, [r0], #4
    *p_pin = pin_number & 0x1F;
    21a2:	f003 081f 	and.w	r8, r3, #31
    21a6:	f409 5e00 	and.w	lr, r9, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    21aa:	f1be 0f00 	cmp.w	lr, #0
    return pin_number >> 5;
    21ae:	ea4f 1353 	mov.w	r3, r3, lsr #5
    21b2:	bf1c      	itt	ne
    21b4:	2401      	movne	r4, #1
    21b6:	f04f 0c00 	movne.w	ip, #0
        case 0: return NRF_P0;
    21ba:	2b01      	cmp	r3, #1
    21bc:	bf0c      	ite	eq
    21be:	46b6      	moveq	lr, r6
    21c0:	46ae      	movne	lr, r5
    21c2:	eb0e 0e88 	add.w	lr, lr, r8, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    21c6:	f8de 3200 	ldr.w	r3, [lr, #512]	; 0x200
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    21ca:	f3c9 19c1 	ubfx	r9, r9, #7, #2
    21ce:	f003 48e0 	and.w	r8, r3, #1879048192	; 0x70000000
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    21d2:	ea4f 230a 	mov.w	r3, sl, lsl #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    21d6:	ea43 0389 	orr.w	r3, r3, r9, lsl #2
    21da:	ea43 030c 	orr.w	r3, r3, ip
    21de:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    21e2:	ea43 0308 	orr.w	r3, r3, r8
    reg->PIN_CNF[pin_number] = cnf;
    21e6:	f8ce 3200 	str.w	r3, [lr, #512]	; 0x200
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    21ea:	e792      	b.n	2112 <pinctrl_configure_pins+0xe>
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    21ec:	2401      	movs	r4, #1
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    21ee:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (write != NO_WRITE) {
    21f2:	e7c5      	b.n	2180 <pinctrl_configure_pins+0x7c>
		switch (NRF_GET_FUN(pins[i])) {
    21f4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    21f8:	e78e      	b.n	2118 <pinctrl_configure_pins+0x14>
    21fa:	bf00      	nop
    21fc:	50842500 	.word	0x50842500
    2200:	50842800 	.word	0x50842800

00002204 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    2204:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    2206:	794b      	ldrb	r3, [r1, #5]
    2208:	2b01      	cmp	r3, #1
    220a:	d029      	beq.n	2260 <uarte_nrfx_configure+0x5c>
    220c:	2b03      	cmp	r3, #3
    220e:	d124      	bne.n	225a <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    2210:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    2212:	798b      	ldrb	r3, [r1, #6]
    2214:	2b03      	cmp	r3, #3
    2216:	d120      	bne.n	225a <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    2218:	79ce      	ldrb	r6, [r1, #7]
    221a:	b10e      	cbz	r6, 2220 <uarte_nrfx_configure+0x1c>
    221c:	2e01      	cmp	r6, #1
    221e:	d11c      	bne.n	225a <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    2220:	790a      	ldrb	r2, [r1, #4]
    2222:	2a01      	cmp	r2, #1
    2224:	d01e      	beq.n	2264 <uarte_nrfx_configure+0x60>
    2226:	2a02      	cmp	r2, #2
    2228:	d020      	beq.n	226c <uarte_nrfx_configure+0x68>
    222a:	b9b2      	cbnz	r2, 225a <uarte_nrfx_configure+0x56>
    222c:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    222e:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    2230:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    2232:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    2236:	f8d5 c000 	ldr.w	ip, [r5]
	switch (baudrate) {
    223a:	d06e      	beq.n	231a <uarte_nrfx_configure+0x116>
    223c:	d833      	bhi.n	22a6 <uarte_nrfx_configure+0xa2>
    223e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2242:	d06d      	beq.n	2320 <uarte_nrfx_configure+0x11c>
    2244:	d81c      	bhi.n	2280 <uarte_nrfx_configure+0x7c>
    2246:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    224a:	d06b      	beq.n	2324 <uarte_nrfx_configure+0x120>
    224c:	d810      	bhi.n	2270 <uarte_nrfx_configure+0x6c>
    224e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2252:	d06a      	beq.n	232a <uarte_nrfx_configure+0x126>
    2254:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2258:	d06a      	beq.n	2330 <uarte_nrfx_configure+0x12c>
		return -ENOTSUP;
    225a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    225e:	e05b      	b.n	2318 <uarte_nrfx_configure+0x114>
	switch (cfg->stop_bits) {
    2260:	2700      	movs	r7, #0
    2262:	e7d6      	b.n	2212 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    2264:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    2268:	220e      	movs	r2, #14
    226a:	e7e0      	b.n	222e <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    226c:	2400      	movs	r4, #0
    226e:	e7fb      	b.n	2268 <uarte_nrfx_configure+0x64>
	switch (baudrate) {
    2270:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2274:	d05f      	beq.n	2336 <uarte_nrfx_configure+0x132>
    2276:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    227a:	d1ee      	bne.n	225a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    227c:	4b38      	ldr	r3, [pc, #224]	; (2360 <uarte_nrfx_configure+0x15c>)
    227e:	e03c      	b.n	22fa <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    2280:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2284:	d05a      	beq.n	233c <uarte_nrfx_configure+0x138>
    2286:	d807      	bhi.n	2298 <uarte_nrfx_configure+0x94>
    2288:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    228c:	d058      	beq.n	2340 <uarte_nrfx_configure+0x13c>
    228e:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2292:	d1e2      	bne.n	225a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2294:	4b33      	ldr	r3, [pc, #204]	; (2364 <uarte_nrfx_configure+0x160>)
    2296:	e030      	b.n	22fa <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    2298:	f647 2512 	movw	r5, #31250	; 0x7a12
    229c:	42ab      	cmp	r3, r5
    229e:	d1dc      	bne.n	225a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    22a0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    22a4:	e029      	b.n	22fa <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    22a6:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    22aa:	d04b      	beq.n	2344 <uarte_nrfx_configure+0x140>
    22ac:	d813      	bhi.n	22d6 <uarte_nrfx_configure+0xd2>
    22ae:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    22b2:	d04a      	beq.n	234a <uarte_nrfx_configure+0x146>
    22b4:	d809      	bhi.n	22ca <uarte_nrfx_configure+0xc6>
    22b6:	f64d 25c0 	movw	r5, #56000	; 0xdac0
    22ba:	42ab      	cmp	r3, r5
    22bc:	d047      	beq.n	234e <uarte_nrfx_configure+0x14a>
    22be:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    22c2:	d1ca      	bne.n	225a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    22c4:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    22c8:	e017      	b.n	22fa <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    22ca:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    22ce:	d1c4      	bne.n	225a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    22d0:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    22d4:	e011      	b.n	22fa <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    22d6:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    22da:	d03b      	beq.n	2354 <uarte_nrfx_configure+0x150>
    22dc:	d808      	bhi.n	22f0 <uarte_nrfx_configure+0xec>
    22de:	4d22      	ldr	r5, [pc, #136]	; (2368 <uarte_nrfx_configure+0x164>)
    22e0:	42ab      	cmp	r3, r5
    22e2:	d03a      	beq.n	235a <uarte_nrfx_configure+0x156>
    22e4:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    22e8:	d1b7      	bne.n	225a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    22ea:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    22ee:	e004      	b.n	22fa <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    22f0:	4d1e      	ldr	r5, [pc, #120]	; (236c <uarte_nrfx_configure+0x168>)
    22f2:	42ab      	cmp	r3, r5
    22f4:	d1b1      	bne.n	225a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    22f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    22fa:	6905      	ldr	r5, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    22fc:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
	return config->uarte_regs;
    2300:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->stop
    2302:	433a      	orrs	r2, r7
    2304:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
    2306:	4334      	orrs	r4, r6
    2308:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    230a:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    230e:	1d2b      	adds	r3, r5, #4
    2310:	c903      	ldmia	r1, {r0, r1}
    2312:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    2316:	2000      	movs	r0, #0
}
    2318:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    231a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    231e:	e7ec      	b.n	22fa <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2320:	4b13      	ldr	r3, [pc, #76]	; (2370 <uarte_nrfx_configure+0x16c>)
    2322:	e7ea      	b.n	22fa <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2324:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2328:	e7e7      	b.n	22fa <uarte_nrfx_configure+0xf6>
		nrf_baudrate = 0x00014000;
    232a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    232e:	e7e4      	b.n	22fa <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    2330:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    2334:	e7e1      	b.n	22fa <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2336:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    233a:	e7de      	b.n	22fa <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    233c:	4b0d      	ldr	r3, [pc, #52]	; (2374 <uarte_nrfx_configure+0x170>)
    233e:	e7dc      	b.n	22fa <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    2340:	4b0d      	ldr	r3, [pc, #52]	; (2378 <uarte_nrfx_configure+0x174>)
    2342:	e7da      	b.n	22fa <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    2344:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    2348:	e7d7      	b.n	22fa <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    234a:	4b0c      	ldr	r3, [pc, #48]	; (237c <uarte_nrfx_configure+0x178>)
    234c:	e7d5      	b.n	22fa <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    234e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2352:	e7d2      	b.n	22fa <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2354:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2358:	e7cf      	b.n	22fa <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    235a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    235e:	e7cc      	b.n	22fa <uarte_nrfx_configure+0xf6>
    2360:	0013b000 	.word	0x0013b000
    2364:	004ea000 	.word	0x004ea000
    2368:	0003d090 	.word	0x0003d090
    236c:	000f4240 	.word	0x000f4240
    2370:	00275000 	.word	0x00275000
    2374:	0075c000 	.word	0x0075c000
    2378:	003af000 	.word	0x003af000
    237c:	013a9000 	.word	0x013a9000

00002380 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    2380:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    2384:	4680      	mov	r8, r0
    2386:	2200      	movs	r2, #0
    2388:	2101      	movs	r1, #1
    238a:	2008      	movs	r0, #8
    238c:	f7ff f8b4 	bl	14f8 <z_arm_irq_priority_set>
    2390:	2008      	movs	r0, #8
    2392:	f7ff f881 	bl	1498 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    2396:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
    2398:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
    239c:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
    23a0:	683c      	ldr	r4, [r7, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    23a2:	aa01      	add	r2, sp, #4
    23a4:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
    23a8:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    23ac:	f8d7 900c 	ldr.w	r9, [r7, #12]
    23b0:	4648      	mov	r0, r9
    23b2:	f002 f99e 	bl	46f2 <pinctrl_lookup_state>
	if (ret < 0) {
    23b6:	1e05      	subs	r5, r0, #0
    23b8:	db4d      	blt.n	2456 <uarte_0_init+0xd6>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    23ba:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    23bc:	f8d9 2000 	ldr.w	r2, [r9]
    23c0:	7919      	ldrb	r1, [r3, #4]
    23c2:	6818      	ldr	r0, [r3, #0]
    23c4:	f7ff fe9e 	bl	2104 <pinctrl_configure_pins>
	if (err < 0) {
    23c8:	1e05      	subs	r5, r0, #0
    23ca:	db44      	blt.n	2456 <uarte_0_init+0xd6>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    23cc:	4640      	mov	r0, r8
    23ce:	1d31      	adds	r1, r6, #4
    23d0:	f7ff ff18 	bl	2204 <uarte_nrfx_configure>
	if (err) {
    23d4:	4605      	mov	r5, r0
    23d6:	2800      	cmp	r0, #0
    23d8:	d13d      	bne.n	2456 <uarte_0_init+0xd6>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    23da:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    23dc:	0799      	lsls	r1, r3, #30
    23de:	d513      	bpl.n	2408 <uarte_0_init+0x88>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    23e0:	f106 001c 	add.w	r0, r6, #28
    23e4:	f000 fc1e 	bl	2c24 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    23e8:	4b1e      	ldr	r3, [pc, #120]	; (2464 <uarte_0_init+0xe4>)
    23ea:	4298      	cmp	r0, r3
    23ec:	d137      	bne.n	245e <uarte_0_init+0xde>
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    23ee:	7f33      	ldrb	r3, [r6, #28]
    23f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    23f4:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    23f8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    23fc:	2301      	movs	r3, #1
    23fe:	7f32      	ldrb	r2, [r6, #28]
    2400:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    2402:	4a19      	ldr	r2, [pc, #100]	; (2468 <uarte_0_init+0xe8>)
    2404:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2408:	2308      	movs	r3, #8
    240a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    240e:	7a3b      	ldrb	r3, [r7, #8]
    2410:	b953      	cbnz	r3, 2428 <uarte_0_init+0xa8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2412:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    2416:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    241a:	69b3      	ldr	r3, [r6, #24]
    241c:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    2420:	2301      	movs	r3, #1
    2422:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2426:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    2428:	687b      	ldr	r3, [r7, #4]
    242a:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    242c:	bf5c      	itt	pl
    242e:	f44f 7380 	movpl.w	r3, #256	; 0x100
    2432:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2436:	687b      	ldr	r3, [r7, #4]
    2438:	06db      	lsls	r3, r3, #27
    243a:	bf44      	itt	mi
    243c:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    2440:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2444:	6973      	ldr	r3, [r6, #20]
    2446:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    244a:	2300      	movs	r3, #0
    244c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2450:	2301      	movs	r3, #1
    2452:	60a3      	str	r3, [r4, #8]
    2454:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    2456:	4628      	mov	r0, r5
    2458:	b003      	add	sp, #12
    245a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    245e:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
    2462:	e7f8      	b.n	2456 <uarte_0_init+0xd6>
    2464:	0bad0000 	.word	0x0bad0000
    2468:	50017000 	.word	0x50017000

0000246c <uarte_nrfx_poll_out>:
{
    246c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    246e:	4604      	mov	r4, r0
    2470:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
    2472:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2474:	f002 fced 	bl	4e52 <k_is_in_isr>
    2478:	b9b0      	cbnz	r0, 24a8 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    247a:	4b21      	ldr	r3, [pc, #132]	; (2500 <uarte_nrfx_poll_out+0x94>)
    247c:	781b      	ldrb	r3, [r3, #0]
    247e:	b19b      	cbz	r3, 24a8 <uarte_nrfx_poll_out+0x3c>
{
    2480:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    2482:	6860      	ldr	r0, [r4, #4]
    2484:	f002 fa17 	bl	48b6 <is_tx_ready.isra.0>
    2488:	bb00      	cbnz	r0, 24cc <uarte_nrfx_poll_out+0x60>
    248a:	2001      	movs	r0, #1
    248c:	f002 fad8 	bl	4a40 <nrfx_busy_wait>
    2490:	3e01      	subs	r6, #1
    2492:	d1f6      	bne.n	2482 <uarte_nrfx_poll_out+0x16>
    2494:	2100      	movs	r1, #0
    2496:	2021      	movs	r0, #33	; 0x21
    2498:	f001 fa6a 	bl	3970 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    249c:	e7f0      	b.n	2480 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    249e:	f381 8811 	msr	BASEPRI, r1
    24a2:	f3bf 8f6f 	isb	sy
}
    24a6:	e7f5      	b.n	2494 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    24a8:	f04f 0320 	mov.w	r3, #32
    24ac:	f3ef 8111 	mrs	r1, BASEPRI
    24b0:	f383 8812 	msr	BASEPRI_MAX, r3
    24b4:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    24b8:	6860      	ldr	r0, [r4, #4]
    24ba:	460e      	mov	r6, r1
    24bc:	f002 f9fb 	bl	48b6 <is_tx_ready.isra.0>
    24c0:	b990      	cbnz	r0, 24e8 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    24c2:	f381 8811 	msr	BASEPRI, r1
    24c6:	f3bf 8f6f 	isb	sy
}
    24ca:	e7ed      	b.n	24a8 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    24cc:	f04f 0320 	mov.w	r3, #32
    24d0:	f3ef 8111 	mrs	r1, BASEPRI
    24d4:	f383 8812 	msr	BASEPRI_MAX, r3
    24d8:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    24dc:	6860      	ldr	r0, [r4, #4]
    24de:	460e      	mov	r6, r1
    24e0:	f002 f9e9 	bl	48b6 <is_tx_ready.isra.0>
    24e4:	2800      	cmp	r0, #0
    24e6:	d0da      	beq.n	249e <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
    24e8:	697b      	ldr	r3, [r7, #20]
	tx_start(dev, data->char_out, 1);
    24ea:	2201      	movs	r2, #1
	*data->char_out = c;
    24ec:	701d      	strb	r5, [r3, #0]
	tx_start(dev, data->char_out, 1);
    24ee:	4620      	mov	r0, r4
    24f0:	6979      	ldr	r1, [r7, #20]
    24f2:	f002 f920 	bl	4736 <tx_start>
	__asm__ volatile(
    24f6:	f386 8811 	msr	BASEPRI, r6
    24fa:	f3bf 8f6f 	isb	sy
}
    24fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2500:	20000fbc 	.word	0x20000fbc

00002504 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    2504:	2301      	movs	r3, #1
    2506:	4083      	lsls	r3, r0
{
    2508:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    250a:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    250c:	4a0b      	ldr	r2, [pc, #44]	; (253c <compare_int_lock+0x38>)
    250e:	e8d2 1fef 	ldaex	r1, [r2]
    2512:	ea01 0504 	and.w	r5, r1, r4
    2516:	e8c2 5fe6 	stlex	r6, r5, [r2]
    251a:	2e00      	cmp	r6, #0
    251c:	d1f7      	bne.n	250e <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    251e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2522:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    2524:	4806      	ldr	r0, [pc, #24]	; (2540 <compare_int_lock+0x3c>)
    2526:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    252a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    252e:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    2532:	420b      	tst	r3, r1
}
    2534:	bf14      	ite	ne
    2536:	2001      	movne	r0, #1
    2538:	2000      	moveq	r0, #0
    253a:	bd70      	pop	{r4, r5, r6, pc}
    253c:	200008a4 	.word	0x200008a4
    2540:	50015000 	.word	0x50015000

00002544 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    2544:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    2546:	490e      	ldr	r1, [pc, #56]	; (2580 <sys_clock_timeout_handler+0x3c>)
	return absolute_time & COUNTER_MAX;
    2548:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    254c:	e9d1 3400 	ldrd	r3, r4, [r1]
    2550:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    2552:	18c3      	adds	r3, r0, r3
    2554:	f144 0400 	adc.w	r4, r4, #0
    2558:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    255c:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    2560:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    2564:	d209      	bcs.n	257a <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    2566:	4b07      	ldr	r3, [pc, #28]	; (2584 <sys_clock_timeout_handler+0x40>)
    2568:	681b      	ldr	r3, [r3, #0]
    256a:	0a1a      	lsrs	r2, r3, #8
    256c:	061b      	lsls	r3, r3, #24
    256e:	199c      	adds	r4, r3, r6
    2570:	4b05      	ldr	r3, [pc, #20]	; (2588 <sys_clock_timeout_handler+0x44>)
    2572:	f142 0500 	adc.w	r5, r2, #0
    2576:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    257a:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    257c:	f001 bb4e 	b.w	3c1c <sys_clock_announce>
    2580:	20000160 	.word	0x20000160
    2584:	200008a8 	.word	0x200008a8
    2588:	20000168 	.word	0x20000168

0000258c <compare_int_unlock>:
	if (key) {
    258c:	b1d9      	cbz	r1, 25c6 <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
    258e:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2590:	4a0d      	ldr	r2, [pc, #52]	; (25c8 <compare_int_unlock+0x3c>)
    2592:	4083      	lsls	r3, r0
    2594:	e8d2 cfef 	ldaex	ip, [r2]
    2598:	ea4c 0c03 	orr.w	ip, ip, r3
    259c:	e8c2 cfe1 	stlex	r1, ip, [r2]
    25a0:	2900      	cmp	r1, #0
    25a2:	d1f7      	bne.n	2594 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    25a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    25a8:	4a08      	ldr	r2, [pc, #32]	; (25cc <compare_int_unlock+0x40>)
    25aa:	4083      	lsls	r3, r0
    25ac:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    25b0:	4b07      	ldr	r3, [pc, #28]	; (25d0 <compare_int_unlock+0x44>)
    25b2:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    25b6:	40c3      	lsrs	r3, r0
    25b8:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    25ba:	bf42      	ittt	mi
    25bc:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    25c0:	4b04      	ldrmi	r3, [pc, #16]	; (25d4 <compare_int_unlock+0x48>)
    25c2:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    25c6:	4770      	bx	lr
    25c8:	200008a4 	.word	0x200008a4
    25cc:	50015000 	.word	0x50015000
    25d0:	200008a0 	.word	0x200008a0
    25d4:	e000e100 	.word	0xe000e100

000025d8 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    25d8:	4b0d      	ldr	r3, [pc, #52]	; (2610 <z_nrf_rtc_timer_read+0x38>)
    25da:	6818      	ldr	r0, [r3, #0]
    25dc:	0a01      	lsrs	r1, r0, #8
    25de:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    25e0:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    25e4:	4b0b      	ldr	r3, [pc, #44]	; (2614 <z_nrf_rtc_timer_read+0x3c>)
    25e6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    25ea:	1818      	adds	r0, r3, r0
    25ec:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    25f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    25f4:	d20a      	bcs.n	260c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    25f6:	4b08      	ldr	r3, [pc, #32]	; (2618 <z_nrf_rtc_timer_read+0x40>)
    25f8:	e9d3 2300 	ldrd	r2, r3, [r3]
    25fc:	4290      	cmp	r0, r2
    25fe:	eb71 0303 	sbcs.w	r3, r1, r3
    2602:	d203      	bcs.n	260c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    2604:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    2608:	f141 0100 	adc.w	r1, r1, #0
}
    260c:	4770      	bx	lr
    260e:	bf00      	nop
    2610:	200008a8 	.word	0x200008a8
    2614:	50015000 	.word	0x50015000
    2618:	20000168 	.word	0x20000168

0000261c <compare_set>:
{
    261c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2620:	4616      	mov	r6, r2
    2622:	461f      	mov	r7, r3
    2624:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    2626:	f7ff ff6d 	bl	2504 <compare_int_lock>
    262a:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    262c:	f7ff ffd4 	bl	25d8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    2630:	42b0      	cmp	r0, r6
    2632:	eb71 0307 	sbcs.w	r3, r1, r7
    2636:	d250      	bcs.n	26da <compare_set+0xbe>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    2638:	4b38      	ldr	r3, [pc, #224]	; (271c <compare_set+0x100>)
    263a:	1a30      	subs	r0, r6, r0
    263c:	eb67 0101 	sbc.w	r1, r7, r1
    2640:	4298      	cmp	r0, r3
    2642:	f171 0100 	sbcs.w	r1, r1, #0
    2646:	d265      	bcs.n	2714 <compare_set+0xf8>
		if (target_time != cc_data[chan].target_time) {
    2648:	4b35      	ldr	r3, [pc, #212]	; (2720 <compare_set+0x104>)
    264a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    264e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    2652:	429f      	cmp	r7, r3
    2654:	bf08      	it	eq
    2656:	4296      	cmpeq	r6, r2
    2658:	d049      	beq.n	26ee <compare_set+0xd2>
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    265a:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    265e:	4931      	ldr	r1, [pc, #196]	; (2724 <compare_set+0x108>)
    2660:	fa09 f904 	lsl.w	r9, r9, r4
	event_clear(chan);
    2664:	4620      	mov	r0, r4
	return absolute_time & COUNTER_MAX;
    2666:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    266a:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    266e:	f002 f9cb 	bl	4a08 <event_clear>
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    2672:	f04f 0a03 	mov.w	sl, #3
	uint32_t cc_val = req_cc;
    2676:	4658      	mov	r0, fp
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    2678:	f104 0550 	add.w	r5, r4, #80	; 0x50
    267c:	00ad      	lsls	r5, r5, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    267e:	b2ad      	uxth	r5, r5
    2680:	f105 2550 	add.w	r5, r5, #1342197760	; 0x50005000
    p_reg->CC[ch] = cc_val;
    2684:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    2688:	4a27      	ldr	r2, [pc, #156]	; (2728 <compare_set+0x10c>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    268a:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
    p_reg->CC[ch] = cc_val;
    268e:	9301      	str	r3, [sp, #4]
    2690:	f8dd c004 	ldr.w	ip, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    2694:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    2698:	f841 302c 	str.w	r3, [r1, ip, lsl #2]
    p_reg->EVTENSET = mask;
    269c:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    26a0:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    26a4:	eba0 0008 	sub.w	r0, r0, r8
    26a8:	3803      	subs	r0, #3
    26aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    26ae:	4290      	cmp	r0, r2
    26b0:	d91d      	bls.n	26ee <compare_set+0xd2>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    26b2:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    26b4:	b160      	cbz	r0, 26d0 <compare_set+0xb4>
     return p_reg->COUNTER;
    26b6:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    26ba:	eba8 000b 	sub.w	r0, r8, fp
    26be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    26c2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    26c6:	d912      	bls.n	26ee <compare_set+0xd2>
					event_clear(chan);
    26c8:	4620      	mov	r0, r4
    26ca:	f002 f99d 	bl	4a08 <event_clear>
    26ce:	4a16      	ldr	r2, [pc, #88]	; (2728 <compare_set+0x10c>)
			cc_val = now + cc_inc;
    26d0:	eb0a 0008 	add.w	r0, sl, r8
			cc_inc++;
    26d4:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    26d8:	e7da      	b.n	2690 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    26da:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    26dc:	4a13      	ldr	r2, [pc, #76]	; (272c <compare_set+0x110>)
    26de:	40a3      	lsls	r3, r4
    26e0:	e8d2 0fef 	ldaex	r0, [r2]
    26e4:	4318      	orrs	r0, r3
    26e6:	e8c2 0fe1 	stlex	r1, r0, [r2]
    26ea:	2900      	cmp	r1, #0
    26ec:	d1f8      	bne.n	26e0 <compare_set+0xc4>
	return ret;
    26ee:	2500      	movs	r5, #0
	cc_data[chan].target_time = target_time;
    26f0:	490b      	ldr	r1, [pc, #44]	; (2720 <compare_set+0x104>)
	cc_data[chan].callback = handler;
    26f2:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    26f4:	0123      	lsls	r3, r4, #4
    26f6:	eb01 1204 	add.w	r2, r1, r4, lsl #4
	cc_data[chan].callback = handler;
    26fa:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
    26fc:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].user_context = user_data;
    2700:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2702:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
    2704:	4620      	mov	r0, r4
    2706:	9900      	ldr	r1, [sp, #0]
    2708:	f7ff ff40 	bl	258c <compare_int_unlock>
}
    270c:	4628      	mov	r0, r5
    270e:	b003      	add	sp, #12
    2710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    2714:	f06f 0515 	mvn.w	r5, #21
    2718:	e7f4      	b.n	2704 <compare_set+0xe8>
    271a:	bf00      	nop
    271c:	00800001 	.word	0x00800001
    2720:	20000150 	.word	0x20000150
    2724:	50015000 	.word	0x50015000
    2728:	007ffffd 	.word	0x007ffffd
    272c:	200008a0 	.word	0x200008a0

00002730 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    2730:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
    2732:	2500      	movs	r5, #0
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    2734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2738:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    p_reg->INTENCLR = mask;
    273c:	4c18      	ldr	r4, [pc, #96]	; (27a0 <sys_clock_driver_init+0x70>)
    273e:	4b19      	ldr	r3, [pc, #100]	; (27a4 <sys_clock_driver_init+0x74>)
    p_reg->INTENSET = mask;
    2740:	2602      	movs	r6, #2
    p_reg->INTENCLR = mask;
    2742:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    2746:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    274a:	4b17      	ldr	r3, [pc, #92]	; (27a8 <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
    274c:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    2750:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    2754:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2758:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    275c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    2760:	4b12      	ldr	r3, [pc, #72]	; (27ac <sys_clock_driver_init+0x7c>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    2762:	2101      	movs	r1, #1
    2764:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    2768:	2015      	movs	r0, #21
    276a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    276e:	462a      	mov	r2, r5
    2770:	f7fe fec2 	bl	14f8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    2774:	2015      	movs	r0, #21
    2776:	f7fe fe8f 	bl	1498 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    277a:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    277c:	4a0c      	ldr	r2, [pc, #48]	; (27b0 <sys_clock_driver_init+0x80>)
    277e:	60a3      	str	r3, [r4, #8]
    2780:	6023      	str	r3, [r4, #0]
    2782:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    2784:	4b0b      	ldr	r3, [pc, #44]	; (27b4 <sys_clock_driver_init+0x84>)
    2786:	4a0c      	ldr	r2, [pc, #48]	; (27b8 <sys_clock_driver_init+0x88>)
    2788:	9300      	str	r3, [sp, #0]
    278a:	4628      	mov	r0, r5
    278c:	2300      	movs	r3, #0
    278e:	9501      	str	r5, [sp, #4]
    2790:	f7ff ff44 	bl	261c <compare_set>

	z_nrf_clock_control_lf_on(mode);
    2794:	4630      	mov	r0, r6
    2796:	f7ff fbff 	bl	1f98 <z_nrf_clock_control_lf_on>

	return 0;
}
    279a:	4628      	mov	r0, r5
    279c:	b002      	add	sp, #8
    279e:	bd70      	pop	{r4, r5, r6, pc}
    27a0:	50015000 	.word	0x50015000
    27a4:	000f0003 	.word	0x000f0003
    27a8:	20000150 	.word	0x20000150
    27ac:	e000e100 	.word	0xe000e100
    27b0:	200008a4 	.word	0x200008a4
    27b4:	00002545 	.word	0x00002545
    27b8:	007fffff 	.word	0x007fffff

000027bc <rtc_nrf_isr>:
{
    27bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    27c0:	4b2e      	ldr	r3, [pc, #184]	; (287c <rtc_nrf_isr+0xc0>)
    27c2:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    27c6:	0790      	lsls	r0, r2, #30
    27c8:	d50b      	bpl.n	27e2 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    27ca:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    27ce:	b142      	cbz	r2, 27e2 <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    27d0:	2200      	movs	r2, #0
    27d2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
    27d6:	4a2a      	ldr	r2, [pc, #168]	; (2880 <rtc_nrf_isr+0xc4>)
    27d8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    27dc:	6813      	ldr	r3, [r2, #0]
    27de:	3301      	adds	r3, #1
    27e0:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    27e2:	4a26      	ldr	r2, [pc, #152]	; (287c <rtc_nrf_isr+0xc0>)
    27e4:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    27e8:	03d9      	lsls	r1, r3, #15
    27ea:	d527      	bpl.n	283c <rtc_nrf_isr+0x80>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    27ec:	4b25      	ldr	r3, [pc, #148]	; (2884 <rtc_nrf_isr+0xc8>)
    27ee:	e8d3 1fef 	ldaex	r1, [r3]
    27f2:	f021 0001 	bic.w	r0, r1, #1
    27f6:	e8c3 0fe4 	stlex	r4, r0, [r3]
    27fa:	2c00      	cmp	r4, #0
    27fc:	d1f7      	bne.n	27ee <rtc_nrf_isr+0x32>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    27fe:	07cb      	lsls	r3, r1, #31
    2800:	d402      	bmi.n	2808 <rtc_nrf_isr+0x4c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2802:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
    2806:	b1cb      	cbz	r3, 283c <rtc_nrf_isr+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2808:	2500      	movs	r5, #0
    280a:	4c1c      	ldr	r4, [pc, #112]	; (287c <rtc_nrf_isr+0xc0>)
    280c:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    2810:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    2814:	f7ff fee0 	bl	25d8 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    2818:	f04f 0320 	mov.w	r3, #32
    281c:	f3ef 8211 	mrs	r2, BASEPRI
    2820:	f383 8812 	msr	BASEPRI_MAX, r3
    2824:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    2828:	4b17      	ldr	r3, [pc, #92]	; (2888 <rtc_nrf_isr+0xcc>)
    282a:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    282e:	42b0      	cmp	r0, r6
    2830:	41b9      	sbcs	r1, r7
    2832:	d206      	bcs.n	2842 <rtc_nrf_isr+0x86>
	__asm__ volatile(
    2834:	f382 8811 	msr	BASEPRI, r2
    2838:	f3bf 8f6f 	isb	sy
}
    283c:	b003      	add	sp, #12
    283e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2842:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    2846:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    284a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			cc_data[chan].callback = NULL;
    284e:	601d      	str	r5, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2850:	e9c3 8902 	strd	r8, r9, [r3, #8]
    p_reg->EVTENCLR = mask;
    2854:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2858:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    285c:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    2860:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    2864:	f382 8811 	msr	BASEPRI, r2
    2868:	f3bf 8f6f 	isb	sy
		if (handler) {
    286c:	2900      	cmp	r1, #0
    286e:	d0e5      	beq.n	283c <rtc_nrf_isr+0x80>
			handler(chan, expire_time, user_context);
    2870:	9000      	str	r0, [sp, #0]
    2872:	4632      	mov	r2, r6
    2874:	463b      	mov	r3, r7
    2876:	4628      	mov	r0, r5
    2878:	4788      	blx	r1
    287a:	e7df      	b.n	283c <rtc_nrf_isr+0x80>
    287c:	50015000 	.word	0x50015000
    2880:	200008a8 	.word	0x200008a8
    2884:	200008a0 	.word	0x200008a0
    2888:	20000150 	.word	0x20000150

0000288c <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    288c:	1c43      	adds	r3, r0, #1
{
    288e:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    2890:	d021      	beq.n	28d6 <sys_clock_set_timeout+0x4a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    2892:	2801      	cmp	r0, #1
    2894:	dd21      	ble.n	28da <sys_clock_set_timeout+0x4e>
    2896:	4a12      	ldr	r2, [pc, #72]	; (28e0 <sys_clock_set_timeout+0x54>)
    2898:	4b12      	ldr	r3, [pc, #72]	; (28e4 <sys_clock_set_timeout+0x58>)
    289a:	4290      	cmp	r0, r2
    289c:	bfd4      	ite	le
    289e:	4604      	movle	r4, r0
    28a0:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    28a2:	f7ff fe99 	bl	25d8 <z_nrf_rtc_timer_read>
    28a6:	4b10      	ldr	r3, [pc, #64]	; (28e8 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    28a8:	490e      	ldr	r1, [pc, #56]	; (28e4 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    28aa:	e9d3 2300 	ldrd	r2, r3, [r3]
    28ae:	1a80      	subs	r0, r0, r2
		cyc = 0;
    28b0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    28b4:	bf28      	it	cs
    28b6:	2400      	movcs	r4, #0
	cyc += unannounced;
    28b8:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    28ba:	428c      	cmp	r4, r1
    28bc:	bf28      	it	cs
    28be:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    28c0:	2000      	movs	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    28c2:	490a      	ldr	r1, [pc, #40]	; (28ec <sys_clock_set_timeout+0x60>)
	uint64_t target_time = cyc + last_count;
    28c4:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    28c6:	9001      	str	r0, [sp, #4]
    28c8:	9100      	str	r1, [sp, #0]
    28ca:	f143 0300 	adc.w	r3, r3, #0
    28ce:	f7ff fea5 	bl	261c <compare_set>
}
    28d2:	b002      	add	sp, #8
    28d4:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    28d6:	4c03      	ldr	r4, [pc, #12]	; (28e4 <sys_clock_set_timeout+0x58>)
    28d8:	e7e3      	b.n	28a2 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    28da:	2401      	movs	r4, #1
    28dc:	e7e1      	b.n	28a2 <sys_clock_set_timeout+0x16>
    28de:	bf00      	nop
    28e0:	007ffffe 	.word	0x007ffffe
    28e4:	007fffff 	.word	0x007fffff
    28e8:	20000160 	.word	0x20000160
    28ec:	00002545 	.word	0x00002545

000028f0 <sys_clock_elapsed>:
{
    28f0:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    28f2:	f7ff fe71 	bl	25d8 <z_nrf_rtc_timer_read>
    28f6:	4b02      	ldr	r3, [pc, #8]	; (2900 <sys_clock_elapsed+0x10>)
    28f8:	681b      	ldr	r3, [r3, #0]
}
    28fa:	1ac0      	subs	r0, r0, r3
    28fc:	bd08      	pop	{r3, pc}
    28fe:	bf00      	nop
    2900:	20000160 	.word	0x20000160

00002904 <sys_clock_disable>:
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2904:	2301      	movs	r3, #1
{
    2906:	b510      	push	{r4, lr}
    2908:	4c07      	ldr	r4, [pc, #28]	; (2928 <sys_clock_disable+0x24>)
	irq_disable(RTC_IRQn);
    290a:	2015      	movs	r0, #21
    290c:	6063      	str	r3, [r4, #4]
    290e:	f7fe fdd1 	bl	14b4 <arch_irq_disable>
    2912:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->INTENCLR = mask;
    2916:	4b05      	ldr	r3, [pc, #20]	; (292c <sys_clock_disable+0x28>)
    2918:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    291c:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    2920:	4b03      	ldr	r3, [pc, #12]	; (2930 <sys_clock_disable+0x2c>)
    2922:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    2926:	bd10      	pop	{r4, pc}
    2928:	50015000 	.word	0x50015000
    292c:	000f0003 	.word	0x000f0003
    2930:	e000e100 	.word	0xe000e100

00002934 <nrf53_errata_42>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2934:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2938:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    293c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    2940:	2a07      	cmp	r2, #7
    2942:	d105      	bne.n	2950 <nrf53_errata_42+0x1c>
                {
                    switch(var2)
    2944:	3b02      	subs	r3, #2
    2946:	2b03      	cmp	r3, #3
    2948:	d802      	bhi.n	2950 <nrf53_errata_42+0x1c>
    294a:	4a02      	ldr	r2, [pc, #8]	; (2954 <nrf53_errata_42+0x20>)
    294c:	5cd0      	ldrb	r0, [r2, r3]
    294e:	4770      	bx	lr
                    {
                        case 0x02ul:
                            return true;
                        case 0x03ul:
                            return false;
    2950:	2000      	movs	r0, #0
                }
            #endif
        #endif
        return false;
    #endif
}
    2952:	4770      	bx	lr
    2954:	000056a6 	.word	0x000056a6

00002958 <SystemInit>:
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}

void SystemInit(void)
{
    2958:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    295a:	f7ff ffeb 	bl	2934 <nrf53_errata_42>
    295e:	b158      	cbz	r0, 2978 <SystemInit+0x20>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    2960:	4b64      	ldr	r3, [pc, #400]	; (2af4 <SystemInit+0x19c>)
    2962:	f8d3 2a20 	ldr.w	r2, [r3, #2592]	; 0xa20
    2966:	b93a      	cbnz	r2, 2978 <SystemInit+0x20>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    2968:	210d      	movs	r1, #13
    296a:	f8c3 1a20 	str.w	r1, [r3, #2592]	; 0xa20
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    296e:	2101      	movs	r1, #1
    2970:	f8c3 191c 	str.w	r1, [r3, #2332]	; 0x91c
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    2974:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
{
    2978:	2200      	movs	r2, #0
    297a:	00d3      	lsls	r3, r2, #3
    297c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    2980:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    2984:	3101      	adds	r1, #1
    2986:	d007      	beq.n	2998 <SystemInit+0x40>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    2988:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    298c:	3201      	adds	r2, #1
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    298e:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    2992:	2a20      	cmp	r2, #32
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    2994:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    2996:	d1f0      	bne.n	297a <SystemInit+0x22>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    2998:	f7ff ffcc 	bl	2934 <nrf53_errata_42>
    299c:	2800      	cmp	r0, #0
    299e:	f040 80a0 	bne.w	2ae2 <SystemInit+0x18a>
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    29a2:	f7ff ffc7 	bl	2934 <nrf53_errata_42>
    29a6:	b140      	cbz	r0, 29ba <SystemInit+0x62>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    29a8:	4b53      	ldr	r3, [pc, #332]	; (2af8 <SystemInit+0x1a0>)
    29aa:	4a54      	ldr	r2, [pc, #336]	; (2afc <SystemInit+0x1a4>)
    29ac:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    29b0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    29b4:	2201      	movs	r2, #1
    29b6:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    29ba:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    29be:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    29c2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    29c6:	2a07      	cmp	r2, #7
    29c8:	d109      	bne.n	29de <SystemInit+0x86>
                {
                    switch(var2)
    29ca:	3b02      	subs	r3, #2
    29cc:	2b03      	cmp	r3, #3
    29ce:	d806      	bhi.n	29de <SystemInit+0x86>
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    29d0:	4a4b      	ldr	r2, [pc, #300]	; (2b00 <SystemInit+0x1a8>)
    29d2:	5cd3      	ldrb	r3, [r2, r3]
    29d4:	b11b      	cbz	r3, 29de <SystemInit+0x86>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    29d6:	2200      	movs	r2, #0
    29d8:	4b4a      	ldr	r3, [pc, #296]	; (2b04 <SystemInit+0x1ac>)
    29da:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    29de:	f7ff ffa9 	bl	2934 <nrf53_errata_42>
    29e2:	b150      	cbz	r0, 29fa <SystemInit+0xa2>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    29e4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    29e8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    29ec:	07d1      	lsls	r1, r2, #31
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    29ee:	bf42      	ittt	mi
    29f0:	2200      	movmi	r2, #0
    29f2:	f8c3 2114 	strmi.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    29f6:	f8c3 2118 	strmi.w	r2, [r3, #280]	; 0x118
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    29fa:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    29fe:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2a02:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    2a06:	2a07      	cmp	r2, #7
    2a08:	d109      	bne.n	2a1e <SystemInit+0xc6>

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    2a0a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2a0e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2a12:	07d2      	lsls	r2, r2, #31
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    2a14:	bf44      	itt	mi
    2a16:	f06f 0201 	mvnmi.w	r2, #1
    2a1a:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    2a1e:	f7ff ff89 	bl	2934 <nrf53_errata_42>
    2a22:	b118      	cbz	r0, 2a2c <SystemInit+0xd4>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    2a24:	2265      	movs	r2, #101	; 0x65
    2a26:	4b33      	ldr	r3, [pc, #204]	; (2af4 <SystemInit+0x19c>)
    2a28:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2a2c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2a30:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2a34:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                if (var1 == 0x07)
    2a38:	2a07      	cmp	r2, #7
    2a3a:	d116      	bne.n	2a6a <SystemInit+0x112>
        }

        if (nrf53_errata_140())
        {
            if (*(volatile uint32_t *)0x50032420 & 0x80000000)
    2a3c:	4b31      	ldr	r3, [pc, #196]	; (2b04 <SystemInit+0x1ac>)
    2a3e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
    2a42:	2b00      	cmp	r3, #0
    2a44:	da11      	bge.n	2a6a <SystemInit+0x112>
            {
                /* Reset occured during calibration */
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFSYNT;
    2a46:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2a4a:	2203      	movs	r2, #3
    2a4c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
                NRF_CLOCK_S->TASKS_LFCLKSTART = 1;
    2a50:	2201      	movs	r2, #1
    2a52:	609a      	str	r2, [r3, #8]
                while (NRF_CLOCK_S->EVENTS_LFCLKSTARTED == 0) {}
    2a54:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    2a58:	2a00      	cmp	r2, #0
    2a5a:	d0fb      	beq.n	2a54 <SystemInit+0xfc>
                NRF_CLOCK_S->EVENTS_LFCLKSTARTED = 0;
    2a5c:	2200      	movs	r2, #0
    2a5e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                NRF_CLOCK_S->TASKS_LFCLKSTOP = 1;
    2a62:	2201      	movs	r2, #1
    2a64:	60da      	str	r2, [r3, #12]
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFRC;
    2a66:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2a6a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2a6e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2a72:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    2a76:	2a07      	cmp	r2, #7
    2a78:	d123      	bne.n	2ac2 <SystemInit+0x16a>
                {
                    switch(var2)
    2a7a:	3b02      	subs	r3, #2
    2a7c:	2b03      	cmp	r3, #3
    2a7e:	d802      	bhi.n	2a86 <SystemInit+0x12e>
            }
        }

        if (nrf53_errata_160())
    2a80:	4a21      	ldr	r2, [pc, #132]	; (2b08 <SystemInit+0x1b0>)
    2a82:	5cd3      	ldrb	r3, [r2, r3]
    2a84:	b1eb      	cbz	r3, 2ac2 <SystemInit+0x16a>
        {
            *((volatile uint32_t *)0x5000470C) = 0x7Eul;
    2a86:	227e      	movs	r2, #126	; 0x7e
    2a88:	4b1a      	ldr	r3, [pc, #104]	; (2af4 <SystemInit+0x19c>)
            *((volatile uint32_t *)0x5000493C) = 0x7Eul;
            *((volatile uint32_t *)0x50002118) = 0x7Ful;
            *((volatile uint32_t *)0x50039E04) = 0x0ul;
    2a8a:	491b      	ldr	r1, [pc, #108]	; (2af8 <SystemInit+0x1a0>)
            *((volatile uint32_t *)0x5000470C) = 0x7Eul;
    2a8c:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000493C) = 0x7Eul;
    2a90:	f8c3 293c 	str.w	r2, [r3, #2364]	; 0x93c
            *((volatile uint32_t *)0x50002118) = 0x7Ful;
    2a94:	237f      	movs	r3, #127	; 0x7f
    2a96:	4a1d      	ldr	r2, [pc, #116]	; (2b0c <SystemInit+0x1b4>)
    2a98:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
            *((volatile uint32_t *)0x50039E04) = 0x0ul;
    2a9c:	2300      	movs	r3, #0
    2a9e:	f8c1 3e04 	str.w	r3, [r1, #3588]	; 0xe04
            *((volatile uint32_t *)0x50039E08) = 0x0ul;
    2aa2:	f8c1 3e08 	str.w	r3, [r1, #3592]	; 0xe08
            *((volatile uint32_t *)0x50101110) = 0x0ul;
    2aa6:	f501 2148 	add.w	r1, r1, #819200	; 0xc8000
    2aaa:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110
            *((volatile uint32_t *)0x50002124) = 0x0ul;
    2aae:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
            *((volatile uint32_t *)0x5000212C) = 0x0ul;
    2ab2:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
            *((volatile uint32_t *)0x502012A0) = 0x0ul;
    2ab6:	f502 12ff 	add.w	r2, r2, #2088960	; 0x1fe000
    2aba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    2abe:	f8c2 32a0 	str.w	r3, [r2, #672]	; 0x2a0

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    2ac2:	4a13      	ldr	r2, [pc, #76]	; (2b10 <SystemInit+0x1b8>)
    2ac4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    2ac8:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    2acc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    2ad0:	4a10      	ldr	r2, [pc, #64]	; (2b14 <SystemInit+0x1bc>)
    2ad2:	4b11      	ldr	r3, [pc, #68]	; (2b18 <SystemInit+0x1c0>)
    2ad4:	6811      	ldr	r1, [r2, #0]
    2ad6:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    2ada:	69d2      	ldr	r2, [r2, #28]
    2adc:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif
}
    2ae0:	bd08      	pop	{r3, pc}
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    2ae2:	2229      	movs	r2, #41	; 0x29
    2ae4:	4b03      	ldr	r3, [pc, #12]	; (2af4 <SystemInit+0x19c>)
    2ae6:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    2aea:	2203      	movs	r2, #3
    2aec:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
    2af0:	e757      	b.n	29a2 <SystemInit+0x4a>
    2af2:	bf00      	nop
    2af4:	50004000 	.word	0x50004000
    2af8:	50039000 	.word	0x50039000
    2afc:	beef0044 	.word	0xbeef0044
    2b00:	000056a2 	.word	0x000056a2
    2b04:	50032000 	.word	0x50032000
    2b08:	0000569e 	.word	0x0000569e
    2b0c:	50002000 	.word	0x50002000
    2b10:	e000ed00 	.word	0xe000ed00
    2b14:	00ff8000 	.word	0x00ff8000
    2b18:	50006000 	.word	0x50006000

00002b1c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    2b1c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    2b1e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    2b20:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    2b22:	fab2 f382 	clz	r3, r2
    2b26:	f1c3 031f 	rsb	r3, r3, #31
    2b2a:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    2b2c:	fa05 f403 	lsl.w	r4, r5, r3
    2b30:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2b34:	e8d0 6fef 	ldaex	r6, [r0]
    2b38:	4296      	cmp	r6, r2
    2b3a:	d104      	bne.n	2b46 <nrfx_flag32_alloc+0x2a>
    2b3c:	e8c0 4fec 	stlex	ip, r4, [r0]
    2b40:	f1bc 0f00 	cmp.w	ip, #0
    2b44:	d1f6      	bne.n	2b34 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2b46:	d1eb      	bne.n	2b20 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    2b48:	4801      	ldr	r0, [pc, #4]	; (2b50 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
    2b4a:	700b      	strb	r3, [r1, #0]
}
    2b4c:	bd70      	pop	{r4, r5, r6, pc}
    2b4e:	bf00      	nop
    2b50:	0bad0000 	.word	0x0bad0000

00002b54 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    2b54:	4b04      	ldr	r3, [pc, #16]	; (2b68 <nrfx_clock_init+0x14>)
    2b56:	791a      	ldrb	r2, [r3, #4]
    2b58:	b922      	cbnz	r2, 2b64 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    2b5a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    2b5c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    2b5e:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    2b60:	4802      	ldr	r0, [pc, #8]	; (2b6c <nrfx_clock_init+0x18>)
    2b62:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    2b64:	4802      	ldr	r0, [pc, #8]	; (2b70 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    2b66:	4770      	bx	lr
    2b68:	200008ac 	.word	0x200008ac
    2b6c:	0bad0000 	.word	0x0bad0000
    2b70:	0bad000c 	.word	0x0bad000c

00002b74 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2b74:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    2b78:	b510      	push	{r4, lr}
    2b7a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    2b7e:	b152      	cbz	r2, 2b96 <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2b80:	2000      	movs	r0, #0
    2b82:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    2b86:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    2b8a:	2201      	movs	r2, #1
    2b8c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    2b90:	4b23      	ldr	r3, [pc, #140]	; (2c20 <nrfx_power_clock_irq_handler+0xac>)
    2b92:	681b      	ldr	r3, [r3, #0]
    2b94:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2b96:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2b9a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    2b9e:	b18a      	cbz	r2, 2bc4 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2ba0:	2200      	movs	r2, #0
    2ba2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    2ba6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2baa:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2bae:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    2bb2:	f002 0203 	and.w	r2, r2, #3
    2bb6:	2a01      	cmp	r2, #1
    2bb8:	f04f 0102 	mov.w	r1, #2
    2bbc:	d128      	bne.n	2c10 <nrfx_power_clock_irq_handler+0x9c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    2bbe:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2bc2:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2bc4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2bc8:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    2bcc:	b162      	cbz	r2, 2be8 <nrfx_power_clock_irq_handler+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2bce:	2200      	movs	r2, #0
    2bd0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    2bd4:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
    2bd8:	f44f 7280 	mov.w	r2, #256	; 0x100
    2bdc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    2be0:	4b0f      	ldr	r3, [pc, #60]	; (2c20 <nrfx_power_clock_irq_handler+0xac>)
    2be2:	2004      	movs	r0, #4
    2be4:	681b      	ldr	r3, [r3, #0]
    2be6:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2be8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2bec:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    2bf0:	b1aa      	cbz	r2, 2c1e <nrfx_power_clock_irq_handler+0xaa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2bf2:	2200      	movs	r2, #0
    2bf4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    2bf8:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
    2bfc:	f44f 7200 	mov.w	r2, #512	; 0x200
    2c00:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    2c04:	4b06      	ldr	r3, [pc, #24]	; (2c20 <nrfx_power_clock_irq_handler+0xac>)
    2c06:	2005      	movs	r0, #5
    }
#endif
}
    2c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    2c0c:	681b      	ldr	r3, [r3, #0]
    2c0e:	4718      	bx	r3
    2c10:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2c14:	4b02      	ldr	r3, [pc, #8]	; (2c20 <nrfx_power_clock_irq_handler+0xac>)
    2c16:	2001      	movs	r0, #1
    2c18:	681b      	ldr	r3, [r3, #0]
    2c1a:	4798      	blx	r3
    2c1c:	e7d2      	b.n	2bc4 <nrfx_power_clock_irq_handler+0x50>
}
    2c1e:	bd10      	pop	{r4, pc}
    2c20:	200008ac 	.word	0x200008ac

00002c24 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    2c24:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    2c26:	4801      	ldr	r0, [pc, #4]	; (2c2c <nrfx_dppi_channel_alloc+0x8>)
    2c28:	f7ff bf78 	b.w	2b1c <nrfx_flag32_alloc>
    2c2c:	20000064 	.word	0x20000064

00002c30 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    2c30:	2303      	movs	r3, #3
static void _DoInit(void) {
    2c32:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    2c34:	4c13      	ldr	r4, [pc, #76]	; (2c84 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    2c36:	4a14      	ldr	r2, [pc, #80]	; (2c88 <_DoInit+0x58>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    2c38:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    2c3a:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    2c3c:	4b13      	ldr	r3, [pc, #76]	; (2c8c <_DoInit+0x5c>)
  p->aUp[0].sName         = "Terminal";
    2c3e:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    2c40:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    2c42:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2c46:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    2c48:	2300      	movs	r3, #0
    2c4a:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    2c4c:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    2c4e:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    2c50:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    2c52:	4a0f      	ldr	r2, [pc, #60]	; (2c90 <_DoInit+0x60>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    2c54:	490f      	ldr	r1, [pc, #60]	; (2c94 <_DoInit+0x64>)
  p->aDown[0].pBuffer       = _acDownBuffer;
    2c56:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    2c58:	2210      	movs	r2, #16
  STRCPY((char*)&p->acID[7], "RTT");
    2c5a:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    2c5c:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    2c5e:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    2c60:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    2c62:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    2c64:	f001 fc77 	bl	4556 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    2c68:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    2c6c:	490a      	ldr	r1, [pc, #40]	; (2c98 <_DoInit+0x68>)
    2c6e:	4620      	mov	r0, r4
    2c70:	f001 fc71 	bl	4556 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    2c74:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    2c78:	2320      	movs	r3, #32
    2c7a:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    2c7c:	f3bf 8f5f 	dmb	sy
}
    2c80:	bd10      	pop	{r4, pc}
    2c82:	bf00      	nop
    2c84:	200008b4 	.word	0x200008b4
    2c88:	000056bf 	.word	0x000056bf
    2c8c:	20000bbc 	.word	0x20000bbc
    2c90:	20000bac 	.word	0x20000bac
    2c94:	000056c8 	.word	0x000056c8
    2c98:	000056cc 	.word	0x000056cc

00002c9c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    2c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    2c9e:	2718      	movs	r7, #24
    2ca0:	fb00 7507 	mla	r5, r0, r7, r7
    2ca4:	4b12      	ldr	r3, [pc, #72]	; (2cf0 <SEGGER_RTT_WriteNoLock+0x54>)
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    2ca6:	460e      	mov	r6, r1
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    2ca8:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    2caa:	fb07 3300 	mla	r3, r7, r0, r3
    2cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    2cb0:	4614      	mov	r4, r2
  switch (pRing->Flags) {
    2cb2:	2b01      	cmp	r3, #1
    2cb4:	d00a      	beq.n	2ccc <SEGGER_RTT_WriteNoLock+0x30>
    2cb6:	2b02      	cmp	r3, #2
    2cb8:	d014      	beq.n	2ce4 <SEGGER_RTT_WriteNoLock+0x48>
    2cba:	b923      	cbnz	r3, 2cc6 <SEGGER_RTT_WriteNoLock+0x2a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    2cbc:	4628      	mov	r0, r5
    2cbe:	f001 fff7 	bl	4cb0 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    2cc2:	4284      	cmp	r4, r0
    2cc4:	d908      	bls.n	2cd8 <SEGGER_RTT_WriteNoLock+0x3c>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
    2cc6:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
    2cc8:	4620      	mov	r0, r4
    2cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    2ccc:	4628      	mov	r0, r5
    2cce:	f001 ffef 	bl	4cb0 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    2cd2:	4284      	cmp	r4, r0
    2cd4:	bf28      	it	cs
    2cd6:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    2cd8:	4622      	mov	r2, r4
    2cda:	4631      	mov	r1, r6
    2cdc:	4628      	mov	r0, r5
    2cde:	f001 fff0 	bl	4cc2 <_WriteNoCheck>
    break;
    2ce2:	e7f1      	b.n	2cc8 <SEGGER_RTT_WriteNoLock+0x2c>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    2ce4:	4628      	mov	r0, r5
}
    2ce6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    2cea:	f002 b807 	b.w	4cfc <_WriteBlocking>
    2cee:	bf00      	nop
    2cf0:	200008b4 	.word	0x200008b4

00002cf4 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2cf4:	4b10      	ldr	r3, [pc, #64]	; (2d38 <z_sys_init_run_level+0x44>)
{
    2cf6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2cf8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    2cfc:	3001      	adds	r0, #1
    2cfe:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    2d02:	42a6      	cmp	r6, r4
    2d04:	d800      	bhi.n	2d08 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    2d06:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
    2d08:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    2d0c:	b18d      	cbz	r5, 2d32 <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
    2d0e:	4628      	mov	r0, r5
    2d10:	4798      	blx	r3
			if (rc != 0) {
    2d12:	b138      	cbz	r0, 2d24 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    2d14:	2800      	cmp	r0, #0
    2d16:	bfb8      	it	lt
    2d18:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
    2d1a:	28ff      	cmp	r0, #255	; 0xff
    2d1c:	bfa8      	it	ge
    2d1e:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    2d20:	68eb      	ldr	r3, [r5, #12]
    2d22:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    2d24:	68ea      	ldr	r2, [r5, #12]
    2d26:	7853      	ldrb	r3, [r2, #1]
    2d28:	f043 0301 	orr.w	r3, r3, #1
    2d2c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2d2e:	3408      	adds	r4, #8
    2d30:	e7e7      	b.n	2d02 <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    2d32:	4798      	blx	r3
    2d34:	e7fb      	b.n	2d2e <z_sys_init_run_level+0x3a>
    2d36:	bf00      	nop
    2d38:	0000547c 	.word	0x0000547c

00002d3c <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    2d3c:	2201      	movs	r2, #1
{
    2d3e:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    2d40:	4b09      	ldr	r3, [pc, #36]	; (2d68 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    2d42:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    2d44:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    2d46:	f7ff ffd5 	bl	2cf4 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    2d4a:	f000 ffeb 	bl	3d24 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    2d4e:	2004      	movs	r0, #4
    2d50:	f7ff ffd0 	bl	2cf4 <z_sys_init_run_level>

	z_init_static_threads();
    2d54:	f000 f92a 	bl	2fac <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    2d58:	f7fd fbbc 	bl	4d4 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    2d5c:	4a03      	ldr	r2, [pc, #12]	; (2d6c <bg_thread_main+0x30>)
    2d5e:	7b13      	ldrb	r3, [r2, #12]
    2d60:	f023 0301 	bic.w	r3, r3, #1
    2d64:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    2d66:	bd08      	pop	{r3, pc}
    2d68:	20000fbc 	.word	0x20000fbc
    2d6c:	200001f0 	.word	0x200001f0

00002d70 <z_bss_zero>:
{
    2d70:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    2d72:	4803      	ldr	r0, [pc, #12]	; (2d80 <z_bss_zero+0x10>)
    2d74:	4a03      	ldr	r2, [pc, #12]	; (2d84 <z_bss_zero+0x14>)
    2d76:	2100      	movs	r1, #0
    2d78:	1a12      	subs	r2, r2, r0
    2d7a:	f002 f819 	bl	4db0 <z_early_memset>
}
    2d7e:	bd08      	pop	{r3, pc}
    2d80:	20000150 	.word	0x20000150
    2d84:	20000fc0 	.word	0x20000fc0

00002d88 <z_init_cpu>:

#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    2d88:	2300      	movs	r3, #0
    2d8a:	2201      	movs	r2, #1
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    2d8c:	b570      	push	{r4, r5, r6, lr}
    2d8e:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    2d90:	e9cd 2304 	strd	r2, r3, [sp, #16]
    2d94:	220f      	movs	r2, #15
    2d96:	9301      	str	r3, [sp, #4]
    2d98:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    2d9c:	2314      	movs	r3, #20
	z_setup_new_thread(thread, stack,
    2d9e:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    2da2:	4d0e      	ldr	r5, [pc, #56]	; (2ddc <z_init_cpu+0x54>)
	struct k_thread *thread = &z_idle_threads[i];
    2da4:	4e0e      	ldr	r6, [pc, #56]	; (2de0 <z_init_cpu+0x58>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    2da6:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
    2daa:	490e      	ldr	r1, [pc, #56]	; (2de4 <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
    2dac:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    2db0:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    2db2:	fb02 1100 	mla	r1, r2, r0, r1
    2db6:	4b0c      	ldr	r3, [pc, #48]	; (2de8 <z_init_cpu+0x60>)
    2db8:	4630      	mov	r0, r6
    2dba:	9500      	str	r5, [sp, #0]
    2dbc:	f000 f8c6 	bl	2f4c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2dc0:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
    2dc2:	742c      	strb	r4, [r5, #16]
    2dc4:	f023 0304 	bic.w	r3, r3, #4
    2dc8:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    2dca:	4b08      	ldr	r3, [pc, #32]	; (2dec <z_init_cpu+0x64>)
    2dcc:	3401      	adds	r4, #1
    2dce:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    2dd2:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    2dd4:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    2dd6:	b006      	add	sp, #24
    2dd8:	bd70      	pop	{r4, r5, r6, pc}
    2dda:	bf00      	nop
    2ddc:	2000095c 	.word	0x2000095c
    2de0:	20000170 	.word	0x20000170
    2de4:	200017c0 	.word	0x200017c0
    2de8:	00003065 	.word	0x00003065
    2dec:	20000fc0 	.word	0x20000fc0

00002df0 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    2df0:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    2df2:	2000      	movs	r0, #0
{
    2df4:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    2df6:	f7ff ff7d 	bl	2cf4 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    2dfa:	4b2d      	ldr	r3, [pc, #180]	; (2eb0 <z_cstart+0xc0>)
	uint32_t msp =
    2dfc:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    2e00:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    2e04:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2e08:	2400      	movs	r4, #0
    2e0a:	23e0      	movs	r3, #224	; 0xe0
    2e0c:	4d29      	ldr	r5, [pc, #164]	; (2eb4 <z_cstart+0xc4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    2e0e:	4e2a      	ldr	r6, [pc, #168]	; (2eb8 <z_cstart+0xc8>)
    2e10:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    2e14:	77ec      	strb	r4, [r5, #31]
    2e16:	762c      	strb	r4, [r5, #24]
    2e18:	766c      	strb	r4, [r5, #25]
    2e1a:	76ac      	strb	r4, [r5, #26]
    2e1c:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    2e20:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    2e22:	4f26      	ldr	r7, [pc, #152]	; (2ebc <z_cstart+0xcc>)
    2e24:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    2e28:	626b      	str	r3, [r5, #36]	; 0x24
    2e2a:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    2e2e:	f7fe fd79 	bl	1924 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    2e32:	f7fe fb11 	bl	1458 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    2e36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2e3a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    2e3c:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    2e3e:	f7fe ff7b 	bl	1d38 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    2e42:	f7fe fe21 	bl	1a88 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    2e46:	f240 1301 	movw	r3, #257	; 0x101
    2e4a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    2e4e:	ab06      	add	r3, sp, #24
    2e50:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    2e52:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    2e56:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    2e58:	f001 ff83 	bl	4d62 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    2e5c:	2001      	movs	r0, #1
    2e5e:	f7ff ff49 	bl	2cf4 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    2e62:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    2e64:	4d16      	ldr	r5, [pc, #88]	; (2ec0 <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    2e66:	f7ff ff45 	bl	2cf4 <z_sys_init_run_level>
	z_sched_init();
    2e6a:	f000 fcf7 	bl	385c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    2e6e:	4b15      	ldr	r3, [pc, #84]	; (2ec4 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
    2e70:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    2e72:	9305      	str	r3, [sp, #20]
    2e74:	2301      	movs	r3, #1
    2e76:	4914      	ldr	r1, [pc, #80]	; (2ec8 <z_cstart+0xd8>)
    2e78:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2e7c:	e9cd 4303 	strd	r4, r3, [sp, #12]
    2e80:	4628      	mov	r0, r5
    2e82:	463b      	mov	r3, r7
    2e84:	e9cd 4401 	strd	r4, r4, [sp, #4]
    2e88:	9400      	str	r4, [sp, #0]
    2e8a:	f000 f85f 	bl	2f4c <z_setup_new_thread>
    2e8e:	4606      	mov	r6, r0
    2e90:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
    2e92:	4628      	mov	r0, r5
    2e94:	f022 0204 	bic.w	r2, r2, #4
    2e98:	736a      	strb	r2, [r5, #13]
    2e9a:	f002 f830 	bl	4efe <z_ready_thread>
	z_init_cpu(0);
    2e9e:	4620      	mov	r0, r4
    2ea0:	f7ff ff72 	bl	2d88 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    2ea4:	463a      	mov	r2, r7
    2ea6:	4631      	mov	r1, r6
    2ea8:	4628      	mov	r0, r5
    2eaa:	f7fe fbcd 	bl	1648 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    2eae:	bf00      	nop
    2eb0:	20000fc0 	.word	0x20000fc0
    2eb4:	e000ed00 	.word	0xe000ed00
    2eb8:	2000095c 	.word	0x2000095c
    2ebc:	00002d3d 	.word	0x00002d3d
    2ec0:	200001f0 	.word	0x200001f0
    2ec4:	000056d3 	.word	0x000056d3
    2ec8:	20001900 	.word	0x20001900

00002ecc <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
	int rc = 0;
    2ecc:	2000      	movs	r0, #0
{
    2ece:	b538      	push	{r3, r4, r5, lr}

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    2ed0:	4c05      	ldr	r4, [pc, #20]	; (2ee8 <init_mem_slab_module+0x1c>)
    2ed2:	4d06      	ldr	r5, [pc, #24]	; (2eec <init_mem_slab_module+0x20>)
    2ed4:	42ac      	cmp	r4, r5
    2ed6:	d300      	bcc.n	2eda <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
    2ed8:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
    2eda:	4620      	mov	r0, r4
    2edc:	f001 ff6c 	bl	4db8 <create_free_list>
		if (rc < 0) {
    2ee0:	2800      	cmp	r0, #0
    2ee2:	dbf9      	blt.n	2ed8 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    2ee4:	341c      	adds	r4, #28
    2ee6:	e7f5      	b.n	2ed4 <init_mem_slab_module+0x8>
    2ee8:	200000d4 	.word	0x200000d4
    2eec:	200000d4 	.word	0x200000d4

00002ef0 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    2ef0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2ef2:	460c      	mov	r4, r1
	__asm__ volatile(
    2ef4:	f04f 0520 	mov.w	r5, #32
    2ef8:	f3ef 8111 	mrs	r1, BASEPRI
    2efc:	f385 8812 	msr	BASEPRI_MAX, r5
    2f00:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    2f04:	6945      	ldr	r5, [r0, #20]
    2f06:	b15d      	cbz	r5, 2f20 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    2f08:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    2f0a:	682b      	ldr	r3, [r5, #0]
    2f0c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    2f0e:	6983      	ldr	r3, [r0, #24]
    2f10:	3301      	adds	r3, #1
    2f12:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    2f14:	2000      	movs	r0, #0
	__asm__ volatile(
    2f16:	f381 8811 	msr	BASEPRI, r1
    2f1a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    2f1e:	e011      	b.n	2f44 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    2f20:	ea52 0603 	orrs.w	r6, r2, r3
    2f24:	d103      	bne.n	2f2e <k_mem_slab_alloc+0x3e>
		result = -ENOMEM;
    2f26:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
    2f2a:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    2f2c:	e7f3      	b.n	2f16 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    2f2e:	e9cd 2300 	strd	r2, r3, [sp]
    2f32:	4602      	mov	r2, r0
    2f34:	3008      	adds	r0, #8
    2f36:	f000 fb9b 	bl	3670 <z_pend_curr>
		if (result == 0) {
    2f3a:	b918      	cbnz	r0, 2f44 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    2f3c:	4b02      	ldr	r3, [pc, #8]	; (2f48 <k_mem_slab_alloc+0x58>)
    2f3e:	689b      	ldr	r3, [r3, #8]
    2f40:	695b      	ldr	r3, [r3, #20]
    2f42:	6023      	str	r3, [r4, #0]
}
    2f44:	b002      	add	sp, #8
    2f46:	bd70      	pop	{r4, r5, r6, pc}
    2f48:	2000095c 	.word	0x2000095c

00002f4c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    2f4c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    2f50:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    2f52:	f100 0558 	add.w	r5, r0, #88	; 0x58
    2f56:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    2f58:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    2f5a:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
    2f5e:	2500      	movs	r5, #0
{
    2f60:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
    2f62:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    2f64:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    2f66:	e9c0 5506 	strd	r5, r5, [r0, #24]
    2f6a:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    2f6c:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    2f6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    2f70:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
    2f74:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    2f78:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    2f7a:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    2f7c:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    2f7e:	9202      	str	r2, [sp, #8]
    2f80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
    2f82:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    2f86:	9201      	str	r2, [sp, #4]
    2f88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2f8a:	9200      	str	r2, [sp, #0]
    2f8c:	4642      	mov	r2, r8
    2f8e:	f7fe fb3f 	bl	1610 <arch_new_thread>
	if (!_current) {
    2f92:	4b05      	ldr	r3, [pc, #20]	; (2fa8 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    2f94:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    2f96:	689b      	ldr	r3, [r3, #8]
    2f98:	b103      	cbz	r3, 2f9c <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    2f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
    2f9c:	4640      	mov	r0, r8
    2f9e:	6723      	str	r3, [r4, #112]	; 0x70
    2fa0:	b004      	add	sp, #16
    2fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2fa6:	bf00      	nop
    2fa8:	2000095c 	.word	0x2000095c

00002fac <z_init_static_threads>:
{
    2fac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2fb0:	4c29      	ldr	r4, [pc, #164]	; (3058 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    2fb2:	4d2a      	ldr	r5, [pc, #168]	; (305c <z_init_static_threads+0xb0>)
{
    2fb4:	b087      	sub	sp, #28
    2fb6:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    2fb8:	42ae      	cmp	r6, r5
    2fba:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    2fbe:	d30f      	bcc.n	2fe0 <z_init_static_threads+0x34>
	k_sched_lock();
    2fc0:	f000 fc1c 	bl	37fc <k_sched_lock>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    2fc4:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    2fc8:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
    2fcc:	4c22      	ldr	r4, [pc, #136]	; (3058 <z_init_static_threads+0xac>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    2fce:	f8df 9090 	ldr.w	r9, [pc, #144]	; 3060 <z_init_static_threads+0xb4>
    2fd2:	42ac      	cmp	r4, r5
    2fd4:	d320      	bcc.n	3018 <z_init_static_threads+0x6c>
}
    2fd6:	b007      	add	sp, #28
    2fd8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    2fdc:	f000 bc22 	b.w	3824 <k_sched_unlock>
		z_setup_new_thread(
    2fe0:	f854 3c04 	ldr.w	r3, [r4, #-4]
    2fe4:	9305      	str	r3, [sp, #20]
    2fe6:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    2fea:	9304      	str	r3, [sp, #16]
    2fec:	f854 3c10 	ldr.w	r3, [r4, #-16]
    2ff0:	9303      	str	r3, [sp, #12]
    2ff2:	f854 3c14 	ldr.w	r3, [r4, #-20]
    2ff6:	9302      	str	r3, [sp, #8]
    2ff8:	f854 3c18 	ldr.w	r3, [r4, #-24]
    2ffc:	9301      	str	r3, [sp, #4]
    2ffe:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    3002:	9300      	str	r3, [sp, #0]
    3004:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    3008:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    300c:	f7ff ff9e 	bl	2f4c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    3010:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    3014:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    3016:	e7ce      	b.n	2fb6 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    3018:	6a63      	ldr	r3, [r4, #36]	; 0x24
    301a:	1c5a      	adds	r2, r3, #1
    301c:	d00d      	beq.n	303a <z_init_static_threads+0x8e>
    301e:	2100      	movs	r1, #0
    3020:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
    3022:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    3026:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    302a:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    302e:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3032:	d104      	bne.n	303e <z_init_static_threads+0x92>
	z_sched_start(thread);
    3034:	4640      	mov	r0, r8
    3036:	f000 fb91 	bl	375c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    303a:	342c      	adds	r4, #44	; 0x2c
    303c:	e7c9      	b.n	2fd2 <z_init_static_threads+0x26>
    303e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3042:	2300      	movs	r3, #0
    3044:	f7fd f886 	bl	154 <__aeabi_uldivmod>
    3048:	4602      	mov	r2, r0
    304a:	460b      	mov	r3, r1
    304c:	f108 0018 	add.w	r0, r8, #24
    3050:	4649      	mov	r1, r9
    3052:	f000 fd6d 	bl	3b30 <z_add_timeout>
    3056:	e7f0      	b.n	303a <z_init_static_threads+0x8e>
    3058:	000052ec 	.word	0x000052ec
    305c:	000052ec 	.word	0x000052ec
    3060:	00004f63 	.word	0x00004f63

00003064 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    3064:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    3066:	4c0b      	ldr	r4, [pc, #44]	; (3094 <idle+0x30>)
	return !z_sys_post_kernel;
    3068:	4d0b      	ldr	r5, [pc, #44]	; (3098 <idle+0x34>)
	__asm__ volatile(
    306a:	f04f 0220 	mov.w	r2, #32
    306e:	f3ef 8311 	mrs	r3, BASEPRI
    3072:	f382 8812 	msr	BASEPRI_MAX, r2
    3076:	f3bf 8f6f 	isb	sy
    307a:	f001 ffbe 	bl	4ffa <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    307e:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    3080:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    3082:	b913      	cbnz	r3, 308a <idle+0x26>
	arch_cpu_idle();
    3084:	f7fe f9ee 	bl	1464 <arch_cpu_idle>
}
    3088:	e7ef      	b.n	306a <idle+0x6>
    308a:	f7fe f81f 	bl	10cc <pm_system_suspend>
    308e:	2800      	cmp	r0, #0
    3090:	d1eb      	bne.n	306a <idle+0x6>
    3092:	e7f7      	b.n	3084 <idle+0x20>
    3094:	2000095c 	.word	0x2000095c
    3098:	20000fbc 	.word	0x20000fbc

0000309c <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
    309c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    30a0:	4604      	mov	r4, r0
    30a2:	460e      	mov	r6, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
    30a4:	f100 0808 	add.w	r8, r0, #8
    30a8:	f04f 0120 	mov.w	r1, #32
    30ac:	f3ef 8711 	mrs	r7, BASEPRI
    30b0:	f381 8812 	msr	BASEPRI_MAX, r1
    30b4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
    30b8:	6a05      	ldr	r5, [r0, #32]
    30ba:	68c1      	ldr	r1, [r0, #12]
    30bc:	428d      	cmp	r5, r1
    30be:	d22a      	bcs.n	3116 <z_impl_k_msgq_put+0x7a>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
    30c0:	f001 ff53 	bl	4f6a <z_unpend_first_thread>
		if (pending_thread != NULL) {
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, 0);

			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
    30c4:	4631      	mov	r1, r6
		if (pending_thread != NULL) {
    30c6:	4605      	mov	r5, r0
			(void)memcpy(pending_thread->base.swap_data, data,
    30c8:	68a2      	ldr	r2, [r4, #8]
		if (pending_thread != NULL) {
    30ca:	b178      	cbz	r0, 30ec <z_impl_k_msgq_put+0x50>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    30cc:	2400      	movs	r4, #0
			(void)memcpy(pending_thread->base.swap_data, data,
    30ce:	6940      	ldr	r0, [r0, #20]
    30d0:	f001 fa5b 	bl	458a <memcpy>
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
    30d4:	4628      	mov	r0, r5
    30d6:	67ac      	str	r4, [r5, #120]	; 0x78
    30d8:	f001 ff11 	bl	4efe <z_ready_thread>
			z_reschedule(&msgq->lock, key);
    30dc:	4640      	mov	r0, r8
    30de:	4639      	mov	r1, r7
    30e0:	f000 fb2a 	bl	3738 <z_reschedule>
			return 0;
    30e4:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
    30e6:	b002      	add	sp, #8
    30e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			(void)memcpy(msgq->write_ptr, data, msgq->msg_size);
    30ec:	69e0      	ldr	r0, [r4, #28]
    30ee:	f001 fa4c 	bl	458a <memcpy>
		result = 0;
    30f2:	2000      	movs	r0, #0
			msgq->write_ptr += msgq->msg_size;
    30f4:	69e3      	ldr	r3, [r4, #28]
    30f6:	68a2      	ldr	r2, [r4, #8]
    30f8:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
    30fa:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
    30fc:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
    30fe:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
    3100:	bf04      	itt	eq
    3102:	6923      	ldreq	r3, [r4, #16]
    3104:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
    3106:	6a23      	ldr	r3, [r4, #32]
    3108:	3301      	adds	r3, #1
    310a:	6223      	str	r3, [r4, #32]
	__asm__ volatile(
    310c:	f387 8811 	msr	BASEPRI, r7
    3110:	f3bf 8f6f 	isb	sy
	return result;
    3114:	e7e7      	b.n	30e6 <z_impl_k_msgq_put+0x4a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    3116:	ea52 0103 	orrs.w	r1, r2, r3
    311a:	d00a      	beq.n	3132 <z_impl_k_msgq_put+0x96>
		_current->base.swap_data = (void *) data;
    311c:	4906      	ldr	r1, [pc, #24]	; (3138 <z_impl_k_msgq_put+0x9c>)
    311e:	6889      	ldr	r1, [r1, #8]
    3120:	614e      	str	r6, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    3122:	e9cd 2300 	strd	r2, r3, [sp]
    3126:	4639      	mov	r1, r7
    3128:	4602      	mov	r2, r0
    312a:	4640      	mov	r0, r8
    312c:	f000 faa0 	bl	3670 <z_pend_curr>
		return result;
    3130:	e7d9      	b.n	30e6 <z_impl_k_msgq_put+0x4a>
		result = -ENOMSG;
    3132:	f06f 0022 	mvn.w	r0, #34	; 0x22
    3136:	e7e9      	b.n	310c <z_impl_k_msgq_put+0x70>
    3138:	2000095c 	.word	0x2000095c

0000313c <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
    313c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    313e:	4604      	mov	r4, r0
    3140:	4608      	mov	r0, r1

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
    3142:	f104 0708 	add.w	r7, r4, #8
	__asm__ volatile(
    3146:	f04f 0120 	mov.w	r1, #32
    314a:	f3ef 8611 	mrs	r6, BASEPRI
    314e:	f381 8812 	msr	BASEPRI_MAX, r1
    3152:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
    3156:	6a21      	ldr	r1, [r4, #32]
    3158:	2900      	cmp	r1, #0
    315a:	d031      	beq.n	31c0 <z_impl_k_msgq_get+0x84>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
    315c:	68a2      	ldr	r2, [r4, #8]
    315e:	69a1      	ldr	r1, [r4, #24]
    3160:	f001 fa13 	bl	458a <memcpy>
		msgq->read_ptr += msgq->msg_size;
    3164:	69a3      	ldr	r3, [r4, #24]
    3166:	68a2      	ldr	r2, [r4, #8]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
    3168:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
    316a:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
    316c:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
    316e:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
    3170:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
    3172:	bf04      	itt	eq
    3174:	6923      	ldreq	r3, [r4, #16]
    3176:	61a3      	streq	r3, [r4, #24]
		msgq->used_msgs--;
    3178:	6a23      	ldr	r3, [r4, #32]
    317a:	3b01      	subs	r3, #1
    317c:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
    317e:	f001 fef4 	bl	4f6a <z_unpend_first_thread>
		if (pending_thread != NULL) {
    3182:	4605      	mov	r5, r0
    3184:	b360      	cbz	r0, 31e0 <z_impl_k_msgq_get+0xa4>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
    3186:	6941      	ldr	r1, [r0, #20]
    3188:	68a2      	ldr	r2, [r4, #8]
    318a:	69e0      	ldr	r0, [r4, #28]
    318c:	f001 f9fd 	bl	458a <memcpy>
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
    3190:	69e3      	ldr	r3, [r4, #28]
    3192:	68a2      	ldr	r2, [r4, #8]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
    3194:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
    3196:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
    3198:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
    319a:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
    319c:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
    319e:	bf04      	itt	eq
    31a0:	6923      	ldreq	r3, [r4, #16]
    31a2:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
    31a4:	6a23      	ldr	r3, [r4, #32]
    31a6:	3301      	adds	r3, #1
    31a8:	6223      	str	r3, [r4, #32]
    31aa:	2400      	movs	r4, #0
    31ac:	67ac      	str	r4, [r5, #120]	; 0x78
			z_ready_thread(pending_thread);
    31ae:	f001 fea6 	bl	4efe <z_ready_thread>
			z_reschedule(&msgq->lock, key);
    31b2:	4638      	mov	r0, r7
    31b4:	4631      	mov	r1, r6
    31b6:	f000 fabf 	bl	3738 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
    31ba:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
    31bc:	b003      	add	sp, #12
    31be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    31c0:	ea52 0103 	orrs.w	r1, r2, r3
    31c4:	d00a      	beq.n	31dc <z_impl_k_msgq_get+0xa0>
		_current->base.swap_data = data;
    31c6:	4909      	ldr	r1, [pc, #36]	; (31ec <z_impl_k_msgq_get+0xb0>)
    31c8:	6889      	ldr	r1, [r1, #8]
    31ca:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
    31cc:	e9cd 2300 	strd	r2, r3, [sp]
    31d0:	4631      	mov	r1, r6
    31d2:	4622      	mov	r2, r4
    31d4:	4638      	mov	r0, r7
    31d6:	f000 fa4b 	bl	3670 <z_pend_curr>
		return result;
    31da:	e7ef      	b.n	31bc <z_impl_k_msgq_get+0x80>
		result = -ENOMSG;
    31dc:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
    31e0:	f386 8811 	msr	BASEPRI, r6
    31e4:	f3bf 8f6f 	isb	sy
	return result;
    31e8:	e7e8      	b.n	31bc <z_impl_k_msgq_get+0x80>
    31ea:	bf00      	nop
    31ec:	2000095c 	.word	0x2000095c

000031f0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    31f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    31f4:	4604      	mov	r4, r0
    31f6:	4617      	mov	r7, r2
    31f8:	461e      	mov	r6, r3
	__asm__ volatile(
    31fa:	f04f 0320 	mov.w	r3, #32
    31fe:	f3ef 8811 	mrs	r8, BASEPRI
    3202:	f383 8812 	msr	BASEPRI_MAX, r3
    3206:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    320a:	68c3      	ldr	r3, [r0, #12]
    320c:	4a33      	ldr	r2, [pc, #204]	; (32dc <z_impl_k_mutex_lock+0xec>)
    320e:	b17b      	cbz	r3, 3230 <z_impl_k_mutex_lock+0x40>
    3210:	6880      	ldr	r0, [r0, #8]
    3212:	6891      	ldr	r1, [r2, #8]
    3214:	4288      	cmp	r0, r1
    3216:	d019      	beq.n	324c <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    3218:	ea57 0306 	orrs.w	r3, r7, r6
    321c:	d118      	bne.n	3250 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    321e:	f388 8811 	msr	BASEPRI, r8
    3222:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    3226:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    322a:	b002      	add	sp, #8
    322c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    3230:	6891      	ldr	r1, [r2, #8]
    3232:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    3236:	3301      	adds	r3, #1
    3238:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    323a:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    323c:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    323e:	60a3      	str	r3, [r4, #8]
    3240:	f388 8811 	msr	BASEPRI, r8
    3244:	f3bf 8f6f 	isb	sy
		return 0;
    3248:	2000      	movs	r0, #0
    324a:	e7ee      	b.n	322a <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    324c:	6921      	ldr	r1, [r4, #16]
    324e:	e7f2      	b.n	3236 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    3250:	f991 100e 	ldrsb.w	r1, [r1, #14]
    3254:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    3258:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    325c:	4299      	cmp	r1, r3
    325e:	bfa8      	it	ge
    3260:	4619      	movge	r1, r3
    3262:	4291      	cmp	r1, r2
    3264:	bfb8      	it	lt
    3266:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    3268:	428b      	cmp	r3, r1
    326a:	dd2e      	ble.n	32ca <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    326c:	f001 fdfe 	bl	4e6c <adjust_owner_prio.isra.0>
    3270:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    3272:	4622      	mov	r2, r4
    3274:	4641      	mov	r1, r8
    3276:	e9cd 7600 	strd	r7, r6, [sp]
    327a:	4819      	ldr	r0, [pc, #100]	; (32e0 <z_impl_k_mutex_lock+0xf0>)
    327c:	f000 f9f8 	bl	3670 <z_pend_curr>
	if (got_mutex == 0) {
    3280:	2800      	cmp	r0, #0
    3282:	d0e1      	beq.n	3248 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    3284:	f04f 0320 	mov.w	r3, #32
    3288:	f3ef 8611 	mrs	r6, BASEPRI
    328c:	f383 8812 	msr	BASEPRI_MAX, r3
    3290:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    3294:	68a0      	ldr	r0, [r4, #8]
    3296:	b1d0      	cbz	r0, 32ce <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    3298:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    329a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    329c:	429c      	cmp	r4, r3
    329e:	d00a      	beq.n	32b6 <z_impl_k_mutex_lock+0xc6>
    32a0:	b14b      	cbz	r3, 32b6 <z_impl_k_mutex_lock+0xc6>
    32a2:	f993 300e 	ldrsb.w	r3, [r3, #14]
    32a6:	4299      	cmp	r1, r3
    32a8:	bfa8      	it	ge
    32aa:	4619      	movge	r1, r3
    32ac:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    32b0:	4299      	cmp	r1, r3
    32b2:	bfb8      	it	lt
    32b4:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    32b6:	f001 fdd9 	bl	4e6c <adjust_owner_prio.isra.0>
    32ba:	b140      	cbz	r0, 32ce <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    32bc:	4631      	mov	r1, r6
    32be:	4808      	ldr	r0, [pc, #32]	; (32e0 <z_impl_k_mutex_lock+0xf0>)
    32c0:	f000 fa3a 	bl	3738 <z_reschedule>
	return -EAGAIN;
    32c4:	f06f 000a 	mvn.w	r0, #10
    32c8:	e7af      	b.n	322a <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    32ca:	2500      	movs	r5, #0
    32cc:	e7d1      	b.n	3272 <z_impl_k_mutex_lock+0x82>
	if (resched) {
    32ce:	2d00      	cmp	r5, #0
    32d0:	d1f4      	bne.n	32bc <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    32d2:	f386 8811 	msr	BASEPRI, r6
    32d6:	f3bf 8f6f 	isb	sy
    32da:	e7f3      	b.n	32c4 <z_impl_k_mutex_lock+0xd4>
    32dc:	2000095c 	.word	0x2000095c
    32e0:	20000fbd 	.word	0x20000fbd

000032e4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    32e4:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    32e6:	6883      	ldr	r3, [r0, #8]
{
    32e8:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    32ea:	b36b      	cbz	r3, 3348 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    32ec:	4a19      	ldr	r2, [pc, #100]	; (3354 <z_impl_k_mutex_unlock+0x70>)
    32ee:	6892      	ldr	r2, [r2, #8]
    32f0:	4293      	cmp	r3, r2
    32f2:	d12c      	bne.n	334e <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    32f4:	68c3      	ldr	r3, [r0, #12]
    32f6:	2b01      	cmp	r3, #1
    32f8:	d903      	bls.n	3302 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    32fa:	3b01      	subs	r3, #1
    32fc:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    32fe:	2000      	movs	r0, #0
}
    3300:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    3302:	f04f 0320 	mov.w	r3, #32
    3306:	f3ef 8511 	mrs	r5, BASEPRI
    330a:	f383 8812 	msr	BASEPRI_MAX, r3
    330e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    3312:	6901      	ldr	r1, [r0, #16]
    3314:	6880      	ldr	r0, [r0, #8]
    3316:	f001 fda9 	bl	4e6c <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    331a:	4620      	mov	r0, r4
    331c:	f001 fe25 	bl	4f6a <z_unpend_first_thread>
	mutex->owner = new_owner;
    3320:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    3322:	b158      	cbz	r0, 333c <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    3324:	f990 200e 	ldrsb.w	r2, [r0, #14]
    3328:	6122      	str	r2, [r4, #16]
    332a:	2200      	movs	r2, #0
    332c:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    332e:	f001 fde6 	bl	4efe <z_ready_thread>
		z_reschedule(&lock, key);
    3332:	4629      	mov	r1, r5
    3334:	4808      	ldr	r0, [pc, #32]	; (3358 <z_impl_k_mutex_unlock+0x74>)
    3336:	f000 f9ff 	bl	3738 <z_reschedule>
    333a:	e7e0      	b.n	32fe <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    333c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    333e:	f385 8811 	msr	BASEPRI, r5
    3342:	f3bf 8f6f 	isb	sy
    3346:	e7da      	b.n	32fe <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    3348:	f06f 0015 	mvn.w	r0, #21
    334c:	e7d8      	b.n	3300 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    334e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3352:	e7d5      	b.n	3300 <z_impl_k_mutex_unlock+0x1c>
    3354:	2000095c 	.word	0x2000095c
    3358:	20000fbd 	.word	0x20000fbd

0000335c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    335c:	b538      	push	{r3, r4, r5, lr}
    335e:	4604      	mov	r4, r0
	__asm__ volatile(
    3360:	f04f 0320 	mov.w	r3, #32
    3364:	f3ef 8511 	mrs	r5, BASEPRI
    3368:	f383 8812 	msr	BASEPRI_MAX, r3
    336c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    3370:	f001 fdfb 	bl	4f6a <z_unpend_first_thread>

	if (thread != NULL) {
    3374:	b148      	cbz	r0, 338a <z_impl_k_sem_give+0x2e>
    3376:	2200      	movs	r2, #0
    3378:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    337a:	f001 fdc0 	bl	4efe <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    337e:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    3380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    3384:	4804      	ldr	r0, [pc, #16]	; (3398 <z_impl_k_sem_give+0x3c>)
    3386:	f000 b9d7 	b.w	3738 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    338a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    338e:	429a      	cmp	r2, r3
    3390:	bf18      	it	ne
    3392:	3301      	addne	r3, #1
    3394:	60a3      	str	r3, [r4, #8]
}
    3396:	e7f2      	b.n	337e <z_impl_k_sem_give+0x22>
    3398:	20000fbd 	.word	0x20000fbd

0000339c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    339c:	b513      	push	{r0, r1, r4, lr}
    339e:	f04f 0420 	mov.w	r4, #32
    33a2:	f3ef 8111 	mrs	r1, BASEPRI
    33a6:	f384 8812 	msr	BASEPRI_MAX, r4
    33aa:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    33ae:	6884      	ldr	r4, [r0, #8]
    33b0:	b144      	cbz	r4, 33c4 <z_impl_k_sem_take+0x28>
		sem->count--;
    33b2:	3c01      	subs	r4, #1
    33b4:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    33b6:	f381 8811 	msr	BASEPRI, r1
    33ba:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    33be:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    33c0:	b002      	add	sp, #8
    33c2:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    33c4:	ea52 0403 	orrs.w	r4, r2, r3
    33c8:	d106      	bne.n	33d8 <z_impl_k_sem_take+0x3c>
    33ca:	f381 8811 	msr	BASEPRI, r1
    33ce:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    33d2:	f06f 000f 	mvn.w	r0, #15
    33d6:	e7f3      	b.n	33c0 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    33d8:	e9cd 2300 	strd	r2, r3, [sp]
    33dc:	4602      	mov	r2, r0
    33de:	4802      	ldr	r0, [pc, #8]	; (33e8 <z_impl_k_sem_take+0x4c>)
    33e0:	f000 f946 	bl	3670 <z_pend_curr>
	return ret;
    33e4:	e7ec      	b.n	33c0 <z_impl_k_sem_take+0x24>
    33e6:	bf00      	nop
    33e8:	20000fbd 	.word	0x20000fbd

000033ec <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
    33ec:	89c3      	ldrh	r3, [r0, #14]
    33ee:	2b7f      	cmp	r3, #127	; 0x7f
    33f0:	d812      	bhi.n	3418 <sliceable+0x2c>
	int ret = slice_ticks;
    33f2:	4b0a      	ldr	r3, [pc, #40]	; (341c <sliceable+0x30>)
    33f4:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
    33f6:	b163      	cbz	r3, 3412 <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    33f8:	4b09      	ldr	r3, [pc, #36]	; (3420 <sliceable+0x34>)
    33fa:	f990 200e 	ldrsb.w	r2, [r0, #14]
    33fe:	681b      	ldr	r3, [r3, #0]
    3400:	429a      	cmp	r2, r3
    3402:	db09      	blt.n	3418 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
    3404:	7b43      	ldrb	r3, [r0, #13]
    3406:	06db      	lsls	r3, r3, #27
    3408:	d106      	bne.n	3418 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    340a:	4b06      	ldr	r3, [pc, #24]	; (3424 <sliceable+0x38>)
    340c:	1ac3      	subs	r3, r0, r3
    340e:	bf18      	it	ne
    3410:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    3412:	f003 0001 	and.w	r0, r3, #1
    3416:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
    3418:	2300      	movs	r3, #0
    341a:	e7fa      	b.n	3412 <sliceable+0x26>
    341c:	20000988 	.word	0x20000988
    3420:	20000984 	.word	0x20000984
    3424:	20000170 	.word	0x20000170

00003428 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);

	slice_expired[cpu] = true;
    3428:	2201      	movs	r2, #1
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    342a:	4b04      	ldr	r3, [pc, #16]	; (343c <slice_timeout+0x14>)
    342c:	1ac0      	subs	r0, r0, r3
    342e:	4b04      	ldr	r3, [pc, #16]	; (3440 <slice_timeout+0x18>)
    3430:	10c0      	asrs	r0, r0, #3
    3432:	4358      	muls	r0, r3
	slice_expired[cpu] = true;
    3434:	4b03      	ldr	r3, [pc, #12]	; (3444 <slice_timeout+0x1c>)
    3436:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
    3438:	4770      	bx	lr
    343a:	bf00      	nop
    343c:	20000270 	.word	0x20000270
    3440:	aaaaaaab 	.word	0xaaaaaaab
    3444:	20000fbd 	.word	0x20000fbd

00003448 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
    3448:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
    344a:	4b0e      	ldr	r3, [pc, #56]	; (3484 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
    344c:	4c0e      	ldr	r4, [pc, #56]	; (3488 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
    344e:	7c1e      	ldrb	r6, [r3, #16]
{
    3450:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
    3452:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    3456:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
    345a:	4620      	mov	r0, r4
    345c:	f001 fdb7 	bl	4fce <z_abort_timeout>
	slice_expired[cpu] = false;
    3460:	2200      	movs	r2, #0
    3462:	4b0a      	ldr	r3, [pc, #40]	; (348c <z_reset_time_slice+0x44>)
	if (sliceable(curr)) {
    3464:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
    3466:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
    3468:	f7ff ffc0 	bl	33ec <sliceable>
    346c:	b148      	cbz	r0, 3482 <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
    346e:	4b08      	ldr	r3, [pc, #32]	; (3490 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    3470:	4620      	mov	r0, r4
			      K_TICKS(slice_time(curr) - 1));
	}
}
    3472:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			      K_TICKS(slice_time(curr) - 1));
    3476:	681a      	ldr	r2, [r3, #0]
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    3478:	4906      	ldr	r1, [pc, #24]	; (3494 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
    347a:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    347c:	17d3      	asrs	r3, r2, #31
    347e:	f000 bb57 	b.w	3b30 <z_add_timeout>
}
    3482:	bd70      	pop	{r4, r5, r6, pc}
    3484:	2000095c 	.word	0x2000095c
    3488:	20000270 	.word	0x20000270
    348c:	20000fbd 	.word	0x20000fbd
    3490:	20000988 	.word	0x20000988
    3494:	00003429 	.word	0x00003429

00003498 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    3498:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    349a:	4d0d      	ldr	r5, [pc, #52]	; (34d0 <update_cache+0x38>)
    349c:	462b      	mov	r3, r5
    349e:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    34a2:	429c      	cmp	r4, r3
    34a4:	d000      	beq.n	34a8 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    34a6:	b904      	cbnz	r4, 34aa <update_cache+0x12>
    34a8:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    34aa:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    34ac:	b938      	cbnz	r0, 34be <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    34ae:	7b5a      	ldrb	r2, [r3, #13]
    34b0:	06d2      	lsls	r2, r2, #27
    34b2:	d104      	bne.n	34be <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    34b4:	69a2      	ldr	r2, [r4, #24]
    34b6:	b912      	cbnz	r2, 34be <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    34b8:	89da      	ldrh	r2, [r3, #14]
    34ba:	2a7f      	cmp	r2, #127	; 0x7f
    34bc:	d805      	bhi.n	34ca <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    34be:	429c      	cmp	r4, r3
    34c0:	d002      	beq.n	34c8 <update_cache+0x30>
			z_reset_time_slice(thread);
    34c2:	4620      	mov	r0, r4
    34c4:	f7ff ffc0 	bl	3448 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    34c8:	4623      	mov	r3, r4
    34ca:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    34cc:	bd38      	pop	{r3, r4, r5, pc}
    34ce:	bf00      	nop
    34d0:	2000095c 	.word	0x2000095c

000034d4 <move_thread_to_end_of_prio_q>:
{
    34d4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    34d6:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    34da:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    34dc:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    34de:	7b43      	ldrb	r3, [r0, #13]
    34e0:	da04      	bge.n	34ec <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    34e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    34e6:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    34e8:	f001 fccf 	bl	4e8a <sys_dlist_remove>
	return list->head == list;
    34ec:	4a15      	ldr	r2, [pc, #84]	; (3544 <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
    34ee:	7b4b      	ldrb	r3, [r1, #13]
    34f0:	4610      	mov	r0, r2
    34f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    34f6:	734b      	strb	r3, [r1, #13]
    34f8:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    34fc:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    34fe:	4283      	cmp	r3, r0
    3500:	bf08      	it	eq
    3502:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3504:	b923      	cbnz	r3, 3510 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    3506:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    350a:	6021      	str	r1, [r4, #0]
	list->tail = node;
    350c:	6211      	str	r1, [r2, #32]
}
    350e:	e00c      	b.n	352a <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    3510:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    3514:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    3518:	42b5      	cmp	r5, r6
    351a:	d00e      	beq.n	353a <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    351c:	42ae      	cmp	r6, r5
    351e:	dd0c      	ble.n	353a <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    3520:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    3522:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    3526:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    3528:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    352a:	6890      	ldr	r0, [r2, #8]
}
    352c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    3530:	1a43      	subs	r3, r0, r1
    3532:	4258      	negs	r0, r3
    3534:	4158      	adcs	r0, r3
    3536:	f7ff bfaf 	b.w	3498 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    353a:	429c      	cmp	r4, r3
    353c:	d0e3      	beq.n	3506 <move_thread_to_end_of_prio_q+0x32>
    353e:	681b      	ldr	r3, [r3, #0]
    3540:	e7e0      	b.n	3504 <move_thread_to_end_of_prio_q+0x30>
    3542:	bf00      	nop
    3544:	2000095c 	.word	0x2000095c

00003548 <ready_thread>:
{
    3548:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    354a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    354e:	7b42      	ldrb	r2, [r0, #13]
    3550:	2b00      	cmp	r3, #0
    3552:	db29      	blt.n	35a8 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    3554:	06d3      	lsls	r3, r2, #27
    3556:	d127      	bne.n	35a8 <ready_thread+0x60>
	return node->next != NULL;
    3558:	6983      	ldr	r3, [r0, #24]
    355a:	bb2b      	cbnz	r3, 35a8 <ready_thread+0x60>
	return list->head == list;
    355c:	4913      	ldr	r1, [pc, #76]	; (35ac <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    355e:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3562:	7342      	strb	r2, [r0, #13]
    3564:	460a      	mov	r2, r1
    3566:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    356a:	4294      	cmp	r4, r2
    356c:	bf18      	it	ne
    356e:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    3570:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3572:	b923      	cbnz	r3, 357e <ready_thread+0x36>
	node->prev = tail;
    3574:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    3578:	6020      	str	r0, [r4, #0]
	list->tail = node;
    357a:	6208      	str	r0, [r1, #32]
}
    357c:	e00c      	b.n	3598 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    357e:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    3582:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    3586:	42b5      	cmp	r5, r6
    3588:	d00a      	beq.n	35a0 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    358a:	42ae      	cmp	r6, r5
    358c:	dd08      	ble.n	35a0 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    358e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    3590:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    3594:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    3596:	6058      	str	r0, [r3, #4]
		update_cache(0);
    3598:	2000      	movs	r0, #0
}
    359a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    359c:	f7ff bf7c 	b.w	3498 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    35a0:	42a3      	cmp	r3, r4
    35a2:	d0e7      	beq.n	3574 <ready_thread+0x2c>
    35a4:	681b      	ldr	r3, [r3, #0]
    35a6:	e7e4      	b.n	3572 <ready_thread+0x2a>
}
    35a8:	bc70      	pop	{r4, r5, r6}
    35aa:	4770      	bx	lr
    35ac:	2000095c 	.word	0x2000095c

000035b0 <unready_thread>:
{
    35b0:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    35b2:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    35b6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    35b8:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    35ba:	7b43      	ldrb	r3, [r0, #13]
    35bc:	da04      	bge.n	35c8 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    35be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    35c2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    35c4:	f001 fc61 	bl	4e8a <sys_dlist_remove>
	update_cache(thread == _current);
    35c8:	4b04      	ldr	r3, [pc, #16]	; (35dc <unready_thread+0x2c>)
    35ca:	6898      	ldr	r0, [r3, #8]
    35cc:	1a43      	subs	r3, r0, r1
    35ce:	4258      	negs	r0, r3
    35d0:	4158      	adcs	r0, r3
}
    35d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    35d6:	f7ff bf5f 	b.w	3498 <update_cache>
    35da:	bf00      	nop
    35dc:	2000095c 	.word	0x2000095c

000035e0 <pend_locked>:
{
    35e0:	b570      	push	{r4, r5, r6, lr}
    35e2:	4615      	mov	r5, r2
    35e4:	461c      	mov	r4, r3
    35e6:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    35e8:	f001 fc61 	bl	4eae <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    35ec:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    35f0:	bf08      	it	eq
    35f2:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    35f6:	d008      	beq.n	360a <pend_locked+0x2a>
    35f8:	462a      	mov	r2, r5
    35fa:	4623      	mov	r3, r4
    35fc:	f106 0018 	add.w	r0, r6, #24
    3600:	4902      	ldr	r1, [pc, #8]	; (360c <pend_locked+0x2c>)
}
    3602:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3606:	f000 ba93 	b.w	3b30 <z_add_timeout>
    360a:	bd70      	pop	{r4, r5, r6, pc}
    360c:	00004f63 	.word	0x00004f63

00003610 <z_time_slice>:
{
    3610:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    3612:	f04f 0320 	mov.w	r3, #32
    3616:	f3ef 8511 	mrs	r5, BASEPRI
    361a:	f383 8812 	msr	BASEPRI_MAX, r3
    361e:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
    3622:	4b10      	ldr	r3, [pc, #64]	; (3664 <z_time_slice+0x54>)
	if (pending_current == curr) {
    3624:	4a10      	ldr	r2, [pc, #64]	; (3668 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
    3626:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
    3628:	6810      	ldr	r0, [r2, #0]
    362a:	42a0      	cmp	r0, r4
    362c:	d106      	bne.n	363c <z_time_slice+0x2c>
		z_reset_time_slice(curr);
    362e:	f7ff ff0b 	bl	3448 <z_reset_time_slice>
	__asm__ volatile(
    3632:	f385 8811 	msr	BASEPRI, r5
    3636:	f3bf 8f6f 	isb	sy
}
    363a:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    363c:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    363e:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
    3640:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    3642:	4a0a      	ldr	r2, [pc, #40]	; (366c <z_time_slice+0x5c>)
    3644:	5cd3      	ldrb	r3, [r2, r3]
    3646:	2b00      	cmp	r3, #0
    3648:	d0f3      	beq.n	3632 <z_time_slice+0x22>
    364a:	4620      	mov	r0, r4
    364c:	f7ff fece 	bl	33ec <sliceable>
    3650:	2800      	cmp	r0, #0
    3652:	d0ee      	beq.n	3632 <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
    3654:	7b63      	ldrb	r3, [r4, #13]
    3656:	06db      	lsls	r3, r3, #27
    3658:	d102      	bne.n	3660 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
    365a:	4620      	mov	r0, r4
    365c:	f7ff ff3a 	bl	34d4 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
    3660:	4620      	mov	r0, r4
    3662:	e7e4      	b.n	362e <z_time_slice+0x1e>
    3664:	2000095c 	.word	0x2000095c
    3668:	20000980 	.word	0x20000980
    366c:	20000fbd 	.word	0x20000fbd

00003670 <z_pend_curr>:
{
    3670:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    3672:	480c      	ldr	r0, [pc, #48]	; (36a4 <z_pend_curr+0x34>)
    3674:	4d0c      	ldr	r5, [pc, #48]	; (36a8 <z_pend_curr+0x38>)
    3676:	6886      	ldr	r6, [r0, #8]
{
    3678:	460c      	mov	r4, r1
	pending_current = _current;
    367a:	602e      	str	r6, [r5, #0]
{
    367c:	4611      	mov	r1, r2
    367e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    3682:	f04f 0620 	mov.w	r6, #32
    3686:	f3ef 8511 	mrs	r5, BASEPRI
    368a:	f386 8812 	msr	BASEPRI_MAX, r6
    368e:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    3692:	6880      	ldr	r0, [r0, #8]
    3694:	f7ff ffa4 	bl	35e0 <pend_locked>
	ret = arch_swap(key);
    3698:	4620      	mov	r0, r4
}
    369a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    369e:	f7fd bf61 	b.w	1564 <arch_swap>
    36a2:	bf00      	nop
    36a4:	2000095c 	.word	0x2000095c
    36a8:	20000980 	.word	0x20000980

000036ac <z_set_prio>:
{
    36ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    36ae:	4604      	mov	r4, r0
    36b0:	f04f 0320 	mov.w	r3, #32
    36b4:	f3ef 8611 	mrs	r6, BASEPRI
    36b8:	f383 8812 	msr	BASEPRI_MAX, r3
    36bc:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    36c0:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    36c2:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    36c4:	06da      	lsls	r2, r3, #27
    36c6:	d119      	bne.n	36fc <z_set_prio+0x50>
	return node->next != NULL;
    36c8:	6985      	ldr	r5, [r0, #24]
    36ca:	b9bd      	cbnz	r5, 36fc <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    36cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    36d0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    36d2:	f001 fbda 	bl	4e8a <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    36d6:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    36d8:	4a16      	ldr	r2, [pc, #88]	; (3734 <z_set_prio+0x88>)
    36da:	f063 037f 	orn	r3, r3, #127	; 0x7f
    36de:	7343      	strb	r3, [r0, #13]
    36e0:	4613      	mov	r3, r2
				thread->base.prio = prio;
    36e2:	7381      	strb	r1, [r0, #14]
    36e4:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    36e8:	4298      	cmp	r0, r3
    36ea:	bf18      	it	ne
    36ec:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    36ee:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    36f0:	b95d      	cbnz	r5, 370a <z_set_prio+0x5e>
	node->prev = tail;
    36f2:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    36f6:	6004      	str	r4, [r0, #0]
	list->tail = node;
    36f8:	6214      	str	r4, [r2, #32]
}
    36fa:	e011      	b.n	3720 <z_set_prio+0x74>
    36fc:	2000      	movs	r0, #0
			thread->base.prio = prio;
    36fe:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
    3700:	f386 8811 	msr	BASEPRI, r6
    3704:	f3bf 8f6f 	isb	sy
}
    3708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    370a:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    370e:	42b9      	cmp	r1, r7
    3710:	d00b      	beq.n	372a <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3712:	428f      	cmp	r7, r1
    3714:	dd09      	ble.n	372a <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    3716:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    3718:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    371c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    371e:	606c      	str	r4, [r5, #4]
			update_cache(1);
    3720:	2001      	movs	r0, #1
    3722:	f7ff feb9 	bl	3498 <update_cache>
    3726:	2001      	movs	r0, #1
    3728:	e7ea      	b.n	3700 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    372a:	42a8      	cmp	r0, r5
    372c:	d0e1      	beq.n	36f2 <z_set_prio+0x46>
    372e:	682d      	ldr	r5, [r5, #0]
    3730:	e7de      	b.n	36f0 <z_set_prio+0x44>
    3732:	bf00      	nop
    3734:	2000095c 	.word	0x2000095c

00003738 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3738:	b949      	cbnz	r1, 374e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    373a:	f3ef 8005 	mrs	r0, IPSR
    373e:	b930      	cbnz	r0, 374e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    3740:	4b05      	ldr	r3, [pc, #20]	; (3758 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    3742:	699a      	ldr	r2, [r3, #24]
    3744:	689b      	ldr	r3, [r3, #8]
    3746:	429a      	cmp	r2, r3
    3748:	d001      	beq.n	374e <z_reschedule+0x16>
    374a:	f7fd bf0b 	b.w	1564 <arch_swap>
    374e:	f381 8811 	msr	BASEPRI, r1
    3752:	f3bf 8f6f 	isb	sy
}
    3756:	4770      	bx	lr
    3758:	2000095c 	.word	0x2000095c

0000375c <z_sched_start>:
{
    375c:	b510      	push	{r4, lr}
	__asm__ volatile(
    375e:	f04f 0220 	mov.w	r2, #32
    3762:	f3ef 8411 	mrs	r4, BASEPRI
    3766:	f382 8812 	msr	BASEPRI_MAX, r2
    376a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    376e:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    3770:	0751      	lsls	r1, r2, #29
    3772:	d404      	bmi.n	377e <z_sched_start+0x22>
	__asm__ volatile(
    3774:	f384 8811 	msr	BASEPRI, r4
    3778:	f3bf 8f6f 	isb	sy
}
    377c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    377e:	f022 0204 	bic.w	r2, r2, #4
    3782:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    3784:	f7ff fee0 	bl	3548 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    3788:	4621      	mov	r1, r4
}
    378a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    378e:	4801      	ldr	r0, [pc, #4]	; (3794 <z_sched_start+0x38>)
    3790:	f7ff bfd2 	b.w	3738 <z_reschedule>
    3794:	20000fbe 	.word	0x20000fbe

00003798 <z_impl_k_thread_suspend>:
{
    3798:	b570      	push	{r4, r5, r6, lr}
    379a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    379c:	3018      	adds	r0, #24
    379e:	f001 fc16 	bl	4fce <z_abort_timeout>
	__asm__ volatile(
    37a2:	f04f 0320 	mov.w	r3, #32
    37a6:	f3ef 8611 	mrs	r6, BASEPRI
    37aa:	f383 8812 	msr	BASEPRI_MAX, r3
    37ae:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    37b2:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    37b6:	7b63      	ldrb	r3, [r4, #13]
    37b8:	2a00      	cmp	r2, #0
    37ba:	da05      	bge.n	37c8 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    37bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
    37c0:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
    37c2:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    37c4:	f001 fb61 	bl	4e8a <sys_dlist_remove>
		update_cache(thread == _current);
    37c8:	4d0b      	ldr	r5, [pc, #44]	; (37f8 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    37ca:	7b63      	ldrb	r3, [r4, #13]
    37cc:	68a8      	ldr	r0, [r5, #8]
    37ce:	f043 0310 	orr.w	r3, r3, #16
    37d2:	7363      	strb	r3, [r4, #13]
    37d4:	1b03      	subs	r3, r0, r4
    37d6:	4258      	negs	r0, r3
    37d8:	4158      	adcs	r0, r3
    37da:	f7ff fe5d 	bl	3498 <update_cache>
	__asm__ volatile(
    37de:	f386 8811 	msr	BASEPRI, r6
    37e2:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    37e6:	68ab      	ldr	r3, [r5, #8]
    37e8:	42a3      	cmp	r3, r4
    37ea:	d103      	bne.n	37f4 <z_impl_k_thread_suspend+0x5c>
}
    37ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    37f0:	f001 bbe3 	b.w	4fba <z_reschedule_unlocked>
}
    37f4:	bd70      	pop	{r4, r5, r6, pc}
    37f6:	bf00      	nop
    37f8:	2000095c 	.word	0x2000095c

000037fc <k_sched_lock>:
	__asm__ volatile(
    37fc:	f04f 0320 	mov.w	r3, #32
    3800:	f3ef 8111 	mrs	r1, BASEPRI
    3804:	f383 8812 	msr	BASEPRI_MAX, r3
    3808:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    380c:	4b04      	ldr	r3, [pc, #16]	; (3820 <k_sched_lock+0x24>)
    380e:	689a      	ldr	r2, [r3, #8]
    3810:	7bd3      	ldrb	r3, [r2, #15]
    3812:	3b01      	subs	r3, #1
    3814:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    3816:	f381 8811 	msr	BASEPRI, r1
    381a:	f3bf 8f6f 	isb	sy
}
    381e:	4770      	bx	lr
    3820:	2000095c 	.word	0x2000095c

00003824 <k_sched_unlock>:
{
    3824:	b510      	push	{r4, lr}
	__asm__ volatile(
    3826:	f04f 0320 	mov.w	r3, #32
    382a:	f3ef 8411 	mrs	r4, BASEPRI
    382e:	f383 8812 	msr	BASEPRI_MAX, r3
    3832:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    3836:	4b08      	ldr	r3, [pc, #32]	; (3858 <k_sched_unlock+0x34>)
		update_cache(0);
    3838:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    383a:	689a      	ldr	r2, [r3, #8]
    383c:	7bd3      	ldrb	r3, [r2, #15]
    383e:	3301      	adds	r3, #1
    3840:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    3842:	f7ff fe29 	bl	3498 <update_cache>
	__asm__ volatile(
    3846:	f384 8811 	msr	BASEPRI, r4
    384a:	f3bf 8f6f 	isb	sy
}
    384e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    3852:	f001 bbb2 	b.w	4fba <z_reschedule_unlocked>
    3856:	bf00      	nop
    3858:	2000095c 	.word	0x2000095c

0000385c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    385c:	4b02      	ldr	r3, [pc, #8]	; (3868 <z_sched_init+0xc>)
    385e:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
    3862:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
    3866:	4770      	bx	lr
    3868:	2000095c 	.word	0x2000095c

0000386c <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    386c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    386e:	f04f 0320 	mov.w	r3, #32
    3872:	f3ef 8511 	mrs	r5, BASEPRI
    3876:	f383 8812 	msr	BASEPRI_MAX, r3
    387a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    387e:	4919      	ldr	r1, [pc, #100]	; (38e4 <z_impl_k_yield+0x78>)
    3880:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3882:	7b43      	ldrb	r3, [r0, #13]
    3884:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3888:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    388a:	f001 fafe 	bl	4e8a <sys_dlist_remove>
	return list->head == list;
    388e:	4608      	mov	r0, r1
	}
	queue_thread(_current);
    3890:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    3892:	7b5a      	ldrb	r2, [r3, #13]
    3894:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3898:	735a      	strb	r2, [r3, #13]
    389a:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
    389e:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    38a0:	4282      	cmp	r2, r0
    38a2:	bf08      	it	eq
    38a4:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    38a6:	b922      	cbnz	r2, 38b2 <z_impl_k_yield+0x46>
	node->prev = tail;
    38a8:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    38ac:	6023      	str	r3, [r4, #0]
	list->tail = node;
    38ae:	620b      	str	r3, [r1, #32]
}
    38b0:	e00c      	b.n	38cc <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    38b2:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    38b6:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    38ba:	42be      	cmp	r6, r7
    38bc:	d00e      	beq.n	38dc <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    38be:	42b7      	cmp	r7, r6
    38c0:	dd0c      	ble.n	38dc <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    38c2:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    38c4:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    38c8:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    38ca:	6053      	str	r3, [r2, #4]
	update_cache(1);
    38cc:	2001      	movs	r0, #1
    38ce:	f7ff fde3 	bl	3498 <update_cache>
    38d2:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    38d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    38d8:	f7fd be44 	b.w	1564 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    38dc:	42a2      	cmp	r2, r4
    38de:	d0e3      	beq.n	38a8 <z_impl_k_yield+0x3c>
    38e0:	6812      	ldr	r2, [r2, #0]
    38e2:	e7e0      	b.n	38a6 <z_impl_k_yield+0x3a>
    38e4:	2000095c 	.word	0x2000095c

000038e8 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    38e8:	ea50 0301 	orrs.w	r3, r0, r1
{
    38ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38f0:	4605      	mov	r5, r0
    38f2:	460e      	mov	r6, r1
	if (ticks == 0) {
    38f4:	d103      	bne.n	38fe <z_tick_sleep+0x16>
	z_impl_k_yield();
    38f6:	f7ff ffb9 	bl	386c <z_impl_k_yield>
		k_yield();
		return 0;
    38fa:	2000      	movs	r0, #0
    38fc:	e02c      	b.n	3958 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    38fe:	1c83      	adds	r3, r0, #2
    3900:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    3904:	db2a      	blt.n	395c <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    3906:	f001 fb88 	bl	501a <sys_clock_tick_get_32>
    390a:	182c      	adds	r4, r5, r0
    390c:	f04f 0320 	mov.w	r3, #32
    3910:	f3ef 8811 	mrs	r8, BASEPRI
    3914:	f383 8812 	msr	BASEPRI_MAX, r3
    3918:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    391c:	4f11      	ldr	r7, [pc, #68]	; (3964 <z_tick_sleep+0x7c>)
    391e:	4b12      	ldr	r3, [pc, #72]	; (3968 <z_tick_sleep+0x80>)
    3920:	68b8      	ldr	r0, [r7, #8]
    3922:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    3924:	f7ff fe44 	bl	35b0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    3928:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    392a:	4910      	ldr	r1, [pc, #64]	; (396c <z_tick_sleep+0x84>)
    392c:	462a      	mov	r2, r5
    392e:	4633      	mov	r3, r6
    3930:	3018      	adds	r0, #24
    3932:	f000 f8fd 	bl	3b30 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    3936:	68ba      	ldr	r2, [r7, #8]
    3938:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
    393a:	7b53      	ldrb	r3, [r2, #13]
    393c:	f043 0310 	orr.w	r3, r3, #16
    3940:	7353      	strb	r3, [r2, #13]
    3942:	f7fd fe0f 	bl	1564 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    3946:	f001 fb68 	bl	501a <sys_clock_tick_get_32>
    394a:	1a20      	subs	r0, r4, r0
    394c:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    3950:	2801      	cmp	r0, #1
    3952:	f173 0300 	sbcs.w	r3, r3, #0
    3956:	dbd0      	blt.n	38fa <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    3958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    395c:	f06f 0401 	mvn.w	r4, #1
    3960:	1a24      	subs	r4, r4, r0
    3962:	e7d3      	b.n	390c <z_tick_sleep+0x24>
    3964:	2000095c 	.word	0x2000095c
    3968:	20000980 	.word	0x20000980
    396c:	00004f63 	.word	0x00004f63

00003970 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3970:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    3974:	bf08      	it	eq
    3976:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    397a:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    397c:	d106      	bne.n	398c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    397e:	4b08      	ldr	r3, [pc, #32]	; (39a0 <z_impl_k_sleep+0x30>)
    3980:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    3982:	f7ff ff09 	bl	3798 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    3986:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    398a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    398c:	f7ff ffac 	bl	38e8 <z_tick_sleep>
    3990:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    3994:	fb80 0303 	smull	r0, r3, r0, r3
    3998:	0bc0      	lsrs	r0, r0, #15
    399a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    399e:	e7f4      	b.n	398a <z_impl_k_sleep+0x1a>
    39a0:	2000095c 	.word	0x2000095c

000039a4 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    39a4:	4b01      	ldr	r3, [pc, #4]	; (39ac <z_impl_z_current_get+0x8>)
    39a6:	6898      	ldr	r0, [r3, #8]
    39a8:	4770      	bx	lr
    39aa:	bf00      	nop
    39ac:	2000095c 	.word	0x2000095c

000039b0 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    39b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    39b4:	4604      	mov	r4, r0
    39b6:	f04f 0320 	mov.w	r3, #32
    39ba:	f3ef 8611 	mrs	r6, BASEPRI
    39be:	f383 8812 	msr	BASEPRI_MAX, r3
    39c2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    39c6:	7b03      	ldrb	r3, [r0, #12]
    39c8:	07d9      	lsls	r1, r3, #31
    39ca:	d50b      	bpl.n	39e4 <z_thread_abort+0x34>
	__asm__ volatile(
    39cc:	f386 8811 	msr	BASEPRI, r6
    39d0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    39d4:	4040      	eors	r0, r0
    39d6:	f380 8811 	msr	BASEPRI, r0
    39da:	f04f 0004 	mov.w	r0, #4
    39de:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    39e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    39e4:	7b43      	ldrb	r3, [r0, #13]
    39e6:	071a      	lsls	r2, r3, #28
    39e8:	d504      	bpl.n	39f4 <z_thread_abort+0x44>
    39ea:	f386 8811 	msr	BASEPRI, r6
    39ee:	f3bf 8f6f 	isb	sy
    39f2:	e7f5      	b.n	39e0 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    39f4:	f023 0220 	bic.w	r2, r3, #32
    39f8:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    39fc:	09d2      	lsrs	r2, r2, #7
    39fe:	d120      	bne.n	3a42 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    3a00:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    3a02:	68a3      	ldr	r3, [r4, #8]
    3a04:	b113      	cbz	r3, 3a0c <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    3a06:	4620      	mov	r0, r4
    3a08:	f001 fa47 	bl	4e9a <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    3a0c:	f104 0018 	add.w	r0, r4, #24
    3a10:	f001 fadd 	bl	4fce <z_abort_timeout>
    3a14:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    3a18:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    3a1c:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3a1e:	42bd      	cmp	r5, r7
    3a20:	d000      	beq.n	3a24 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    3a22:	b9b5      	cbnz	r5, 3a52 <z_thread_abort+0xa2>
		update_cache(1);
    3a24:	2001      	movs	r0, #1
    3a26:	f7ff fd37 	bl	3498 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    3a2a:	4b10      	ldr	r3, [pc, #64]	; (3a6c <z_thread_abort+0xbc>)
    3a2c:	689b      	ldr	r3, [r3, #8]
    3a2e:	42a3      	cmp	r3, r4
    3a30:	d1db      	bne.n	39ea <z_thread_abort+0x3a>
    3a32:	f3ef 8305 	mrs	r3, IPSR
    3a36:	2b00      	cmp	r3, #0
    3a38:	d1d7      	bne.n	39ea <z_thread_abort+0x3a>
    3a3a:	4630      	mov	r0, r6
    3a3c:	f7fd fd92 	bl	1564 <arch_swap>
	return ret;
    3a40:	e7d3      	b.n	39ea <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3a42:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    3a46:	f043 0308 	orr.w	r3, r3, #8
    3a4a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3a4c:	f001 fa1d 	bl	4e8a <sys_dlist_remove>
}
    3a50:	e7d7      	b.n	3a02 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    3a52:	4628      	mov	r0, r5
    3a54:	f001 fa21 	bl	4e9a <unpend_thread_no_timeout>
    3a58:	f105 0018 	add.w	r0, r5, #24
    3a5c:	f001 fab7 	bl	4fce <z_abort_timeout>
		ready_thread(thread);
    3a60:	4628      	mov	r0, r5
    3a62:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
    3a66:	f7ff fd6f 	bl	3548 <ready_thread>
    3a6a:	e7d7      	b.n	3a1c <z_thread_abort+0x6c>
    3a6c:	2000095c 	.word	0x2000095c

00003a70 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    3a70:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    3a72:	4806      	ldr	r0, [pc, #24]	; (3a8c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    3a74:	4a06      	ldr	r2, [pc, #24]	; (3a90 <z_data_copy+0x20>)
    3a76:	4907      	ldr	r1, [pc, #28]	; (3a94 <z_data_copy+0x24>)
    3a78:	1a12      	subs	r2, r2, r0
    3a7a:	f001 f99b 	bl	4db4 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    3a7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    3a82:	4a05      	ldr	r2, [pc, #20]	; (3a98 <z_data_copy+0x28>)
    3a84:	4905      	ldr	r1, [pc, #20]	; (3a9c <z_data_copy+0x2c>)
    3a86:	4806      	ldr	r0, [pc, #24]	; (3aa0 <z_data_copy+0x30>)
    3a88:	f001 b994 	b.w	4db4 <z_early_memcpy>
    3a8c:	20000000 	.word	0x20000000
    3a90:	2000014c 	.word	0x2000014c
    3a94:	0000570c 	.word	0x0000570c
    3a98:	00000000 	.word	0x00000000
    3a9c:	0000570c 	.word	0x0000570c
    3aa0:	20000000 	.word	0x20000000

00003aa4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    3aa4:	4b03      	ldr	r3, [pc, #12]	; (3ab4 <elapsed+0x10>)
    3aa6:	681b      	ldr	r3, [r3, #0]
    3aa8:	b90b      	cbnz	r3, 3aae <elapsed+0xa>
    3aaa:	f7fe bf21 	b.w	28f0 <sys_clock_elapsed>
}
    3aae:	2000      	movs	r0, #0
    3ab0:	4770      	bx	lr
    3ab2:	bf00      	nop
    3ab4:	2000098c 	.word	0x2000098c

00003ab8 <next_timeout>:

static int32_t next_timeout(void)
{
    3ab8:	b510      	push	{r4, lr}
	return list->head == list;
    3aba:	4b0e      	ldr	r3, [pc, #56]	; (3af4 <next_timeout+0x3c>)
    3abc:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3abe:	429c      	cmp	r4, r3
    3ac0:	d104      	bne.n	3acc <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    3ac2:	f7ff ffef 	bl	3aa4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    3ac6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
    3aca:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    3acc:	f7ff ffea 	bl	3aa4 <elapsed>
	if ((to == NULL) ||
    3ad0:	2c00      	cmp	r4, #0
    3ad2:	d0f8      	beq.n	3ac6 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    3ad4:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    3ad8:	1a1b      	subs	r3, r3, r0
    3ada:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    3ade:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    3ae2:	f172 0100 	sbcs.w	r1, r2, #0
    3ae6:	daee      	bge.n	3ac6 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    3ae8:	2a00      	cmp	r2, #0
    3aea:	bfac      	ite	ge
    3aec:	4618      	movge	r0, r3
    3aee:	2000      	movlt	r0, #0
	return ret;
    3af0:	e7eb      	b.n	3aca <next_timeout+0x12>
    3af2:	bf00      	nop
    3af4:	20000068 	.word	0x20000068

00003af8 <remove_timeout>:
{
    3af8:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3afa:	b170      	cbz	r0, 3b1a <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    3afc:	4b0b      	ldr	r3, [pc, #44]	; (3b2c <remove_timeout+0x34>)
    3afe:	685b      	ldr	r3, [r3, #4]
    3b00:	4298      	cmp	r0, r3
    3b02:	d00a      	beq.n	3b1a <remove_timeout+0x22>
    3b04:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    3b06:	b143      	cbz	r3, 3b1a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    3b08:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    3b0c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    3b10:	1912      	adds	r2, r2, r4
    3b12:	eb41 0105 	adc.w	r1, r1, r5
    3b16:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    3b1a:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    3b1e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    3b20:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    3b22:	2300      	movs	r3, #0
	node->prev = NULL;
    3b24:	e9c0 3300 	strd	r3, r3, [r0]
}
    3b28:	bd30      	pop	{r4, r5, pc}
    3b2a:	bf00      	nop
    3b2c:	20000068 	.word	0x20000068

00003b30 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3b30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    3b34:	bf08      	it	eq
    3b36:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    3b3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b3c:	4604      	mov	r4, r0
    3b3e:	461d      	mov	r5, r3
    3b40:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3b42:	d05c      	beq.n	3bfe <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    3b44:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    3b46:	f04f 0320 	mov.w	r3, #32
    3b4a:	f3ef 8711 	mrs	r7, BASEPRI
    3b4e:	f383 8812 	msr	BASEPRI_MAX, r3
    3b52:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    3b56:	3201      	adds	r2, #1
    3b58:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    3b5c:	da24      	bge.n	3ba8 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    3b5e:	f06f 0301 	mvn.w	r3, #1
    3b62:	492c      	ldr	r1, [pc, #176]	; (3c14 <z_add_timeout+0xe4>)
    3b64:	e9d1 2000 	ldrd	r2, r0, [r1]
    3b68:	1a9b      	subs	r3, r3, r2
    3b6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3b6e:	eb62 0000 	sbc.w	r0, r2, r0
    3b72:	1b9e      	subs	r6, r3, r6
    3b74:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    3b78:	2e01      	cmp	r6, #1
    3b7a:	f170 0300 	sbcs.w	r3, r0, #0
    3b7e:	da01      	bge.n	3b84 <z_add_timeout+0x54>
    3b80:	2601      	movs	r6, #1
    3b82:	2000      	movs	r0, #0
    3b84:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    3b88:	4e23      	ldr	r6, [pc, #140]	; (3c18 <z_add_timeout+0xe8>)
    3b8a:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    3b8e:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3b90:	45b4      	cmp	ip, r6
    3b92:	bf08      	it	eq
    3b94:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    3b98:	f1bc 0f00 	cmp.w	ip, #0
    3b9c:	d10d      	bne.n	3bba <z_add_timeout+0x8a>
	node->prev = tail;
    3b9e:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    3ba2:	602c      	str	r4, [r5, #0]
	list->tail = node;
    3ba4:	6074      	str	r4, [r6, #4]
}
    3ba6:	e01c      	b.n	3be2 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    3ba8:	f7ff ff7c 	bl	3aa4 <elapsed>
    3bac:	3601      	adds	r6, #1
    3bae:	f145 0500 	adc.w	r5, r5, #0
    3bb2:	1836      	adds	r6, r6, r0
    3bb4:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    3bb8:	e7e4      	b.n	3b84 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    3bba:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    3bbe:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    3bc2:	4293      	cmp	r3, r2
    3bc4:	eb71 0e00 	sbcs.w	lr, r1, r0
    3bc8:	da1a      	bge.n	3c00 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
    3bca:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    3bcc:	f8dc 3004 	ldr.w	r3, [ip, #4]
    3bd0:	eb60 0001 	sbc.w	r0, r0, r1
    3bd4:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    3bd8:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    3bdc:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    3bde:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    3be2:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3be4:	42b3      	cmp	r3, r6
    3be6:	d006      	beq.n	3bf6 <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    3be8:	429c      	cmp	r4, r3
    3bea:	d104      	bne.n	3bf6 <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
    3bec:	f7ff ff64 	bl	3ab8 <next_timeout>
    3bf0:	2100      	movs	r1, #0
    3bf2:	f7fe fe4b 	bl	288c <sys_clock_set_timeout>
	__asm__ volatile(
    3bf6:	f387 8811 	msr	BASEPRI, r7
    3bfa:	f3bf 8f6f 	isb	sy
		}
	}
}
    3bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    3c00:	1a9b      	subs	r3, r3, r2
    3c02:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    3c06:	45ac      	cmp	ip, r5
    3c08:	e9c4 3104 	strd	r3, r1, [r4, #16]
    3c0c:	d0c7      	beq.n	3b9e <z_add_timeout+0x6e>
    3c0e:	f8dc c000 	ldr.w	ip, [ip]
    3c12:	e7c1      	b.n	3b98 <z_add_timeout+0x68>
    3c14:	20000288 	.word	0x20000288
    3c18:	20000068 	.word	0x20000068

00003c1c <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    3c1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    3c20:	f04f 0320 	mov.w	r3, #32
    3c24:	f3ef 8c11 	mrs	ip, BASEPRI
    3c28:	f383 8812 	msr	BASEPRI_MAX, r3
    3c2c:	f3bf 8f6f 	isb	sy
	return list->head == list;
    3c30:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 3ce4 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    3c34:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 3ce8 <sys_clock_announce+0xcc>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
    3c38:	2400      	movs	r4, #0
	announce_remaining = ticks;
    3c3a:	f8c9 0000 	str.w	r0, [r9]
    3c3e:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
    3c42:	2500      	movs	r5, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3c44:	4550      	cmp	r0, sl
    3c46:	bf08      	it	eq
    3c48:	2000      	moveq	r0, #0
		curr_tick += dt;
    3c4a:	4f28      	ldr	r7, [pc, #160]	; (3cec <sys_clock_announce+0xd0>)
    3c4c:	46e0      	mov	r8, ip
    3c4e:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
    3c52:	f8d9 3000 	ldr.w	r3, [r9]
    3c56:	b380      	cbz	r0, 3cba <sys_clock_announce+0x9e>
    3c58:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
    3c5c:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    3c60:	42b3      	cmp	r3, r6
    3c62:	eb7e 0b0c 	sbcs.w	fp, lr, ip
    3c66:	da05      	bge.n	3c74 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    3c68:	1af6      	subs	r6, r6, r3
    3c6a:	eb6c 040e 	sbc.w	r4, ip, lr
    3c6e:	e9c0 6404 	strd	r6, r4, [r0, #16]
    3c72:	e022      	b.n	3cba <sys_clock_announce+0x9e>
		curr_tick += dt;
    3c74:	18b2      	adds	r2, r6, r2
    3c76:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
    3c7a:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
    3c7e:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
    3c82:	f7ff ff39 	bl	3af8 <remove_timeout>
	__asm__ volatile(
    3c86:	f388 8811 	msr	BASEPRI, r8
    3c8a:	f3bf 8f6f 	isb	sy
		t->fn(t);
    3c8e:	6883      	ldr	r3, [r0, #8]
    3c90:	4798      	blx	r3
	__asm__ volatile(
    3c92:	f04f 0320 	mov.w	r3, #32
    3c96:	f3ef 8811 	mrs	r8, BASEPRI
    3c9a:	f383 8812 	msr	BASEPRI_MAX, r3
    3c9e:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    3ca2:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
    3ca6:	f8da 0000 	ldr.w	r0, [sl]
    3caa:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3cac:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
    3cae:	46c4      	mov	ip, r8
    3cb0:	f8c9 3000 	str.w	r3, [r9]
    3cb4:	d1ca      	bne.n	3c4c <sys_clock_announce+0x30>
		curr_tick += dt;
    3cb6:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    3cba:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    3cbc:	189a      	adds	r2, r3, r2
    3cbe:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
    3cc2:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
    3cc6:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
    3cca:	f7ff fef5 	bl	3ab8 <next_timeout>
    3cce:	4621      	mov	r1, r4
    3cd0:	f7fe fddc 	bl	288c <sys_clock_set_timeout>
	__asm__ volatile(
    3cd4:	f388 8811 	msr	BASEPRI, r8
    3cd8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
    3cdc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
    3ce0:	f7ff bc96 	b.w	3610 <z_time_slice>
    3ce4:	20000068 	.word	0x20000068
    3ce8:	2000098c 	.word	0x2000098c
    3cec:	20000288 	.word	0x20000288

00003cf0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    3cf0:	b510      	push	{r4, lr}
	__asm__ volatile(
    3cf2:	f04f 0320 	mov.w	r3, #32
    3cf6:	f3ef 8411 	mrs	r4, BASEPRI
    3cfa:	f383 8812 	msr	BASEPRI_MAX, r3
    3cfe:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    3d02:	f7ff fecf 	bl	3aa4 <elapsed>
    3d06:	4603      	mov	r3, r0
    3d08:	4a05      	ldr	r2, [pc, #20]	; (3d20 <sys_clock_tick_get+0x30>)
    3d0a:	e9d2 0100 	ldrd	r0, r1, [r2]
    3d0e:	1818      	adds	r0, r3, r0
    3d10:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    3d14:	f384 8811 	msr	BASEPRI, r4
    3d18:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    3d1c:	bd10      	pop	{r4, pc}
    3d1e:	bf00      	nop
    3d20:	20000288 	.word	0x20000288

00003d24 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    3d24:	4801      	ldr	r0, [pc, #4]	; (3d2c <boot_banner+0x8>)
    3d26:	f000 b9a9 	b.w	407c <printk>
    3d2a:	bf00      	nop
    3d2c:	000056db 	.word	0x000056db

00003d30 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
    3d30:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
    3d32:	4c06      	ldr	r4, [pc, #24]	; (3d4c <statics_init+0x1c>)
    3d34:	4d06      	ldr	r5, [pc, #24]	; (3d50 <statics_init+0x20>)
    3d36:	42ac      	cmp	r4, r5
    3d38:	d301      	bcc.n	3d3e <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    3d3a:	2000      	movs	r0, #0
    3d3c:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    3d3e:	4620      	mov	r0, r4
    3d40:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    3d44:	f001 f971 	bl	502a <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    3d48:	3414      	adds	r4, #20
    3d4a:	e7f4      	b.n	3d36 <statics_init+0x6>
    3d4c:	200000d4 	.word	0x200000d4
    3d50:	200000d4 	.word	0x200000d4

00003d54 <nrf_cc3xx_platform_init_no_rng>:
    3d54:	b510      	push	{r4, lr}
    3d56:	4c0a      	ldr	r4, [pc, #40]	; (3d80 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    3d58:	6823      	ldr	r3, [r4, #0]
    3d5a:	b11b      	cbz	r3, 3d64 <nrf_cc3xx_platform_init_no_rng+0x10>
    3d5c:	2301      	movs	r3, #1
    3d5e:	6023      	str	r3, [r4, #0]
    3d60:	2000      	movs	r0, #0
    3d62:	bd10      	pop	{r4, pc}
    3d64:	f000 f8f4 	bl	3f50 <CC_LibInitNoRng>
    3d68:	2800      	cmp	r0, #0
    3d6a:	d0f7      	beq.n	3d5c <nrf_cc3xx_platform_init_no_rng+0x8>
    3d6c:	3801      	subs	r0, #1
    3d6e:	2807      	cmp	r0, #7
    3d70:	d803      	bhi.n	3d7a <nrf_cc3xx_platform_init_no_rng+0x26>
    3d72:	4b04      	ldr	r3, [pc, #16]	; (3d84 <nrf_cc3xx_platform_init_no_rng+0x30>)
    3d74:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    3d78:	bd10      	pop	{r4, pc}
    3d7a:	4803      	ldr	r0, [pc, #12]	; (3d88 <nrf_cc3xx_platform_init_no_rng+0x34>)
    3d7c:	bd10      	pop	{r4, pc}
    3d7e:	bf00      	nop
    3d80:	20000990 	.word	0x20000990
    3d84:	00005494 	.word	0x00005494
    3d88:	ffff8ffe 	.word	0xffff8ffe

00003d8c <nrf_cc3xx_platform_abort>:
    3d8c:	f3bf 8f4f 	dsb	sy
    3d90:	4905      	ldr	r1, [pc, #20]	; (3da8 <nrf_cc3xx_platform_abort+0x1c>)
    3d92:	4b06      	ldr	r3, [pc, #24]	; (3dac <nrf_cc3xx_platform_abort+0x20>)
    3d94:	68ca      	ldr	r2, [r1, #12]
    3d96:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3d9a:	4313      	orrs	r3, r2
    3d9c:	60cb      	str	r3, [r1, #12]
    3d9e:	f3bf 8f4f 	dsb	sy
    3da2:	bf00      	nop
    3da4:	e7fd      	b.n	3da2 <nrf_cc3xx_platform_abort+0x16>
    3da6:	bf00      	nop
    3da8:	e000ed00 	.word	0xe000ed00
    3dac:	05fa0004 	.word	0x05fa0004

00003db0 <CC_PalAbort>:
    3db0:	b430      	push	{r4, r5}
    3db2:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    3db6:	2500      	movs	r5, #0
    3db8:	4b0b      	ldr	r3, [pc, #44]	; (3de8 <CC_PalAbort+0x38>)
    3dba:	4c0c      	ldr	r4, [pc, #48]	; (3dec <CC_PalAbort+0x3c>)
    3dbc:	490c      	ldr	r1, [pc, #48]	; (3df0 <CC_PalAbort+0x40>)
    3dbe:	6849      	ldr	r1, [r1, #4]
    3dc0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    3dc4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    3dc8:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    3dcc:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    3dd0:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    3dd4:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
    3dd8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    3ddc:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
    3de0:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    3de4:	bc30      	pop	{r4, r5}
    3de6:	4708      	bx	r1
    3de8:	50845000 	.word	0x50845000
    3dec:	50844000 	.word	0x50844000
    3df0:	20000070 	.word	0x20000070

00003df4 <nrf_cc3xx_platform_set_abort>:
    3df4:	4b02      	ldr	r3, [pc, #8]	; (3e00 <nrf_cc3xx_platform_set_abort+0xc>)
    3df6:	e9d0 1200 	ldrd	r1, r2, [r0]
    3dfa:	e9c3 1200 	strd	r1, r2, [r3]
    3dfe:	4770      	bx	lr
    3e00:	20000070 	.word	0x20000070

00003e04 <mutex_free>:
    3e04:	b510      	push	{r4, lr}
    3e06:	4604      	mov	r4, r0
    3e08:	b150      	cbz	r0, 3e20 <mutex_free+0x1c>
    3e0a:	6863      	ldr	r3, [r4, #4]
    3e0c:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    3e10:	d005      	beq.n	3e1e <mutex_free+0x1a>
    3e12:	4a06      	ldr	r2, [pc, #24]	; (3e2c <mutex_free+0x28>)
    3e14:	4293      	cmp	r3, r2
    3e16:	d002      	beq.n	3e1e <mutex_free+0x1a>
    3e18:	2300      	movs	r3, #0
    3e1a:	6062      	str	r2, [r4, #4]
    3e1c:	6023      	str	r3, [r4, #0]
    3e1e:	bd10      	pop	{r4, pc}
    3e20:	4b03      	ldr	r3, [pc, #12]	; (3e30 <mutex_free+0x2c>)
    3e22:	4804      	ldr	r0, [pc, #16]	; (3e34 <mutex_free+0x30>)
    3e24:	685b      	ldr	r3, [r3, #4]
    3e26:	4798      	blx	r3
    3e28:	e7ef      	b.n	3e0a <mutex_free+0x6>
    3e2a:	bf00      	nop
    3e2c:	a95c5f2c 	.word	0xa95c5f2c
    3e30:	20000070 	.word	0x20000070
    3e34:	000054b4 	.word	0x000054b4

00003e38 <mutex_lock>:
    3e38:	b1c8      	cbz	r0, 3e6e <mutex_lock+0x36>
    3e3a:	6843      	ldr	r3, [r0, #4]
    3e3c:	4a0d      	ldr	r2, [pc, #52]	; (3e74 <mutex_lock+0x3c>)
    3e3e:	4293      	cmp	r3, r2
    3e40:	d013      	beq.n	3e6a <mutex_lock+0x32>
    3e42:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    3e46:	d00e      	beq.n	3e66 <mutex_lock+0x2e>
    3e48:	2301      	movs	r3, #1
    3e4a:	e850 2f00 	ldrex	r2, [r0]
    3e4e:	4619      	mov	r1, r3
    3e50:	e840 1c00 	strex	ip, r1, [r0]
    3e54:	f09c 0f00 	teq	ip, #0
    3e58:	d1f7      	bne.n	3e4a <mutex_lock+0x12>
    3e5a:	2a01      	cmp	r2, #1
    3e5c:	d0f5      	beq.n	3e4a <mutex_lock+0x12>
    3e5e:	f3bf 8f5f 	dmb	sy
    3e62:	2000      	movs	r0, #0
    3e64:	4770      	bx	lr
    3e66:	4804      	ldr	r0, [pc, #16]	; (3e78 <mutex_lock+0x40>)
    3e68:	4770      	bx	lr
    3e6a:	4804      	ldr	r0, [pc, #16]	; (3e7c <mutex_lock+0x44>)
    3e6c:	4770      	bx	lr
    3e6e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    3e72:	4770      	bx	lr
    3e74:	a95c5f2c 	.word	0xa95c5f2c
    3e78:	ffff8fe9 	.word	0xffff8fe9
    3e7c:	ffff8fea 	.word	0xffff8fea

00003e80 <mutex_unlock>:
    3e80:	4603      	mov	r3, r0
    3e82:	b180      	cbz	r0, 3ea6 <mutex_unlock+0x26>
    3e84:	6842      	ldr	r2, [r0, #4]
    3e86:	4909      	ldr	r1, [pc, #36]	; (3eac <mutex_unlock+0x2c>)
    3e88:	428a      	cmp	r2, r1
    3e8a:	d00a      	beq.n	3ea2 <mutex_unlock+0x22>
    3e8c:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    3e90:	d005      	beq.n	3e9e <mutex_unlock+0x1e>
    3e92:	f3bf 8f5f 	dmb	sy
    3e96:	2200      	movs	r2, #0
    3e98:	4610      	mov	r0, r2
    3e9a:	601a      	str	r2, [r3, #0]
    3e9c:	4770      	bx	lr
    3e9e:	4804      	ldr	r0, [pc, #16]	; (3eb0 <mutex_unlock+0x30>)
    3ea0:	4770      	bx	lr
    3ea2:	4804      	ldr	r0, [pc, #16]	; (3eb4 <mutex_unlock+0x34>)
    3ea4:	4770      	bx	lr
    3ea6:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    3eaa:	4770      	bx	lr
    3eac:	a95c5f2c 	.word	0xa95c5f2c
    3eb0:	ffff8fe9 	.word	0xffff8fe9
    3eb4:	ffff8fea 	.word	0xffff8fea

00003eb8 <mutex_init>:
    3eb8:	b510      	push	{r4, lr}
    3eba:	4604      	mov	r4, r0
    3ebc:	b120      	cbz	r0, 3ec8 <mutex_init+0x10>
    3ebe:	2300      	movs	r3, #0
    3ec0:	4a03      	ldr	r2, [pc, #12]	; (3ed0 <mutex_init+0x18>)
    3ec2:	6023      	str	r3, [r4, #0]
    3ec4:	6062      	str	r2, [r4, #4]
    3ec6:	bd10      	pop	{r4, pc}
    3ec8:	4802      	ldr	r0, [pc, #8]	; (3ed4 <mutex_init+0x1c>)
    3eca:	f7ff ff71 	bl	3db0 <CC_PalAbort>
    3ece:	e7f6      	b.n	3ebe <mutex_init+0x6>
    3ed0:	3a00003a 	.word	0x3a00003a
    3ed4:	000054dc 	.word	0x000054dc

00003ed8 <nrf_cc3xx_platform_set_mutexes>:
    3ed8:	b570      	push	{r4, r5, r6, lr}
    3eda:	4c19      	ldr	r4, [pc, #100]	; (3f40 <nrf_cc3xx_platform_set_mutexes+0x68>)
    3edc:	f8d0 c004 	ldr.w	ip, [r0, #4]
    3ee0:	6806      	ldr	r6, [r0, #0]
    3ee2:	f8c4 c004 	str.w	ip, [r4, #4]
    3ee6:	f8d0 c008 	ldr.w	ip, [r0, #8]
    3eea:	68c0      	ldr	r0, [r0, #12]
    3eec:	f8c4 c008 	str.w	ip, [r4, #8]
    3ef0:	60e0      	str	r0, [r4, #12]
    3ef2:	6026      	str	r6, [r4, #0]
    3ef4:	6808      	ldr	r0, [r1, #0]
    3ef6:	4b13      	ldr	r3, [pc, #76]	; (3f44 <nrf_cc3xx_platform_set_mutexes+0x6c>)
    3ef8:	4d13      	ldr	r5, [pc, #76]	; (3f48 <nrf_cc3xx_platform_set_mutexes+0x70>)
    3efa:	6018      	str	r0, [r3, #0]
    3efc:	6848      	ldr	r0, [r1, #4]
    3efe:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
    3f02:	6058      	str	r0, [r3, #4]
    3f04:	6888      	ldr	r0, [r1, #8]
    3f06:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    3f0a:	6098      	str	r0, [r3, #8]
    3f0c:	68c8      	ldr	r0, [r1, #12]
    3f0e:	6909      	ldr	r1, [r1, #16]
    3f10:	60d8      	str	r0, [r3, #12]
    3f12:	6119      	str	r1, [r3, #16]
    3f14:	d012      	beq.n	3f3c <nrf_cc3xx_platform_set_mutexes+0x64>
    3f16:	2300      	movs	r3, #0
    3f18:	4a0c      	ldr	r2, [pc, #48]	; (3f4c <nrf_cc3xx_platform_set_mutexes+0x74>)
    3f1a:	f505 708a 	add.w	r0, r5, #276	; 0x114
    3f1e:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
    3f22:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    3f26:	f8c5 2118 	str.w	r2, [r5, #280]	; 0x118
    3f2a:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
    3f2e:	47b0      	blx	r6
    3f30:	6823      	ldr	r3, [r4, #0]
    3f32:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    3f36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3f3a:	4718      	bx	r3
    3f3c:	bd70      	pop	{r4, r5, r6, pc}
    3f3e:	bf00      	nop
    3f40:	2000008c 	.word	0x2000008c
    3f44:	20000078 	.word	0x20000078
    3f48:	200009a8 	.word	0x200009a8
    3f4c:	a95c5f2c 	.word	0xa95c5f2c

00003f50 <CC_LibInitNoRng>:
    3f50:	b508      	push	{r3, lr}
    3f52:	f000 f811 	bl	3f78 <CC_HalInit>
    3f56:	b930      	cbnz	r0, 3f66 <CC_LibInitNoRng+0x16>
    3f58:	f000 f810 	bl	3f7c <CC_PalInit>
    3f5c:	b938      	cbnz	r0, 3f6e <CC_LibInitNoRng+0x1e>
    3f5e:	4a05      	ldr	r2, [pc, #20]	; (3f74 <CC_LibInitNoRng+0x24>)
    3f60:	f8c2 0a0c 	str.w	r0, [r2, #2572]	; 0xa0c
    3f64:	bd08      	pop	{r3, pc}
    3f66:	f000 f837 	bl	3fd8 <CC_PalTerminate>
    3f6a:	2003      	movs	r0, #3
    3f6c:	bd08      	pop	{r3, pc}
    3f6e:	2004      	movs	r0, #4
    3f70:	bd08      	pop	{r3, pc}
    3f72:	bf00      	nop
    3f74:	50845000 	.word	0x50845000

00003f78 <CC_HalInit>:
    3f78:	2000      	movs	r0, #0
    3f7a:	4770      	bx	lr

00003f7c <CC_PalInit>:
    3f7c:	b510      	push	{r4, lr}
    3f7e:	4811      	ldr	r0, [pc, #68]	; (3fc4 <CC_PalInit+0x48>)
    3f80:	f000 f848 	bl	4014 <CC_PalMutexCreate>
    3f84:	b100      	cbz	r0, 3f88 <CC_PalInit+0xc>
    3f86:	bd10      	pop	{r4, pc}
    3f88:	480f      	ldr	r0, [pc, #60]	; (3fc8 <CC_PalInit+0x4c>)
    3f8a:	f000 f843 	bl	4014 <CC_PalMutexCreate>
    3f8e:	2800      	cmp	r0, #0
    3f90:	d1f9      	bne.n	3f86 <CC_PalInit+0xa>
    3f92:	4c0e      	ldr	r4, [pc, #56]	; (3fcc <CC_PalInit+0x50>)
    3f94:	4620      	mov	r0, r4
    3f96:	f000 f83d 	bl	4014 <CC_PalMutexCreate>
    3f9a:	2800      	cmp	r0, #0
    3f9c:	d1f3      	bne.n	3f86 <CC_PalInit+0xa>
    3f9e:	4b0c      	ldr	r3, [pc, #48]	; (3fd0 <CC_PalInit+0x54>)
    3fa0:	480c      	ldr	r0, [pc, #48]	; (3fd4 <CC_PalInit+0x58>)
    3fa2:	601c      	str	r4, [r3, #0]
    3fa4:	f000 f836 	bl	4014 <CC_PalMutexCreate>
    3fa8:	4601      	mov	r1, r0
    3faa:	2800      	cmp	r0, #0
    3fac:	d1eb      	bne.n	3f86 <CC_PalInit+0xa>
    3fae:	f000 f82d 	bl	400c <CC_PalDmaInit>
    3fb2:	4604      	mov	r4, r0
    3fb4:	b108      	cbz	r0, 3fba <CC_PalInit+0x3e>
    3fb6:	4620      	mov	r0, r4
    3fb8:	bd10      	pop	{r4, pc}
    3fba:	f000 f83f 	bl	403c <CC_PalPowerSaveModeInit>
    3fbe:	4620      	mov	r0, r4
    3fc0:	e7fa      	b.n	3fb8 <CC_PalInit+0x3c>
    3fc2:	bf00      	nop
    3fc4:	200000cc 	.word	0x200000cc
    3fc8:	200000c8 	.word	0x200000c8
    3fcc:	200000c4 	.word	0x200000c4
    3fd0:	200000bc 	.word	0x200000bc
    3fd4:	200000c0 	.word	0x200000c0

00003fd8 <CC_PalTerminate>:
    3fd8:	b508      	push	{r3, lr}
    3fda:	4808      	ldr	r0, [pc, #32]	; (3ffc <CC_PalTerminate+0x24>)
    3fdc:	f000 f824 	bl	4028 <CC_PalMutexDestroy>
    3fe0:	4807      	ldr	r0, [pc, #28]	; (4000 <CONFIG_COVERAGE_GCOV_HEAP_SIZE>)
    3fe2:	f000 f821 	bl	4028 <CC_PalMutexDestroy>
    3fe6:	4807      	ldr	r0, [pc, #28]	; (4004 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4>)
    3fe8:	f000 f81e 	bl	4028 <CC_PalMutexDestroy>
    3fec:	4806      	ldr	r0, [pc, #24]	; (4008 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8>)
    3fee:	f000 f81b 	bl	4028 <CC_PalMutexDestroy>
    3ff2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    3ff6:	f000 b80b 	b.w	4010 <CC_PalDmaTerminate>
    3ffa:	bf00      	nop
    3ffc:	200000cc 	.word	0x200000cc
    4000:	200000c8 	.word	0x200000c8
    4004:	200000c4 	.word	0x200000c4
    4008:	200000c0 	.word	0x200000c0

0000400c <CC_PalDmaInit>:
    400c:	2000      	movs	r0, #0
    400e:	4770      	bx	lr

00004010 <CC_PalDmaTerminate>:
    4010:	4770      	bx	lr
    4012:	bf00      	nop

00004014 <CC_PalMutexCreate>:
    4014:	b508      	push	{r3, lr}
    4016:	4b03      	ldr	r3, [pc, #12]	; (4024 <CC_PalMutexCreate+0x10>)
    4018:	6802      	ldr	r2, [r0, #0]
    401a:	681b      	ldr	r3, [r3, #0]
    401c:	6810      	ldr	r0, [r2, #0]
    401e:	4798      	blx	r3
    4020:	2000      	movs	r0, #0
    4022:	bd08      	pop	{r3, pc}
    4024:	2000008c 	.word	0x2000008c

00004028 <CC_PalMutexDestroy>:
    4028:	b508      	push	{r3, lr}
    402a:	4b03      	ldr	r3, [pc, #12]	; (4038 <CC_PalMutexDestroy+0x10>)
    402c:	6802      	ldr	r2, [r0, #0]
    402e:	685b      	ldr	r3, [r3, #4]
    4030:	6810      	ldr	r0, [r2, #0]
    4032:	4798      	blx	r3
    4034:	2000      	movs	r0, #0
    4036:	bd08      	pop	{r3, pc}
    4038:	2000008c 	.word	0x2000008c

0000403c <CC_PalPowerSaveModeInit>:
    403c:	b570      	push	{r4, r5, r6, lr}
    403e:	4c09      	ldr	r4, [pc, #36]	; (4064 <CC_PalPowerSaveModeInit+0x28>)
    4040:	4d09      	ldr	r5, [pc, #36]	; (4068 <CC_PalPowerSaveModeInit+0x2c>)
    4042:	6920      	ldr	r0, [r4, #16]
    4044:	68ab      	ldr	r3, [r5, #8]
    4046:	4798      	blx	r3
    4048:	b118      	cbz	r0, 4052 <CC_PalPowerSaveModeInit+0x16>
    404a:	4b08      	ldr	r3, [pc, #32]	; (406c <CC_PalPowerSaveModeInit+0x30>)
    404c:	4808      	ldr	r0, [pc, #32]	; (4070 <CC_PalPowerSaveModeInit+0x34>)
    404e:	685b      	ldr	r3, [r3, #4]
    4050:	4798      	blx	r3
    4052:	2100      	movs	r1, #0
    4054:	4a07      	ldr	r2, [pc, #28]	; (4074 <CC_PalPowerSaveModeInit+0x38>)
    4056:	68eb      	ldr	r3, [r5, #12]
    4058:	6011      	str	r1, [r2, #0]
    405a:	6920      	ldr	r0, [r4, #16]
    405c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4060:	4718      	bx	r3
    4062:	bf00      	nop
    4064:	20000078 	.word	0x20000078
    4068:	2000008c 	.word	0x2000008c
    406c:	20000070 	.word	0x20000070
    4070:	00005500 	.word	0x00005500
    4074:	200009a4 	.word	0x200009a4

00004078 <arch_printk_char_out>:
}
    4078:	2000      	movs	r0, #0
    407a:	4770      	bx	lr

0000407c <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    407c:	b40f      	push	{r0, r1, r2, r3}
    407e:	b507      	push	{r0, r1, r2, lr}
    4080:	a904      	add	r1, sp, #16
    4082:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    4086:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    4088:	f7fc fa84 	bl	594 <vprintk>

	va_end(ap);
}
    408c:	b003      	add	sp, #12
    408e:	f85d eb04 	ldr.w	lr, [sp], #4
    4092:	b004      	add	sp, #16
    4094:	4770      	bx	lr

00004096 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    4096:	4604      	mov	r4, r0
    4098:	b508      	push	{r3, lr}
    409a:	4608      	mov	r0, r1
    409c:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    409e:	461a      	mov	r2, r3
    40a0:	47a0      	blx	r4
	return z_impl_z_current_get();
    40a2:	f7ff fc7f 	bl	39a4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    40a6:	f7fd fcd9 	bl	1a5c <z_impl_k_thread_abort>

000040aa <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    40aa:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    40ac:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    40b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
    40b4:	bf2c      	ite	cs
    40b6:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
    40ba:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
    40be:	4770      	bx	lr

000040c0 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    40c0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
    40c4:	6880      	ldr	r0, [r0, #8]
    40c6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
    40ca:	bf2c      	ite	cs
    40cc:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    40d0:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
    40d4:	4770      	bx	lr

000040d6 <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    40d6:	2201      	movs	r2, #1
{
    40d8:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    40da:	f7ff ffe6 	bl	40aa <chunk_field>
}
    40de:	40d0      	lsrs	r0, r2
    40e0:	bd08      	pop	{r3, pc}

000040e2 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    40e2:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    40e4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    40e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    40ec:	d308      	bcc.n	4100 <set_chunk_used+0x1e>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    40ee:	684b      	ldr	r3, [r1, #4]
		if (used) {
    40f0:	b11a      	cbz	r2, 40fa <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    40f2:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
    40f6:	604b      	str	r3, [r1, #4]
    40f8:	4770      	bx	lr
    40fa:	f023 0301 	bic.w	r3, r3, #1
    40fe:	e7fa      	b.n	40f6 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    4100:	884b      	ldrh	r3, [r1, #2]
		if (used) {
    4102:	b11a      	cbz	r2, 410c <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    4104:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    4108:	804b      	strh	r3, [r1, #2]
		}
	}
}
    410a:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    410c:	f023 0301 	bic.w	r3, r3, #1
    4110:	e7fa      	b.n	4108 <set_chunk_used+0x26>

00004112 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    4112:	0053      	lsls	r3, r2, #1
    4114:	2201      	movs	r2, #1
    4116:	f7ff bfd3 	b.w	40c0 <chunk_set>

0000411a <bucket_idx.isra.0>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    411a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    411e:	bf34      	ite	cc
    4120:	2304      	movcc	r3, #4
    4122:	2308      	movcs	r3, #8
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    4124:	1c48      	adds	r0, r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    4126:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    4128:	eba0 00d3 	sub.w	r0, r0, r3, lsr #3
	return 31 - __builtin_clz(usable_sz);
    412c:	fab0 f080 	clz	r0, r0
}
    4130:	f1c0 001f 	rsb	r0, r0, #31
    4134:	4770      	bx	lr

00004136 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    4136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    413a:	460d      	mov	r5, r1
	return big_heap_chunks(h->end_chunk);
    413c:	6886      	ldr	r6, [r0, #8]
    413e:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
    4140:	f7ff ffc9 	bl	40d6 <chunk_size>
    4144:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    4148:	4601      	mov	r1, r0
    414a:	d301      	bcc.n	4150 <free_list_add+0x1a>
    414c:	2801      	cmp	r0, #1
    414e:	d032      	beq.n	41b6 <free_list_add+0x80>
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
    4150:	4630      	mov	r0, r6
    4152:	f7ff ffe2 	bl	411a <bucket_idx.isra.0>
	if (b->next == 0U) {
    4156:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    415a:	690e      	ldr	r6, [r1, #16]
    415c:	b996      	cbnz	r6, 4184 <free_list_add+0x4e>
		h->avail_buckets |= BIT(bidx);
    415e:	2201      	movs	r2, #1
    4160:	68e3      	ldr	r3, [r4, #12]
    4162:	4082      	lsls	r2, r0
    4164:	4313      	orrs	r3, r2
    4166:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
    4168:	2202      	movs	r2, #2
		b->next = c;
    416a:	610d      	str	r5, [r1, #16]
    416c:	462b      	mov	r3, r5
    416e:	4629      	mov	r1, r5
    4170:	4620      	mov	r0, r4
    4172:	f7ff ffa5 	bl	40c0 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    4176:	2203      	movs	r2, #3
    4178:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
    417a:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
    417c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4180:	f7ff bf9e 	b.w	40c0 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
    4184:	2202      	movs	r2, #2
    4186:	4631      	mov	r1, r6
    4188:	4620      	mov	r0, r4
    418a:	f7ff ff8e 	bl	40aa <chunk_field>
    418e:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
    4190:	4603      	mov	r3, r0
    4192:	4629      	mov	r1, r5
    4194:	4620      	mov	r0, r4
    4196:	f7ff ff93 	bl	40c0 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    419a:	2203      	movs	r2, #3
    419c:	4633      	mov	r3, r6
    419e:	4629      	mov	r1, r5
    41a0:	4620      	mov	r0, r4
    41a2:	f7ff ff8d 	bl	40c0 <chunk_set>
    41a6:	4639      	mov	r1, r7
    41a8:	462b      	mov	r3, r5
    41aa:	4620      	mov	r0, r4
    41ac:	f7ff ff88 	bl	40c0 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    41b0:	2202      	movs	r2, #2
    41b2:	4631      	mov	r1, r6
    41b4:	e7e1      	b.n	417a <free_list_add+0x44>
    41b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000041ba <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
    41ba:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    41be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    41c0:	bf2c      	ite	cs
    41c2:	2308      	movcs	r3, #8
    41c4:	2304      	movcc	r3, #4
	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    41c6:	1dce      	adds	r6, r1, #7
    41c8:	f026 0607 	bic.w	r6, r6, #7
	bytes -= heap_footer_bytes(bytes);
    41cc:	1ad2      	subs	r2, r2, r3
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    41ce:	188c      	adds	r4, r1, r2
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    41d0:	4637      	mov	r7, r6
    41d2:	2200      	movs	r2, #0
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    41d4:	f024 0407 	bic.w	r4, r4, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    41d8:	1ba4      	subs	r4, r4, r6
    41da:	08e4      	lsrs	r4, r4, #3
	heap->heap = h;
    41dc:	6006      	str	r6, [r0, #0]
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    41de:	4621      	mov	r1, r4
	h->end_chunk = heap_sz;
    41e0:	60b4      	str	r4, [r6, #8]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    41e2:	4620      	mov	r0, r4
	h->avail_buckets = 0;
    41e4:	f847 2f0c 	str.w	r2, [r7, #12]!
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    41e8:	f7ff ff97 	bl	411a <bucket_idx.isra.0>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    41ec:	4613      	mov	r3, r2
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    41ee:	0085      	lsls	r5, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    41f0:	351b      	adds	r5, #27
    41f2:	08ed      	lsrs	r5, r5, #3
	for (int i = 0; i < nb_buckets; i++) {
    41f4:	4298      	cmp	r0, r3
    41f6:	da2e      	bge.n	4256 <sys_heap_init+0x9c>
		h->buckets[i].next = 0;
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    41f8:	462a      	mov	r2, r5
    41fa:	4630      	mov	r0, r6
    41fc:	2100      	movs	r1, #0
    41fe:	f7ff ff88 	bl	4112 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    4202:	2300      	movs	r3, #0
    4204:	4630      	mov	r0, r6
    4206:	461a      	mov	r2, r3
    4208:	4619      	mov	r1, r3
    420a:	f7ff ff59 	bl	40c0 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    420e:	1b67      	subs	r7, r4, r5
	set_chunk_used(h, 0, true);
    4210:	4619      	mov	r1, r3
    4212:	4630      	mov	r0, r6
    4214:	2201      	movs	r2, #1
    4216:	f7ff ff64 	bl	40e2 <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    421a:	463a      	mov	r2, r7
    421c:	4629      	mov	r1, r5
    421e:	f7ff ff78 	bl	4112 <set_chunk_size>
    4222:	462b      	mov	r3, r5
    4224:	2200      	movs	r2, #0
    4226:	4629      	mov	r1, r5
    4228:	4630      	mov	r0, r6
    422a:	f7ff ff49 	bl	40c0 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
    422e:	4621      	mov	r1, r4
    4230:	4630      	mov	r0, r6
    4232:	f7ff ff6e 	bl	4112 <set_chunk_size>
    4236:	463b      	mov	r3, r7
    4238:	4621      	mov	r1, r4
    423a:	4630      	mov	r0, r6
    423c:	2200      	movs	r2, #0
    423e:	f7ff ff3f 	bl	40c0 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
    4242:	4621      	mov	r1, r4
    4244:	4630      	mov	r0, r6
    4246:	2201      	movs	r2, #1
    4248:	f7ff ff4b 	bl	40e2 <set_chunk_used>

	free_list_add(h, chunk0_size);
    424c:	4629      	mov	r1, r5
}
    424e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    4252:	f7ff bf70 	b.w	4136 <free_list_add>
		h->buckets[i].next = 0;
    4256:	f847 2f04 	str.w	r2, [r7, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    425a:	3301      	adds	r3, #1
    425c:	e7ca      	b.n	41f4 <sys_heap_init+0x3a>

0000425e <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    425e:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    4260:	f013 0307 	ands.w	r3, r3, #7
    4264:	d105      	bne.n	4272 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    4266:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    4268:	2b00      	cmp	r3, #0
    426a:	bf0c      	ite	eq
    426c:	2000      	moveq	r0, #0
    426e:	2003      	movne	r0, #3
    4270:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    4272:	2b02      	cmp	r3, #2
    4274:	d105      	bne.n	4282 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    4276:	8b40      	ldrh	r0, [r0, #26]
    4278:	fab0 f080 	clz	r0, r0
    427c:	0940      	lsrs	r0, r0, #5
    427e:	0080      	lsls	r0, r0, #2
    4280:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    4282:	2b01      	cmp	r3, #1
    4284:	d105      	bne.n	4292 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    4286:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    4288:	2b00      	cmp	r3, #0
    428a:	bf0c      	ite	eq
    428c:	2000      	moveq	r0, #0
    428e:	2005      	movne	r0, #5
    4290:	4770      	bx	lr
	int evt = EVT_NOP;
    4292:	2000      	movs	r0, #0
}
    4294:	4770      	bx	lr

00004296 <validate_args>:
{
    4296:	b510      	push	{r4, lr}
    4298:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    429a:	b100      	cbz	r0, 429e <validate_args+0x8>
    429c:	b911      	cbnz	r1, 42a4 <validate_args+0xe>
		return -EINVAL;
    429e:	f06f 0015 	mvn.w	r0, #21
}
    42a2:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    42a4:	1d08      	adds	r0, r1, #4
    42a6:	f000 f895 	bl	43d4 <sys_notify_validate>
	if ((rv == 0)
    42aa:	2800      	cmp	r0, #0
    42ac:	d1f9      	bne.n	42a2 <validate_args+0xc>
	    && ((cli->notify.flags
    42ae:	68a3      	ldr	r3, [r4, #8]
    42b0:	2b03      	cmp	r3, #3
    42b2:	d9f6      	bls.n	42a2 <validate_args+0xc>
    42b4:	e7f3      	b.n	429e <validate_args+0x8>

000042b6 <notify_one>:
{
    42b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    42ba:	460d      	mov	r5, r1
    42bc:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    42be:	4619      	mov	r1, r3
    42c0:	1d28      	adds	r0, r5, #4
{
    42c2:	4690      	mov	r8, r2
    42c4:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    42c6:	f000 f896 	bl	43f6 <sys_notify_finalize>
	if (cb) {
    42ca:	4604      	mov	r4, r0
    42cc:	b138      	cbz	r0, 42de <notify_one+0x28>
		cb(mgr, cli, state, res);
    42ce:	4633      	mov	r3, r6
    42d0:	4642      	mov	r2, r8
    42d2:	4629      	mov	r1, r5
    42d4:	4638      	mov	r0, r7
    42d6:	46a4      	mov	ip, r4
}
    42d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    42dc:	4760      	bx	ip
}
    42de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000042e2 <transition_complete>:
{
    42e2:	b410      	push	{r4}
	__asm__ volatile(
    42e4:	f04f 0420 	mov.w	r4, #32
    42e8:	f3ef 8211 	mrs	r2, BASEPRI
    42ec:	f384 8812 	msr	BASEPRI_MAX, r4
    42f0:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    42f4:	6141      	str	r1, [r0, #20]
}
    42f6:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    42f8:	2101      	movs	r1, #1
    42fa:	f7fc b959 	b.w	5b0 <process_event>

000042fe <onoff_manager_init>:
{
    42fe:	b538      	push	{r3, r4, r5, lr}
    4300:	460c      	mov	r4, r1
	if ((mgr == NULL)
    4302:	4605      	mov	r5, r0
    4304:	b158      	cbz	r0, 431e <onoff_manager_init+0x20>
	    || (transitions == NULL)
    4306:	b151      	cbz	r1, 431e <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    4308:	680b      	ldr	r3, [r1, #0]
    430a:	b143      	cbz	r3, 431e <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    430c:	684b      	ldr	r3, [r1, #4]
    430e:	b133      	cbz	r3, 431e <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    4310:	221c      	movs	r2, #28
    4312:	2100      	movs	r1, #0
    4314:	f000 f944 	bl	45a0 <memset>
	return 0;
    4318:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    431a:	612c      	str	r4, [r5, #16]
}
    431c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    431e:	f06f 0015 	mvn.w	r0, #21
    4322:	e7fb      	b.n	431c <onoff_manager_init+0x1e>

00004324 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    4324:	b570      	push	{r4, r5, r6, lr}
    4326:	4605      	mov	r5, r0
    4328:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    432a:	f7ff ffb4 	bl	4296 <validate_args>

	if (rv < 0) {
    432e:	1e04      	subs	r4, r0, #0
    4330:	db15      	blt.n	435e <onoff_request+0x3a>
    4332:	f04f 0320 	mov.w	r3, #32
    4336:	f3ef 8211 	mrs	r2, BASEPRI
    433a:	f383 8812 	msr	BASEPRI_MAX, r3
    433e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    4342:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4346:	8b6b      	ldrh	r3, [r5, #26]
    4348:	8b2c      	ldrh	r4, [r5, #24]
    434a:	428b      	cmp	r3, r1
    434c:	f004 0407 	and.w	r4, r4, #7
    4350:	d107      	bne.n	4362 <onoff_request+0x3e>
	__asm__ volatile(
    4352:	f382 8811 	msr	BASEPRI, r2
    4356:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    435a:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    435e:	4620      	mov	r0, r4
    4360:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    4362:	2c02      	cmp	r4, #2
    4364:	d10c      	bne.n	4380 <onoff_request+0x5c>
		mgr->refs += 1U;
    4366:	3301      	adds	r3, #1
    4368:	836b      	strh	r3, [r5, #26]
    436a:	f382 8811 	msr	BASEPRI, r2
    436e:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    4372:	2300      	movs	r3, #0
    4374:	4622      	mov	r2, r4
    4376:	4631      	mov	r1, r6
    4378:	4628      	mov	r0, r5
    437a:	f7ff ff9c 	bl	42b6 <notify_one>
    437e:	e7ee      	b.n	435e <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    4380:	2c06      	cmp	r4, #6
    4382:	d814      	bhi.n	43ae <onoff_request+0x8a>
    4384:	e8df f004 	tbb	[pc, r4]
    4388:	13131304 	.word	0x13131304
    438c:	1a04      	.short	0x1a04
    438e:	04          	.byte	0x04
    438f:	00          	.byte	0x00
	parent->next = child;
    4390:	2300      	movs	r3, #0
    4392:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    4394:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    4396:	b93b      	cbnz	r3, 43a8 <onoff_request+0x84>
	list->head = node;
    4398:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    439c:	b9ac      	cbnz	r4, 43ca <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    439e:	2102      	movs	r1, #2
    43a0:	4628      	mov	r0, r5
    43a2:	f7fc f905 	bl	5b0 <process_event>
    43a6:	e7da      	b.n	435e <onoff_request+0x3a>
	parent->next = child;
    43a8:	601e      	str	r6, [r3, #0]
	list->tail = node;
    43aa:	606e      	str	r6, [r5, #4]
}
    43ac:	e7f6      	b.n	439c <onoff_request+0x78>
    43ae:	f382 8811 	msr	BASEPRI, r2
    43b2:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    43b6:	f06f 0404 	mvn.w	r4, #4
    43ba:	e7d0      	b.n	435e <onoff_request+0x3a>
    43bc:	f382 8811 	msr	BASEPRI, r2
    43c0:	f3bf 8f6f 	isb	sy
    43c4:	f06f 0485 	mvn.w	r4, #133	; 0x85
    43c8:	e7c9      	b.n	435e <onoff_request+0x3a>
    43ca:	f382 8811 	msr	BASEPRI, r2
    43ce:	f3bf 8f6f 	isb	sy
		if (notify) {
    43d2:	e7c4      	b.n	435e <onoff_request+0x3a>

000043d4 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    43d4:	4603      	mov	r3, r0
    43d6:	b158      	cbz	r0, 43f0 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    43d8:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    43da:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    43de:	2a01      	cmp	r2, #1
    43e0:	d003      	beq.n	43ea <sys_notify_validate+0x16>
    43e2:	2a03      	cmp	r2, #3
    43e4:	d104      	bne.n	43f0 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    43e6:	6802      	ldr	r2, [r0, #0]
    43e8:	b112      	cbz	r2, 43f0 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    43ea:	2000      	movs	r0, #0
    43ec:	6098      	str	r0, [r3, #8]
    43ee:	4770      	bx	lr
    43f0:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    43f4:	4770      	bx	lr

000043f6 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    43f6:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    43f8:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    43fa:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    43fe:	2a03      	cmp	r2, #3
    4400:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
    4404:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = NULL;
    4406:	bf14      	ite	ne
    4408:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    440a:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    440c:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    440e:	4770      	bx	lr

00004410 <encode_uint>:
{
    4410:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4414:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
    4416:	78d3      	ldrb	r3, [r2, #3]
{
    4418:	4680      	mov	r8, r0
	switch (specifier) {
    441a:	2b6f      	cmp	r3, #111	; 0x6f
{
    441c:	460f      	mov	r7, r1
    441e:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    4420:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    4424:	d029      	beq.n	447a <encode_uint+0x6a>
    4426:	d824      	bhi.n	4472 <encode_uint+0x62>
		return 10;
    4428:	2b58      	cmp	r3, #88	; 0x58
    442a:	bf0c      	ite	eq
    442c:	2610      	moveq	r6, #16
    442e:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    4430:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    4434:	4632      	mov	r2, r6
    4436:	2300      	movs	r3, #0
    4438:	4640      	mov	r0, r8
    443a:	4639      	mov	r1, r7
    443c:	f7fb fe8a 	bl	154 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4440:	2a09      	cmp	r2, #9
    4442:	b2d4      	uxtb	r4, r2
    4444:	d81e      	bhi.n	4484 <encode_uint+0x74>
    4446:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    4448:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    444a:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    444c:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4450:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    4454:	d301      	bcc.n	445a <encode_uint+0x4a>
    4456:	45d1      	cmp	r9, sl
    4458:	d811      	bhi.n	447e <encode_uint+0x6e>
	if (conv->flag_hash) {
    445a:	782b      	ldrb	r3, [r5, #0]
    445c:	069b      	lsls	r3, r3, #26
    445e:	d505      	bpl.n	446c <encode_uint+0x5c>
		if (radix == 8) {
    4460:	2e08      	cmp	r6, #8
    4462:	d115      	bne.n	4490 <encode_uint+0x80>
			conv->altform_0 = true;
    4464:	78ab      	ldrb	r3, [r5, #2]
    4466:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    446a:	70ab      	strb	r3, [r5, #2]
}
    446c:	4648      	mov	r0, r9
    446e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    4472:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    4476:	2b70      	cmp	r3, #112	; 0x70
    4478:	e7d7      	b.n	442a <encode_uint+0x1a>
	switch (specifier) {
    447a:	2608      	movs	r6, #8
    447c:	e7d8      	b.n	4430 <encode_uint+0x20>
		value /= radix;
    447e:	4680      	mov	r8, r0
    4480:	460f      	mov	r7, r1
    4482:	e7d7      	b.n	4434 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4484:	f1bb 0f19 	cmp.w	fp, #25
    4488:	bf94      	ite	ls
    448a:	3437      	addls	r4, #55	; 0x37
    448c:	3457      	addhi	r4, #87	; 0x57
    448e:	e7db      	b.n	4448 <encode_uint+0x38>
		} else if (radix == 16) {
    4490:	2e10      	cmp	r6, #16
    4492:	d1eb      	bne.n	446c <encode_uint+0x5c>
			conv->altform_0c = true;
    4494:	78ab      	ldrb	r3, [r5, #2]
    4496:	f043 0310 	orr.w	r3, r3, #16
    449a:	e7e6      	b.n	446a <encode_uint+0x5a>

0000449c <outs>:
{
    449c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    44a0:	4607      	mov	r7, r0
    44a2:	4688      	mov	r8, r1
    44a4:	4615      	mov	r5, r2
    44a6:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    44a8:	4614      	mov	r4, r2
    44aa:	42b4      	cmp	r4, r6
    44ac:	d305      	bcc.n	44ba <outs+0x1e>
    44ae:	b10e      	cbz	r6, 44b4 <outs+0x18>
	return (int)count;
    44b0:	1b60      	subs	r0, r4, r5
    44b2:	e008      	b.n	44c6 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    44b4:	7823      	ldrb	r3, [r4, #0]
    44b6:	2b00      	cmp	r3, #0
    44b8:	d0fa      	beq.n	44b0 <outs+0x14>
		int rc = out((int)*sp++, ctx);
    44ba:	4641      	mov	r1, r8
    44bc:	f814 0b01 	ldrb.w	r0, [r4], #1
    44c0:	47b8      	blx	r7
		if (rc < 0) {
    44c2:	2800      	cmp	r0, #0
    44c4:	daf1      	bge.n	44aa <outs+0xe>
}
    44c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000044ca <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    44ca:	4770      	bx	lr

000044cc <pm_state_exit_post_ops>:
    44cc:	2300      	movs	r3, #0
    44ce:	f383 8811 	msr	BASEPRI, r3
    44d2:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    44d6:	4770      	bx	lr

000044d8 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    44d8:	2000      	movs	r0, #0
{
    44da:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    44dc:	f7fc fd28 	bl	f30 <sys_reboot>

000044e0 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    44e0:	f000 bc4b 	b.w	4d7a <z_fatal_error>

000044e4 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    44e4:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    44e6:	6800      	ldr	r0, [r0, #0]
    44e8:	f000 bc47 	b.w	4d7a <z_fatal_error>

000044ec <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    44ec:	2100      	movs	r1, #0
    44ee:	2001      	movs	r0, #1
    44f0:	f7ff bff6 	b.w	44e0 <z_arm_fatal_error>

000044f4 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    44f4:	b508      	push	{r3, lr}
	handler();
    44f6:	f7fd f815 	bl	1524 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    44fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    44fe:	f7fd b8d7 	b.w	16b0 <z_arm_exc_exit>

00004502 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    4502:	6e43      	ldr	r3, [r0, #100]	; 0x64
    4504:	f383 880b 	msr	PSPLIM, r3
}
    4508:	4770      	bx	lr

0000450a <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    450a:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
    450e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    4512:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
    4514:	bf08      	it	eq
    4516:	f06f 0015 	mvneq.w	r0, #21
    451a:	4770      	bx	lr

0000451c <mpu_configure_region>:
{
    451c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	p_attr->rbar = attr->rbar &
    451e:	890a      	ldrh	r2, [r1, #8]
    4520:	894e      	ldrh	r6, [r1, #10]
	region_conf.base = new_region->start;
    4522:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
    4524:	684d      	ldr	r5, [r1, #4]
    4526:	f002 021f 	and.w	r2, r2, #31
    452a:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
	region_conf.base = new_region->start;
    452e:	9300      	str	r3, [sp, #0]
    4530:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    4534:	f023 031f 	bic.w	r3, r3, #31
    4538:	1e6a      	subs	r2, r5, #1
    453a:	4413      	add	r3, r2
    453c:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    4540:	2807      	cmp	r0, #7
    4542:	9303      	str	r3, [sp, #12]
    4544:	d804      	bhi.n	4550 <mpu_configure_region+0x34>
	region_init(index, region_conf);
    4546:	4669      	mov	r1, sp
    4548:	f7fd faba 	bl	1ac0 <region_init>
}
    454c:	b004      	add	sp, #16
    454e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    4550:	f06f 0015 	mvn.w	r0, #21
	return region_allocate_and_init(index,
    4554:	e7fa      	b.n	454c <mpu_configure_region+0x30>

00004556 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    4556:	4603      	mov	r3, r0
    4558:	3901      	subs	r1, #1
    455a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    455e:	b90a      	cbnz	r2, 4564 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    4560:	701a      	strb	r2, [r3, #0]

	return dest;
}
    4562:	4770      	bx	lr
		*d = *s;
    4564:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    4568:	e7f7      	b.n	455a <strcpy+0x4>

0000456a <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    456a:	4603      	mov	r3, r0
	size_t n = 0;
    456c:	2000      	movs	r0, #0

	while (*s != '\0') {
    456e:	5c1a      	ldrb	r2, [r3, r0]
    4570:	b902      	cbnz	r2, 4574 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    4572:	4770      	bx	lr
		n++;
    4574:	3001      	adds	r0, #1
    4576:	e7fa      	b.n	456e <strlen+0x4>

00004578 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    4578:	4603      	mov	r3, r0
	size_t n = 0;
    457a:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    457c:	5c1a      	ldrb	r2, [r3, r0]
    457e:	b10a      	cbz	r2, 4584 <strnlen+0xc>
    4580:	4288      	cmp	r0, r1
    4582:	d100      	bne.n	4586 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    4584:	4770      	bx	lr
		n++;
    4586:	3001      	adds	r0, #1
    4588:	e7f8      	b.n	457c <strnlen+0x4>

0000458a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    458a:	b510      	push	{r4, lr}
    458c:	1e43      	subs	r3, r0, #1
    458e:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    4590:	4291      	cmp	r1, r2
    4592:	d100      	bne.n	4596 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    4594:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    4596:	f811 4b01 	ldrb.w	r4, [r1], #1
    459a:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    459e:	e7f7      	b.n	4590 <memcpy+0x6>

000045a0 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    45a0:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
    45a2:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    45a4:	4402      	add	r2, r0
    45a6:	4293      	cmp	r3, r2
    45a8:	d100      	bne.n	45ac <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    45aa:	4770      	bx	lr
		*(d_byte++) = c_byte;
    45ac:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    45b0:	e7f9      	b.n	45a6 <memset+0x6>

000045b2 <_stdout_hook_default>:
}
    45b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    45b6:	4770      	bx	lr

000045b8 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    45b8:	220c      	movs	r2, #12
    45ba:	6903      	ldr	r3, [r0, #16]
    45bc:	b2c9      	uxtb	r1, r1
    45be:	fb01 3302 	mla	r3, r1, r2, r3
    45c2:	6f98      	ldr	r0, [r3, #120]	; 0x78
}
    45c4:	f000 0007 	and.w	r0, r0, #7
    45c8:	4770      	bx	lr

000045ca <set_on_state>:
	__asm__ volatile(
    45ca:	f04f 0320 	mov.w	r3, #32
    45ce:	f3ef 8211 	mrs	r2, BASEPRI
    45d2:	f383 8812 	msr	BASEPRI_MAX, r3
    45d6:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    45da:	6803      	ldr	r3, [r0, #0]
    45dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    45e0:	f043 0302 	orr.w	r3, r3, #2
    45e4:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    45e6:	f382 8811 	msr	BASEPRI, r2
    45ea:	f3bf 8f6f 	isb	sy
}
    45ee:	4770      	bx	lr

000045f0 <stop>:
{
    45f0:	b570      	push	{r4, r5, r6, lr}
    45f2:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    45f4:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    45f6:	f04f 0420 	mov.w	r4, #32
    45fa:	f3ef 8511 	mrs	r5, BASEPRI
    45fe:	f384 8812 	msr	BASEPRI_MAX, r4
    4602:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4606:	260c      	movs	r6, #12
    4608:	fb06 3401 	mla	r4, r6, r1, r3
    460c:	6fa4      	ldr	r4, [r4, #120]	; 0x78
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    460e:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    4612:	d008      	beq.n	4626 <stop+0x36>
    4614:	42a2      	cmp	r2, r4
    4616:	d006      	beq.n	4626 <stop+0x36>
	__asm__ volatile(
    4618:	f385 8811 	msr	BASEPRI, r5
    461c:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    4620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    4624:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    4626:	2201      	movs	r2, #1
    4628:	fb06 3301 	mla	r3, r6, r1, r3
    462c:	679a      	str	r2, [r3, #120]	; 0x78
    462e:	f385 8811 	msr	BASEPRI, r5
    4632:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    4636:	6843      	ldr	r3, [r0, #4]
    4638:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    463c:	685b      	ldr	r3, [r3, #4]
    463e:	4798      	blx	r3
	return 0;
    4640:	2000      	movs	r0, #0
    4642:	e7ef      	b.n	4624 <stop+0x34>

00004644 <api_stop>:
	return stop(dev, subsys, CTX_API);
    4644:	2280      	movs	r2, #128	; 0x80
    4646:	f7ff bfd3 	b.w	45f0 <stop>

0000464a <async_start>:
{
    464a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    464c:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    464e:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    4650:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    4652:	f04f 0520 	mov.w	r5, #32
    4656:	f3ef 8611 	mrs	r6, BASEPRI
    465a:	f385 8812 	msr	BASEPRI_MAX, r5
    465e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4662:	250c      	movs	r5, #12
    4664:	fb05 4401 	mla	r4, r5, r1, r4
    4668:	6fa5      	ldr	r5, [r4, #120]	; 0x78
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    466a:	f005 0c07 	and.w	ip, r5, #7
    466e:	f1bc 0f01 	cmp.w	ip, #1
    4672:	d10c      	bne.n	468e <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    4674:	67a7      	str	r7, [r4, #120]	; 0x78
	__asm__ volatile(
    4676:	f386 8811 	msr	BASEPRI, r6
    467a:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    467e:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
	 get_sub_config(dev, type)->start();
    4682:	6843      	ldr	r3, [r0, #4]
    4684:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    4688:	4798      	blx	r3
	return 0;
    468a:	2000      	movs	r0, #0
}
    468c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    468e:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    4692:	42af      	cmp	r7, r5
    4694:	f386 8811 	msr	BASEPRI, r6
    4698:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    469c:	bf0c      	ite	eq
    469e:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    46a2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    46a6:	e7f1      	b.n	468c <async_start+0x42>

000046a8 <api_start>:
{
    46a8:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    46aa:	2480      	movs	r4, #128	; 0x80
    46ac:	9400      	str	r4, [sp, #0]
    46ae:	f7ff ffcc 	bl	464a <async_start>
}
    46b2:	b002      	add	sp, #8
    46b4:	bd10      	pop	{r4, pc}

000046b6 <onoff_started_callback>:
{
    46b6:	b410      	push	{r4}
	notify(mgr, 0);
    46b8:	241c      	movs	r4, #28
	return &data->mgr[type];
    46ba:	6900      	ldr	r0, [r0, #16]
    46bc:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    46be:	fb03 0004 	mla	r0, r3, r4, r0
    46c2:	2100      	movs	r1, #0
}
    46c4:	bc10      	pop	{r4}
	notify(mgr, 0);
    46c6:	4710      	bx	r2

000046c8 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    46c8:	2003      	movs	r0, #3
    46ca:	f000 ba90 	b.w	4bee <nrfx_clock_start>

000046ce <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    46ce:	2002      	movs	r0, #2
    46d0:	f000 ba8d 	b.w	4bee <nrfx_clock_start>

000046d4 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    46d4:	2000      	movs	r0, #0
    46d6:	f000 ba8a 	b.w	4bee <nrfx_clock_start>

000046da <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    46da:	2003      	movs	r0, #3
    46dc:	f000 bae6 	b.w	4cac <nrfx_clock_stop>

000046e0 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    46e0:	2002      	movs	r0, #2
    46e2:	f000 bae3 	b.w	4cac <nrfx_clock_stop>

000046e6 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    46e6:	2000      	movs	r0, #0
    46e8:	f000 bae0 	b.w	4cac <nrfx_clock_stop>

000046ec <blocking_start_callback>:
{
    46ec:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    46ee:	f7fe be35 	b.w	335c <z_impl_k_sem_give>

000046f2 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    46f2:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    46f4:	6843      	ldr	r3, [r0, #4]
    46f6:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    46f8:	7a05      	ldrb	r5, [r0, #8]
    46fa:	6844      	ldr	r4, [r0, #4]
    46fc:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    4700:	42a3      	cmp	r3, r4
    4702:	d302      	bcc.n	470a <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    4704:	f06f 0001 	mvn.w	r0, #1
}
    4708:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    470a:	795c      	ldrb	r4, [r3, #5]
    470c:	428c      	cmp	r4, r1
    470e:	d001      	beq.n	4714 <pinctrl_lookup_state+0x22>
		(*state)++;
    4710:	3308      	adds	r3, #8
    4712:	e7f0      	b.n	46f6 <pinctrl_lookup_state+0x4>
			return 0;
    4714:	2000      	movs	r0, #0
    4716:	e7f7      	b.n	4708 <pinctrl_lookup_state+0x16>

00004718 <uarte_nrfx_config_get>:
{
    4718:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
    471a:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
    471c:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    4720:	e883 0003 	stmia.w	r3, {r0, r1}
}
    4724:	2000      	movs	r0, #0
    4726:	4770      	bx	lr

00004728 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    4728:	6843      	ldr	r3, [r0, #4]
    472a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    472c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    4730:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    4734:	4770      	bx	lr

00004736 <tx_start>:
{
    4736:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    4738:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
    473a:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    473c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    4740:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4744:	2200      	movs	r2, #0
    4746:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    474a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    474e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    4752:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    4756:	6862      	ldr	r2, [r4, #4]
    4758:	06d2      	lsls	r2, r2, #27
    475a:	d508      	bpl.n	476e <tx_start+0x38>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    475c:	2108      	movs	r1, #8
	return config->uarte_regs;
    475e:	6842      	ldr	r2, [r0, #4]
    4760:	6812      	ldr	r2, [r2, #0]
    4762:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    4766:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    476a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    476e:	2201      	movs	r2, #1
    4770:	609a      	str	r2, [r3, #8]
}
    4772:	bd10      	pop	{r4, pc}

00004774 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    4774:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    4776:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    4778:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    477a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    477e:	b150      	cbz	r0, 4796 <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4780:	2000      	movs	r0, #0
	*c = *data->rx_data;
    4782:	6992      	ldr	r2, [r2, #24]
    4784:	7812      	ldrb	r2, [r2, #0]
    4786:	700a      	strb	r2, [r1, #0]
    4788:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    478c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4790:	2201      	movs	r2, #1
    4792:	601a      	str	r2, [r3, #0]
	return 0;
    4794:	4770      	bx	lr
		return -1;
    4796:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    479a:	4770      	bx	lr

0000479c <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    479c:	2a00      	cmp	r2, #0
{
    479e:	b510      	push	{r4, lr}
    47a0:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    47a2:	dd10      	ble.n	47c6 <uarte_nrfx_fifo_read+0x2a>
	return config->uarte_regs;
    47a4:	6843      	ldr	r3, [r0, #4]
    47a6:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    47a8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    47ac:	b150      	cbz	r0, 47c4 <uarte_nrfx_fifo_read+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    47ae:	2000      	movs	r0, #0
	const struct uarte_nrfx_data *data = dev->data;
    47b0:	6922      	ldr	r2, [r4, #16]
    47b2:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    47b6:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    47ba:	2001      	movs	r0, #1
		rx_data[num_rx++] = *data->rx_data;
    47bc:	6992      	ldr	r2, [r2, #24]
    47be:	7812      	ldrb	r2, [r2, #0]
    47c0:	700a      	strb	r2, [r1, #0]
    47c2:	6018      	str	r0, [r3, #0]
}
    47c4:	bd10      	pop	{r4, pc}
	int num_rx = 0;
    47c6:	2000      	movs	r0, #0
    47c8:	e7fc      	b.n	47c4 <uarte_nrfx_fifo_read+0x28>

000047ca <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
    47ca:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    47cc:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
    47ce:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    47d0:	f04f 0020 	mov.w	r0, #32
    47d4:	f3ef 8311 	mrs	r3, BASEPRI
    47d8:	f380 8812 	msr	BASEPRI_MAX, r0
    47dc:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    47e0:	2000      	movs	r0, #0
    47e2:	68c9      	ldr	r1, [r1, #12]
    47e4:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    47e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    47ea:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    47ee:	f383 8811 	msr	BASEPRI, r3
    47f2:	f3bf 8f6f 	isb	sy
}
    47f6:	4770      	bx	lr

000047f8 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
    47f8:	2201      	movs	r2, #1
    47fa:	6903      	ldr	r3, [r0, #16]
    47fc:	68db      	ldr	r3, [r3, #12]
    47fe:	739a      	strb	r2, [r3, #14]
}
    4800:	4770      	bx	lr

00004802 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
    4802:	6903      	ldr	r3, [r0, #16]
    4804:	68db      	ldr	r3, [r3, #12]
    4806:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    4808:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    480c:	b962      	cbnz	r2, 4828 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
    480e:	6842      	ldr	r2, [r0, #4]
    4810:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4812:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    4816:	b140      	cbz	r0, 482a <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
    4818:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    481c:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
    4820:	d003      	beq.n	482a <uarte_nrfx_irq_tx_ready_complete+0x28>
    4822:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
    4824:	6119      	str	r1, [r3, #16]
    4826:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    4828:	2000      	movs	r0, #0
}
    482a:	4770      	bx	lr

0000482c <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
    482c:	6843      	ldr	r3, [r0, #4]
    482e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4830:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    4834:	3800      	subs	r0, #0
    4836:	bf18      	it	ne
    4838:	2001      	movne	r0, #1
    483a:	4770      	bx	lr

0000483c <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
    483c:	2210      	movs	r2, #16
	return config->uarte_regs;
    483e:	6843      	ldr	r3, [r0, #4]
    4840:	681b      	ldr	r3, [r3, #0]
    4842:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    4846:	4770      	bx	lr

00004848 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
    4848:	2210      	movs	r2, #16
	return config->uarte_regs;
    484a:	6843      	ldr	r3, [r0, #4]
    484c:	681b      	ldr	r3, [r3, #0]
    484e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    4852:	4770      	bx	lr

00004854 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
    4854:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
    4858:	6843      	ldr	r3, [r0, #4]
    485a:	681b      	ldr	r3, [r3, #0]
    485c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    4860:	4770      	bx	lr

00004862 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
    4862:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
    4866:	6843      	ldr	r3, [r0, #4]
    4868:	681b      	ldr	r3, [r3, #0]
    486a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    486e:	4770      	bx	lr

00004870 <uarte_nrfx_irq_is_pending>:
{
    4870:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    4872:	6843      	ldr	r3, [r0, #4]
{
    4874:	4604      	mov	r4, r0
	return config->uarte_regs;
    4876:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    4878:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    487c:	025b      	lsls	r3, r3, #9
    487e:	d405      	bmi.n	488c <uarte_nrfx_irq_is_pending+0x1c>
    4880:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    4884:	f010 0010 	ands.w	r0, r0, #16
    4888:	d106      	bne.n	4898 <uarte_nrfx_irq_is_pending+0x28>
}
    488a:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    488c:	f7ff ffb9 	bl	4802 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    4890:	2800      	cmp	r0, #0
    4892:	d0f5      	beq.n	4880 <uarte_nrfx_irq_is_pending+0x10>
		||
    4894:	2001      	movs	r0, #1
    4896:	e7f8      	b.n	488a <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
    4898:	4620      	mov	r0, r4
    489a:	f7ff ffc7 	bl	482c <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    489e:	3800      	subs	r0, #0
    48a0:	bf18      	it	ne
    48a2:	2001      	movne	r0, #1
    48a4:	e7f1      	b.n	488a <uarte_nrfx_irq_is_pending+0x1a>

000048a6 <uarte_nrfx_irq_update>:
}
    48a6:	2001      	movs	r0, #1
    48a8:	4770      	bx	lr

000048aa <uarte_nrfx_irq_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
    48aa:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
    48ac:	68d8      	ldr	r0, [r3, #12]
    48ae:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
    48b0:	68db      	ldr	r3, [r3, #12]
    48b2:	605a      	str	r2, [r3, #4]
}
    48b4:	4770      	bx	lr

000048b6 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    48b6:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    48b8:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    48ba:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    48be:	b940      	cbnz	r0, 48d2 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    48c0:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    48c2:	079b      	lsls	r3, r3, #30
    48c4:	d406      	bmi.n	48d4 <is_tx_ready.isra.0+0x1e>
    48c6:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    48ca:	3800      	subs	r0, #0
    48cc:	bf18      	it	ne
    48ce:	2001      	movne	r0, #1
    48d0:	4770      	bx	lr
    48d2:	2001      	movs	r0, #1
}
    48d4:	4770      	bx	lr

000048d6 <uarte_nrfx_fifo_fill>:
{
    48d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    48d8:	6906      	ldr	r6, [r0, #16]
{
    48da:	4605      	mov	r5, r0
	len = MIN(len, data->int_driven->tx_buff_size);
    48dc:	68f3      	ldr	r3, [r6, #12]
    48de:	899c      	ldrh	r4, [r3, #12]
    48e0:	3310      	adds	r3, #16
    48e2:	4294      	cmp	r4, r2
    48e4:	bfa8      	it	ge
    48e6:	4614      	movge	r4, r2
    48e8:	2201      	movs	r2, #1
    48ea:	e8d3 0fef 	ldaex	r0, [r3]
    48ee:	2800      	cmp	r0, #0
    48f0:	d103      	bne.n	48fa <uarte_nrfx_fifo_fill+0x24>
    48f2:	e8c3 2fe7 	stlex	r7, r2, [r3]
    48f6:	2f00      	cmp	r7, #0
    48f8:	d1f7      	bne.n	48ea <uarte_nrfx_fifo_fill+0x14>
    48fa:	bf0c      	ite	eq
    48fc:	4613      	moveq	r3, r2
    48fe:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    4900:	d11f      	bne.n	4942 <uarte_nrfx_fifo_fill+0x6c>
	memcpy(data->int_driven->tx_buffer, tx_data, len);
    4902:	68f3      	ldr	r3, [r6, #12]
    4904:	4622      	mov	r2, r4
    4906:	6898      	ldr	r0, [r3, #8]
    4908:	f7ff fe3f 	bl	458a <memcpy>
	__asm__ volatile(
    490c:	f04f 0320 	mov.w	r3, #32
    4910:	f3ef 8711 	mrs	r7, BASEPRI
    4914:	f383 8812 	msr	BASEPRI_MAX, r3
    4918:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    491c:	6868      	ldr	r0, [r5, #4]
    491e:	f7ff ffca 	bl	48b6 <is_tx_ready.isra.0>
    4922:	68f3      	ldr	r3, [r6, #12]
    4924:	b938      	cbnz	r0, 4936 <uarte_nrfx_fifo_fill+0x60>
		len = 0;
    4926:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
    4928:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
    492a:	f387 8811 	msr	BASEPRI, r7
    492e:	f3bf 8f6f 	isb	sy
}
    4932:	4620      	mov	r0, r4
    4934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
    4936:	4622      	mov	r2, r4
    4938:	4628      	mov	r0, r5
    493a:	6899      	ldr	r1, [r3, #8]
    493c:	f7ff fefb 	bl	4736 <tx_start>
    4940:	e7f3      	b.n	492a <uarte_nrfx_fifo_fill+0x54>
		return 0;
    4942:	461c      	mov	r4, r3
    4944:	e7f5      	b.n	4932 <uarte_nrfx_fifo_fill+0x5c>

00004946 <uarte_nrfx_isr_int>:
{
    4946:	b410      	push	{r4}
	const struct uarte_nrfx_config *config = dev->config;
    4948:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    494a:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    494c:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    4950:	05c9      	lsls	r1, r1, #23
    4952:	d518      	bpl.n	4986 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4954:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    4958:	b1a9      	cbz	r1, 4986 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
    495a:	f04f 0420 	mov.w	r4, #32
    495e:	f3ef 8111 	mrs	r1, BASEPRI
    4962:	f384 8812 	msr	BASEPRI_MAX, r4
    4966:	f3bf 8f6f 	isb	sy
    496a:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    496e:	b134      	cbz	r4, 497e <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4970:	2400      	movs	r4, #0
    4972:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
    4976:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    497a:	2401      	movs	r4, #1
    497c:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
    497e:	f381 8811 	msr	BASEPRI, r1
    4982:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    4986:	6852      	ldr	r2, [r2, #4]
    4988:	06d2      	lsls	r2, r2, #27
    498a:	d51a      	bpl.n	49c2 <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
    498c:	f04f 0220 	mov.w	r2, #32
    4990:	f3ef 8111 	mrs	r1, BASEPRI
    4994:	f382 8812 	msr	BASEPRI_MAX, r2
    4998:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    499c:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    49a0:	b112      	cbz	r2, 49a8 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    49a2:	2200      	movs	r2, #0
    49a4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
    49a8:	6902      	ldr	r2, [r0, #16]
    49aa:	68d2      	ldr	r2, [r2, #12]
    49ac:	b10a      	cbz	r2, 49b2 <uarte_nrfx_isr_int+0x6c>
    49ae:	6912      	ldr	r2, [r2, #16]
    49b0:	b91a      	cbnz	r2, 49ba <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
    49b2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    49b6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
    49ba:	f381 8811 	msr	BASEPRI, r1
    49be:	f3bf 8f6f 	isb	sy
	struct uarte_nrfx_data *data = dev->data;
    49c2:	6902      	ldr	r2, [r0, #16]
	if (!data->int_driven) {
    49c4:	68d4      	ldr	r4, [r2, #12]
    49c6:	b16c      	cbz	r4, 49e4 <uarte_nrfx_isr_int+0x9e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    49c8:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    49cc:	b161      	cbz	r1, 49e8 <uarte_nrfx_isr_int+0xa2>
		data->int_driven->fifo_fill_lock = 0;
    49ce:	2100      	movs	r1, #0
    49d0:	6121      	str	r1, [r4, #16]
		if (data->int_driven->disable_tx_irq) {
    49d2:	68d4      	ldr	r4, [r2, #12]
    49d4:	7ba4      	ldrb	r4, [r4, #14]
    49d6:	b13c      	cbz	r4, 49e8 <uarte_nrfx_isr_int+0xa2>
    p_reg->INTENCLR = mask;
    49d8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    49dc:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    49e0:	68d3      	ldr	r3, [r2, #12]
    49e2:	7399      	strb	r1, [r3, #14]
}
    49e4:	bc10      	pop	{r4}
    49e6:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    49e8:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    49ec:	b121      	cbz	r1, 49f8 <uarte_nrfx_isr_int+0xb2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    49ee:	2100      	movs	r1, #0
    49f0:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
    49f4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
    49f8:	68d2      	ldr	r2, [r2, #12]
    49fa:	6813      	ldr	r3, [r2, #0]
    49fc:	2b00      	cmp	r3, #0
    49fe:	d0f1      	beq.n	49e4 <uarte_nrfx_isr_int+0x9e>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    4a00:	6851      	ldr	r1, [r2, #4]
}
    4a02:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
    4a04:	4718      	bx	r3

00004a06 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    4a06:	4770      	bx	lr

00004a08 <event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4a08:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    4a0a:	f100 0350 	add.w	r3, r0, #80	; 0x50
    4a0e:	009b      	lsls	r3, r3, #2
    4a10:	b29b      	uxth	r3, r3
    4a12:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    4a16:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    4a1a:	601a      	str	r2, [r3, #0]
    4a1c:	681b      	ldr	r3, [r3, #0]
}
    4a1e:	4770      	bx	lr

00004a20 <k_sys_fatal_error_handler>:

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    4a20:	2000      	movs	r0, #0
{
    4a22:	b508      	push	{r3, lr}
		sys_arch_reboot(0);
    4a24:	f7fc ffd0 	bl	19c8 <sys_arch_reboot>

00004a28 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    4a28:	f7ff b994 	b.w	3d54 <nrf_cc3xx_platform_init_no_rng>

00004a2c <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(void)
{
    4a2c:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    4a2e:	f7fc fc15 	bl	125c <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    4a32:	f7fc fcfb 	bl	142c <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal();
	return res;
}
    4a36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    4a3a:	f7ff b98b 	b.w	3d54 <nrf_cc3xx_platform_init_no_rng>

00004a3e <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    4a3e:	4700      	bx	r0

00004a40 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    4a40:	f000 baef 	b.w	5022 <z_impl_k_busy_wait>

00004a44 <clock_stop>:
{
    4a44:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch (domain)
    4a46:	2803      	cmp	r0, #3
    4a48:	f200 80a7 	bhi.w	4b9a <clock_stop+0x156>
    4a4c:	e8df f000 	tbb	[pc, r0]
    4a50:	35271902 	.word	0x35271902
    4a54:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4a58:	2202      	movs	r2, #2
    4a5a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4a5e:	2200      	movs	r2, #0
    4a60:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    4a64:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4a68:	2201      	movs	r2, #1
    4a6a:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    4a6c:	2400      	movs	r4, #0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    4a6e:	2301      	movs	r3, #1
    4a70:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
    4a74:	2803      	cmp	r0, #3
    4a76:	f200 8090 	bhi.w	4b9a <clock_stop+0x156>
    4a7a:	e8df f000 	tbb	[pc, r0]
    4a7e:	692c      	.short	0x692c
    4a80:	9a78      	.short	0x9a78
    p_reg->INTENCLR = mask;
    4a82:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4a86:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4a88:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
    4a8a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4a8e:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    4a92:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    4a96:	f10d 0407 	add.w	r4, sp, #7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4a9a:	605a      	str	r2, [r3, #4]
    4a9c:	e7e7      	b.n	4a6e <clock_stop+0x2a>
    p_reg->INTENCLR = mask;
    4a9e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
    4aa6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4aaa:	2200      	movs	r2, #0
    4aac:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    4ab0:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4ab4:	2201      	movs	r2, #1
    4ab6:	625a      	str	r2, [r3, #36]	; 0x24
    4ab8:	e7d8      	b.n	4a6c <clock_stop+0x28>
    p_reg->INTENCLR = mask;
    4aba:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4abe:	f44f 7280 	mov.w	r2, #256	; 0x100
    4ac2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4ac6:	2200      	movs	r2, #0
    4ac8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    4acc:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4ad0:	2201      	movs	r2, #1
    4ad2:	61da      	str	r2, [r3, #28]
    4ad4:	e7ca      	b.n	4a6c <clock_stop+0x28>
    switch (domain)
    4ad6:	f242 7510 	movw	r5, #10000	; 0x2710
    4ada:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
            if (p_clk_src != NULL)
    4ade:	b36c      	cbz	r4, 4b3c <clock_stop+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4ae0:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    4ae4:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    4ae8:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4aea:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    4aee:	03d9      	lsls	r1, r3, #15
    4af0:	d553      	bpl.n	4b9a <clock_stop+0x156>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    4af2:	f89d 0007 	ldrb.w	r0, [sp, #7]
    4af6:	2801      	cmp	r0, #1
    4af8:	d14f      	bne.n	4b9a <clock_stop+0x156>
    4afa:	f7ff ffa1 	bl	4a40 <nrfx_busy_wait>
    4afe:	3d01      	subs	r5, #1
    4b00:	d1ed      	bne.n	4ade <clock_stop+0x9a>
    4b02:	e04a      	b.n	4b9a <clock_stop+0x156>
    4b04:	f89d 0007 	ldrb.w	r0, [sp, #7]
    4b08:	2801      	cmp	r0, #1
    4b0a:	d146      	bne.n	4b9a <clock_stop+0x156>
    4b0c:	f7ff ff98 	bl	4a40 <nrfx_busy_wait>
    4b10:	3d01      	subs	r5, #1
    4b12:	d152      	bne.n	4bba <clock_stop+0x176>
    4b14:	e041      	b.n	4b9a <clock_stop+0x156>
    4b16:	f89d 0007 	ldrb.w	r0, [sp, #7]
    4b1a:	2801      	cmp	r0, #1
    4b1c:	d13d      	bne.n	4b9a <clock_stop+0x156>
    4b1e:	f7ff ff8f 	bl	4a40 <nrfx_busy_wait>
    4b22:	3d01      	subs	r5, #1
    4b24:	d039      	beq.n	4b9a <clock_stop+0x156>
            if (p_clk_src != NULL)
    4b26:	b1c4      	cbz	r4, 4b5a <clock_stop+0x116>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4b28:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    4b2c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    4b30:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4b32:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    4b36:	03db      	lsls	r3, r3, #15
    4b38:	d52f      	bpl.n	4b9a <clock_stop+0x156>
    4b3a:	e7ec      	b.n	4b16 <clock_stop+0xd2>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4b3c:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    4b40:	03da      	lsls	r2, r3, #15
    4b42:	d52a      	bpl.n	4b9a <clock_stop+0x156>
    4b44:	2001      	movs	r0, #1
    4b46:	f7ff ff7b 	bl	4a40 <nrfx_busy_wait>
    4b4a:	3d01      	subs	r5, #1
    4b4c:	d1f6      	bne.n	4b3c <clock_stop+0xf8>
    4b4e:	e024      	b.n	4b9a <clock_stop+0x156>
    switch (domain)
    4b50:	f242 7510 	movw	r5, #10000	; 0x2710
    4b54:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    4b58:	e7e5      	b.n	4b26 <clock_stop+0xe2>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4b5a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    4b5e:	03d8      	lsls	r0, r3, #15
    4b60:	d51b      	bpl.n	4b9a <clock_stop+0x156>
    4b62:	2001      	movs	r0, #1
    4b64:	f7ff ff6c 	bl	4a40 <nrfx_busy_wait>
    4b68:	3d01      	subs	r5, #1
    4b6a:	d1f6      	bne.n	4b5a <clock_stop+0x116>
    4b6c:	e015      	b.n	4b9a <clock_stop+0x156>
    switch (domain)
    4b6e:	f242 7510 	movw	r5, #10000	; 0x2710
    4b72:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
            if (p_clk_src != NULL)
    4b76:	b194      	cbz	r4, 4b9e <clock_stop+0x15a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    4b78:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    4b7c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    4b80:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    4b82:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    4b86:	03d9      	lsls	r1, r3, #15
    4b88:	d507      	bpl.n	4b9a <clock_stop+0x156>
    4b8a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    4b8e:	2801      	cmp	r0, #1
    4b90:	d103      	bne.n	4b9a <clock_stop+0x156>
    4b92:	f7ff ff55 	bl	4a40 <nrfx_busy_wait>
    4b96:	3d01      	subs	r5, #1
    4b98:	d1ed      	bne.n	4b76 <clock_stop+0x132>
}
    4b9a:	b002      	add	sp, #8
    4b9c:	bd70      	pop	{r4, r5, r6, pc}
    4b9e:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    4ba2:	03da      	lsls	r2, r3, #15
    4ba4:	d5f9      	bpl.n	4b9a <clock_stop+0x156>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    4ba6:	2001      	movs	r0, #1
    4ba8:	f7ff ff4a 	bl	4a40 <nrfx_busy_wait>
    4bac:	3d01      	subs	r5, #1
    4bae:	d1f6      	bne.n	4b9e <clock_stop+0x15a>
    4bb0:	e7f3      	b.n	4b9a <clock_stop+0x156>
    switch (domain)
    4bb2:	f242 7510 	movw	r5, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    4bb6:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    4bba:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
    4bbe:	03db      	lsls	r3, r3, #15
    4bc0:	d5eb      	bpl.n	4b9a <clock_stop+0x156>
    4bc2:	2c00      	cmp	r4, #0
    4bc4:	d19e      	bne.n	4b04 <clock_stop+0xc0>
    4bc6:	2001      	movs	r0, #1
    4bc8:	e7a0      	b.n	4b0c <clock_stop+0xc8>

00004bca <nrfx_clock_enable>:
{
    4bca:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    4bcc:	2005      	movs	r0, #5
    4bce:	f7fc fc85 	bl	14dc <arch_irq_is_enabled>
    4bd2:	b910      	cbnz	r0, 4bda <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    4bd4:	2005      	movs	r0, #5
    4bd6:	f7fc fc5f 	bl	1498 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4bda:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4bde:	2201      	movs	r2, #1
    4be0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
    4be4:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    4be8:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
}
    4bec:	bd08      	pop	{r3, pc}

00004bee <nrfx_clock_start>:
{
    4bee:	b508      	push	{r3, lr}
    switch (domain)
    4bf0:	2803      	cmp	r0, #3
    4bf2:	d819      	bhi.n	4c28 <nrfx_clock_start+0x3a>
    4bf4:	e8df f000 	tbb	[pc, r0]
    4bf8:	4c3e3202 	.word	0x4c3e3202
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4bfc:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    4c00:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4c04:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    4c08:	03c9      	lsls	r1, r1, #15
    4c0a:	d40e      	bmi.n	4c2a <nrfx_clock_start+0x3c>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    4c0c:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    4c10:	07db      	lsls	r3, r3, #31
    4c12:	d513      	bpl.n	4c3c <nrfx_clock_start+0x4e>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4c14:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    4c18:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    4c1c:	3b01      	subs	r3, #1
    4c1e:	2b01      	cmp	r3, #1
    4c20:	d809      	bhi.n	4c36 <nrfx_clock_start+0x48>
    p_reg->INTENSET = mask;
    4c22:	2302      	movs	r3, #2
    4c24:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    4c28:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4c2a:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    4c2e:	2b02      	cmp	r3, #2
    4c30:	d005      	beq.n	4c3e <nrfx_clock_start+0x50>
    4c32:	2b01      	cmp	r3, #1
    4c34:	d002      	beq.n	4c3c <nrfx_clock_start+0x4e>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    4c36:	2000      	movs	r0, #0
    4c38:	f7ff ff04 	bl	4a44 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    4c3c:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
    4c3e:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    4c42:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4c46:	2300      	movs	r3, #0
    4c48:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    4c4c:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    4c50:	2302      	movs	r3, #2
    4c52:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4c56:	2301      	movs	r3, #1
    4c58:	6093      	str	r3, [r2, #8]
}
    4c5a:	e7e5      	b.n	4c28 <nrfx_clock_start+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4c5c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4c60:	2200      	movs	r2, #0
    4c62:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    4c66:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    4c6a:	2201      	movs	r2, #1
    4c6c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4c70:	601a      	str	r2, [r3, #0]
}
    4c72:	e7d9      	b.n	4c28 <nrfx_clock_start+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4c74:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4c78:	2200      	movs	r2, #0
    4c7a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    4c7e:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
    4c82:	f44f 7200 	mov.w	r2, #512	; 0x200
    4c86:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4c8a:	2201      	movs	r2, #1
    4c8c:	621a      	str	r2, [r3, #32]
}
    4c8e:	e7cb      	b.n	4c28 <nrfx_clock_start+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4c90:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4c94:	2200      	movs	r2, #0
    4c96:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    4c9a:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
    4c9e:	f44f 7280 	mov.w	r2, #256	; 0x100
    4ca2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4ca6:	2201      	movs	r2, #1
    4ca8:	619a      	str	r2, [r3, #24]
}
    4caa:	e7bd      	b.n	4c28 <nrfx_clock_start+0x3a>

00004cac <nrfx_clock_stop>:
    clock_stop(domain);
    4cac:	f7ff beca 	b.w	4a44 <clock_stop>

00004cb0 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
    4cb0:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    4cb2:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
    4cb4:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    4cb6:	bf9c      	itt	ls
    4cb8:	6881      	ldrls	r1, [r0, #8]
    4cba:	185b      	addls	r3, r3, r1
    r = RdOff - WrOff - 1u;
    4cbc:	3b01      	subs	r3, #1
    4cbe:	1a98      	subs	r0, r3, r2
}
    4cc0:	4770      	bx	lr

00004cc2 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    4cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4cc6:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
    4cc8:	e9d0 8402 	ldrd	r8, r4, [r0, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    4ccc:	6840      	ldr	r0, [r0, #4]
  Rem = pRing->SizeOfBuffer - WrOff;
    4cce:	eba8 0604 	sub.w	r6, r8, r4
  if (Rem > NumBytes) {
    4cd2:	4296      	cmp	r6, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    4cd4:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    4cd6:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
    4cd8:	4414      	add	r4, r2
  if (Rem > NumBytes) {
    4cda:	d906      	bls.n	4cea <_WriteNoCheck+0x28>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    4cdc:	f7ff fc55 	bl	458a <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    4ce0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
    4ce4:	60ec      	str	r4, [r5, #12]
}
    4ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    4cea:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
    4cec:	eba4 0408 	sub.w	r4, r4, r8
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    4cf0:	f7ff fc4b 	bl	458a <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    4cf4:	4622      	mov	r2, r4
    4cf6:	6868      	ldr	r0, [r5, #4]
    4cf8:	19b9      	adds	r1, r7, r6
    4cfa:	e7ef      	b.n	4cdc <_WriteNoCheck+0x1a>

00004cfc <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    4cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4d00:	4606      	mov	r6, r0
    4d02:	4689      	mov	r9, r1
    4d04:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
    4d06:	f04f 0800 	mov.w	r8, #0
  WrOff = pRing->WrOff;
    4d0a:	68c5      	ldr	r5, [r0, #12]
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    4d0c:	6933      	ldr	r3, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    4d0e:	68b4      	ldr	r4, [r6, #8]
    if (RdOff > WrOff) {
    4d10:	429d      	cmp	r5, r3
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    4d12:	bf28      	it	cs
    4d14:	191b      	addcs	r3, r3, r4
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    4d16:	1b64      	subs	r4, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    4d18:	42bc      	cmp	r4, r7
    4d1a:	bf28      	it	cs
    4d1c:	463c      	movcs	r4, r7
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    4d1e:	3b01      	subs	r3, #1
    4d20:	1b5b      	subs	r3, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    4d22:	429c      	cmp	r4, r3
    4d24:	bf28      	it	cs
    4d26:	461c      	movcs	r4, r3
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    4d28:	6870      	ldr	r0, [r6, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    4d2a:	4649      	mov	r1, r9
    4d2c:	4622      	mov	r2, r4
    4d2e:	4428      	add	r0, r5
    4d30:	f7ff fc2b 	bl	458a <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
    4d34:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
    4d36:	4425      	add	r5, r4
      WrOff = 0u;
    4d38:	42ab      	cmp	r3, r5
    4d3a:	bf08      	it	eq
    4d3c:	2500      	moveq	r5, #0
    NumBytesWritten += NumBytesToWrite;
    4d3e:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
    4d40:	44a1      	add	r9, r4
    NumBytes        -= NumBytesToWrite;
    4d42:	1b3f      	subs	r7, r7, r4
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    4d44:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
    4d48:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    4d4a:	2f00      	cmp	r7, #0
    4d4c:	d1de      	bne.n	4d0c <_WriteBlocking+0x10>
}
    4d4e:	4640      	mov	r0, r8
    4d50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00004d54 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    4d54:	f7fd bf6c 	b.w	2c30 <_DoInit>

00004d58 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(void)
{
    4d58:	b508      	push	{r3, lr}

	SEGGER_RTT_Init();
    4d5a:	f7ff fffb 	bl	4d54 <SEGGER_RTT_Init>

	return 0;
}
    4d5e:	2000      	movs	r0, #0
    4d60:	bd08      	pop	{r3, pc}

00004d62 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    4d62:	4770      	bx	lr

00004d64 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    4d64:	b140      	cbz	r0, 4d78 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    4d66:	68c3      	ldr	r3, [r0, #12]
    4d68:	7858      	ldrb	r0, [r3, #1]
    4d6a:	f010 0001 	ands.w	r0, r0, #1
    4d6e:	bf1e      	ittt	ne
    4d70:	7818      	ldrbne	r0, [r3, #0]
    4d72:	fab0 f080 	clzne	r0, r0
    4d76:	0940      	lsrne	r0, r0, #5
}
    4d78:	4770      	bx	lr

00004d7a <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4d7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d7c:	4605      	mov	r5, r0
    4d7e:	460e      	mov	r6, r1
	__asm__ volatile(
    4d80:	f04f 0320 	mov.w	r3, #32
    4d84:	f3ef 8711 	mrs	r7, BASEPRI
    4d88:	f383 8812 	msr	BASEPRI_MAX, r3
    4d8c:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    4d90:	f7fe fe08 	bl	39a4 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    4d94:	4631      	mov	r1, r6
    4d96:	4604      	mov	r4, r0
    4d98:	4628      	mov	r0, r5
    4d9a:	f7ff fe41 	bl	4a20 <k_sys_fatal_error_handler>
	__asm__ volatile(
    4d9e:	f387 8811 	msr	BASEPRI, r7
    4da2:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    4da6:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    4da8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4dac:	f7fc be56 	b.w	1a5c <z_impl_k_thread_abort>

00004db0 <z_early_memset>:
	(void) memset(dst, c, n);
    4db0:	f7ff bbf6 	b.w	45a0 <memset>

00004db4 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    4db4:	f7ff bbe9 	b.w	458a <memcpy>

00004db8 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    4db8:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    4dbc:	4313      	orrs	r3, r2
    4dbe:	f013 0303 	ands.w	r3, r3, #3
    4dc2:	d10c      	bne.n	4dde <create_free_list+0x26>
	slab->free_list = NULL;
    4dc4:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    4dc6:	6881      	ldr	r1, [r0, #8]
    4dc8:	4299      	cmp	r1, r3
    4dca:	d801      	bhi.n	4dd0 <create_free_list+0x18>
	return 0;
    4dcc:	2000      	movs	r0, #0
    4dce:	4770      	bx	lr
		*(char **)p = slab->free_list;
    4dd0:	6941      	ldr	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    4dd2:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
    4dd4:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
    4dd6:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
    4dd8:	6142      	str	r2, [r0, #20]
		p += slab->block_size;
    4dda:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    4ddc:	e7f3      	b.n	4dc6 <create_free_list+0xe>
		return -EINVAL;
    4dde:	f06f 0015 	mvn.w	r0, #21
}
    4de2:	4770      	bx	lr

00004de4 <k_mem_slab_init>:
{
    4de4:	b510      	push	{r4, lr}
	slab->block_size = block_size;
    4de6:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
    4dea:	2300      	movs	r3, #0
	slab->buffer = buffer;
    4dec:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    4dee:	6183      	str	r3, [r0, #24]
{
    4df0:	4604      	mov	r4, r0
	rc = create_free_list(slab);
    4df2:	f7ff ffe1 	bl	4db8 <create_free_list>
	if (rc < 0) {
    4df6:	2800      	cmp	r0, #0
	list->tail = (sys_dnode_t *)list;
    4df8:	bfa8      	it	ge
    4dfa:	e9c4 4400 	strdge	r4, r4, [r4]
}
    4dfe:	bd10      	pop	{r4, pc}

00004e00 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    4e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e02:	4604      	mov	r4, r0
    4e04:	460d      	mov	r5, r1
	__asm__ volatile(
    4e06:	f04f 0320 	mov.w	r3, #32
    4e0a:	f3ef 8611 	mrs	r6, BASEPRI
    4e0e:	f383 8812 	msr	BASEPRI_MAX, r3
    4e12:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    4e16:	6947      	ldr	r7, [r0, #20]
    4e18:	b977      	cbnz	r7, 4e38 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    4e1a:	f000 f8a6 	bl	4f6a <z_unpend_first_thread>

		if (pending_thread != NULL) {
    4e1e:	b158      	cbz	r0, 4e38 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    4e20:	682a      	ldr	r2, [r5, #0]
    4e22:	6787      	str	r7, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    4e24:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    4e26:	f000 f86a 	bl	4efe <z_ready_thread>
			z_reschedule(&slab->lock, key);
    4e2a:	4631      	mov	r1, r6
    4e2c:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    4e30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    4e34:	f7fe bc80 	b.w	3738 <z_reschedule>
	**(char ***) mem = slab->free_list;
    4e38:	682b      	ldr	r3, [r5, #0]
    4e3a:	6962      	ldr	r2, [r4, #20]
    4e3c:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    4e3e:	682b      	ldr	r3, [r5, #0]
    4e40:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    4e42:	69a3      	ldr	r3, [r4, #24]
    4e44:	3b01      	subs	r3, #1
    4e46:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    4e48:	f386 8811 	msr	BASEPRI, r6
    4e4c:	f3bf 8f6f 	isb	sy
}
    4e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004e52 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4e52:	f3ef 8005 	mrs	r0, IPSR
}
    4e56:	3800      	subs	r0, #0
    4e58:	bf18      	it	ne
    4e5a:	2001      	movne	r0, #1
    4e5c:	4770      	bx	lr

00004e5e <z_pm_save_idle_exit>:
{
    4e5e:	b508      	push	{r3, lr}
	pm_system_resume();
    4e60:	f7fc f8fc 	bl	105c <pm_system_resume>
}
    4e64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    4e68:	f7ff bdcd 	b.w	4a06 <sys_clock_idle_exit>

00004e6c <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    4e6c:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4e70:	428b      	cmp	r3, r1
    4e72:	d001      	beq.n	4e78 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    4e74:	f7fe bc1a 	b.w	36ac <z_set_prio>
}
    4e78:	2000      	movs	r0, #0
    4e7a:	4770      	bx	lr

00004e7c <z_impl_k_mutex_init>:
{
    4e7c:	4603      	mov	r3, r0
	mutex->owner = NULL;
    4e7e:	2000      	movs	r0, #0
    4e80:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
    4e84:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
    4e88:	4770      	bx	lr

00004e8a <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    4e8a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    4e8e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    4e90:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4e92:	2300      	movs	r3, #0
	node->prev = NULL;
    4e94:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    4e98:	4770      	bx	lr

00004e9a <unpend_thread_no_timeout>:
{
    4e9a:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    4e9c:	f7ff fff5 	bl	4e8a <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    4ea0:	7b43      	ldrb	r3, [r0, #13]
    4ea2:	f023 0302 	bic.w	r3, r3, #2
    4ea6:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    4ea8:	2300      	movs	r3, #0
    4eaa:	6083      	str	r3, [r0, #8]
}
    4eac:	bd08      	pop	{r3, pc}

00004eae <add_to_waitq_locked>:
{
    4eae:	b538      	push	{r3, r4, r5, lr}
    4eb0:	4604      	mov	r4, r0
    4eb2:	460d      	mov	r5, r1
	unready_thread(thread);
    4eb4:	f7fe fb7c 	bl	35b0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    4eb8:	7b63      	ldrb	r3, [r4, #13]
    4eba:	f043 0302 	orr.w	r3, r3, #2
    4ebe:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    4ec0:	b1e5      	cbz	r5, 4efc <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    4ec2:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    4ec4:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4ec6:	429d      	cmp	r5, r3
    4ec8:	d109      	bne.n	4ede <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    4eca:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    4ecc:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    4ed0:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4ed2:	606c      	str	r4, [r5, #4]
}
    4ed4:	e012      	b.n	4efc <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    4ed6:	686a      	ldr	r2, [r5, #4]
    4ed8:	4293      	cmp	r3, r2
    4eda:	d0f6      	beq.n	4eca <add_to_waitq_locked+0x1c>
    4edc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4ede:	2b00      	cmp	r3, #0
    4ee0:	d0f3      	beq.n	4eca <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    4ee2:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    4ee6:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    4eea:	428a      	cmp	r2, r1
    4eec:	d0f3      	beq.n	4ed6 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4eee:	4291      	cmp	r1, r2
    4ef0:	ddf1      	ble.n	4ed6 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    4ef2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4ef4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4ef8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4efa:	605c      	str	r4, [r3, #4]
}
    4efc:	bd38      	pop	{r3, r4, r5, pc}

00004efe <z_ready_thread>:
{
    4efe:	b510      	push	{r4, lr}
	__asm__ volatile(
    4f00:	f04f 0320 	mov.w	r3, #32
    4f04:	f3ef 8411 	mrs	r4, BASEPRI
    4f08:	f383 8812 	msr	BASEPRI_MAX, r3
    4f0c:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    4f10:	f7fe fb1a 	bl	3548 <ready_thread>
	__asm__ volatile(
    4f14:	f384 8811 	msr	BASEPRI, r4
    4f18:	f3bf 8f6f 	isb	sy
}
    4f1c:	bd10      	pop	{r4, pc}

00004f1e <z_sched_wake_thread>:
{
    4f1e:	b538      	push	{r3, r4, r5, lr}
    4f20:	4604      	mov	r4, r0
	__asm__ volatile(
    4f22:	f04f 0320 	mov.w	r3, #32
    4f26:	f3ef 8511 	mrs	r5, BASEPRI
    4f2a:	f383 8812 	msr	BASEPRI_MAX, r3
    4f2e:	f3bf 8f6f 	isb	sy
		if (!killed) {
    4f32:	7b43      	ldrb	r3, [r0, #13]
    4f34:	f013 0f28 	tst.w	r3, #40	; 0x28
    4f38:	d10b      	bne.n	4f52 <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
    4f3a:	6883      	ldr	r3, [r0, #8]
    4f3c:	b10b      	cbz	r3, 4f42 <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
    4f3e:	f7ff ffac 	bl	4e9a <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4f42:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
    4f44:	b951      	cbnz	r1, 4f5c <z_sched_wake_thread+0x3e>
    4f46:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
			ready_thread(thread);
    4f4a:	4620      	mov	r0, r4
    4f4c:	7363      	strb	r3, [r4, #13]
    4f4e:	f7fe fafb 	bl	3548 <ready_thread>
	__asm__ volatile(
    4f52:	f385 8811 	msr	BASEPRI, r5
    4f56:	f3bf 8f6f 	isb	sy
}
    4f5a:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    4f5c:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
    4f60:	e7f3      	b.n	4f4a <z_sched_wake_thread+0x2c>

00004f62 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
    4f62:	2101      	movs	r1, #1
    4f64:	3818      	subs	r0, #24
    4f66:	f7ff bfda 	b.w	4f1e <z_sched_wake_thread>

00004f6a <z_unpend_first_thread>:
{
    4f6a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4f6c:	f04f 0320 	mov.w	r3, #32
    4f70:	f3ef 8511 	mrs	r5, BASEPRI
    4f74:	f383 8812 	msr	BASEPRI_MAX, r3
    4f78:	f3bf 8f6f 	isb	sy
	return list->head == list;
    4f7c:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4f7e:	42a0      	cmp	r0, r4
    4f80:	d00d      	beq.n	4f9e <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    4f82:	b134      	cbz	r4, 4f92 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    4f84:	4620      	mov	r0, r4
    4f86:	f7ff ff88 	bl	4e9a <unpend_thread_no_timeout>
    4f8a:	f104 0018 	add.w	r0, r4, #24
    4f8e:	f000 f81e 	bl	4fce <z_abort_timeout>
	__asm__ volatile(
    4f92:	f385 8811 	msr	BASEPRI, r5
    4f96:	f3bf 8f6f 	isb	sy
}
    4f9a:	4620      	mov	r0, r4
    4f9c:	bd38      	pop	{r3, r4, r5, pc}
    4f9e:	2400      	movs	r4, #0
    4fa0:	e7f7      	b.n	4f92 <z_unpend_first_thread+0x28>

00004fa2 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4fa2:	4603      	mov	r3, r0
    4fa4:	b920      	cbnz	r0, 4fb0 <z_reschedule_irqlock+0xe>
    4fa6:	f3ef 8205 	mrs	r2, IPSR
    4faa:	b90a      	cbnz	r2, 4fb0 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    4fac:	f7fc bada 	b.w	1564 <arch_swap>
    4fb0:	f383 8811 	msr	BASEPRI, r3
    4fb4:	f3bf 8f6f 	isb	sy
}
    4fb8:	4770      	bx	lr

00004fba <z_reschedule_unlocked>:
	__asm__ volatile(
    4fba:	f04f 0320 	mov.w	r3, #32
    4fbe:	f3ef 8011 	mrs	r0, BASEPRI
    4fc2:	f383 8812 	msr	BASEPRI_MAX, r3
    4fc6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    4fca:	f7ff bfea 	b.w	4fa2 <z_reschedule_irqlock>

00004fce <z_abort_timeout>:
{
    4fce:	b510      	push	{r4, lr}
    4fd0:	f04f 0220 	mov.w	r2, #32
    4fd4:	f3ef 8411 	mrs	r4, BASEPRI
    4fd8:	f382 8812 	msr	BASEPRI_MAX, r2
    4fdc:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    4fe0:	6803      	ldr	r3, [r0, #0]
    4fe2:	b13b      	cbz	r3, 4ff4 <z_abort_timeout+0x26>
			remove_timeout(to);
    4fe4:	f7fe fd88 	bl	3af8 <remove_timeout>
			ret = 0;
    4fe8:	2000      	movs	r0, #0
	__asm__ volatile(
    4fea:	f384 8811 	msr	BASEPRI, r4
    4fee:	f3bf 8f6f 	isb	sy
}
    4ff2:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    4ff4:	f06f 0015 	mvn.w	r0, #21
    4ff8:	e7f7      	b.n	4fea <z_abort_timeout+0x1c>

00004ffa <z_get_next_timeout_expiry>:
{
    4ffa:	b510      	push	{r4, lr}
	__asm__ volatile(
    4ffc:	f04f 0320 	mov.w	r3, #32
    5000:	f3ef 8411 	mrs	r4, BASEPRI
    5004:	f383 8812 	msr	BASEPRI_MAX, r3
    5008:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    500c:	f7fe fd54 	bl	3ab8 <next_timeout>
	__asm__ volatile(
    5010:	f384 8811 	msr	BASEPRI, r4
    5014:	f3bf 8f6f 	isb	sy
}
    5018:	bd10      	pop	{r4, pc}

0000501a <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    501a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    501c:	f7fe fe68 	bl	3cf0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    5020:	bd08      	pop	{r3, pc}

00005022 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    5022:	b108      	cbz	r0, 5028 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    5024:	f7fb bfca 	b.w	fbc <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    5028:	4770      	bx	lr

0000502a <k_heap_init>:
{
    502a:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    502c:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    5030:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    5034:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    5036:	f7ff b8c0 	b.w	41ba <sys_heap_init>

0000503a <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    503a:	4770      	bx	lr
