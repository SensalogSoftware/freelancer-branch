
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	f0 1c 00 20 69 18 00 00 49 46 00 00 3d 18 00 00     ... i...IF..=...
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
  10:	3d 18 00 00 3d 18 00 00 3d 18 00 00 3d 18 00 00     =...=...=...=...
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	f1 14 00 00 3d 18 00 00 00 00 00 00 99 14 00 00     ....=...........
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  3c:	3d 18 00 00                                         =...

00000040 <_irq_vector_table>:
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
  40:	71 15 00 00 71 15 00 00 71 15 00 00 71 15 00 00     q...q...q...q...
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
  50:	71 15 00 00 71 15 00 00 71 15 00 00 71 15 00 00     q...q...q...q...
		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
				*(const char **)buf = s;
  60:	71 15 00 00 71 15 00 00 71 15 00 00 71 15 00 00     q...q...q...q...
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
  70:	71 15 00 00 71 15 00 00 71 15 00 00 71 15 00 00     q...q...q...q...
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
  80:	71 15 00 00 71 15 00 00 71 15 00 00 71 15 00 00     q...q...q...q...
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
  90:	71 15 00 00 71 15 00 00 71 15 00 00 71 15 00 00     q...q...q...q...
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
					str_ptr_arg[s_idx] = arg_idx;
  a0:	71 15 00 00 71 15 00 00 71 15 00 00 71 15 00 00     q...q...q...q...
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
						s_ro_cnt++;
					} else {
						s_rw_cnt++;
  b0:	71 15 00 00 71 15 00 00 71 15 00 00 71 15 00 00     q...q...q...q...
			switch (*fmt) {
  c0:	71 15 00 00 71 15 00 00 71 15 00 00 71 15 00 00     q...q...q...q...
  d0:	71 15 00 00 71 15 00 00 71 15 00 00 71 15 00 00     q...q...q...q...
  e0:	71 15 00 00 71 15 00 00 71 15 00 00 71 15 00 00     q...q...q...q...
  f0:	71 15 00 00 71 15 00 00 71 15 00 00 71 15 00 00     q...q...q...q...
 100:	71 15 00 00 71 15 00 00 71 15 00 00 71 15 00 00     q...q...q...q...
 110:	71 15 00 00 71 15 00 00 71 15 00 00 71 15 00 00     q...q...q...q...
				align = VA_STACK_ALIGN(void *);
 120:	71 15 00 00 71 15 00 00 71 15 00 00 71 15 00 00     q...q...q...q...
			switch (*fmt) {
 130:	71 15 00 00 71 15 00 00 71 15 00 00 71 15 00 00     q...q...q...q...
 140:	71 15 00 00 71 15 00 00 71 15 00 00 71 15 00 00     q...q...q...q...
		if (buf0 != NULL && BUF_OFFSET + size > len) {
 150:	71 15 00 00                                         q...

Disassembly of section text:

00000154 <__aeabi_uldivmod>:
     154:	b953      	cbnz	r3, 16c <__aeabi_uldivmod+0x18>
     156:	b94a      	cbnz	r2, 16c <__aeabi_uldivmod+0x18>
     158:	2900      	cmp	r1, #0
     15a:	bf08      	it	eq
     15c:	2800      	cmpeq	r0, #0
		if (is_str_arg) {
     15e:	bf1c      	itt	ne
     160:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     164:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
			int v = va_arg(ap, int);
     168:	f000 b80c 	b.w	184 <__aeabi_idiv0>

			if (buf0 != NULL) {
				*(int *)buf = v;
			}
			buf += sizeof(int);
     16c:	f1ad 0c08 	sub.w	ip, sp, #8
     170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
				arg_idx--;
     174:	f000 f808 	bl	188 <__udivmoddi4>
				parsing = false;
     178:	f8dd e004 	ldr.w	lr, [sp, #4]
				continue;
     17c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
				if (fmt[-1] == 'l') {
     180:	b004      	add	sp, #16
     182:	4770      	bx	lr

00000184 <__aeabi_idiv0>:
     184:	4770      	bx	lr
					if (fmt[-2] == 'l') {
     186:	bf00      	nop

00000188 <__udivmoddi4>:
     188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				parsing = false;
     18c:	4686      	mov	lr, r0
					if (fmt[-2] == 'l') {
     18e:	468c      	mov	ip, r1
     190:	4608      	mov	r0, r1
						align = VA_STACK_ALIGN(long long);
     192:	9e08      	ldr	r6, [sp, #32]
     194:	4615      	mov	r5, r2
				size = sizeof(void *);
     196:	4674      	mov	r4, lr
     198:	4619      	mov	r1, r3
					v.ld = va_arg(ap, long double);
     19a:	2b00      	cmp	r3, #0
     19c:	f040 80c1 	bne.w	322 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa2>
     1a0:	4285      	cmp	r5, r0
				buf = (void *) ROUND_UP(buf, align);
     1a2:	fab2 f282 	clz	r2, r2
     1a6:	d945      	bls.n	234 <CONFIG_SRAM_SIZE+0x34>
					v.ld = va_arg(ap, long double);
     1a8:	b14a      	cbz	r2, 1be <__udivmoddi4+0x36>
     1aa:	f1c2 0320 	rsb	r3, r2, #32
					if (BUF_OFFSET + size > len) {
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	4095      	lsls	r5, r2
     1b4:	4094      	lsls	r4, r2
     1b6:	fa2e f303 	lsr.w	r3, lr, r3
						*(long double *)buf = v.ld;
     1ba:	ea43 0c0c 	orr.w	ip, r3, ip
				parsing = false;
     1be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
			switch (*fmt) {
     1c2:	b2a8      	uxth	r0, r5
     1c4:	0c23      	lsrs	r3, r4, #16
     1c6:	fbbc f8fe 	udiv	r8, ip, lr
			if (*++fmt == '\0') {
     1ca:	fb0e cc18 	mls	ip, lr, r8, ip
     1ce:	fb08 f900 	mul.w	r9, r8, r0
			if (!parsing) {
     1d2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     1d6:	4599      	cmp	r9, r3
				if (*fmt == '%') {
     1d8:	d928      	bls.n	22c <CONFIG_SRAM_SIZE+0x2c>
     1da:	18eb      	adds	r3, r5, r3
					parsing = true;
     1dc:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
					arg_idx++;
     1e0:	d204      	bcs.n	1ec <__udivmoddi4+0x64>
     1e2:	4599      	cmp	r9, r3
     1e4:	d902      	bls.n	1ec <__udivmoddi4+0x64>
				align = VA_STACK_ALIGN(size_t);
     1e6:	f1a8 0702 	sub.w	r7, r8, #2
     1ea:	442b      	add	r3, r5
			switch (*fmt) {
     1ec:	eba3 0309 	sub.w	r3, r3, r9
     1f0:	b2a4      	uxth	r4, r4
				parsing = false;
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     1f6:	fb0e 331c 	mls	r3, lr, ip, r3
					return -EINVAL;
     1fa:	fb0c f000 	mul.w	r0, ip, r0
     1fe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
			long long v = va_arg(ap, long long);
     202:	42a0      	cmp	r0, r4
     204:	d914      	bls.n	230 <CONFIG_SRAM_SIZE+0x30>
     206:	192c      	adds	r4, r5, r4
     208:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     20c:	d204      	bcs.n	218 <CONFIG_SRAM_SIZE+0x18>
     20e:	42a0      	cmp	r0, r4
				}
			}
			buf += sizeof(long long);
     210:	d902      	bls.n	218 <CONFIG_SRAM_SIZE+0x18>
     212:	f1ac 0302 	sub.w	r3, ip, #2
		if (is_str_arg) {
     216:	442c      	add	r4, r5
		} else if (size == sizeof(int)) {
     218:	1a24      	subs	r4, r4, r0
     21a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
			int v = va_arg(ap, int);
     21e:	b11e      	cbz	r6, 228 <CONFIG_SRAM_SIZE+0x28>
			if (buf0 != NULL) {
     220:	40d4      	lsrs	r4, r2
		} else if (size == sizeof(long long)) {
     222:	2300      	movs	r3, #0
     224:	6034      	str	r4, [r6, #0]
			long long v = va_arg(ap, long long);
     226:	6073      	str	r3, [r6, #4]
     228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     22c:	4647      	mov	r7, r8
     22e:	e7dd      	b.n	1ec <__udivmoddi4+0x64>
     230:	4663      	mov	r3, ip
			if (buf0 != NULL) {
     232:	e7f1      	b.n	218 <CONFIG_SRAM_SIZE+0x18>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     234:	bb92      	cbnz	r2, 29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     236:	1b43      	subs	r3, r0, r5
     238:	2101      	movs	r1, #1
			s = va_arg(ap, char *);
     23a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     23e:	b2af      	uxth	r7, r5
     240:	0c20      	lsrs	r0, r4, #16
			if (is_ro && !do_ro) {
     242:	fbb3 fcfe 	udiv	ip, r3, lr
     246:	fb0e 331c 	mls	r3, lr, ip, r3
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     24a:	fb0c f807 	mul.w	r8, ip, r7
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     24e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     252:	4598      	cmp	r8, r3
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     254:	d961      	bls.n	31a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9a>
     256:	18eb      	adds	r3, r5, r3
     258:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     25c:	d204      	bcs.n	268 <CONFIG_SRAM_SIZE+0x68>
				if (buf0 != NULL) {
     25e:	4598      	cmp	r8, r3
					str_ptr_pos[s_idx] = s_ptr_idx;
     260:	d902      	bls.n	268 <CONFIG_SRAM_SIZE+0x68>
     262:	f1ac 0002 	sub.w	r0, ip, #2
     266:	442b      	add	r3, r5
					str_ptr_arg[s_idx] = arg_idx;
     268:	eba3 0308 	sub.w	r3, r3, r8
					str_ptr_pos[s_idx] = s_ptr_idx;
     26c:	b2a4      	uxth	r4, r4
     26e:	fbb3 fcfe 	udiv	ip, r3, lr
					str_ptr_arg[s_idx] = arg_idx;
     272:	fb0e 331c 	mls	r3, lr, ip, r3
					if (is_ro) {
     276:	fb0c f707 	mul.w	r7, ip, r7
     27a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     27e:	42a7      	cmp	r7, r4
     280:	d94d      	bls.n	31e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9e>
     282:	192c      	adds	r4, r5, r4
						s_ro_cnt++;
     284:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
				s_idx++;
     288:	d204      	bcs.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
					if (BUF_OFFSET + size > len) {
     28a:	42a7      	cmp	r7, r4
     28c:	d902      	bls.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
			switch (*fmt) {
     28e:	f1ac 0302 	sub.w	r3, ip, #2
			buf += sizeof(char *);
     292:	442c      	add	r4, r5
					if (BUF_OFFSET + size > len) {
     294:	1be4      	subs	r4, r4, r7
     296:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     29a:	e7c0      	b.n	21e <CONFIG_SRAM_SIZE+0x1e>
     29c:	f1c2 0320 	rsb	r3, r2, #32
				} else if (is_ro) {
     2a0:	4095      	lsls	r5, r2
     2a2:	4094      	lsls	r4, r2
					len += 1;
     2a4:	fa20 f103 	lsr.w	r1, r0, r3
				} else if (rws_pos_en) {
     2a8:	fa2e f303 	lsr.w	r3, lr, r3
     2ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
					len += strlen(s) + 1 + 1;
     2b0:	4090      	lsls	r0, r2
     2b2:	b2af      	uxth	r7, r5
     2b4:	4303      	orrs	r3, r0
     2b6:	fbb1 fcfe 	udiv	ip, r1, lr
     2ba:	fb0e 101c 	mls	r0, lr, ip, r1
     2be:	0c19      	lsrs	r1, r3, #16
     2c0:	fb0c f807 	mul.w	r8, ip, r7
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     2c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2c8:	4588      	cmp	r8, r1

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     2ca:	d922      	bls.n	312 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x92>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     2cc:	1869      	adds	r1, r5, r1
     2ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     2d2:	d204      	bcs.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     2d4:	4588      	cmp	r8, r1
     2d6:	d902      	bls.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     2d8:	f1ac 0002 	sub.w	r0, ip, #2
	*(char **)buf0 = NULL;

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);

	if (rws_pos_en) {
     2dc:	4429      	add	r1, r5
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     2de:	eba1 0108 	sub.w	r1, r1, r8
     2e2:	b29b      	uxth	r3, r3
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2e4:	fbb1 fcfe 	udiv	ip, r1, lr
	if (rws_pos_en) {
     2e8:	fb0e 111c 	mls	r1, lr, ip, r1
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     2ec:	fb0c f707 	mul.w	r7, ip, r7
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     2f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2f4:	429f      	cmp	r7, r3
		for (i = 0; i < s_idx; i++) {
     2f6:	d90e      	bls.n	316 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x96>
     2f8:	18eb      	adds	r3, r5, r3
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
     2fa:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
		for (i = 0; i < s_idx; i++) {
     2fe:	d204      	bcs.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     300:	429f      	cmp	r7, r3
			continue;
		}

		if (rws_pos_en) {
			size = 0;
			*buf++ = str_ptr_arg[i];
     302:	d902      	bls.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     304:	f1ac 0102 	sub.w	r1, ip, #2
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     308:	442b      	add	r3, r5
     30a:	1bdb      	subs	r3, r3, r7
     30c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
			*buf++ = str_ptr_arg[i];
     310:	e793      	b.n	23a <CONFIG_SRAM_SIZE+0x3a>
     312:	4660      	mov	r0, ip
	for (i = 0; i < s_idx; i++) {
     314:	e7e3      	b.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     316:	4661      	mov	r1, ip
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     318:	e7f7      	b.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     31a:	4660      	mov	r0, ip
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     31c:	e7a4      	b.n	268 <CONFIG_SRAM_SIZE+0x68>
		pkg_hdr->desc.rw_str_cnt = 0;
     31e:	4663      	mov	r3, ip
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     320:	e7b8      	b.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     322:	4283      	cmp	r3, r0
     324:	d906      	bls.n	334 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb4>
     326:	b916      	cbnz	r6, 32e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xae>
			if (BUF_OFFSET + 1 > len) {
     328:	2100      	movs	r1, #0
     32a:	4608      	mov	r0, r1
     32c:	e77c      	b.n	228 <CONFIG_SRAM_SIZE+0x28>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     32e:	e9c6 e000 	strd	lr, r0, [r6]
			if (BUF_OFFSET + 1 > len) {
     332:	e7f9      	b.n	328 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa8>
     334:	fab3 f783 	clz	r7, r3
			*buf++ = pos;
     338:	b98f      	cbnz	r7, 35e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xde>
		for (i = 0; i < s_idx; i++) {
     33a:	4283      	cmp	r3, r0
     33c:	d301      	bcc.n	342 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc2>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     33e:	4572      	cmp	r2, lr
     340:	d808      	bhi.n	354 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd4>
     342:	ebbe 0402 	subs.w	r4, lr, r2
     346:	eb60 0303 	sbc.w	r3, r0, r3
     34a:	2001      	movs	r0, #1
		if (rws_pos_en) {
     34c:	469c      	mov	ip, r3
     34e:	b91e      	cbnz	r6, 358 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd8>
			*buf++ = str_ptr_arg[i];
     350:	2100      	movs	r1, #0
     352:	e769      	b.n	228 <CONFIG_SRAM_SIZE+0x28>
     354:	4638      	mov	r0, r7
     356:	e7fa      	b.n	34e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xce>
			size = 0;
     358:	e9c6 4c00 	strd	r4, ip, [r6]
		if (BUF_OFFSET + 1 + size > len) {
     35c:	e7f8      	b.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     35e:	f1c7 0c20 	rsb	ip, r7, #32
     362:	40bb      	lsls	r3, r7
     364:	fa0e f507 	lsl.w	r5, lr, r7
		*buf++ = str_ptr_pos[i];
     368:	fa22 f40c 	lsr.w	r4, r2, ip
     36c:	fa2e f10c 	lsr.w	r1, lr, ip
		memcpy(buf, s, size);
     370:	40ba      	lsls	r2, r7
     372:	431c      	orrs	r4, r3
     374:	fa20 f30c 	lsr.w	r3, r0, ip
		buf += size;
     378:	40b8      	lsls	r0, r7
     37a:	ea4f 4914 	mov.w	r9, r4, lsr #16
	for (i = 0; i < s_idx; i++) {
     37e:	4301      	orrs	r1, r0
     380:	fa1f fe84 	uxth.w	lr, r4
     384:	fbb3 f8f9 	udiv	r8, r3, r9
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     388:	fb09 3018 	mls	r0, r9, r8, r3
     38c:	0c0b      	lsrs	r3, r1, #16
     38e:	fb08 fa0e 	mul.w	sl, r8, lr
			size = strlen(s) + 1;
     392:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     396:	459a      	cmp	sl, r3
			size = strlen(s) + 1;
     398:	d940      	bls.n	41c <CONFIG_FLASH_SIZE+0x1c>
     39a:	18e3      	adds	r3, r4, r3
     39c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
		return -EFAULT;
     3a0:	d204      	bcs.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     3a2:	459a      	cmp	sl, r3
     3a4:	d902      	bls.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     3a6:	f1a8 0002 	sub.w	r0, r8, #2
     3aa:	4423      	add	r3, r4
     3ac:	eba3 030a 	sub.w	r3, r3, sl
     3b0:	b289      	uxth	r1, r1
     3b2:	fbb3 f8f9 	udiv	r8, r3, r9
     3b6:	fb09 3318 	mls	r3, r9, r8, r3
     3ba:	fb08 fe0e 	mul.w	lr, r8, lr
     3be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     3c2:	458e      	cmp	lr, r1
     3c4:	d92c      	bls.n	420 <CONFIG_FLASH_SIZE+0x20>
     3c6:	1861      	adds	r1, r4, r1
     3c8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     3cc:	d204      	bcs.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>
     3ce:	458e      	cmp	lr, r1
     3d0:	d902      	bls.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>
     3d2:	f1a8 0302 	sub.w	r3, r8, #2
     3d6:	4421      	add	r1, r4
     3d8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     3dc:	eba1 010e 	sub.w	r1, r1, lr
     3e0:	fba0 9802 	umull	r9, r8, r0, r2
     3e4:	4541      	cmp	r1, r8
     3e6:	46ce      	mov	lr, r9
     3e8:	4643      	mov	r3, r8
     3ea:	d302      	bcc.n	3f2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x172>
     3ec:	d106      	bne.n	3fc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x17c>
     3ee:	454d      	cmp	r5, r9
     3f0:	d204      	bcs.n	3fc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x17c>
     3f2:	3801      	subs	r0, #1
     3f4:	ebb9 0e02 	subs.w	lr, r9, r2
     3f8:	eb68 0304 	sbc.w	r3, r8, r4
     3fc:	2e00      	cmp	r6, #0
     3fe:	d0a7      	beq.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     400:	ebb5 020e 	subs.w	r2, r5, lr
     404:	eb61 0103 	sbc.w	r1, r1, r3
     408:	fa01 fc0c 	lsl.w	ip, r1, ip
     40c:	fa22 f307 	lsr.w	r3, r2, r7
     410:	40f9      	lsrs	r1, r7
     412:	ea4c 0303 	orr.w	r3, ip, r3
     416:	e9c6 3100 	strd	r3, r1, [r6]
     41a:	e799      	b.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     41c:	4640      	mov	r0, r8
     41e:	e7c5      	b.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     420:	4643      	mov	r3, r8
     422:	e7d9      	b.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>

00000424 <main>:
 * See the sample documentation for information on how to fix this.
 */
static const struct gpio_dt_spec led = GPIO_DT_SPEC_GET(LED_NODE, gpios);

int main(void)
{
     424:	b570      	push	{r4, r5, r6, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     426:	4c12      	ldr	r4, [pc, #72]	; (470 <main+0x4c>)
     428:	4620      	mov	r0, r4
     42a:	f004 fc60 	bl	4cee <z_device_is_ready>
	int ret;

	if (!gpio_is_ready_dt(&led)) {
     42e:	b1e0      	cbz	r0, 46a <main+0x46>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
     430:	6922      	ldr	r2, [r4, #16]
	const struct gpio_driver_api *api =
     432:	68a5      	ldr	r5, [r4, #8]

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
     434:	6813      	ldr	r3, [r2, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
     436:	2104      	movs	r1, #4
		data->invert |= (gpio_port_pins_t)BIT(pin);
     438:	f043 0310 	orr.w	r3, r3, #16
     43c:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
     43e:	4620      	mov	r0, r4
     440:	682b      	ldr	r3, [r5, #0]
     442:	4a0c      	ldr	r2, [pc, #48]	; (474 <main+0x50>)
     444:	4798      	blx	r3
		return 0;
	}

	ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT_ACTIVE);
	if (ret < 0) {
     446:	2800      	cmp	r0, #0
     448:	db0f      	blt.n	46a <main+0x46>
	while (1) {
		ret = gpio_pin_toggle_dt(&led);
		if (ret < 0) {
			return 0;
		}
		printk("Running\n");
     44a:	4e0b      	ldr	r6, [pc, #44]	; (478 <main+0x54>)
					       gpio_port_pins_t pins)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_toggle_bits(port, pins);
     44c:	2110      	movs	r1, #16
     44e:	4620      	mov	r0, r4
     450:	696b      	ldr	r3, [r5, #20]
     452:	4798      	blx	r3
		if (ret < 0) {
     454:	2800      	cmp	r0, #0
     456:	db08      	blt.n	46a <main+0x46>
		printk("Running\n");
     458:	4630      	mov	r0, r6
     45a:	f003 ff93 	bl	4384 <printk>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     45e:	2100      	movs	r1, #0
     460:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     464:	f003 fc1a 	bl	3c9c <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
     468:	e7f0      	b.n	44c <main+0x28>
		// k_msleep(SLEEP_TIME_MS);
		// gpio_pin_set_dt(&led,1);
		k_msleep(SLEEP_TIME_MS);
	}
	return 0;
}
     46a:	2000      	movs	r0, #0
     46c:	bd70      	pop	{r4, r5, r6, pc}
     46e:	bf00      	nop
     470:	00005040 	.word	0x00005040
     474:	00060001 	.word	0x00060001
     478:	0000547c 	.word	0x0000547c

0000047c <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
     47c:	4b01      	ldr	r3, [pc, #4]	; (484 <char_out+0x8>)
     47e:	681b      	ldr	r3, [r3, #0]
     480:	4718      	bx	r3
     482:	bf00      	nop
     484:	20000000 	.word	0x20000000

00000488 <__printk_hook_install>:
	_char_out = fn;
     488:	4b01      	ldr	r3, [pc, #4]	; (490 <__printk_hook_install+0x8>)
     48a:	6018      	str	r0, [r3, #0]
}
     48c:	4770      	bx	lr
     48e:	bf00      	nop
     490:	20000000 	.word	0x20000000

00000494 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
     494:	b507      	push	{r0, r1, r2, lr}
     496:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     498:	2100      	movs	r1, #0
     49a:	4602      	mov	r2, r0
     49c:	9100      	str	r1, [sp, #0]
     49e:	4803      	ldr	r0, [pc, #12]	; (4ac <vprintk+0x18>)
     4a0:	f000 f914 	bl	6cc <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     4a4:	b003      	add	sp, #12
     4a6:	f85d fb04 	ldr.w	pc, [sp], #4
     4aa:	bf00      	nop
     4ac:	0000047d 	.word	0x0000047d

000004b0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     4b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     4b4:	8b05      	ldrh	r5, [r0, #24]
{
     4b6:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     4b8:	0728      	lsls	r0, r5, #28
{
     4ba:	4690      	mov	r8, r2
	if (processing) {
     4bc:	d411      	bmi.n	4e2 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
     4be:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     4c0:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     4c4:	f040 80cd 	bne.w	662 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x17a>
			evt = process_recheck(mgr);
     4c8:	4620      	mov	r0, r4
     4ca:	f003 ff72 	bl	43b2 <process_recheck>
		}

		if (evt == EVT_NOP) {
     4ce:	b178      	cbz	r0, 4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
     4d0:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     4d2:	8b21      	ldrh	r1, [r4, #24]
     4d4:	2804      	cmp	r0, #4
     4d6:	d811      	bhi.n	4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>
     4d8:	e8df f000 	tbb	[pc, r0]
     4dc:	856d10c3 	.word	0x856d10c3
     4e0:	95          	.byte	0x95
     4e1:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
     4e2:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     4e4:	bf0c      	ite	eq
     4e6:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
     4ea:	f045 0520 	orrne.w	r5, r5, #32
     4ee:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     4f0:	f388 8811 	msr	BASEPRI, r8
     4f4:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     4f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     4fc:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     500:	45aa      	cmp	sl, r5
     502:	f000 80a6 	beq.w	652 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16a>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
     506:	2700      	movs	r7, #0
     508:	46b9      	mov	r9, r7
     50a:	463e      	mov	r6, r7
     50c:	68a3      	ldr	r3, [r4, #8]
     50e:	2b00      	cmp	r3, #0
     510:	f000 80bd 	beq.w	68e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a6>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     514:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     518:	8321      	strh	r1, [r4, #24]
     51a:	f388 8811 	msr	BASEPRI, r8
     51e:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     522:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     524:	2900      	cmp	r1, #0
     526:	f000 80bb 	beq.w	6a0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1b8>
	return node->next;
     52a:	680d      	ldr	r5, [r1, #0]
     52c:	2900      	cmp	r1, #0
     52e:	f000 80b7 	beq.w	6a0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1b8>
		mon->callback(mgr, mon, state, res);
     532:	4633      	mov	r3, r6
     534:	4652      	mov	r2, sl
     536:	4620      	mov	r0, r4
     538:	f8d1 8004 	ldr.w	r8, [r1, #4]
     53c:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     53e:	2d00      	cmp	r5, #0
     540:	d076      	beq.n	630 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x148>
     542:	682b      	ldr	r3, [r5, #0]
     544:	4629      	mov	r1, r5
     546:	461d      	mov	r5, r3
     548:	e7f0      	b.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
     54a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     54e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     550:	2a01      	cmp	r2, #1
     552:	d81b      	bhi.n	58c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa4>
	list->head = NULL;
     554:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     556:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     55a:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     55c:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     55e:	b289      	uxth	r1, r1
	list->tail = NULL;
     560:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     564:	d109      	bne.n	57a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x92>
     566:	463b      	mov	r3, r7
     568:	e003      	b.n	572 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8a>
				mgr->refs += 1U;
     56a:	8b62      	ldrh	r2, [r4, #26]
     56c:	3201      	adds	r2, #1
     56e:	8362      	strh	r2, [r4, #26]
	return node->next;
     570:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     572:	2b00      	cmp	r3, #0
     574:	d1f9      	bne.n	56a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x82>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     576:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
     57a:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
     57c:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     57e:	f003 ff18 	bl	43b2 <process_recheck>
     582:	2800      	cmp	r0, #0
     584:	d07b      	beq.n	67e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x196>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     586:	f041 0120 	orr.w	r1, r1, #32
     58a:	e077      	b.n	67c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x194>
	} else if (state == ONOFF_STATE_TO_OFF) {
     58c:	2b04      	cmp	r3, #4
     58e:	d10a      	bne.n	5a6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xbe>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     590:	f021 0107 	bic.w	r1, r1, #7
     594:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
     596:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
     598:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     59a:	f003 ff0a 	bl	43b2 <process_recheck>
     59e:	b110      	cbz	r0, 5a6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xbe>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     5a0:	f041 0120 	orr.w	r1, r1, #32
     5a4:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     5a6:	8b21      	ldrh	r1, [r4, #24]
     5a8:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     5ac:	45aa      	cmp	sl, r5
     5ae:	d050      	beq.n	652 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16a>
     5b0:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
     5b2:	46b9      	mov	r9, r7
     5b4:	e7aa      	b.n	50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>
			transit = mgr->transitions->start;
     5b6:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5b8:	f021 0107 	bic.w	r1, r1, #7
     5bc:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
     5c0:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
     5c2:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
     5c6:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     5c8:	d12d      	bne.n	626 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x13e>
		    || (transit != NULL)) {
     5ca:	f1b9 0f00 	cmp.w	r9, #0
     5ce:	d040      	beq.n	652 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     5d0:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     5d4:	8321      	strh	r1, [r4, #24]
     5d6:	f388 8811 	msr	BASEPRI, r8
     5da:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
     5de:	4620      	mov	r0, r4
     5e0:	4939      	ldr	r1, [pc, #228]	; (6c8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e0>)
     5e2:	47c8      	blx	r9
     5e4:	e029      	b.n	63a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x152>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5e6:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
     5ea:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5ec:	f041 0104 	orr.w	r1, r1, #4
     5f0:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     5f2:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
     5f4:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
     5f8:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     5fa:	d0e6      	beq.n	5ca <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe2>
     5fc:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     5fe:	f04f 0a04 	mov.w	sl, #4
		res = 0;
     602:	463e      	mov	r6, r7
     604:	e782      	b.n	50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     606:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
     60a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     60c:	f041 0105 	orr.w	r1, r1, #5
     610:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     612:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
     614:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
     618:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     61a:	d0d6      	beq.n	5ca <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe2>
     61c:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     61e:	f04f 0a05 	mov.w	sl, #5
		res = 0;
     622:	463e      	mov	r6, r7
     624:	e772      	b.n	50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>
				   && !sys_slist_is_empty(&mgr->monitors);
     626:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     628:	f04f 0a06 	mov.w	sl, #6
		res = 0;
     62c:	463e      	mov	r6, r7
     62e:	e76d      	b.n	50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     630:	462b      	mov	r3, r5
     632:	e787      	b.n	544 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5c>
			if (transit != NULL) {
     634:	f1b9 0f00 	cmp.w	r9, #0
     638:	d1d1      	bne.n	5de <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf6>
	__asm__ volatile(
     63a:	f04f 0320 	mov.w	r3, #32
     63e:	f3ef 8811 	mrs	r8, BASEPRI
     642:	f383 8812 	msr	BASEPRI_MAX, r3
     646:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     64a:	8b23      	ldrh	r3, [r4, #24]
     64c:	f023 0308 	bic.w	r3, r3, #8
     650:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     652:	8b25      	ldrh	r5, [r4, #24]
     654:	06ea      	lsls	r2, r5, #27
     656:	d52e      	bpl.n	6b6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1ce>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     658:	f025 0310 	bic.w	r3, r5, #16
     65c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     65e:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
     662:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     664:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     666:	2e00      	cmp	r6, #0
     668:	f6bf af6f 	bge.w	54a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x62>
	list->head = NULL;
     66c:	2300      	movs	r3, #0
		*clients = mgr->clients;
     66e:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
     670:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     674:	f021 0107 	bic.w	r1, r1, #7
     678:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
     67c:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     67e:	8b21      	ldrh	r1, [r4, #24]
     680:	f04f 0900 	mov.w	r9, #0
     684:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     688:	45aa      	cmp	sl, r5
     68a:	f47f af3f 	bne.w	50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>
		    || !sys_slist_is_empty(&clients)
     68e:	2f00      	cmp	r7, #0
     690:	d09b      	beq.n	5ca <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     692:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     696:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
     698:	f388 8811 	msr	BASEPRI, r8
     69c:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
     6a0:	2f00      	cmp	r7, #0
     6a2:	d0c7      	beq.n	634 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14c>
	return node->next;
     6a4:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
     6a6:	4639      	mov	r1, r7
     6a8:	4633      	mov	r3, r6
     6aa:	4652      	mov	r2, sl
     6ac:	4620      	mov	r0, r4
     6ae:	f003 feac 	bl	440a <notify_one>
	list->head = node;
     6b2:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
     6b4:	e7f4      	b.n	6a0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1b8>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     6b6:	06ab      	lsls	r3, r5, #26
     6b8:	f57f af1a 	bpl.w	4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     6bc:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     6c0:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     6c2:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     6c6:	e6ff      	b.n	4c8 <process_event+0x18>
     6c8:	00004437 	.word	0x00004437

000006cc <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     6d0:	4681      	mov	r9, r0
     6d2:	468b      	mov	fp, r1
     6d4:	4617      	mov	r7, r2
     6d6:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     6d8:	2500      	movs	r5, #0
{
     6da:	b095      	sub	sp, #84	; 0x54
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     6dc:	7838      	ldrb	r0, [r7, #0]
     6de:	b908      	cbnz	r0, 6e4 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
     6e0:	4628      	mov	r0, r5
     6e2:	e357      	b.n	d94 <CONFIG_ISR_STACK_SIZE+0x594>
			OUTC(*fp++);
     6e4:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
     6e6:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     6e8:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
     6ea:	d006      	beq.n	6fa <z_cbvprintf_impl+0x2e>
			OUTC('%');
     6ec:	4659      	mov	r1, fp
     6ee:	47c8      	blx	r9
     6f0:	2800      	cmp	r0, #0
     6f2:	f2c0 834f 	blt.w	d94 <CONFIG_ISR_STACK_SIZE+0x594>
     6f6:	3501      	adds	r5, #1
		if (bps == NULL) {
     6f8:	e1fb      	b.n	af2 <CONFIG_ISR_STACK_SIZE+0x2f2>
		} state = {
     6fa:	2218      	movs	r2, #24
     6fc:	2100      	movs	r1, #0
     6fe:	a80e      	add	r0, sp, #56	; 0x38
     700:	f003 fff8 	bl	46f4 <memset>
	if (*sp == '%') {
     704:	787b      	ldrb	r3, [r7, #1]
     706:	2b25      	cmp	r3, #37	; 0x25
     708:	d07d      	beq.n	806 <CONFIG_ISR_STACK_SIZE+0x6>
     70a:	2300      	movs	r3, #0
     70c:	4698      	mov	r8, r3
     70e:	469e      	mov	lr, r3
     710:	469c      	mov	ip, r3
     712:	461e      	mov	r6, r3
     714:	1c78      	adds	r0, r7, #1
     716:	4601      	mov	r1, r0
		switch (*sp) {
     718:	f810 2b01 	ldrb.w	r2, [r0], #1
     71c:	2a2b      	cmp	r2, #43	; 0x2b
     71e:	f000 80a1 	beq.w	864 <CONFIG_ISR_STACK_SIZE+0x64>
     722:	f200 8098 	bhi.w	856 <CONFIG_ISR_STACK_SIZE+0x56>
     726:	2a20      	cmp	r2, #32
     728:	f000 809f 	beq.w	86a <CONFIG_ISR_STACK_SIZE+0x6a>
     72c:	2a23      	cmp	r2, #35	; 0x23
     72e:	f000 809f 	beq.w	870 <CONFIG_ISR_STACK_SIZE+0x70>
     732:	b12b      	cbz	r3, 740 <z_cbvprintf_impl+0x74>
     734:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     73c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     740:	f1b8 0f00 	cmp.w	r8, #0
     744:	d005      	beq.n	752 <z_cbvprintf_impl+0x86>
     746:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     74a:	f043 0320 	orr.w	r3, r3, #32
     74e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     752:	f1be 0f00 	cmp.w	lr, #0
     756:	d005      	beq.n	764 <z_cbvprintf_impl+0x98>
     758:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     75c:	f043 0310 	orr.w	r3, r3, #16
     760:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     764:	f1bc 0f00 	cmp.w	ip, #0
     768:	d005      	beq.n	776 <z_cbvprintf_impl+0xaa>
     76a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     76e:	f043 0308 	orr.w	r3, r3, #8
     772:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     776:	b12e      	cbz	r6, 784 <z_cbvprintf_impl+0xb8>
     778:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     77c:	f043 0304 	orr.w	r3, r3, #4
     780:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
     784:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     788:	f003 0044 	and.w	r0, r3, #68	; 0x44
     78c:	2844      	cmp	r0, #68	; 0x44
     78e:	d103      	bne.n	798 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
     790:	f36f 1386 	bfc	r3, #6, #1
     794:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
     798:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
     79c:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
     79e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     7a2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
     7a6:	d17f      	bne.n	8a8 <CONFIG_ISR_STACK_SIZE+0xa8>
		conv->width_star = true;
     7a8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
     7ac:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     7ae:	f042 0201 	orr.w	r2, r2, #1
     7b2:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
     7b6:	781a      	ldrb	r2, [r3, #0]
     7b8:	2a2e      	cmp	r2, #46	; 0x2e
     7ba:	bf0c      	ite	eq
     7bc:	2101      	moveq	r1, #1
     7be:	2100      	movne	r1, #0
     7c0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     7c4:	f361 0241 	bfi	r2, r1, #1, #1
     7c8:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
     7cc:	d178      	bne.n	8c0 <CONFIG_ISR_STACK_SIZE+0xc0>
	if (*sp == '*') {
     7ce:	785a      	ldrb	r2, [r3, #1]
     7d0:	2a2a      	cmp	r2, #42	; 0x2a
     7d2:	d06e      	beq.n	8b2 <CONFIG_ISR_STACK_SIZE+0xb2>
	size_t val = 0;
     7d4:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     7d6:	f04f 0c0a 	mov.w	ip, #10
	++sp;
     7da:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     7dc:	4619      	mov	r1, r3
     7de:	f811 0b01 	ldrb.w	r0, [r1], #1
     7e2:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
     7e6:	2e09      	cmp	r6, #9
     7e8:	f240 8095 	bls.w	916 <CONFIG_ISR_STACK_SIZE+0x116>
	conv->unsupported |= ((conv->prec_value < 0)
     7ec:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
     7f0:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
     7f2:	f3c1 0040 	ubfx	r0, r1, #1, #1
     7f6:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
     7fa:	460a      	mov	r2, r1
     7fc:	f360 0241 	bfi	r2, r0, #1, #1
     800:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
     804:	e05c      	b.n	8c0 <CONFIG_ISR_STACK_SIZE+0xc0>
		conv->specifier = *sp++;
     806:	1cba      	adds	r2, r7, #2
     808:	9203      	str	r2, [sp, #12]
     80a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
     80e:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
     812:	07da      	lsls	r2, r3, #31
     814:	f140 812e 	bpl.w	a74 <CONFIG_ISR_STACK_SIZE+0x274>
			width = va_arg(ap, int);
     818:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
     81c:	f1b8 0f00 	cmp.w	r8, #0
     820:	da07      	bge.n	832 <CONFIG_ISR_STACK_SIZE+0x32>
				conv->flag_dash = true;
     822:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				width = -width;
     826:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
     82a:	f042 0204 	orr.w	r2, r2, #4
     82e:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
		if (conv->prec_star) {
     832:	075e      	lsls	r6, r3, #29
     834:	f140 8127 	bpl.w	a86 <CONFIG_ISR_STACK_SIZE+0x286>
			int arg = va_arg(ap, int);
     838:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
     83c:	f1ba 0f00 	cmp.w	sl, #0
     840:	f280 8126 	bge.w	a90 <CONFIG_ISR_STACK_SIZE+0x290>
				conv->prec_present = false;
     844:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
     848:	f36f 0341 	bfc	r3, #1, #1
     84c:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
     850:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
     854:	e11c      	b.n	a90 <CONFIG_ISR_STACK_SIZE+0x290>
		switch (*sp) {
     856:	2a2d      	cmp	r2, #45	; 0x2d
     858:	d00d      	beq.n	876 <CONFIG_ISR_STACK_SIZE+0x76>
     85a:	2a30      	cmp	r2, #48	; 0x30
     85c:	f47f af69 	bne.w	732 <z_cbvprintf_impl+0x66>
     860:	2301      	movs	r3, #1
	} while (loop);
     862:	e758      	b.n	716 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
     864:	f04f 0c01 	mov.w	ip, #1
     868:	e755      	b.n	716 <z_cbvprintf_impl+0x4a>
     86a:	f04f 0e01 	mov.w	lr, #1
     86e:	e752      	b.n	716 <z_cbvprintf_impl+0x4a>
     870:	f04f 0801 	mov.w	r8, #1
     874:	e74f      	b.n	716 <z_cbvprintf_impl+0x4a>
     876:	2601      	movs	r6, #1
     878:	e74d      	b.n	716 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
     87a:	4603      	mov	r3, r0
     87c:	fb0e 6202 	mla	r2, lr, r2, r6
     880:	3a30      	subs	r2, #48	; 0x30
     882:	4618      	mov	r0, r3
     884:	f810 6b01 	ldrb.w	r6, [r0], #1
     888:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
     88c:	f1bc 0f09 	cmp.w	ip, #9
     890:	d9f3      	bls.n	87a <CONFIG_ISR_STACK_SIZE+0x7a>
	if (sp != wp) {
     892:	4299      	cmp	r1, r3
     894:	d08f      	beq.n	7b6 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     896:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
     89a:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
     89c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     89e:	f362 0141 	bfi	r1, r2, #1, #1
     8a2:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
     8a6:	e786      	b.n	7b6 <z_cbvprintf_impl+0xea>
     8a8:	460b      	mov	r3, r1
	size_t val = 0;
     8aa:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     8ac:	f04f 0e0a 	mov.w	lr, #10
     8b0:	e7e7      	b.n	882 <CONFIG_ISR_STACK_SIZE+0x82>
		conv->prec_star = true;
     8b2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
     8b6:	3302      	adds	r3, #2
		conv->prec_star = true;
     8b8:	f042 0204 	orr.w	r2, r2, #4
     8bc:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	switch (*sp) {
     8c0:	781a      	ldrb	r2, [r3, #0]
     8c2:	2a6c      	cmp	r2, #108	; 0x6c
     8c4:	d047      	beq.n	956 <CONFIG_ISR_STACK_SIZE+0x156>
     8c6:	d82b      	bhi.n	920 <CONFIG_ISR_STACK_SIZE+0x120>
     8c8:	2a68      	cmp	r2, #104	; 0x68
     8ca:	d031      	beq.n	930 <CONFIG_ISR_STACK_SIZE+0x130>
     8cc:	2a6a      	cmp	r2, #106	; 0x6a
     8ce:	d04b      	beq.n	968 <CONFIG_ISR_STACK_SIZE+0x168>
     8d0:	2a4c      	cmp	r2, #76	; 0x4c
     8d2:	d051      	beq.n	978 <CONFIG_ISR_STACK_SIZE+0x178>
	conv->specifier = *sp++;
     8d4:	461a      	mov	r2, r3
     8d6:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
     8da:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
     8dc:	9203      	str	r2, [sp, #12]
     8de:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->length_mod == LENGTH_UPPER_L) {
     8e2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	switch (conv->specifier) {
     8e6:	f200 80be 	bhi.w	a66 <CONFIG_ISR_STACK_SIZE+0x266>
     8ea:	2b6d      	cmp	r3, #109	; 0x6d
     8ec:	d851      	bhi.n	992 <CONFIG_ISR_STACK_SIZE+0x192>
     8ee:	2b69      	cmp	r3, #105	; 0x69
     8f0:	f200 80b9 	bhi.w	a66 <CONFIG_ISR_STACK_SIZE+0x266>
     8f4:	2b57      	cmp	r3, #87	; 0x57
     8f6:	d867      	bhi.n	9c8 <CONFIG_ISR_STACK_SIZE+0x1c8>
     8f8:	2b41      	cmp	r3, #65	; 0x41
     8fa:	d003      	beq.n	904 <CONFIG_ISR_STACK_SIZE+0x104>
     8fc:	3b45      	subs	r3, #69	; 0x45
     8fe:	2b02      	cmp	r3, #2
     900:	f200 80b1 	bhi.w	a66 <CONFIG_ISR_STACK_SIZE+0x266>
		conv->specifier_cat = SPECIFIER_FP;
     904:	2204      	movs	r2, #4
     906:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     90a:	f362 0302 	bfi	r3, r2, #0, #3
     90e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
     912:	2301      	movs	r3, #1
			break;
     914:	e073      	b.n	9fe <CONFIG_ISR_STACK_SIZE+0x1fe>
		val = 10U * val + *sp++ - '0';
     916:	fb0c 0202 	mla	r2, ip, r2, r0
     91a:	460b      	mov	r3, r1
     91c:	3a30      	subs	r2, #48	; 0x30
     91e:	e75d      	b.n	7dc <z_cbvprintf_impl+0x110>
	switch (*sp) {
     920:	2a74      	cmp	r2, #116	; 0x74
     922:	d025      	beq.n	970 <CONFIG_ISR_STACK_SIZE+0x170>
     924:	2a7a      	cmp	r2, #122	; 0x7a
     926:	d1d5      	bne.n	8d4 <CONFIG_ISR_STACK_SIZE+0xd4>
		conv->length_mod = LENGTH_Z;
     928:	2106      	movs	r1, #6
     92a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     92e:	e00c      	b.n	94a <CONFIG_ISR_STACK_SIZE+0x14a>
		if (*++sp == 'h') {
     930:	785a      	ldrb	r2, [r3, #1]
     932:	2a68      	cmp	r2, #104	; 0x68
     934:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     938:	d106      	bne.n	948 <CONFIG_ISR_STACK_SIZE+0x148>
			conv->length_mod = LENGTH_HH;
     93a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     93c:	f361 02c6 	bfi	r2, r1, #3, #4
     940:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
     944:	3302      	adds	r3, #2
     946:	e7c5      	b.n	8d4 <CONFIG_ISR_STACK_SIZE+0xd4>
			conv->length_mod = LENGTH_H;
     948:	2102      	movs	r1, #2
     94a:	f361 02c6 	bfi	r2, r1, #3, #4
     94e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
     952:	3301      	adds	r3, #1
     954:	e7be      	b.n	8d4 <CONFIG_ISR_STACK_SIZE+0xd4>
		if (*++sp == 'l') {
     956:	785a      	ldrb	r2, [r3, #1]
     958:	2a6c      	cmp	r2, #108	; 0x6c
     95a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     95e:	d101      	bne.n	964 <CONFIG_ISR_STACK_SIZE+0x164>
			conv->length_mod = LENGTH_LL;
     960:	2104      	movs	r1, #4
     962:	e7eb      	b.n	93c <CONFIG_ISR_STACK_SIZE+0x13c>
			conv->length_mod = LENGTH_L;
     964:	2103      	movs	r1, #3
     966:	e7f0      	b.n	94a <CONFIG_ISR_STACK_SIZE+0x14a>
		conv->length_mod = LENGTH_J;
     968:	2105      	movs	r1, #5
     96a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     96e:	e7ec      	b.n	94a <CONFIG_ISR_STACK_SIZE+0x14a>
		conv->length_mod = LENGTH_T;
     970:	2107      	movs	r1, #7
     972:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     976:	e7e8      	b.n	94a <CONFIG_ISR_STACK_SIZE+0x14a>
		conv->unsupported = true;
     978:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
     97c:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
     980:	f022 0202 	bic.w	r2, r2, #2
     984:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
     988:	f042 0202 	orr.w	r2, r2, #2
     98c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
     990:	e7df      	b.n	952 <CONFIG_ISR_STACK_SIZE+0x152>
	switch (conv->specifier) {
     992:	3b6e      	subs	r3, #110	; 0x6e
     994:	b2d9      	uxtb	r1, r3
     996:	2301      	movs	r3, #1
     998:	408b      	lsls	r3, r1
     99a:	f240 4182 	movw	r1, #1154	; 0x482
     99e:	420b      	tst	r3, r1
     9a0:	d137      	bne.n	a12 <CONFIG_ISR_STACK_SIZE+0x212>
     9a2:	f013 0f24 	tst.w	r3, #36	; 0x24
     9a6:	d151      	bne.n	a4c <CONFIG_ISR_STACK_SIZE+0x24c>
     9a8:	07d8      	lsls	r0, r3, #31
     9aa:	d55c      	bpl.n	a66 <CONFIG_ISR_STACK_SIZE+0x266>
		conv->specifier_cat = SPECIFIER_PTR;
     9ac:	2103      	movs	r1, #3
     9ae:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     9b2:	f361 0302 	bfi	r3, r1, #0, #3
     9b6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
     9ba:	f002 0378 	and.w	r3, r2, #120	; 0x78
     9be:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
     9c2:	424b      	negs	r3, r1
     9c4:	414b      	adcs	r3, r1
     9c6:	e01a      	b.n	9fe <CONFIG_ISR_STACK_SIZE+0x1fe>
     9c8:	2001      	movs	r0, #1
	switch (conv->specifier) {
     9ca:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
     9ce:	b2c9      	uxtb	r1, r1
     9d0:	fa00 f101 	lsl.w	r1, r0, r1
     9d4:	f411 4f62 	tst.w	r1, #57856	; 0xe200
     9d8:	d194      	bne.n	904 <CONFIG_ISR_STACK_SIZE+0x104>
     9da:	f640 0601 	movw	r6, #2049	; 0x801
     9de:	4231      	tst	r1, r6
     9e0:	d11d      	bne.n	a1e <CONFIG_ISR_STACK_SIZE+0x21e>
     9e2:	f411 3f04 	tst.w	r1, #135168	; 0x21000
     9e6:	d03e      	beq.n	a66 <CONFIG_ISR_STACK_SIZE+0x266>
		conv->specifier_cat = SPECIFIER_SINT;
     9e8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     9ec:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     9f0:	f002 0278 	and.w	r2, r2, #120	; 0x78
     9f4:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
     9f6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
     9fa:	d034      	beq.n	a66 <CONFIG_ISR_STACK_SIZE+0x266>
	bool unsupported = false;
     9fc:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
     9fe:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
     a02:	f3c2 0140 	ubfx	r1, r2, #1, #1
     a06:	430b      	orrs	r3, r1
     a08:	f363 0241 	bfi	r2, r3, #1, #1
     a0c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
     a10:	e6fd      	b.n	80e <CONFIG_ISR_STACK_SIZE+0xe>
		conv->specifier_cat = SPECIFIER_UINT;
     a12:	2102      	movs	r1, #2
     a14:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     a18:	f361 0302 	bfi	r3, r1, #0, #3
     a1c:	e7e8      	b.n	9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
     a1e:	2002      	movs	r0, #2
     a20:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
     a24:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     a28:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     a2c:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     a2e:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
     a32:	bf02      	ittt	eq
     a34:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
     a38:	f041 0101 	orreq.w	r1, r1, #1
     a3c:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
     a40:	2b63      	cmp	r3, #99	; 0x63
     a42:	d1db      	bne.n	9fc <CONFIG_ISR_STACK_SIZE+0x1fc>
			unsupported = (conv->length_mod != LENGTH_NONE);
     a44:	1e13      	subs	r3, r2, #0
     a46:	bf18      	it	ne
     a48:	2301      	movne	r3, #1
     a4a:	e7d8      	b.n	9fe <CONFIG_ISR_STACK_SIZE+0x1fe>
		conv->specifier_cat = SPECIFIER_PTR;
     a4c:	2103      	movs	r1, #3
     a4e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
     a52:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     a56:	f361 0302 	bfi	r3, r1, #0, #3
     a5a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
     a5e:	bf14      	ite	ne
     a60:	2301      	movne	r3, #1
     a62:	2300      	moveq	r3, #0
     a64:	e7cb      	b.n	9fe <CONFIG_ISR_STACK_SIZE+0x1fe>
		conv->invalid = true;
     a66:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     a6a:	f043 0301 	orr.w	r3, r3, #1
     a6e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
     a72:	e7c3      	b.n	9fc <CONFIG_ISR_STACK_SIZE+0x1fc>
		} else if (conv->width_present) {
     a74:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
     a78:	2a00      	cmp	r2, #0
		int width = -1;
     a7a:	bfac      	ite	ge
     a7c:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
			width = conv->width_value;
     a80:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
     a84:	e6d5      	b.n	832 <CONFIG_ISR_STACK_SIZE+0x32>
		} else if (conv->prec_present) {
     a86:	0798      	lsls	r0, r3, #30
     a88:	f57f aee2 	bpl.w	850 <CONFIG_ISR_STACK_SIZE+0x50>
			precision = conv->prec_value;
     a8c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
		conv->pad0_value = 0;
     a90:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     a92:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
     a96:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
			= (enum length_mod_enum)conv->length_mod;
     a9a:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		enum specifier_cat_enum specifier_cat
     a9e:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     aa2:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     aa4:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     aa8:	d133      	bne.n	b12 <CONFIG_ISR_STACK_SIZE+0x312>
			switch (length_mod) {
     aaa:	1ecb      	subs	r3, r1, #3
     aac:	2b04      	cmp	r3, #4
     aae:	d804      	bhi.n	aba <CONFIG_ISR_STACK_SIZE+0x2ba>
     ab0:	e8df f003 	tbb	[pc, r3]
     ab4:	21464621 	.word	0x21464621
     ab8:	21          	.byte	0x21
     ab9:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     aba:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
     abc:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
     abe:	ea4f 72e3 	mov.w	r2, r3, asr #31
     ac2:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
     ac6:	d11c      	bne.n	b02 <CONFIG_ISR_STACK_SIZE+0x302>
				value->sint = (signed char)value->sint;
     ac8:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
     acc:	17da      	asrs	r2, r3, #31
     ace:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
     ad2:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
     ad4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     ad8:	f013 0603 	ands.w	r6, r3, #3
     adc:	d050      	beq.n	b80 <CONFIG_ISR_STACK_SIZE+0x380>
			OUTS(sp, fp);
     ade:	463a      	mov	r2, r7
     ae0:	4659      	mov	r1, fp
     ae2:	4648      	mov	r0, r9
     ae4:	9b03      	ldr	r3, [sp, #12]
     ae6:	f003 fd83 	bl	45f0 <outs>
     aea:	2800      	cmp	r0, #0
     aec:	f2c0 8152 	blt.w	d94 <CONFIG_ISR_STACK_SIZE+0x594>
     af0:	4405      	add	r5, r0
			continue;
     af2:	9f03      	ldr	r7, [sp, #12]
     af4:	e5f2      	b.n	6dc <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     af6:	f854 3b04 	ldr.w	r3, [r4], #4
     afa:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
     afc:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
     b00:	e7e8      	b.n	ad4 <CONFIG_ISR_STACK_SIZE+0x2d4>
			} else if (length_mod == LENGTH_H) {
     b02:	2902      	cmp	r1, #2
     b04:	d1e5      	bne.n	ad2 <CONFIG_ISR_STACK_SIZE+0x2d2>
				value->sint = (short)value->sint;
     b06:	b21a      	sxth	r2, r3
     b08:	f343 33c0 	sbfx	r3, r3, #15, #1
     b0c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
     b10:	e7df      	b.n	ad2 <CONFIG_ISR_STACK_SIZE+0x2d2>
		} else if (specifier_cat == SPECIFIER_UINT) {
     b12:	2b02      	cmp	r3, #2
     b14:	d124      	bne.n	b60 <CONFIG_ISR_STACK_SIZE+0x360>
			switch (length_mod) {
     b16:	1ecb      	subs	r3, r1, #3
     b18:	2b04      	cmp	r3, #4
     b1a:	d804      	bhi.n	b26 <CONFIG_ISR_STACK_SIZE+0x326>
     b1c:	e8df f003 	tbb	[pc, r3]
     b20:	18101018 	.word	0x18101018
     b24:	18          	.byte	0x18
     b25:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
     b26:	2901      	cmp	r1, #1
     b28:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
     b2c:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     b30:	d014      	beq.n	b5c <CONFIG_ISR_STACK_SIZE+0x35c>
			} else if (length_mod == LENGTH_H) {
     b32:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
     b34:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
     b38:	d1cc      	bne.n	ad4 <CONFIG_ISR_STACK_SIZE+0x2d4>
				value->uint = (unsigned short)value->uint;
     b3a:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
     b3c:	930e      	str	r3, [sp, #56]	; 0x38
     b3e:	e7c9      	b.n	ad4 <CONFIG_ISR_STACK_SIZE+0x2d4>
					(uint_value_type)va_arg(ap,
     b40:	3407      	adds	r4, #7
     b42:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
     b46:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     b4a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
     b4e:	e7c1      	b.n	ad4 <CONFIG_ISR_STACK_SIZE+0x2d4>
					(uint_value_type)va_arg(ap, size_t);
     b50:	f854 3b04 	ldr.w	r3, [r4], #4
     b54:	930e      	str	r3, [sp, #56]	; 0x38
     b56:	2300      	movs	r3, #0
     b58:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
     b5a:	e7bb      	b.n	ad4 <CONFIG_ISR_STACK_SIZE+0x2d4>
				value->uint = (unsigned char)value->uint;
     b5c:	b2db      	uxtb	r3, r3
     b5e:	e7cd      	b.n	afc <CONFIG_ISR_STACK_SIZE+0x2fc>
		} else if (specifier_cat == SPECIFIER_FP) {
     b60:	2b04      	cmp	r3, #4
     b62:	d108      	bne.n	b76 <CONFIG_ISR_STACK_SIZE+0x376>
					(sint_value_type)va_arg(ap, long long);
     b64:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
     b66:	f024 0407 	bic.w	r4, r4, #7
     b6a:	e9d4 2300 	ldrd	r2, r3, [r4]
     b6e:	3408      	adds	r4, #8
     b70:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
     b74:	e7ae      	b.n	ad4 <CONFIG_ISR_STACK_SIZE+0x2d4>
		} else if (specifier_cat == SPECIFIER_PTR) {
     b76:	2b03      	cmp	r3, #3
     b78:	d1ac      	bne.n	ad4 <CONFIG_ISR_STACK_SIZE+0x2d4>
			value->ptr = va_arg(ap, void *);
     b7a:	f854 3b04 	ldr.w	r3, [r4], #4
     b7e:	e7dd      	b.n	b3c <CONFIG_ISR_STACK_SIZE+0x33c>
		switch (conv->specifier) {
     b80:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
     b84:	2878      	cmp	r0, #120	; 0x78
     b86:	d8b4      	bhi.n	af2 <CONFIG_ISR_STACK_SIZE+0x2f2>
     b88:	2862      	cmp	r0, #98	; 0x62
     b8a:	d81c      	bhi.n	bc6 <CONFIG_ISR_STACK_SIZE+0x3c6>
     b8c:	2825      	cmp	r0, #37	; 0x25
     b8e:	f43f adad 	beq.w	6ec <z_cbvprintf_impl+0x20>
     b92:	2858      	cmp	r0, #88	; 0x58
     b94:	d1ad      	bne.n	af2 <CONFIG_ISR_STACK_SIZE+0x2f2>
			bps = encode_uint(value->uint, conv, buf, bpe);
     b96:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
     b9a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     b9e:	9300      	str	r3, [sp, #0]
     ba0:	aa10      	add	r2, sp, #64	; 0x40
     ba2:	ab08      	add	r3, sp, #32
     ba4:	f003 fcde 	bl	4564 <encode_uint>
			if (precision >= 0) {
     ba8:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
     bac:	4607      	mov	r7, r0
			if (precision >= 0) {
     bae:	f280 8099 	bge.w	ce4 <CONFIG_ISR_STACK_SIZE+0x4e4>
		if (bps == NULL) {
     bb2:	2f00      	cmp	r7, #0
     bb4:	d09d      	beq.n	af2 <CONFIG_ISR_STACK_SIZE+0x2f2>
		size_t nj_len = (bpe - bps);
     bb6:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     bba:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
     bbc:	2e00      	cmp	r6, #0
     bbe:	f000 80c0 	beq.w	d42 <CONFIG_ISR_STACK_SIZE+0x542>
			nj_len += 1U;
     bc2:	3001      	adds	r0, #1
     bc4:	e0bd      	b.n	d42 <CONFIG_ISR_STACK_SIZE+0x542>
		switch (conv->specifier) {
     bc6:	3863      	subs	r0, #99	; 0x63
     bc8:	2815      	cmp	r0, #21
     bca:	d892      	bhi.n	af2 <CONFIG_ISR_STACK_SIZE+0x2f2>
     bcc:	a201      	add	r2, pc, #4	; (adr r2, bd4 <CONFIG_ISR_STACK_SIZE+0x3d4>)
     bce:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
     bd2:	bf00      	nop
     bd4:	00000ca9 	.word	0x00000ca9
     bd8:	00000cbb 	.word	0x00000cbb
     bdc:	00000af3 	.word	0x00000af3
     be0:	00000af3 	.word	0x00000af3
     be4:	00000af3 	.word	0x00000af3
     be8:	00000af3 	.word	0x00000af3
     bec:	00000cbb 	.word	0x00000cbb
     bf0:	00000af3 	.word	0x00000af3
     bf4:	00000af3 	.word	0x00000af3
     bf8:	00000af3 	.word	0x00000af3
     bfc:	00000af3 	.word	0x00000af3
     c00:	00000d47 	.word	0x00000d47
     c04:	00000cdf 	.word	0x00000cdf
     c08:	00000d05 	.word	0x00000d05
     c0c:	00000af3 	.word	0x00000af3
     c10:	00000af3 	.word	0x00000af3
     c14:	00000c2d 	.word	0x00000c2d
     c18:	00000af3 	.word	0x00000af3
     c1c:	00000cdf 	.word	0x00000cdf
     c20:	00000af3 	.word	0x00000af3
     c24:	00000af3 	.word	0x00000af3
     c28:	00000cdf 	.word	0x00000cdf
			if (precision >= 0) {
     c2c:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
     c30:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
     c32:	db35      	blt.n	ca0 <CONFIG_ISR_STACK_SIZE+0x4a0>
				len = strnlen(bps, precision);
     c34:	4651      	mov	r1, sl
     c36:	4638      	mov	r0, r7
     c38:	f003 fd48 	bl	46cc <strnlen>
			bpe = bps + len;
     c3c:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
     c40:	2f00      	cmp	r7, #0
     c42:	f43f af56 	beq.w	af2 <CONFIG_ISR_STACK_SIZE+0x2f2>
		char sign = 0;
     c46:	2600      	movs	r6, #0
		if (conv->altform_0c) {
     c48:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     c4c:	f013 0210 	ands.w	r2, r3, #16
     c50:	9205      	str	r2, [sp, #20]
     c52:	f000 8092 	beq.w	d7a <CONFIG_ISR_STACK_SIZE+0x57a>
			nj_len += 2U;
     c56:	3002      	adds	r0, #2
		if (conv->pad_fp) {
     c58:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
     c5a:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
     c5c:	bf48      	it	mi
     c5e:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
     c60:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
     c62:	bf48      	it	mi
     c64:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
     c66:	f1b8 0f00 	cmp.w	r8, #0
		nj_len += conv->pad0_value;
     c6a:	9204      	str	r2, [sp, #16]
		if (width > 0) {
     c6c:	f340 809f 	ble.w	dae <CONFIG_ISR_STACK_SIZE+0x5ae>
			if (!conv->flag_dash) {
     c70:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
     c74:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
     c78:	f3c2 0380 	ubfx	r3, r2, #2, #1
     c7c:	0750      	lsls	r0, r2, #29
     c7e:	9306      	str	r3, [sp, #24]
     c80:	f100 8095 	bmi.w	dae <CONFIG_ISR_STACK_SIZE+0x5ae>
				if (conv->flag_zero) {
     c84:	0651      	lsls	r1, r2, #25
     c86:	f140 8088 	bpl.w	d9a <CONFIG_ISR_STACK_SIZE+0x59a>
					if (sign != 0) {
     c8a:	b13e      	cbz	r6, c9c <CONFIG_ISR_STACK_SIZE+0x49c>
						OUTC(sign);
     c8c:	4659      	mov	r1, fp
     c8e:	4630      	mov	r0, r6
     c90:	47c8      	blx	r9
     c92:	2800      	cmp	r0, #0
     c94:	db7e      	blt.n	d94 <CONFIG_ISR_STACK_SIZE+0x594>
     c96:	9b06      	ldr	r3, [sp, #24]
     c98:	3501      	adds	r5, #1
     c9a:	461e      	mov	r6, r3
					pad = '0';
     c9c:	2230      	movs	r2, #48	; 0x30
     c9e:	e07d      	b.n	d9c <CONFIG_ISR_STACK_SIZE+0x59c>
				len = strlen(bps);
     ca0:	4638      	mov	r0, r7
     ca2:	f003 fd0c 	bl	46be <strlen>
     ca6:	e7c9      	b.n	c3c <CONFIG_ISR_STACK_SIZE+0x43c>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     ca8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		char sign = 0;
     caa:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
     cac:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     cae:	f88d 3020 	strb.w	r3, [sp, #32]
			bps = buf;
     cb2:	af08      	add	r7, sp, #32
			bpe = buf + 1;
     cb4:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
     cb8:	e7c6      	b.n	c48 <CONFIG_ISR_STACK_SIZE+0x448>
			if (conv->flag_plus) {
     cba:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
     cbc:	bf5a      	itte	pl
     cbe:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
     cc2:	015e      	lslpl	r6, r3, #5
				sign = '+';
     cc4:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
     cc6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
			if (sint < 0) {
     cca:	2b00      	cmp	r3, #0
     ccc:	f6bf af63 	bge.w	b96 <CONFIG_ISR_STACK_SIZE+0x396>
				value->uint = (uint_value_type)-sint;
     cd0:	4252      	negs	r2, r2
     cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
     cd6:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
     cd8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
     cdc:	e75b      	b.n	b96 <CONFIG_ISR_STACK_SIZE+0x396>
		switch (conv->specifier) {
     cde:	2600      	movs	r6, #0
     ce0:	e759      	b.n	b96 <CONFIG_ISR_STACK_SIZE+0x396>
		char sign = 0;
     ce2:	2600      	movs	r6, #0
				conv->flag_zero = false;
     ce4:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
     ce8:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     cec:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
     cee:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     cf2:	459a      	cmp	sl, r3
				conv->flag_zero = false;
     cf4:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
     cf8:	f67f af5b 	bls.w	bb2 <CONFIG_ISR_STACK_SIZE+0x3b2>
					conv->pad0_value = precision - (int)len;
     cfc:	ebaa 0303 	sub.w	r3, sl, r3
     d00:	9311      	str	r3, [sp, #68]	; 0x44
     d02:	e756      	b.n	bb2 <CONFIG_ISR_STACK_SIZE+0x3b2>
			if (value->ptr != NULL) {
     d04:	980e      	ldr	r0, [sp, #56]	; 0x38
     d06:	b390      	cbz	r0, d6e <CONFIG_ISR_STACK_SIZE+0x56e>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     d08:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     d0c:	9300      	str	r3, [sp, #0]
     d0e:	2100      	movs	r1, #0
     d10:	ab08      	add	r3, sp, #32
     d12:	aa10      	add	r2, sp, #64	; 0x40
     d14:	f003 fc26 	bl	4564 <encode_uint>
				conv->altform_0c = true;
     d18:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
     d1c:	f1ba 0f00 	cmp.w	sl, #0
				conv->altform_0c = true;
     d20:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     d24:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     d28:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
     d2c:	4607      	mov	r7, r0
				conv->altform_0c = true;
     d2e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
     d32:	dad6      	bge.n	ce2 <CONFIG_ISR_STACK_SIZE+0x4e2>
		if (bps == NULL) {
     d34:	2800      	cmp	r0, #0
     d36:	f43f aedc 	beq.w	af2 <CONFIG_ISR_STACK_SIZE+0x2f2>
		char sign = 0;
     d3a:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
     d3c:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     d40:	1a18      	subs	r0, r3, r0
		if (sign != 0) {
     d42:	469a      	mov	sl, r3
     d44:	e780      	b.n	c48 <CONFIG_ISR_STACK_SIZE+0x448>
				store_count(conv, value->ptr, count);
     d46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
     d48:	2907      	cmp	r1, #7
     d4a:	f63f aed2 	bhi.w	af2 <CONFIG_ISR_STACK_SIZE+0x2f2>
     d4e:	e8df f001 	tbb	[pc, r1]
     d52:	040c      	.short	0x040c
     d54:	08080c06 	.word	0x08080c06
     d58:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
     d5a:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
     d5c:	e6c9      	b.n	af2 <CONFIG_ISR_STACK_SIZE+0x2f2>
		*(short *)dp = (short)count;
     d5e:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
     d60:	e6c7      	b.n	af2 <CONFIG_ISR_STACK_SIZE+0x2f2>
		*(intmax_t *)dp = (intmax_t)count;
     d62:	17ea      	asrs	r2, r5, #31
     d64:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
     d68:	e6c3      	b.n	af2 <CONFIG_ISR_STACK_SIZE+0x2f2>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     d6a:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
     d6c:	e6c1      	b.n	af2 <CONFIG_ISR_STACK_SIZE+0x2f2>
     d6e:	4f2f      	ldr	r7, [pc, #188]	; (e2c <CONFIG_ISR_STACK_SIZE+0x62c>)
		char sign = 0;
     d70:	4606      	mov	r6, r0
			bpe = bps + 5;
     d72:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
     d76:	2005      	movs	r0, #5
     d78:	e766      	b.n	c48 <CONFIG_ISR_STACK_SIZE+0x448>
		} else if (conv->altform_0) {
     d7a:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
     d7c:	bf48      	it	mi
     d7e:	3001      	addmi	r0, #1
     d80:	e76a      	b.n	c58 <CONFIG_ISR_STACK_SIZE+0x458>
					OUTC(pad);
     d82:	4610      	mov	r0, r2
     d84:	9307      	str	r3, [sp, #28]
     d86:	9206      	str	r2, [sp, #24]
     d88:	4659      	mov	r1, fp
     d8a:	47c8      	blx	r9
     d8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
     d90:	2800      	cmp	r0, #0
     d92:	da04      	bge.n	d9e <CONFIG_ISR_STACK_SIZE+0x59e>
#undef OUTS
#undef OUTC
}
     d94:	b015      	add	sp, #84	; 0x54
     d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     d9a:	2220      	movs	r2, #32
					pad = '0';
     d9c:	4643      	mov	r3, r8
				while (width-- > 0) {
     d9e:	4619      	mov	r1, r3
     da0:	2900      	cmp	r1, #0
     da2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
     da6:	dcec      	bgt.n	d82 <CONFIG_ISR_STACK_SIZE+0x582>
     da8:	4445      	add	r5, r8
     daa:	4698      	mov	r8, r3
     dac:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
     dae:	b12e      	cbz	r6, dbc <CONFIG_ISR_STACK_SIZE+0x5bc>
			OUTC(sign);
     db0:	4659      	mov	r1, fp
     db2:	4630      	mov	r0, r6
     db4:	47c8      	blx	r9
     db6:	2800      	cmp	r0, #0
     db8:	dbec      	blt.n	d94 <CONFIG_ISR_STACK_SIZE+0x594>
     dba:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
     dbc:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     dc0:	06da      	lsls	r2, r3, #27
     dc2:	d401      	bmi.n	dc8 <CONFIG_ISR_STACK_SIZE+0x5c8>
     dc4:	071b      	lsls	r3, r3, #28
     dc6:	d505      	bpl.n	dd4 <CONFIG_ISR_STACK_SIZE+0x5d4>
				OUTC('0');
     dc8:	4659      	mov	r1, fp
     dca:	2030      	movs	r0, #48	; 0x30
     dcc:	47c8      	blx	r9
     dce:	2800      	cmp	r0, #0
     dd0:	dbe0      	blt.n	d94 <CONFIG_ISR_STACK_SIZE+0x594>
     dd2:	3501      	adds	r5, #1
			if (conv->altform_0c) {
     dd4:	9b05      	ldr	r3, [sp, #20]
     dd6:	b133      	cbz	r3, de6 <CONFIG_ISR_STACK_SIZE+0x5e6>
				OUTC(conv->specifier);
     dd8:	4659      	mov	r1, fp
     dda:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
     dde:	47c8      	blx	r9
     de0:	2800      	cmp	r0, #0
     de2:	dbd7      	blt.n	d94 <CONFIG_ISR_STACK_SIZE+0x594>
     de4:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     de6:	9e04      	ldr	r6, [sp, #16]
     de8:	442e      	add	r6, r5
     dea:	e005      	b.n	df8 <CONFIG_ISR_STACK_SIZE+0x5f8>
				OUTC('0');
     dec:	4659      	mov	r1, fp
     dee:	2030      	movs	r0, #48	; 0x30
     df0:	47c8      	blx	r9
     df2:	2800      	cmp	r0, #0
     df4:	dbce      	blt.n	d94 <CONFIG_ISR_STACK_SIZE+0x594>
     df6:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     df8:	1b73      	subs	r3, r6, r5
     dfa:	2b00      	cmp	r3, #0
     dfc:	dcf6      	bgt.n	dec <CONFIG_ISR_STACK_SIZE+0x5ec>
			OUTS(bps, bpe);
     dfe:	4653      	mov	r3, sl
     e00:	463a      	mov	r2, r7
     e02:	4659      	mov	r1, fp
     e04:	4648      	mov	r0, r9
     e06:	f003 fbf3 	bl	45f0 <outs>
     e0a:	2800      	cmp	r0, #0
     e0c:	dbc2      	blt.n	d94 <CONFIG_ISR_STACK_SIZE+0x594>
     e0e:	4405      	add	r5, r0
		while (width > 0) {
     e10:	44a8      	add	r8, r5
     e12:	eba8 0305 	sub.w	r3, r8, r5
     e16:	2b00      	cmp	r3, #0
     e18:	f77f ae6b 	ble.w	af2 <CONFIG_ISR_STACK_SIZE+0x2f2>
			OUTC(' ');
     e1c:	4659      	mov	r1, fp
     e1e:	2020      	movs	r0, #32
     e20:	47c8      	blx	r9
     e22:	2800      	cmp	r0, #0
     e24:	dbb6      	blt.n	d94 <CONFIG_ISR_STACK_SIZE+0x594>
     e26:	3501      	adds	r5, #1
			--width;
     e28:	e7f3      	b.n	e12 <CONFIG_ISR_STACK_SIZE+0x612>
     e2a:	bf00      	nop
     e2c:	00005496 	.word	0x00005496

00000e30 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
     e30:	4604      	mov	r4, r0
     e32:	b508      	push	{r3, lr}
	__asm__ volatile(
     e34:	f04f 0220 	mov.w	r2, #32
     e38:	f3ef 8311 	mrs	r3, BASEPRI
     e3c:	f382 8812 	msr	BASEPRI_MAX, r2
     e40:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
     e44:	f001 fc1e 	bl	2684 <sys_clock_disable>
	}

	sys_arch_reboot(type);
     e48:	4620      	mov	r0, r4
     e4a:	f000 fd3d 	bl	18c8 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
     e4e:	4803      	ldr	r0, [pc, #12]	; (e5c <sys_reboot+0x2c>)
     e50:	f003 fa98 	bl	4384 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
     e54:	f000 fa86 	bl	1364 <arch_cpu_idle>
     e58:	e7fc      	b.n	e54 <sys_reboot+0x24>
     e5a:	bf00      	nop
     e5c:	0000549c 	.word	0x0000549c

00000e60 <nrf_gpio_pin_control_select.constprop.0>:

#if NRF_GPIO_HAS_SEL
NRF_STATIC_INLINE void nrf_gpio_pin_control_select(uint32_t pin_number, nrf_gpio_pin_sel_t ctrl)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
     e60:	4b05      	ldr	r3, [pc, #20]	; (e78 <nrf_gpio_pin_control_select.constprop.0+0x18>)
     e62:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     e66:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
     e6a:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_MCUSEL_Pos);
     e6e:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
     e72:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
     e76:	4770      	bx	lr
     e78:	50842500 	.word	0x50842500

00000e7c <nordicsemi_nrf53_init>:
	return ok_to_sleep;
}
#endif /* CONFIG_SOC_NRF53_ANOMALY_160_WORKAROUND */

static int nordicsemi_nrf53_init(void)
{
     e7c:	b508      	push	{r3, lr}
     e7e:	f04f 0320 	mov.w	r3, #32
     e82:	f3ef 8111 	mrs	r1, BASEPRI
     e86:	f383 8812 	msr	BASEPRI_MAX, r3
     e8a:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
     e8e:	2201      	movs	r2, #1
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
     e90:	2002      	movs	r0, #2
     e92:	4b09      	ldr	r3, [pc, #36]	; (eb8 <nordicsemi_nrf53_init+0x3c>)
     e94:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
     e98:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
     e9c:	f8c3 06d0 	str.w	r0, [r3, #1744]	; 0x6d0
#if !defined(CONFIG_BUILD_WITH_TFM)
	/* This can only be done from secure code.
	 * This is handled by the TF-M platform so we skip it when TF-M is
	 * enabled.
	 */
	nrf_gpio_pin_control_select(PIN_XL1, NRF_GPIO_PIN_SEL_PERIPHERAL);
     ea0:	2000      	movs	r0, #0
     ea2:	f7ff ffdd 	bl	e60 <nrf_gpio_pin_control_select.constprop.0>
	nrf_gpio_pin_control_select(PIN_XL2, NRF_GPIO_PIN_SEL_PERIPHERAL);
     ea6:	4610      	mov	r0, r2
     ea8:	f7ff ffda 	bl	e60 <nrf_gpio_pin_control_select.constprop.0>
	__asm__ volatile(
     eac:	f381 8811 	msr	BASEPRI, r1
     eb0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     eb4:	2000      	movs	r0, #0
     eb6:	bd08      	pop	{r3, pc}
     eb8:	50001000 	.word	0x50001000

00000ebc <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
     ebc:	b148      	cbz	r0, ed2 <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
     ebe:	4b05      	ldr	r3, [pc, #20]	; (ed4 <arch_busy_wait+0x18>)
     ec0:	4a05      	ldr	r2, [pc, #20]	; (ed8 <arch_busy_wait+0x1c>)
     ec2:	681b      	ldr	r3, [r3, #0]
     ec4:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
     ec8:	4358      	muls	r0, r3
     eca:	4b04      	ldr	r3, [pc, #16]	; (edc <arch_busy_wait+0x20>)
     ecc:	f043 0301 	orr.w	r3, r3, #1
     ed0:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
     ed2:	4770      	bx	lr
     ed4:	2000002c 	.word	0x2000002c
     ed8:	000f4240 	.word	0x000f4240
     edc:	000052e0 	.word	0x000052e0

00000ee0 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
     ee0:	2806      	cmp	r0, #6
     ee2:	d107      	bne.n	ef4 <pm_state_set+0x14>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
     ee4:	2201      	movs	r2, #1
     ee6:	4b04      	ldr	r3, [pc, #16]	; (ef8 <pm_state_set+0x18>)
     ee8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     eec:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
     ef0:	bf20      	wfe
    while (true)
     ef2:	e7fd      	b.n	ef0 <pm_state_set+0x10>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
     ef4:	4770      	bx	lr
     ef6:	bf00      	nop
     ef8:	50004000 	.word	0x50004000

00000efc <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
     efc:	f001 bbec 	b.w	26d8 <SystemInit>

00000f00 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
     f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     f04:	4605      	mov	r5, r0
	__asm__ volatile(
     f06:	f04f 0320 	mov.w	r3, #32
     f0a:	f3ef 8611 	mrs	r6, BASEPRI
     f0e:	f383 8812 	msr	BASEPRI_MAX, r3
     f12:	f3bf 8f6f 	isb	sy
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
     f16:	f04f 090c 	mov.w	r9, #12
	return list->head;
     f1a:	4b0d      	ldr	r3, [pc, #52]	; (f50 <pm_state_notify+0x50>)
     f1c:	4f0d      	ldr	r7, [pc, #52]	; (f54 <pm_state_notify+0x54>)
     f1e:	681c      	ldr	r4, [r3, #0]
     f20:	f8df 8034 	ldr.w	r8, [pc, #52]	; f58 <pm_state_notify+0x58>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     f24:	b92c      	cbnz	r4, f32 <pm_state_notify+0x32>
	__asm__ volatile(
     f26:	f386 8811 	msr	BASEPRI, r6
     f2a:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
     f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
     f32:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
     f36:	2d00      	cmp	r5, #0
     f38:	bf18      	it	ne
     f3a:	4613      	movne	r3, r2
		if (callback) {
     f3c:	b12b      	cbz	r3, f4a <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
     f3e:	f898 2010 	ldrb.w	r2, [r8, #16]
     f42:	fb09 f202 	mul.w	r2, r9, r2
     f46:	5cb8      	ldrb	r0, [r7, r2]
     f48:	4798      	blx	r3
	return node->next;
     f4a:	6824      	ldr	r4, [r4, #0]
     f4c:	e7ea      	b.n	f24 <pm_state_notify+0x24>
     f4e:	bf00      	nop
     f50:	200002c8 	.word	0x200002c8
     f54:	200002bc 	.word	0x200002bc
     f58:	20000990 	.word	0x20000990

00000f5c <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
     f5c:	2201      	movs	r2, #1

void pm_system_resume(void)
{
     f5e:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
     f60:	4b16      	ldr	r3, [pc, #88]	; (fbc <pm_system_resume+0x60>)
     f62:	7c1c      	ldrb	r4, [r3, #16]
     f64:	f004 031f 	and.w	r3, r4, #31
     f68:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
     f6a:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
     f6c:	4b14      	ldr	r3, [pc, #80]	; (fc0 <pm_system_resume+0x64>)
     f6e:	0961      	lsrs	r1, r4, #5
     f70:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     f74:	e8d3 1fef 	ldaex	r1, [r3]
     f78:	ea01 0500 	and.w	r5, r1, r0
     f7c:	e8c3 5fe6 	stlex	r6, r5, [r3]
     f80:	2e00      	cmp	r6, #0
     f82:	d1f7      	bne.n	f74 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
     f84:	420a      	tst	r2, r1
     f86:	d013      	beq.n	fb0 <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
     f88:	4b0e      	ldr	r3, [pc, #56]	; (fc4 <pm_system_resume+0x68>)
     f8a:	4d0f      	ldr	r5, [pc, #60]	; (fc8 <pm_system_resume+0x6c>)
     f8c:	b18b      	cbz	r3, fb2 <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
     f8e:	230c      	movs	r3, #12
     f90:	4363      	muls	r3, r4
     f92:	18ea      	adds	r2, r5, r3
     f94:	7851      	ldrb	r1, [r2, #1]
     f96:	5ce8      	ldrb	r0, [r5, r3]
     f98:	f003 fb42 	bl	4620 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
     f9c:	2000      	movs	r0, #0
     f9e:	f7ff ffaf 	bl	f00 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
     fa2:	230c      	movs	r3, #12
     fa4:	435c      	muls	r4, r3
     fa6:	2300      	movs	r3, #0
     fa8:	192a      	adds	r2, r5, r4
     faa:	512b      	str	r3, [r5, r4]
     fac:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
     fb0:	bd70      	pop	{r4, r5, r6, pc}
     fb2:	f383 8811 	msr	BASEPRI, r3
     fb6:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
     fba:	e7ef      	b.n	f9c <pm_system_resume+0x40>
     fbc:	20000990 	.word	0x20000990
     fc0:	200002d0 	.word	0x200002d0
     fc4:	00004621 	.word	0x00004621
     fc8:	200002bc 	.word	0x200002bc

00000fcc <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
     fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
     fd0:	4b32      	ldr	r3, [pc, #200]	; (109c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x9c>)
{
     fd2:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
     fd4:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
     fd6:	f04f 0320 	mov.w	r3, #32
     fda:	f3ef 8811 	mrs	r8, BASEPRI
     fde:	f383 8812 	msr	BASEPRI_MAX, r3
     fe2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
     fe6:	240c      	movs	r4, #12
     fe8:	436c      	muls	r4, r5
     fea:	4b2d      	ldr	r3, [pc, #180]	; (10a0 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xa0>)
     fec:	4e2d      	ldr	r6, [pc, #180]	; (10a4 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xa4>)
     fee:	5d19      	ldrb	r1, [r3, r4]
     ff0:	191a      	adds	r2, r3, r4
     ff2:	2900      	cmp	r1, #0
     ff4:	d047      	beq.n	1086 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x86>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
     ff6:	ca07      	ldmia	r2, {r0, r1, r2}
     ff8:	eb06 0c04 	add.w	ip, r6, r4
     ffc:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    1000:	2200      	movs	r2, #0
    1002:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    1004:	f388 8811 	msr	BASEPRI, r8
    1008:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    100c:	230c      	movs	r3, #12
    100e:	436b      	muls	r3, r5
    1010:	5cf0      	ldrb	r0, [r6, r3]
    1012:	18f2      	adds	r2, r6, r3
    1014:	b3a8      	cbz	r0, 1082 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x82>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    1016:	1c7b      	adds	r3, r7, #1
    1018:	d010      	beq.n	103c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x3c>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    101a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    101e:	2100      	movs	r1, #0
    1020:	f8d2 c008 	ldr.w	ip, [r2, #8]
    1024:	4c20      	ldr	r4, [pc, #128]	; (10a8 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xa8>)
    1026:	2300      	movs	r3, #0
    1028:	fbec 4100 	umlal	r4, r1, ip, r0
    102c:	4a1f      	ldr	r2, [pc, #124]	; (10ac <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xac>)
    102e:	4620      	mov	r0, r4
    1030:	f7ff f890 	bl	154 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    1034:	2101      	movs	r1, #1
    1036:	1a38      	subs	r0, r7, r0
    1038:	f001 fae8 	bl	260c <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    103c:	f002 fd74 	bl	3b28 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    1040:	2001      	movs	r0, #1
    1042:	f7ff ff5d 	bl	f00 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1046:	4b1a      	ldr	r3, [pc, #104]	; (10b0 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xb0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    1048:	096a      	lsrs	r2, r5, #5
    104a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    104e:	2201      	movs	r2, #1
    1050:	f005 011f 	and.w	r1, r5, #31
    1054:	408a      	lsls	r2, r1
    1056:	e8d3 0fef 	ldaex	r0, [r3]
    105a:	4310      	orrs	r0, r2
    105c:	e8c3 0fe1 	stlex	r1, r0, [r3]
    1060:	2900      	cmp	r1, #0
    1062:	d1f8      	bne.n	1056 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x56>
	if (pm_state_set != NULL) {
    1064:	4b13      	ldr	r3, [pc, #76]	; (10b4 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xb4>)
    1066:	b13b      	cbz	r3, 1078 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x78>
		pm_state_set(info->state, info->substate_id);
    1068:	230c      	movs	r3, #12
    106a:	fb03 f005 	mul.w	r0, r3, r5
    106e:	1833      	adds	r3, r6, r0
    1070:	7859      	ldrb	r1, [r3, #1]
    1072:	5c30      	ldrb	r0, [r6, r0]
    1074:	f7ff ff34 	bl	ee0 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    1078:	f7ff ff70 	bl	f5c <pm_system_resume>
	k_sched_unlock();
    107c:	f002 fd68 	bl	3b50 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    1080:	2001      	movs	r0, #1
}
    1082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    1086:	4601      	mov	r1, r0
    1088:	4628      	mov	r0, r5
    108a:	f000 f815 	bl	10b8 <pm_policy_next_state>
		if (info != NULL) {
    108e:	2800      	cmp	r0, #0
    1090:	d0b8      	beq.n	1004 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4>
			z_cpus_pm_state[id] = *info;
    1092:	c807      	ldmia	r0, {r0, r1, r2}
    1094:	4434      	add	r4, r6
    1096:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    109a:	e7b3      	b.n	1004 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4>
    109c:	20000990 	.word	0x20000990
    10a0:	200002b0 	.word	0x200002b0
    10a4:	200002bc 	.word	0x200002bc
    10a8:	000f423f 	.word	0x000f423f
    10ac:	000f4240 	.word	0x000f4240
    10b0:	200002d0 	.word	0x200002d0
    10b4:	00000ee1 	.word	0x00000ee1

000010b8 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    10b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10bc:	b085      	sub	sp, #20
    10be:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    10c0:	a903      	add	r1, sp, #12
    10c2:	f000 f843 	bl	114c <pm_state_cpu_get_all>
    10c6:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    10ca:	4604      	mov	r4, r0
    10cc:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    10d0:	4b1b      	ldr	r3, [pc, #108]	; (1140 <pm_policy_next_state+0x88>)
    10d2:	9d03      	ldr	r5, [sp, #12]
    10d4:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    10d8:	1e43      	subs	r3, r0, #1
    10da:	b21b      	sxth	r3, r3
    10dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    10e0:	f8df 8060 	ldr.w	r8, [pc, #96]	; 1144 <pm_policy_next_state+0x8c>
    10e4:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    10e8:	b924      	cbnz	r4, 10f4 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    10ea:	46a1      	mov	r9, r4
}
    10ec:	4648      	mov	r0, r9
    10ee:	b005      	add	sp, #20
    10f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10f4:	46c4      	mov	ip, r8
    10f6:	4659      	mov	r1, fp
    10f8:	6868      	ldr	r0, [r5, #4]
    10fa:	2300      	movs	r3, #0
    10fc:	fbe0 c107 	umlal	ip, r1, r0, r7
    1100:	4a11      	ldr	r2, [pc, #68]	; (1148 <pm_policy_next_state+0x90>)
    1102:	4660      	mov	r0, ip
    1104:	f7ff f826 	bl	154 <__aeabi_uldivmod>
    1108:	46c4      	mov	ip, r8
    110a:	4659      	mov	r1, fp
    110c:	9001      	str	r0, [sp, #4]
    110e:	68a8      	ldr	r0, [r5, #8]
    1110:	2300      	movs	r3, #0
    1112:	fbe0 c107 	umlal	ip, r1, r0, r7
    1116:	4a0c      	ldr	r2, [pc, #48]	; (1148 <pm_policy_next_state+0x90>)
    1118:	4660      	mov	r0, ip
    111a:	f7ff f81b 	bl	154 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    111e:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
		const struct pm_state_info *state = &cpu_states[i];
    1122:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1124:	d001      	beq.n	112a <pm_policy_next_state+0x72>
    1126:	4582      	cmp	sl, r0
    1128:	d905      	bls.n	1136 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    112a:	1c73      	adds	r3, r6, #1
    112c:	d0de      	beq.n	10ec <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    112e:	9b01      	ldr	r3, [sp, #4]
    1130:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    1132:	42b0      	cmp	r0, r6
    1134:	d9da      	bls.n	10ec <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1136:	3c01      	subs	r4, #1
    1138:	b2a4      	uxth	r4, r4
    113a:	3d0c      	subs	r5, #12
    113c:	e7d4      	b.n	10e8 <pm_policy_next_state+0x30>
    113e:	bf00      	nop
    1140:	20000004 	.word	0x20000004
    1144:	000f423f 	.word	0x000f423f
    1148:	000f4240 	.word	0x000f4240

0000114c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    114c:	b908      	cbnz	r0, 1152 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    114e:	4b02      	ldr	r3, [pc, #8]	; (1158 <pm_state_cpu_get_all+0xc>)
    1150:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    1152:	2000      	movs	r0, #0
    1154:	4770      	bx	lr
    1156:	bf00      	nop
    1158:	000052e8 	.word	0x000052e8

0000115c <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    115c:	4801      	ldr	r0, [pc, #4]	; (1164 <nrf_cc3xx_platform_abort_init+0x8>)
    115e:	f002 bfcd 	b.w	40fc <nrf_cc3xx_platform_set_abort>
    1162:	bf00      	nop
    1164:	000052e8 	.word	0x000052e8

00001168 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1168:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    116a:	4604      	mov	r4, r0
    116c:	b918      	cbnz	r0, 1176 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    116e:	4b0f      	ldr	r3, [pc, #60]	; (11ac <mutex_free_platform+0x44>)
    1170:	480f      	ldr	r0, [pc, #60]	; (11b0 <mutex_free_platform+0x48>)
    1172:	685b      	ldr	r3, [r3, #4]
    1174:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1176:	6861      	ldr	r1, [r4, #4]
    1178:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
    117c:	d00f      	beq.n	119e <mutex_free_platform+0x36>
    117e:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
    1182:	d00c      	beq.n	119e <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1184:	4d0b      	ldr	r5, [pc, #44]	; (11b4 <mutex_free_platform+0x4c>)
    1186:	42a9      	cmp	r1, r5
    1188:	d009      	beq.n	119e <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    118a:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
    118e:	d007      	beq.n	11a0 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1190:	4621      	mov	r1, r4
    1192:	4809      	ldr	r0, [pc, #36]	; (11b8 <mutex_free_platform+0x50>)
    1194:	f003 fdf9 	bl	4d8a <k_mem_slab_free>
        mutex->mutex = NULL;
    1198:	2300      	movs	r3, #0
    119a:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    119c:	6065      	str	r5, [r4, #4]
}
    119e:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    11a0:	2214      	movs	r2, #20
    11a2:	6820      	ldr	r0, [r4, #0]
    11a4:	f003 faa6 	bl	46f4 <memset>
    11a8:	e7f8      	b.n	119c <mutex_free_platform+0x34>
    11aa:	bf00      	nop
    11ac:	200000b4 	.word	0x200000b4
    11b0:	000054cc 	.word	0x000054cc
    11b4:	a95c5f2c 	.word	0xa95c5f2c
    11b8:	200007d4 	.word	0x200007d4

000011bc <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    11bc:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    11be:	b360      	cbz	r0, 121a <mutex_lock_platform+0x5e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    11c0:	6843      	ldr	r3, [r0, #4]
    11c2:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    11c6:	d00e      	beq.n	11e6 <mutex_lock_platform+0x2a>
    11c8:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    11cc:	d018      	beq.n	1200 <mutex_lock_platform+0x44>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    11ce:	4a14      	ldr	r2, [pc, #80]	; (1220 <mutex_lock_platform+0x64>)
    11d0:	4293      	cmp	r3, r2
    11d2:	d020      	beq.n	1216 <mutex_lock_platform+0x5a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    11d4:	6800      	ldr	r0, [r0, #0]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    11d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    11da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    11de:	f002 f99d 	bl	351c <z_impl_k_mutex_lock>

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
    11e2:	b158      	cbz	r0, 11fc <mutex_lock_platform+0x40>
    11e4:	e015      	b.n	1212 <mutex_lock_platform+0x56>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    11e6:	2201      	movs	r2, #1
    11e8:	6803      	ldr	r3, [r0, #0]
    11ea:	e8d3 1fef 	ldaex	r1, [r3]
    11ee:	2900      	cmp	r1, #0
    11f0:	d103      	bne.n	11fa <mutex_lock_platform+0x3e>
    11f2:	e8c3 2fe0 	stlex	r0, r2, [r3]
    11f6:	2800      	cmp	r0, #0
    11f8:	d1f7      	bne.n	11ea <mutex_lock_platform+0x2e>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    11fa:	d10a      	bne.n	1212 <mutex_lock_platform+0x56>
            return NRF_CC3XX_PLATFORM_SUCCESS;
    11fc:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    11fe:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    1200:	6803      	ldr	r3, [r0, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_mutex_lock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    1202:	4a08      	ldr	r2, [pc, #32]	; (1224 <mutex_lock_platform+0x68>)
    1204:	781b      	ldrb	r3, [r3, #0]
    1206:	f503 7380 	add.w	r3, r3, #256	; 0x100
    120a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    120e:	2b00      	cmp	r3, #0
    1210:	d0f4      	beq.n	11fc <mutex_lock_platform+0x40>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1212:	4805      	ldr	r0, [pc, #20]	; (1228 <mutex_lock_platform+0x6c>)
    1214:	e7f3      	b.n	11fe <mutex_lock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1216:	4805      	ldr	r0, [pc, #20]	; (122c <mutex_lock_platform+0x70>)
    1218:	e7f1      	b.n	11fe <mutex_lock_platform+0x42>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    121a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    121e:	e7ee      	b.n	11fe <mutex_lock_platform+0x42>
    1220:	a95c5f2c 	.word	0xa95c5f2c
    1224:	50030000 	.word	0x50030000
    1228:	ffff8fe9 	.word	0xffff8fe9
    122c:	ffff8fea 	.word	0xffff8fea

00001230 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1230:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1232:	b320      	cbz	r0, 127e <mutex_unlock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1234:	6843      	ldr	r3, [r0, #4]
    1236:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    123a:	d009      	beq.n	1250 <mutex_unlock_platform+0x20>
    123c:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    1240:	d013      	beq.n	126a <mutex_unlock_platform+0x3a>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1242:	4a11      	ldr	r2, [pc, #68]	; (1288 <mutex_unlock_platform+0x58>)
    1244:	4293      	cmp	r3, r2
    1246:	d01d      	beq.n	1284 <mutex_unlock_platform+0x54>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    1248:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    124a:	f002 f9e1 	bl	3610 <z_impl_k_mutex_unlock>
    124e:	e014      	b.n	127a <mutex_unlock_platform+0x4a>
    1250:	2200      	movs	r2, #0
    1252:	6803      	ldr	r3, [r0, #0]
    1254:	e8d3 1fef 	ldaex	r1, [r3]
    1258:	2901      	cmp	r1, #1
    125a:	d103      	bne.n	1264 <mutex_unlock_platform+0x34>
    125c:	e8c3 2fe0 	stlex	r0, r2, [r3]
    1260:	2800      	cmp	r0, #0
    1262:	d1f7      	bne.n	1254 <mutex_unlock_platform+0x24>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1264:	d009      	beq.n	127a <mutex_unlock_platform+0x4a>
    1266:	4809      	ldr	r0, [pc, #36]	; (128c <mutex_unlock_platform+0x5c>)

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    1268:	bd08      	pop	{r3, pc}
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    126a:	2100      	movs	r1, #0
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    126c:	6803      	ldr	r3, [r0, #0]
    126e:	4a08      	ldr	r2, [pc, #32]	; (1290 <mutex_unlock_platform+0x60>)
    1270:	781b      	ldrb	r3, [r3, #0]
    1272:	f503 7380 	add.w	r3, r3, #256	; 0x100
    1276:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return NRF_CC3XX_PLATFORM_SUCCESS;
    127a:	2000      	movs	r0, #0
    127c:	e7f4      	b.n	1268 <mutex_unlock_platform+0x38>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    127e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1282:	e7f1      	b.n	1268 <mutex_unlock_platform+0x38>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1284:	4803      	ldr	r0, [pc, #12]	; (1294 <mutex_unlock_platform+0x64>)
    1286:	e7ef      	b.n	1268 <mutex_unlock_platform+0x38>
    1288:	a95c5f2c 	.word	0xa95c5f2c
    128c:	ffff8fe9 	.word	0xffff8fe9
    1290:	50030000 	.word	0x50030000
    1294:	ffff8fea 	.word	0xffff8fea

00001298 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1298:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    129a:	4604      	mov	r4, r0
    129c:	b918      	cbnz	r0, 12a6 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    129e:	4b1d      	ldr	r3, [pc, #116]	; (1314 <mutex_init_platform+0x7c>)
    12a0:	481d      	ldr	r0, [pc, #116]	; (1318 <mutex_init_platform+0x80>)
    12a2:	685b      	ldr	r3, [r3, #4]
    12a4:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    12a6:	6863      	ldr	r3, [r4, #4]
    12a8:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    12ac:	d02f      	beq.n	130e <mutex_init_platform+0x76>
    12ae:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    12b2:	d02c      	beq.n	130e <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    12b4:	4a19      	ldr	r2, [pc, #100]	; (131c <mutex_init_platform+0x84>)
    12b6:	4293      	cmp	r3, r2
    12b8:	d119      	bne.n	12ee <mutex_init_platform+0x56>
    12ba:	6823      	ldr	r3, [r4, #0]
    12bc:	bb03      	cbnz	r3, 1300 <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    12be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    12c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    12c6:	4621      	mov	r1, r4
    12c8:	4815      	ldr	r0, [pc, #84]	; (1320 <mutex_init_platform+0x88>)
    12ca:	f002 f851 	bl	3370 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    12ce:	b908      	cbnz	r0, 12d4 <mutex_init_platform+0x3c>
    12d0:	6823      	ldr	r3, [r4, #0]
    12d2:	b91b      	cbnz	r3, 12dc <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
    12d4:	4b0f      	ldr	r3, [pc, #60]	; (1314 <mutex_init_platform+0x7c>)
    12d6:	4813      	ldr	r0, [pc, #76]	; (1324 <mutex_init_platform+0x8c>)
    12d8:	685b      	ldr	r3, [r3, #4]
    12da:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    12dc:	2214      	movs	r2, #20
    12de:	2100      	movs	r1, #0
    12e0:	6820      	ldr	r0, [r4, #0]
    12e2:	f003 fa07 	bl	46f4 <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    12e6:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    12ea:	6063      	str	r3, [r4, #4]
    12ec:	e008      	b.n	1300 <mutex_init_platform+0x68>
    switch(flags){
    12ee:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    12f2:	d80d      	bhi.n	1310 <mutex_init_platform+0x78>
    12f4:	2b3a      	cmp	r3, #58	; 0x3a
    12f6:	d003      	beq.n	1300 <mutex_init_platform+0x68>
    12f8:	f640 62ba 	movw	r2, #3770	; 0xeba
    12fc:	4293      	cmp	r3, r2
    12fe:	d1de      	bne.n	12be <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    1300:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    1302:	f003 fd80 	bl	4e06 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    1306:	6863      	ldr	r3, [r4, #4]
    1308:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    130c:	6063      	str	r3, [r4, #4]
}
    130e:	bd10      	pop	{r4, pc}
    switch(flags){
    1310:	4a05      	ldr	r2, [pc, #20]	; (1328 <mutex_init_platform+0x90>)
    1312:	e7f3      	b.n	12fc <mutex_init_platform+0x64>
    1314:	200000b4 	.word	0x200000b4
    1318:	000054cc 	.word	0x000054cc
    131c:	a95c5f2c 	.word	0xa95c5f2c
    1320:	200007d4 	.word	0x200007d4
    1324:	000054f2 	.word	0x000054f2
    1328:	3a00003a 	.word	0x3a00003a

0000132c <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    132c:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    132e:	4906      	ldr	r1, [pc, #24]	; (1348 <nrf_cc3xx_platform_mutex_init+0x1c>)
    1330:	2340      	movs	r3, #64	; 0x40
    1332:	2214      	movs	r2, #20
    1334:	4805      	ldr	r0, [pc, #20]	; (134c <nrf_cc3xx_platform_mutex_init+0x20>)
    1336:	f003 fd1a 	bl	4d6e <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    133a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    133e:	4904      	ldr	r1, [pc, #16]	; (1350 <nrf_cc3xx_platform_mutex_init+0x24>)
    1340:	4804      	ldr	r0, [pc, #16]	; (1354 <nrf_cc3xx_platform_mutex_init+0x28>)
    1342:	f002 bf4d 	b.w	41e0 <nrf_cc3xx_platform_set_mutexes>
    1346:	bf00      	nop
    1348:	200002d4 	.word	0x200002d4
    134c:	200007d4 	.word	0x200007d4
    1350:	000052f0 	.word	0x000052f0
    1354:	00005304 	.word	0x00005304

00001358 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1358:	4901      	ldr	r1, [pc, #4]	; (1360 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    135a:	2210      	movs	r2, #16
	str	r2, [r1]
    135c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    135e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1360:	e000ed10 	.word	0xe000ed10

00001364 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1364:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1366:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1368:	f380 8811 	msr	BASEPRI, r0
	isb
    136c:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    1370:	f3bf 8f4f 	dsb	sy
    1374:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1376:	b662      	cpsie	i
	isb
    1378:	f3bf 8f6f 	isb	sy

	bx	lr
    137c:	4770      	bx	lr
    137e:	bf00      	nop

00001380 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1380:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1382:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1384:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    1388:	f3bf 8f4f 	dsb	sy
    138c:	bf20      	wfe

	msr	BASEPRI, r0
    138e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1392:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1394:	4770      	bx	lr
    1396:	bf00      	nop

00001398 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1398:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    139a:	2800      	cmp	r0, #0
    139c:	db07      	blt.n	13ae <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    139e:	2301      	movs	r3, #1
    13a0:	0941      	lsrs	r1, r0, #5
    13a2:	4a03      	ldr	r2, [pc, #12]	; (13b0 <arch_irq_enable+0x18>)
    13a4:	f000 001f 	and.w	r0, r0, #31
    13a8:	4083      	lsls	r3, r0
    13aa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    13ae:	4770      	bx	lr
    13b0:	e000e100 	.word	0xe000e100

000013b4 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    13b4:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    13b6:	2800      	cmp	r0, #0
    13b8:	db0c      	blt.n	13d4 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13ba:	2201      	movs	r2, #1
    13bc:	4906      	ldr	r1, [pc, #24]	; (13d8 <arch_irq_disable+0x24>)
    13be:	0943      	lsrs	r3, r0, #5
    13c0:	f000 001f 	and.w	r0, r0, #31
    13c4:	4082      	lsls	r2, r0
    13c6:	3320      	adds	r3, #32
    13c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    13cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    13d0:	f3bf 8f6f 	isb	sy
}
    13d4:	4770      	bx	lr
    13d6:	bf00      	nop
    13d8:	e000e100 	.word	0xe000e100

000013dc <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    13dc:	4b05      	ldr	r3, [pc, #20]	; (13f4 <arch_irq_is_enabled+0x18>)
    13de:	0942      	lsrs	r2, r0, #5
    13e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    13e4:	2301      	movs	r3, #1
    13e6:	f000 001f 	and.w	r0, r0, #31
    13ea:	fa03 f000 	lsl.w	r0, r3, r0
}
    13ee:	4010      	ands	r0, r2
    13f0:	4770      	bx	lr
    13f2:	bf00      	nop
    13f4:	e000e100 	.word	0xe000e100

000013f8 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    13f8:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    13fa:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
    13fc:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1400:	bfac      	ite	ge
    1402:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1406:	4b06      	ldrlt	r3, [pc, #24]	; (1420 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1408:	ea4f 1141 	mov.w	r1, r1, lsl #5
    140c:	b2c9      	uxtb	r1, r1
    140e:	bfab      	itete	ge
    1410:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1414:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1418:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    141c:	5419      	strblt	r1, [r3, r0]
}
    141e:	4770      	bx	lr
    1420:	e000ed14 	.word	0xe000ed14

00001424 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1424:	bf30      	wfi
    b z_SysNmiOnReset
    1426:	f7ff bffd 	b.w	1424 <z_SysNmiOnReset>
    142a:	bf00      	nop

0000142c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    142c:	4a0b      	ldr	r2, [pc, #44]	; (145c <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    142e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1430:	4b0b      	ldr	r3, [pc, #44]	; (1460 <z_arm_prep_c+0x34>)
    1432:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1436:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1438:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    143c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1440:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1444:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1448:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    144c:	f001 fed0 	bl	31f0 <z_bss_zero>
	z_data_copy();
    1450:	f002 fca4 	bl	3d9c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1454:	f000 f9fc 	bl	1850 <z_arm_interrupt_init>
	z_cstart();
    1458:	f001 ff0a 	bl	3270 <z_cstart>
    145c:	00000000 	.word	0x00000000
    1460:	e000ed00 	.word	0xe000ed00

00001464 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1464:	4a09      	ldr	r2, [pc, #36]	; (148c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1466:	490a      	ldr	r1, [pc, #40]	; (1490 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1468:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    146a:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    146c:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
    146e:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1470:	4908      	ldr	r1, [pc, #32]	; (1494 <arch_swap+0x30>)
    1472:	684b      	ldr	r3, [r1, #4]
    1474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1478:	604b      	str	r3, [r1, #4]
    147a:	2300      	movs	r3, #0
    147c:	f383 8811 	msr	BASEPRI, r3
    1480:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1484:	6893      	ldr	r3, [r2, #8]
}
    1486:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1488:	4770      	bx	lr
    148a:	bf00      	nop
    148c:	20000990 	.word	0x20000990
    1490:	000053d4 	.word	0x000053d4
    1494:	e000ed00 	.word	0xe000ed00

00001498 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1498:	4913      	ldr	r1, [pc, #76]	; (14e8 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    149a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    149c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    14a0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    14a2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    14a6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    14aa:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    14ac:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    14b0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    14b4:	4f0d      	ldr	r7, [pc, #52]	; (14ec <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    14b6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    14ba:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    14bc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    14be:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    14c0:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    14c2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    14c4:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    14c6:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    14ca:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    14ce:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    14d2:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    14d6:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    14da:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    14dc:	f003 f8bb 	bl	4656 <configure_builtin_stack_guard>
    pop {r2, lr}
    14e0:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    14e4:	4770      	bx	lr
    14e6:	0000      	.short	0x0000
    ldr r1, =_kernel
    14e8:	20000990 	.word	0x20000990
    ldr v4, =_SCS_ICSR
    14ec:	e000ed04 	.word	0xe000ed04

000014f0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    14f0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    14f4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    14f6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    14fa:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    14fe:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1500:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1504:	2902      	cmp	r1, #2
    beq _oops
    1506:	d0ff      	beq.n	1508 <_oops>

00001508 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1508:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    150a:	f003 f895 	bl	4638 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    150e:	bd01      	pop	{r0, pc}

00001510 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1510:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1514:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    1516:	490b      	ldr	r1, [pc, #44]	; (1544 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    1518:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    151c:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    151e:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    1522:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1526:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    1528:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    152c:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1530:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1534:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1538:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    153a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    153c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    153e:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1540:	4770      	bx	lr
    1542:	bf00      	nop
    1544:	0000439f 	.word	0x0000439f

00001548 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1548:	4b08      	ldr	r3, [pc, #32]	; (156c <arch_switch_to_main_thread+0x24>)
    154a:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    154c:	6e43      	ldr	r3, [r0, #100]	; 0x64
    154e:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1552:	4610      	mov	r0, r2
    1554:	f381 8809 	msr	PSP, r1
    1558:	2100      	movs	r1, #0
    155a:	b663      	cpsie	if
    155c:	f381 8811 	msr	BASEPRI, r1
    1560:	f3bf 8f6f 	isb	sy
    1564:	2200      	movs	r2, #0
    1566:	2300      	movs	r3, #0
    1568:	f002 ff19 	bl	439e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    156c:	20000990 	.word	0x20000990

00001570 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1570:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1572:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1574:	4a0b      	ldr	r2, [pc, #44]	; (15a4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1576:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    1578:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    157a:	bf1e      	ittt	ne
	movne	r1, #0
    157c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    157e:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    1580:	f003 fc32 	blne	4de8 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1584:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1586:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    158a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    158e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1592:	4905      	ldr	r1, [pc, #20]	; (15a8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1594:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1596:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1598:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    159a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    159e:	4903      	ldr	r1, [pc, #12]	; (15ac <_isr_wrapper+0x3c>)
	bx r1
    15a0:	4708      	bx	r1
    15a2:	0000      	.short	0x0000
	ldr r2, =_kernel
    15a4:	20000990 	.word	0x20000990
	ldr r1, =_sw_isr_table
    15a8:	00005058 	.word	0x00005058
	ldr r1, =z_arm_int_exit
    15ac:	000015b1 	.word	0x000015b1

000015b0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    15b0:	4b04      	ldr	r3, [pc, #16]	; (15c4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    15b2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    15b4:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    15b6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    15b8:	d003      	beq.n	15c2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    15ba:	4903      	ldr	r1, [pc, #12]	; (15c8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    15bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    15c0:	600a      	str	r2, [r1, #0]

000015c2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    15c2:	4770      	bx	lr
	ldr r3, =_kernel
    15c4:	20000990 	.word	0x20000990
	ldr r1, =_SCS_ICSR
    15c8:	e000ed04 	.word	0xe000ed04

000015cc <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    15cc:	4b15      	ldr	r3, [pc, #84]	; (1624 <usage_fault.constprop.0+0x58>)
    15ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    15d0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    15d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    15d6:	bf14      	ite	ne
    15d8:	201e      	movne	r0, #30
    15da:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    15dc:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    15e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    15e2:	bf18      	it	ne
    15e4:	201f      	movne	r0, #31
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    15e6:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    15ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_STACK_CHK_FAIL;
    15ec:	bf18      	it	ne
    15ee:	2002      	movne	r0, #2
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    15f0:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    15f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    15f6:	bf18      	it	ne
    15f8:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    15fa:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    15fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    1600:	bf18      	it	ne
    1602:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    1604:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1608:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    160a:	bf18      	it	ne
    160c:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    160e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1612:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	return reason;
}
    1614:	bf18      	it	ne
    1616:	2024      	movne	r0, #36	; 0x24
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1618:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    161c:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1620:	629a      	str	r2, [r3, #40]	; 0x28
}
    1622:	4770      	bx	lr
    1624:	e000ed00 	.word	0xe000ed00

00001628 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1628:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    162a:	4b19      	ldr	r3, [pc, #100]	; (1690 <bus_fault.constprop.0+0x68>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    162c:	4602      	mov	r2, r0
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    162e:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1630:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    1632:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    1636:	bf14      	ite	ne
    1638:	2017      	movne	r0, #23
    163a:	2016      	moveq	r0, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
    163c:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1640:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
    1642:	bf18      	it	ne
    1644:	2018      	movne	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1646:	05a4      	lsls	r4, r4, #22
    1648:	d509      	bpl.n	165e <bus_fault.constprop.0+0x36>
		STORE_xFAR(bfar, SCB->BFAR);
    164a:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    164c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    164e:	0400      	lsls	r0, r0, #16
    1650:	d504      	bpl.n	165c <bus_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
    1652:	b11a      	cbz	r2, 165c <bus_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1654:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1656:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    165a:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    165c:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    165e:	4b0c      	ldr	r3, [pc, #48]	; (1690 <bus_fault.constprop.0+0x68>)
    1660:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    1662:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1666:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    1668:	bf18      	it	ne
    166a:	201a      	movne	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    166c:	05d2      	lsls	r2, r2, #23
    166e:	d40c      	bmi.n	168a <bus_fault.constprop.0+0x62>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    1672:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    1676:	bf18      	it	ne
    1678:	201c      	movne	r0, #28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    167a:	4a05      	ldr	r2, [pc, #20]	; (1690 <bus_fault.constprop.0+0x68>)
    167c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    167e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1682:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1684:	2300      	movs	r3, #0
    1686:	700b      	strb	r3, [r1, #0]
}
    1688:	bd10      	pop	{r4, pc}
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    168a:	201b      	movs	r0, #27
    168c:	e7f5      	b.n	167a <bus_fault.constprop.0+0x52>
    168e:	bf00      	nop
    1690:	e000ed00 	.word	0xe000ed00

00001694 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1694:	b510      	push	{r4, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1696:	4b1c      	ldr	r3, [pc, #112]	; (1708 <mem_manage_fault.constprop.0+0x74>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1698:	4602      	mov	r2, r0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    169a:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    169c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    169e:	f010 0f10 	tst.w	r0, #16
    16a2:	bf14      	ite	ne
    16a4:	2011      	movne	r0, #17
    16a6:	2010      	moveq	r0, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
    16a8:	f014 0f08 	tst.w	r4, #8
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    16ac:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
    16ae:	bf18      	it	ne
    16b0:	2012      	movne	r0, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    16b2:	07a4      	lsls	r4, r4, #30
    16b4:	d509      	bpl.n	16ca <mem_manage_fault.constprop.0+0x36>
		uint32_t temp = SCB->MMFAR;
    16b6:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    16b8:	6a98      	ldr	r0, [r3, #40]	; 0x28
    16ba:	0600      	lsls	r0, r0, #24
    16bc:	d504      	bpl.n	16c8 <mem_manage_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
    16be:	b11a      	cbz	r2, 16c8 <mem_manage_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    16c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    16c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    16c6:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    16c8:	2013      	movs	r0, #19
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    16ca:	4b0f      	ldr	r3, [pc, #60]	; (1708 <mem_manage_fault.constprop.0+0x74>)
    16cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    16ce:	f012 0f01 	tst.w	r2, #1
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    16d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    16d4:	bf18      	it	ne
    16d6:	2014      	movne	r0, #20
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    16d8:	f012 0f20 	tst.w	r2, #32
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    16dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    16de:	bf18      	it	ne
    16e0:	2015      	movne	r0, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    16e2:	06d4      	lsls	r4, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    16e4:	bf58      	it	pl
    16e6:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    16e8:	4b07      	ldr	r3, [pc, #28]	; (1708 <mem_manage_fault.constprop.0+0x74>)
    16ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    16ec:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    16ee:	bf42      	ittt	mi
    16f0:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    16f2:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    16f6:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    16f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    16fa:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    16fe:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1700:	2300      	movs	r3, #0
    1702:	700b      	strb	r3, [r1, #0]
}
    1704:	bd10      	pop	{r4, pc}
    1706:	bf00      	nop
    1708:	e000ed00 	.word	0xe000ed00

0000170c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    170c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    170e:	4b44      	ldr	r3, [pc, #272]	; (1820 <z_arm_fault+0x114>)
{
    1710:	4606      	mov	r6, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1712:	685b      	ldr	r3, [r3, #4]
    1714:	2500      	movs	r5, #0
{
    1716:	b08a      	sub	sp, #40	; 0x28
    1718:	f3c3 0308 	ubfx	r3, r3, #0, #9
    171c:	f385 8811 	msr	BASEPRI, r5
    1720:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1724:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    1728:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    172c:	d111      	bne.n	1752 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    172e:	f002 000c 	and.w	r0, r2, #12
    1732:	2808      	cmp	r0, #8
    1734:	d00d      	beq.n	1752 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1736:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    1738:	bf4c      	ite	mi
    173a:	460e      	movmi	r6, r1
			*nested_exc = true;
    173c:	2501      	movpl	r5, #1
	*recoverable = false;
    173e:	2200      	movs	r2, #0
	switch (fault) {
    1740:	3b03      	subs	r3, #3
	*recoverable = false;
    1742:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    1746:	2b03      	cmp	r3, #3
    1748:	d805      	bhi.n	1756 <z_arm_fault+0x4a>
    174a:	e8df f003 	tbb	[pc, r3]
    174e:	5c1e      	.short	0x5c1e
    1750:	5960      	.short	0x5960
		return NULL;
    1752:	462e      	mov	r6, r5
    1754:	e7f3      	b.n	173e <z_arm_fault+0x32>
    1756:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1758:	f89d 3007 	ldrb.w	r3, [sp, #7]
    175c:	b99b      	cbnz	r3, 1786 <z_arm_fault+0x7a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    175e:	2220      	movs	r2, #32
    1760:	4631      	mov	r1, r6
    1762:	a802      	add	r0, sp, #8
    1764:	f002 ffbb 	bl	46de <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1768:	9b09      	ldr	r3, [sp, #36]	; 0x24
    176a:	2d00      	cmp	r5, #0
    176c:	d053      	beq.n	1816 <z_arm_fault+0x10a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    176e:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1772:	b922      	cbnz	r2, 177e <z_arm_fault+0x72>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1774:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1778:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    177c:	9309      	str	r3, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    177e:	4620      	mov	r0, r4
    1780:	a902      	add	r1, sp, #8
    1782:	f002 ff57 	bl	4634 <z_arm_fatal_error>
}
    1786:	b00a      	add	sp, #40	; 0x28
    1788:	bd70      	pop	{r4, r5, r6, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    178a:	4b25      	ldr	r3, [pc, #148]	; (1820 <z_arm_fault+0x114>)
    178c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    178e:	0791      	lsls	r1, r2, #30
    1790:	d4e1      	bmi.n	1756 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1794:	2a00      	cmp	r2, #0
    1796:	dbde      	blt.n	1756 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    179a:	0052      	lsls	r2, r2, #1
    179c:	d5db      	bpl.n	1756 <z_arm_fault+0x4a>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    179e:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    17a0:	69b1      	ldr	r1, [r6, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    17a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    17a6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    17a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    17ac:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    17b0:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    17b2:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    17b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    17ba:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    17bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    17c0:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    17c4:	f64d 7202 	movw	r2, #57090	; 0xdf02
    17c8:	4291      	cmp	r1, r2
    17ca:	d009      	beq.n	17e0 <z_arm_fault+0xd4>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    17cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    17ce:	b2d2      	uxtb	r2, r2
    17d0:	b142      	cbz	r2, 17e4 <z_arm_fault+0xd8>
			reason = mem_manage_fault(esf, 1, recoverable);
    17d2:	2001      	movs	r0, #1
    17d4:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    17d8:	f7ff ff5c 	bl	1694 <mem_manage_fault.constprop.0>
		reason = usage_fault(esf);
    17dc:	4604      	mov	r4, r0
		break;
    17de:	e7bb      	b.n	1758 <z_arm_fault+0x4c>
			reason = esf->basic.r0;
    17e0:	6834      	ldr	r4, [r6, #0]
    17e2:	e7b9      	b.n	1758 <z_arm_fault+0x4c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    17e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    17e6:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    17ea:	d005      	beq.n	17f8 <z_arm_fault+0xec>
			reason = bus_fault(esf, 1, recoverable);
    17ec:	2001      	movs	r0, #1
    17ee:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    17f2:	f7ff ff19 	bl	1628 <bus_fault.constprop.0>
    17f6:	e7f1      	b.n	17dc <z_arm_fault+0xd0>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    17f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    17fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    17fe:	d3aa      	bcc.n	1756 <z_arm_fault+0x4a>
		reason = usage_fault(esf);
    1800:	f7ff fee4 	bl	15cc <usage_fault.constprop.0>
    1804:	e7ea      	b.n	17dc <z_arm_fault+0xd0>
		reason = mem_manage_fault(esf, 0, recoverable);
    1806:	2000      	movs	r0, #0
    1808:	f10d 0107 	add.w	r1, sp, #7
    180c:	e7e4      	b.n	17d8 <z_arm_fault+0xcc>
		reason = bus_fault(esf, 0, recoverable);
    180e:	2000      	movs	r0, #0
    1810:	f10d 0107 	add.w	r1, sp, #7
    1814:	e7ed      	b.n	17f2 <z_arm_fault+0xe6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1816:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    181a:	f023 0301 	bic.w	r3, r3, #1
    181e:	e7ad      	b.n	177c <z_arm_fault+0x70>
    1820:	e000ed00 	.word	0xe000ed00

00001824 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1824:	4b04      	ldr	r3, [pc, #16]	; (1838 <z_arm_fault_init+0x14>)
    1826:	695a      	ldr	r2, [r3, #20]
    1828:	f042 0210 	orr.w	r2, r2, #16
    182c:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    182e:	695a      	ldr	r2, [r3, #20]
    1830:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    1834:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    1836:	4770      	bx	lr
    1838:	e000ed00 	.word	0xe000ed00

0000183c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    183c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1840:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1844:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1846:	4672      	mov	r2, lr
	bl z_arm_fault
    1848:	f7ff ff60 	bl	170c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    184c:	bd01      	pop	{r0, pc}
    184e:	bf00      	nop

00001850 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1850:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1852:	2120      	movs	r1, #32
    1854:	4803      	ldr	r0, [pc, #12]	; (1864 <z_arm_interrupt_init+0x14>)
    1856:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1858:	3301      	adds	r3, #1
    185a:	2b45      	cmp	r3, #69	; 0x45
    185c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1860:	d1f9      	bne.n	1856 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1862:	4770      	bx	lr
    1864:	e000e100 	.word	0xe000e100

00001868 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1868:	2000      	movs	r0, #0
    msr CONTROL, r0
    186a:	f380 8814 	msr	CONTROL, r0
    isb
    186e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    1872:	2000      	movs	r0, #0
    msr MSPLIM, r0
    1874:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    1878:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    187c:	f7ff fb3e 	bl	efc <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1880:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1882:	490e      	ldr	r1, [pc, #56]	; (18bc <__start+0x54>)
    str r0, [r1]
    1884:	6008      	str	r0, [r1, #0]
    dsb
    1886:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    188a:	480d      	ldr	r0, [pc, #52]	; (18c0 <__start+0x58>)
    msr msp, r0
    188c:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1890:	f000 f83e 	bl	1910 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1894:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1896:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    189a:	480a      	ldr	r0, [pc, #40]	; (18c4 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    189c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    18a0:	1840      	adds	r0, r0, r1
    msr PSP, r0
    18a2:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    18a6:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    18aa:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    18ac:	4308      	orrs	r0, r1
    msr CONTROL, r0
    18ae:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    18b2:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    18b6:	f7ff fdb9 	bl	142c <z_arm_prep_c>
    18ba:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    18bc:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    18c0:	20001cf0 	.word	0x20001cf0
    ldr r0, =z_interrupt_stacks
    18c4:	20000fb0 	.word	0x20000fb0

000018c8 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    18c8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    18cc:	4905      	ldr	r1, [pc, #20]	; (18e4 <sys_arch_reboot+0x1c>)
    18ce:	4b06      	ldr	r3, [pc, #24]	; (18e8 <sys_arch_reboot+0x20>)
    18d0:	68ca      	ldr	r2, [r1, #12]
    18d2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    18d6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    18d8:	60cb      	str	r3, [r1, #12]
    18da:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    18de:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    18e0:	e7fd      	b.n	18de <sys_arch_reboot+0x16>
    18e2:	bf00      	nop
    18e4:	e000ed00 	.word	0xe000ed00
    18e8:	05fa0004 	.word	0x05fa0004

000018ec <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    18ec:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    18ee:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    18f0:	4906      	ldr	r1, [pc, #24]	; (190c <z_arm_clear_arm_mpu_config+0x20>)
    18f2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    18f6:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    18fa:	4293      	cmp	r3, r2
    18fc:	db00      	blt.n	1900 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    18fe:	4770      	bx	lr
  mpu->RNR = rnr;
    1900:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    1904:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    1908:	3301      	adds	r3, #1
    190a:	e7f6      	b.n	18fa <z_arm_clear_arm_mpu_config+0xe>
    190c:	e000ed00 	.word	0xe000ed00

00001910 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1910:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1912:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1914:	2400      	movs	r4, #0
    1916:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    191a:	f7ff ffe7 	bl	18ec <z_arm_clear_arm_mpu_config>
    191e:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1924:	4a0c      	ldr	r2, [pc, #48]	; (1958 <z_arm_init_arch_hw_at_boot+0x48>)
    1926:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    192a:	3301      	adds	r3, #1
    192c:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    192e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1932:	d1f8      	bne.n	1926 <z_arm_init_arch_hw_at_boot+0x16>
    1934:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1936:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    193a:	4a07      	ldr	r2, [pc, #28]	; (1958 <z_arm_init_arch_hw_at_boot+0x48>)
    193c:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1940:	3301      	adds	r3, #1
    1942:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1944:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1948:	d1f8      	bne.n	193c <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    194a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    194c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1950:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1954:	bd10      	pop	{r4, pc}
    1956:	bf00      	nop
    1958:	e000e100 	.word	0xe000e100

0000195c <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    195c:	4b08      	ldr	r3, [pc, #32]	; (1980 <z_impl_k_thread_abort+0x24>)
    195e:	689b      	ldr	r3, [r3, #8]
    1960:	4283      	cmp	r3, r0
    1962:	d10b      	bne.n	197c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1964:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1968:	b143      	cbz	r3, 197c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    196a:	4b06      	ldr	r3, [pc, #24]	; (1984 <z_impl_k_thread_abort+0x28>)
    196c:	685a      	ldr	r2, [r3, #4]
    196e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1972:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    1974:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1976:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    197a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    197c:	f002 b9ae 	b.w	3cdc <z_thread_abort>
    1980:	20000990 	.word	0x20000990
    1984:	e000ed00 	.word	0xe000ed00

00001988 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    1988:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    198a:	4c09      	ldr	r4, [pc, #36]	; (19b0 <z_arm_configure_static_mpu_regions+0x28>)
    198c:	4a09      	ldr	r2, [pc, #36]	; (19b4 <z_arm_configure_static_mpu_regions+0x2c>)
    198e:	4623      	mov	r3, r4
    1990:	2101      	movs	r1, #1
    1992:	4809      	ldr	r0, [pc, #36]	; (19b8 <z_arm_configure_static_mpu_regions+0x30>)
    1994:	f000 f8ea 	bl	1b6c <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    1998:	2300      	movs	r3, #0
    199a:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    199c:	4b07      	ldr	r3, [pc, #28]	; (19bc <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    199e:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    19a0:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    19a2:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    19a4:	9301      	str	r3, [sp, #4]
    19a6:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    19a8:	f000 f8ea 	bl	1b80 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    19ac:	b004      	add	sp, #16
    19ae:	bd10      	pop	{r4, pc}
    19b0:	20080000 	.word	0x20080000
    19b4:	20000000 	.word	0x20000000
    19b8:	00005314 	.word	0x00005314
    19bc:	20000170 	.word	0x20000170

000019c0 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    19c0:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
    19c2:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    19c4:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    19c6:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
    19ca:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    19ce:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    19d0:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    19d2:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    19d4:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
    19d8:	4905      	ldr	r1, [pc, #20]	; (19f0 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    19da:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    19de:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
    19e2:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
    19e6:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
    19ea:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    19ee:	bd10      	pop	{r4, pc}
    19f0:	e000ed00 	.word	0xe000ed00

000019f4 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    19f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    19f8:	460f      	mov	r7, r1
    19fa:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    19fc:	4606      	mov	r6, r0
    19fe:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = rnr;
    1a02:	4d4e      	ldr	r5, [pc, #312]	; (1b3c <mpu_configure_regions_and_partition.constprop.0+0x148>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    1a04:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    1a06:	45b8      	cmp	r8, r7
    1a08:	f280 8094 	bge.w	1b34 <mpu_configure_regions_and_partition.constprop.0+0x140>
		if (regions[i].size == 0U) {
    1a0c:	f8d6 9004 	ldr.w	r9, [r6, #4]
    1a10:	f1b9 0f00 	cmp.w	r9, #0
    1a14:	d036      	beq.n	1a84 <mpu_configure_regions_and_partition.constprop.0+0x90>
		&&
    1a16:	f1b9 0f1f 	cmp.w	r9, #31
    1a1a:	f240 8089 	bls.w	1b30 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		&&
    1a1e:	f019 0f1f 	tst.w	r9, #31
    1a22:	f040 8085 	bne.w	1b30 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		((part->start &
    1a26:	f8d6 a000 	ldr.w	sl, [r6]
		&&
    1a2a:	f01a 0f1f 	tst.w	sl, #31
    1a2e:	d17f      	bne.n	1b30 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1a30:	4650      	mov	r0, sl
    1a32:	f002 fe14 	bl	465e <arm_cmse_mpu_region_get>
    1a36:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1a38:	eb09 000a 	add.w	r0, r9, sl
    1a3c:	3801      	subs	r0, #1
    1a3e:	f002 fe0e 	bl	465e <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    1a42:	4583      	cmp	fp, r0
    1a44:	d174      	bne.n	1b30 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
    1a46:	f11b 0f16 	cmn.w	fp, #22
    1a4a:	d071      	beq.n	1b30 <mpu_configure_regions_and_partition.constprop.0+0x13c>
    1a4c:	455c      	cmp	r4, fp
    1a4e:	dd6f      	ble.n	1b30 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	MPU->RNR = rnr;
    1a50:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    1a54:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
    1a58:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RLAR;
    1a5c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    1a60:	f021 011f 	bic.w	r1, r1, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    1a64:	f043 0a1f 	orr.w	sl, r3, #31
		 * The new memory region is to be placed inside the underlying
		 * region, possibly splitting the underlying region into two.
		 */
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
		uint32_t u_reg_last = mpu_region_get_last_addr(u_reg_index);
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    1a68:	e9d6 3200 	ldrd	r3, r2, [r6]
    1a6c:	441a      	add	r2, r3

		if ((regions[i].start == u_reg_base) &&
    1a6e:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    1a70:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
		if ((regions[i].start == u_reg_base) &&
    1a74:	d11e      	bne.n	1ab4 <mpu_configure_regions_and_partition.constprop.0+0xc0>
    1a76:	45ca      	cmp	sl, r9
    1a78:	d108      	bne.n	1a8c <mpu_configure_regions_and_partition.constprop.0+0x98>
			 * underlying region. In this case we simply
			 * update the partition attributes of the
			 * underlying region with those of the new
			 * region.
			 */
			mpu_configure_region(u_reg_index, &regions[i]);
    1a7a:	4631      	mov	r1, r6
    1a7c:	fa5f f08b 	uxtb.w	r0, fp
    1a80:	f002 fdf6 	bl	4670 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    1a84:	f108 0801 	add.w	r8, r8, #1
    1a88:	360c      	adds	r6, #12
    1a8a:	e7bc      	b.n	1a06 <mpu_configure_regions_and_partition.constprop.0+0x12>
			 */
			mpu_region_set_base(u_reg_index,
				regions[i].start + regions[i].size);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    1a8c:	4631      	mov	r1, r6
	MPU->RNR = rnr;
    1a8e:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    1a92:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
    1a96:	f022 021f 	bic.w	r2, r2, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    1a9a:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    1a9e:	4313      	orrs	r3, r2
	MPU->RBAR = rbar;
    1aa0:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    1aa4:	b2e0      	uxtb	r0, r4
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    1aa6:	f002 fde3 	bl	4670 <mpu_configure_region>

			if (reg_index == -EINVAL) {
    1aaa:	f110 0f16 	cmn.w	r0, #22
    1aae:	d03f      	beq.n	1b30 <mpu_configure_regions_and_partition.constprop.0+0x13c>

			if (reg_index == -EINVAL) {
				return reg_index;
			}

			reg_index++;
    1ab0:	1c44      	adds	r4, r0, #1
    1ab2:	e7e7      	b.n	1a84 <mpu_configure_regions_and_partition.constprop.0+0x90>
	MPU->RNR = rnr;
    1ab4:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RLAR;
    1ab8:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				regions[i].start - 1);
    1abc:	3b01      	subs	r3, #1
		     | (limit & MPU_RLAR_LIMIT_Msk));
    1abe:	f023 031f 	bic.w	r3, r3, #31
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    1ac2:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    1ac6:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    1ac8:	45ca      	cmp	sl, r9
				mpu_configure_region(reg_index, &regions[i]);
    1aca:	4631      	mov	r1, r6
				mpu_configure_region(reg_index, &regions[i]);
    1acc:	b2e0      	uxtb	r0, r4
	MPU->RLAR = rlar;
    1ace:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		} else if (reg_last == u_reg_last) {
    1ad2:	d0e8      	beq.n	1aa6 <mpu_configure_regions_and_partition.constprop.0+0xb2>
				mpu_configure_region(reg_index, &regions[i]);
    1ad4:	f002 fdcc 	bl	4670 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    1ad8:	f110 0f16 	cmn.w	r0, #22
    1adc:	d028      	beq.n	1b30 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	MPU->RNR = rnr;
    1ade:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    1ae2:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    1ae6:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    1aea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	attr->rbar = mpu_get_rbar() &
    1aee:	f362 0304 	bfi	r3, r2, #0, #5
    1af2:	f88d 3008 	strb.w	r3, [sp, #8]
	return MPU->RLAR;
    1af6:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    1afa:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1afe:	085b      	lsrs	r3, r3, #1
    1b00:	f363 1247 	bfi	r2, r3, #5, #3
    1b04:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    1b08:	e9d6 3200 	ldrd	r3, r2, [r6]
    1b0c:	4413      	add	r3, r2
    1b0e:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    1b10:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    1b14:	1c41      	adds	r1, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    1b16:	4453      	add	r3, sl
    1b18:	eba3 0309 	sub.w	r3, r3, r9
    1b1c:	b2c8      	uxtb	r0, r1
    1b1e:	f023 031f 	bic.w	r3, r3, #31

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    1b22:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
    1b24:	9303      	str	r3, [sp, #12]
    1b26:	d803      	bhi.n	1b30 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    1b28:	4669      	mov	r1, sp
    1b2a:	f7ff ff49 	bl	19c0 <region_init>
    1b2e:	e7bf      	b.n	1ab0 <mpu_configure_regions_and_partition.constprop.0+0xbc>
			return -EINVAL;
    1b30:	f06f 0415 	mvn.w	r4, #21
		}
	}

	return reg_index;
}
    1b34:	4620      	mov	r0, r4
    1b36:	b005      	add	sp, #20
    1b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b3c:	e000ed00 	.word	0xe000ed00

00001b40 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1b40:	2205      	movs	r2, #5
    1b42:	4b04      	ldr	r3, [pc, #16]	; (1b54 <arm_core_mpu_enable+0x14>)
    1b44:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    1b48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b4c:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1b50:	4770      	bx	lr
    1b52:	bf00      	nop
    1b54:	e000ed00 	.word	0xe000ed00

00001b58 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1b58:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1b5c:	2200      	movs	r2, #0
    1b5e:	4b02      	ldr	r3, [pc, #8]	; (1b68 <arm_core_mpu_disable+0x10>)
    1b60:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    1b64:	4770      	bx	lr
    1b66:	bf00      	nop
    1b68:	e000ed00 	.word	0xe000ed00

00001b6c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    1b6c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    1b6e:	4c03      	ldr	r4, [pc, #12]	; (1b7c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    1b70:	7822      	ldrb	r2, [r4, #0]
    1b72:	f7ff ff3f 	bl	19f4 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1b76:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    1b78:	bd10      	pop	{r4, pc}
    1b7a:	bf00      	nop
    1b7c:	20000b9c 	.word	0x20000b9c

00001b80 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    1b80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b84:	4d29      	ldr	r5, [pc, #164]	; (1c2c <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
    1b86:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
    1b88:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1b8a:	f04f 0800 	mov.w	r8, #0
    1b8e:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
    1b90:	4f27      	ldr	r7, [pc, #156]	; (1c30 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1b92:	45d0      	cmp	r8, sl
    1b94:	da1b      	bge.n	1bce <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    1b96:	f8d6 9004 	ldr.w	r9, [r6, #4]
    1b9a:	f1b9 0f00 	cmp.w	r9, #0
    1b9e:	d03f      	beq.n	1c20 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    1ba0:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1ba2:	4608      	mov	r0, r1
    1ba4:	9101      	str	r1, [sp, #4]
    1ba6:	f002 fd5a 	bl	465e <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1baa:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1bac:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1bae:	eb09 0001 	add.w	r0, r9, r1
    1bb2:	3801      	subs	r0, #1
    1bb4:	f002 fd53 	bl	465e <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    1bb8:	4284      	cmp	r4, r0
    1bba:	f04f 0214 	mov.w	r2, #20
    1bbe:	4b1d      	ldr	r3, [pc, #116]	; (1c34 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
    1bc0:	d008      	beq.n	1bd4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    1bc2:	fb02 f308 	mul.w	r3, r2, r8
    1bc6:	f06f 0215 	mvn.w	r2, #21
    1bca:	f84b 2003 	str.w	r2, [fp, r3]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    1bce:	b003      	add	sp, #12
    1bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    1bd4:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    1bd8:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    1bda:	d0f8      	beq.n	1bce <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    1bdc:	7819      	ldrb	r1, [r3, #0]
    1bde:	42a1      	cmp	r1, r4
    1be0:	ddf5      	ble.n	1bce <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
    1be2:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
    1be6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
    1bea:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
    1bee:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    1bf2:	f100 0108 	add.w	r1, r0, #8
    1bf6:	7b00      	ldrb	r0, [r0, #12]
    1bf8:	f364 0004 	bfi	r0, r4, #0, #5
    1bfc:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
    1bfe:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    1c02:	790c      	ldrb	r4, [r1, #4]
    1c04:	0840      	lsrs	r0, r0, #1
    1c06:	f360 1447 	bfi	r4, r0, #5, #3
    1c0a:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
    1c0c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    1c10:	f021 011f 	bic.w	r1, r1, #31
    1c14:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
    1c16:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    1c1a:	f021 011f 	bic.w	r1, r1, #31
    1c1e:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1c20:	f108 0801 	add.w	r8, r8, #1
    1c24:	3514      	adds	r5, #20
    1c26:	360c      	adds	r6, #12
    1c28:	e7b3      	b.n	1b92 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    1c2a:	bf00      	nop
    1c2c:	200007f0 	.word	0x200007f0
    1c30:	e000ed00 	.word	0xe000ed00
    1c34:	20000b9c 	.word	0x20000b9c

00001c38 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    1c38:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1c3a:	4d0e      	ldr	r5, [pc, #56]	; (1c74 <z_arm_mpu_init+0x3c>)
    1c3c:	682c      	ldr	r4, [r5, #0]
    1c3e:	2c08      	cmp	r4, #8
    1c40:	d815      	bhi.n	1c6e <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1c42:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    1c44:	f7ff ff88 	bl	1b58 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
    1c48:	4b0b      	ldr	r3, [pc, #44]	; (1c78 <z_arm_mpu_init+0x40>)
    1c4a:	4a0c      	ldr	r2, [pc, #48]	; (1c7c <z_arm_mpu_init+0x44>)
    1c4c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1c50:	4284      	cmp	r4, r0
    1c52:	d105      	bne.n	1c60 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1c54:	4b0a      	ldr	r3, [pc, #40]	; (1c80 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    1c56:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
    1c58:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    1c5a:	f7ff ff71 	bl	1b40 <arm_core_mpu_enable>
}
    1c5e:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    1c60:	6869      	ldr	r1, [r5, #4]
    1c62:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    1c66:	f7ff feab 	bl	19c0 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1c6a:	3001      	adds	r0, #1
    1c6c:	e7f0      	b.n	1c50 <z_arm_mpu_init+0x18>
		return -1;
    1c6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1c72:	e7f4      	b.n	1c5e <z_arm_mpu_init+0x26>
    1c74:	00005320 	.word	0x00005320
    1c78:	e000ed00 	.word	0xe000ed00
    1c7c:	0044ffaa 	.word	0x0044ffaa
    1c80:	20000b9c 	.word	0x20000b9c

00001c84 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    1c84:	4b01      	ldr	r3, [pc, #4]	; (1c8c <__stdout_hook_install+0x8>)
    1c86:	6018      	str	r0, [r3, #0]
}
    1c88:	4770      	bx	lr
    1c8a:	bf00      	nop
    1c8c:	20000028 	.word	0x20000028

00001c90 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1c90:	4b08      	ldr	r3, [pc, #32]	; (1cb4 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1c92:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1c94:	1ac3      	subs	r3, r0, r3
{
    1c96:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1c98:	4907      	ldr	r1, [pc, #28]	; (1cb8 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    1c9a:	109b      	asrs	r3, r3, #2
{
    1c9c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1c9e:	4359      	muls	r1, r3
    1ca0:	2240      	movs	r2, #64	; 0x40
    1ca2:	4806      	ldr	r0, [pc, #24]	; (1cbc <onoff_stop+0x2c>)
    1ca4:	f002 fd4e 	bl	4744 <stop>
	notify(mgr, res);
    1ca8:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1caa:	4601      	mov	r1, r0
	notify(mgr, res);
    1cac:	4620      	mov	r0, r4
}
    1cae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    1cb2:	4718      	bx	r3
    1cb4:	20000818 	.word	0x20000818
    1cb8:	b6db6db7 	.word	0xb6db6db7
    1cbc:	00005010 	.word	0x00005010

00001cc0 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1cc0:	2340      	movs	r3, #64	; 0x40
{
    1cc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1cc4:	4c0b      	ldr	r4, [pc, #44]	; (1cf4 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1cc6:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    1cc8:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1cca:	460b      	mov	r3, r1
{
    1ccc:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1cce:	490a      	ldr	r1, [pc, #40]	; (1cf8 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
    1cd0:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1cd2:	4361      	muls	r1, r4
{
    1cd4:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1cd6:	4a09      	ldr	r2, [pc, #36]	; (1cfc <onoff_start+0x3c>)
    1cd8:	4809      	ldr	r0, [pc, #36]	; (1d00 <onoff_start+0x40>)
    1cda:	f002 fd60 	bl	479e <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    1cde:	1e01      	subs	r1, r0, #0
    1ce0:	da05      	bge.n	1cee <onoff_start+0x2e>
		notify(mgr, err);
    1ce2:	4630      	mov	r0, r6
    1ce4:	462b      	mov	r3, r5
	}
}
    1ce6:	b002      	add	sp, #8
    1ce8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    1cec:	4718      	bx	r3
}
    1cee:	b002      	add	sp, #8
    1cf0:	bd70      	pop	{r4, r5, r6, pc}
    1cf2:	bf00      	nop
    1cf4:	20000818 	.word	0x20000818
    1cf8:	b6db6db7 	.word	0xb6db6db7
    1cfc:	0000480b 	.word	0x0000480b
    1d00:	00005010 	.word	0x00005010

00001d04 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    1d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1d08:	2200      	movs	r2, #0
    1d0a:	2101      	movs	r1, #1
{
    1d0c:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1d0e:	2005      	movs	r0, #5
    1d10:	f7ff fb72 	bl	13f8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1d14:	4811      	ldr	r0, [pc, #68]	; (1d5c <clk_init+0x58>)
    1d16:	f000 fdf9 	bl	290c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1d1a:	4b11      	ldr	r3, [pc, #68]	; (1d60 <clk_init+0x5c>)
    1d1c:	4298      	cmp	r0, r3
    1d1e:	d119      	bne.n	1d54 <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1d20:	f002 fec0 	bl	4aa4 <nrfx_clock_enable>
    1d24:	2400      	movs	r4, #0
	return &data->mgr[type];
    1d26:	f04f 091c 	mov.w	r9, #28
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1d2a:	270c      	movs	r7, #12
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1d2c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 1d64 <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
    1d30:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1d32:	4641      	mov	r1, r8
    1d34:	fb09 5004 	mla	r0, r9, r4, r5
    1d38:	f002 fb8b 	bl	4452 <onoff_manager_init>
		if (err < 0) {
    1d3c:	2800      	cmp	r0, #0
    1d3e:	db07      	blt.n	1d50 <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1d40:	2301      	movs	r3, #1
    1d42:	fb07 5504 	mla	r5, r7, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    1d46:	441c      	add	r4, r3
    1d48:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1d4a:	67ab      	str	r3, [r5, #120]	; 0x78
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    1d4c:	d1f0      	bne.n	1d30 <clk_init+0x2c>
	}

	return 0;
    1d4e:	2000      	movs	r0, #0
}
    1d50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    1d54:	f06f 0004 	mvn.w	r0, #4
    1d58:	e7fa      	b.n	1d50 <clk_init+0x4c>
    1d5a:	bf00      	nop
    1d5c:	00001d9d 	.word	0x00001d9d
    1d60:	0bad0000 	.word	0x0bad0000
    1d64:	00005348 	.word	0x00005348

00001d68 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    1d68:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    1d6a:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    1d6c:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    1d6e:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    1d70:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    1d72:	4808      	ldr	r0, [pc, #32]	; (1d94 <clkstarted_handle.constprop.0+0x2c>)
    1d74:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    1d76:	3378      	adds	r3, #120	; 0x78
    1d78:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
    1d7a:	e9d4 561c 	ldrd	r5, r6, [r4, #112]	; 0x70
	sub_data->cb = NULL;
    1d7e:	6722      	str	r2, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    1d80:	f002 fccd 	bl	471e <set_on_state>
	if (callback) {
    1d84:	b12d      	cbz	r5, 1d92 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    1d86:	4632      	mov	r2, r6
    1d88:	462b      	mov	r3, r5
}
    1d8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    1d8e:	4802      	ldr	r0, [pc, #8]	; (1d98 <clkstarted_handle.constprop.0+0x30>)
    1d90:	4718      	bx	r3
}
    1d92:	bd70      	pop	{r4, r5, r6, pc}
    1d94:	20000818 	.word	0x20000818
    1d98:	00005010 	.word	0x00005010

00001d9c <clock_event_handler>:
	switch (event) {
    1d9c:	2805      	cmp	r0, #5
    1d9e:	d811      	bhi.n	1dc4 <clock_event_handler+0x28>
    1da0:	e8df f000 	tbb	[pc, r0]
    1da4:	10100e03 	.word	0x10100e03
    1da8:	0a0c      	.short	0x0a0c
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1daa:	4b07      	ldr	r3, [pc, #28]	; (1dc8 <clock_event_handler+0x2c>)
    1dac:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1dae:	f010 0007 	ands.w	r0, r0, #7
    1db2:	d107      	bne.n	1dc4 <clock_event_handler+0x28>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1db4:	f7ff bfd8 	b.w	1d68 <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    1db8:	2002      	movs	r0, #2
    1dba:	e7fb      	b.n	1db4 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    1dbc:	2003      	movs	r0, #3
    1dbe:	e7f9      	b.n	1db4 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1dc0:	2001      	movs	r0, #1
    1dc2:	e7f7      	b.n	1db4 <clock_event_handler+0x18>
}
    1dc4:	4770      	bx	lr
    1dc6:	bf00      	nop
    1dc8:	20000818 	.word	0x20000818

00001dcc <generic_hfclk_start>:
{
    1dcc:	b508      	push	{r3, lr}
	__asm__ volatile(
    1dce:	f04f 0320 	mov.w	r3, #32
    1dd2:	f3ef 8111 	mrs	r1, BASEPRI
    1dd6:	f383 8812 	msr	BASEPRI_MAX, r3
    1dda:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1dde:	4a12      	ldr	r2, [pc, #72]	; (1e28 <generic_hfclk_start+0x5c>)
    1de0:	6813      	ldr	r3, [r2, #0]
    1de2:	f043 0002 	orr.w	r0, r3, #2
    1de6:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1de8:	07da      	lsls	r2, r3, #31
    1dea:	d408      	bmi.n	1dfe <generic_hfclk_start+0x32>
	__asm__ volatile(
    1dec:	f381 8811 	msr	BASEPRI, r1
    1df0:	f3bf 8f6f 	isb	sy
}
    1df4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    1df8:	2001      	movs	r0, #1
    1dfa:	f002 be65 	b.w	4ac8 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1dfe:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1e02:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1e06:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1e0a:	07d3      	lsls	r3, r2, #31
    1e0c:	d5ee      	bpl.n	1dec <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    1e0e:	4807      	ldr	r0, [pc, #28]	; (1e2c <generic_hfclk_start+0x60>)
    1e10:	f002 fc85 	bl	471e <set_on_state>
    1e14:	f381 8811 	msr	BASEPRI, r1
    1e18:	f3bf 8f6f 	isb	sy
}
    1e1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    1e20:	2000      	movs	r0, #0
    1e22:	f7ff bfa1 	b.w	1d68 <clkstarted_handle.constprop.0>
    1e26:	bf00      	nop
    1e28:	200008b8 	.word	0x200008b8
    1e2c:	20000890 	.word	0x20000890

00001e30 <api_blocking_start>:
{
    1e30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1e32:	2200      	movs	r2, #0
    1e34:	2301      	movs	r3, #1
    1e36:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1e3a:	466b      	mov	r3, sp
    1e3c:	4a08      	ldr	r2, [pc, #32]	; (1e60 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1e3e:	f8cd d000 	str.w	sp, [sp]
    1e42:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1e46:	f002 fcd9 	bl	47fc <api_start>
	if (err < 0) {
    1e4a:	2800      	cmp	r0, #0
    1e4c:	db05      	blt.n	1e5a <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    1e4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1e52:	2300      	movs	r3, #0
    1e54:	4668      	mov	r0, sp
    1e56:	f001 fc37 	bl	36c8 <z_impl_k_sem_take>
}
    1e5a:	b005      	add	sp, #20
    1e5c:	f85d fb04 	ldr.w	pc, [sp], #4
    1e60:	00004841 	.word	0x00004841

00001e64 <generic_hfclk_stop>:
{
    1e64:	b510      	push	{r4, lr}
	__asm__ volatile(
    1e66:	f04f 0320 	mov.w	r3, #32
    1e6a:	f3ef 8411 	mrs	r4, BASEPRI
    1e6e:	f383 8812 	msr	BASEPRI_MAX, r3
    1e72:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    1e76:	4a07      	ldr	r2, [pc, #28]	; (1e94 <generic_hfclk_stop+0x30>)
    1e78:	6813      	ldr	r3, [r2, #0]
    1e7a:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    1e7e:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    1e80:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    1e82:	d402      	bmi.n	1e8a <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    1e84:	2001      	movs	r0, #1
    1e86:	f002 fe7e 	bl	4b86 <nrfx_clock_stop>
	__asm__ volatile(
    1e8a:	f384 8811 	msr	BASEPRI, r4
    1e8e:	f3bf 8f6f 	isb	sy
}
    1e92:	bd10      	pop	{r4, pc}
    1e94:	200008b8 	.word	0x200008b8

00001e98 <z_nrf_clock_control_lf_on>:
{
    1e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1e9c:	2201      	movs	r2, #1
    1e9e:	4607      	mov	r7, r0
    1ea0:	4937      	ldr	r1, [pc, #220]	; (1f80 <z_nrf_clock_control_lf_on+0xe8>)
    1ea2:	e8d1 3fef 	ldaex	r3, [r1]
    1ea6:	e8c1 2fe0 	stlex	r0, r2, [r1]
    1eaa:	2800      	cmp	r0, #0
    1eac:	d1f9      	bne.n	1ea2 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    1eae:	b933      	cbnz	r3, 1ebe <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1eb0:	4934      	ldr	r1, [pc, #208]	; (1f84 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    1eb2:	4835      	ldr	r0, [pc, #212]	; (1f88 <z_nrf_clock_control_lf_on+0xf0>)
    1eb4:	604b      	str	r3, [r1, #4]
    1eb6:	60cb      	str	r3, [r1, #12]
    1eb8:	608a      	str	r2, [r1, #8]
    1eba:	f002 fadd 	bl	4478 <onoff_request>
	switch (start_mode) {
    1ebe:	1e7b      	subs	r3, r7, #1
    1ec0:	2b01      	cmp	r3, #1
    1ec2:	d82b      	bhi.n	1f1c <z_nrf_clock_control_lf_on+0x84>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1ec4:	2f01      	cmp	r7, #1
    1ec6:	d107      	bne.n	1ed8 <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1ec8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1ecc:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1ed0:	f003 0303 	and.w	r3, r3, #3
    1ed4:	2b02      	cmp	r3, #2
    1ed6:	d021      	beq.n	1f1c <z_nrf_clock_control_lf_on+0x84>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1ed8:	f002 ff80 	bl	4ddc <k_is_in_isr>
    1edc:	4605      	mov	r5, r0
    1ede:	b9f8      	cbnz	r0, 1f20 <z_nrf_clock_control_lf_on+0x88>
	return !z_sys_post_kernel;
    1ee0:	4b2a      	ldr	r3, [pc, #168]	; (1f8c <z_nrf_clock_control_lf_on+0xf4>)
    1ee2:	781b      	ldrb	r3, [r3, #0]
    1ee4:	b1e3      	cbz	r3, 1f20 <z_nrf_clock_control_lf_on+0x88>
    p_reg->INTENCLR = mask;
    1ee6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1eea:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    1eec:	4606      	mov	r6, r0
    1eee:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1ef2:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1ef6:	f8df 8098 	ldr.w	r8, [pc, #152]	; 1f90 <z_nrf_clock_control_lf_on+0xf8>
    1efa:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    1efe:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    1f02:	03d2      	lsls	r2, r2, #15
    1f04:	d516      	bpl.n	1f34 <z_nrf_clock_control_lf_on+0x9c>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1f06:	f003 0303 	and.w	r3, r3, #3
    1f0a:	2b02      	cmp	r3, #2
    1f0c:	d001      	beq.n	1f12 <z_nrf_clock_control_lf_on+0x7a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1f0e:	2f01      	cmp	r7, #1
    1f10:	d110      	bne.n	1f34 <z_nrf_clock_control_lf_on+0x9c>
	if (isr_mode) {
    1f12:	b375      	cbz	r5, 1f72 <z_nrf_clock_control_lf_on+0xda>
    1f14:	f386 8811 	msr	BASEPRI, r6
    1f18:	f3bf 8f6f 	isb	sy
}
    1f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    1f20:	f04f 0320 	mov.w	r3, #32
    1f24:	f3ef 8611 	mrs	r6, BASEPRI
    1f28:	f383 8812 	msr	BASEPRI_MAX, r3
    1f2c:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1f30:	2501      	movs	r5, #1
    1f32:	e7de      	b.n	1ef2 <z_nrf_clock_control_lf_on+0x5a>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    1f34:	b1c5      	cbz	r5, 1f68 <z_nrf_clock_control_lf_on+0xd0>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1f36:	4630      	mov	r0, r6
    1f38:	f7ff fa22 	bl	1380 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1f3c:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    1f40:	b2db      	uxtb	r3, r3
    1f42:	2b01      	cmp	r3, #1
    1f44:	d1d9      	bne.n	1efa <z_nrf_clock_control_lf_on+0x62>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1f46:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    1f4a:	2a00      	cmp	r2, #0
    1f4c:	d0d5      	beq.n	1efa <z_nrf_clock_control_lf_on+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1f4e:	2200      	movs	r2, #0
    1f50:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    1f54:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    1f58:	2202      	movs	r2, #2
    1f5a:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
    1f5e:	2220      	movs	r2, #32
    1f60:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1f64:	60a3      	str	r3, [r4, #8]
}
    1f66:	e7c8      	b.n	1efa <z_nrf_clock_control_lf_on+0x62>
	return z_impl_k_sleep(timeout);
    1f68:	2100      	movs	r1, #0
    1f6a:	2021      	movs	r0, #33	; 0x21
    1f6c:	f001 fe96 	bl	3c9c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    1f70:	e7e4      	b.n	1f3c <z_nrf_clock_control_lf_on+0xa4>
    p_reg->INTENSET = mask;
    1f72:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1f76:	2202      	movs	r2, #2
    1f78:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    1f7c:	e7ce      	b.n	1f1c <z_nrf_clock_control_lf_on+0x84>
    1f7e:	bf00      	nop
    1f80:	20000814 	.word	0x20000814
    1f84:	20000804 	.word	0x20000804
    1f88:	20000834 	.word	0x20000834
    1f8c:	20000fae 	.word	0x20000fae
    1f90:	e000e100 	.word	0xe000e100

00001f94 <rtt_console_init>:

	return character;
}

static int rtt_console_init(void)
{
    1f94:	b510      	push	{r4, lr}

#ifdef CONFIG_PRINTK
	__printk_hook_install(rtt_console_out);
    1f96:	4c04      	ldr	r4, [pc, #16]	; (1fa8 <rtt_console_init+0x14>)
    1f98:	4620      	mov	r0, r4
    1f9a:	f7fe fa75 	bl	488 <__printk_hook_install>
#endif
	__stdout_hook_install(rtt_console_out);
    1f9e:	4620      	mov	r0, r4
    1fa0:	f7ff fe70 	bl	1c84 <__stdout_hook_install>

	return 0;
}
    1fa4:	2000      	movs	r0, #0
    1fa6:	bd10      	pop	{r4, pc}
    1fa8:	00001fad 	.word	0x00001fad

00001fac <rtt_console_out>:
{
    1fac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1fae:	4604      	mov	r4, r0
	char c = (char)character;
    1fb0:	2503      	movs	r5, #3
    1fb2:	4e13      	ldr	r6, [pc, #76]	; (2000 <CONFIG_NRF_SPU_RAM_REGION_SIZE>)
    1fb4:	f88d 0007 	strb.w	r0, [sp, #7]
		SEGGER_RTT_LOCK();
    1fb8:	f3ef 8711 	mrs	r7, BASEPRI
    1fbc:	f04f 0120 	mov.w	r1, #32
    1fc0:	f381 8811 	msr	BASEPRI, r1
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    1fc4:	2201      	movs	r2, #1
    1fc6:	f10d 0107 	add.w	r1, sp, #7
    1fca:	2000      	movs	r0, #0
    1fcc:	f001 f8a6 	bl	311c <SEGGER_RTT_WriteNoLock>
		SEGGER_RTT_UNLOCK();
    1fd0:	f387 8811 	msr	BASEPRI, r7
		if (cnt) {
    1fd4:	b120      	cbz	r0, 1fe0 <rtt_console_out+0x34>
			host_present = true;
    1fd6:	2301      	movs	r3, #1
    1fd8:	7033      	strb	r3, [r6, #0]
}
    1fda:	4620      	mov	r0, r4
    1fdc:	b003      	add	sp, #12
    1fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (host_present) {
    1fe0:	7833      	ldrb	r3, [r6, #0]
    1fe2:	2b00      	cmp	r3, #0
    1fe4:	d0f9      	beq.n	1fda <rtt_console_out+0x2e>
			if (max_cnt) {
    1fe6:	3d01      	subs	r5, #1
    1fe8:	d008      	beq.n	1ffc <rtt_console_out+0x50>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
    1fea:	f002 fef7 	bl	4ddc <k_is_in_isr>
    1fee:	2800      	cmp	r0, #0
    1ff0:	d1e2      	bne.n	1fb8 <rtt_console_out+0xc>
    1ff2:	2100      	movs	r1, #0
    1ff4:	2042      	movs	r0, #66	; 0x42
    1ff6:	f001 fe51 	bl	3c9c <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
    1ffa:	e7dd      	b.n	1fb8 <rtt_console_out+0xc>
				host_present = false;
    1ffc:	7035      	strb	r5, [r6, #0]
    1ffe:	e7ec      	b.n	1fda <rtt_console_out+0x2e>
    2000:	20000b9d 	.word	0x20000b9d

00002004 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    2004:	b530      	push	{r4, r5, lr}
	return port->config;
    2006:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2008:	f001 041f 	and.w	r4, r1, #31
    200c:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    200e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    2012:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2014:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    2018:	d105      	bne.n	2026 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    201a:	4620      	mov	r0, r4
    201c:	f000 ff20 	bl	2e60 <nrfx_gpiote_trigger_disable>

		return 0;
    2020:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    2022:	b005      	add	sp, #20
    2024:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    2026:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    2028:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    202c:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    2030:	d114      	bne.n	205c <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    2032:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    2036:	bf0c      	ite	eq
    2038:	2304      	moveq	r3, #4
    203a:	2305      	movne	r3, #5
    203c:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2040:	2300      	movs	r3, #0
    2042:	4620      	mov	r0, r4
    2044:	4619      	mov	r1, r3
    2046:	aa02      	add	r2, sp, #8
    2048:	f000 fd48 	bl	2adc <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    204c:	4b1f      	ldr	r3, [pc, #124]	; (20cc <gpio_nrfx_pin_interrupt_configure+0xc8>)
    204e:	4298      	cmp	r0, r3
    2050:	d138      	bne.n	20c4 <gpio_nrfx_pin_interrupt_configure+0xc0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    2052:	2101      	movs	r1, #1
    2054:	4620      	mov	r0, r4
    2056:	f000 febd 	bl	2dd4 <nrfx_gpiote_trigger_enable>
	return 0;
    205a:	e7e1      	b.n	2020 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    205c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    2060:	d025      	beq.n	20ae <gpio_nrfx_pin_interrupt_configure+0xaa>
    2062:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    2066:	bf14      	ite	ne
    2068:	2301      	movne	r3, #1
    206a:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    206c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    2070:	6883      	ldr	r3, [r0, #8]
    2072:	40cb      	lsrs	r3, r1
    2074:	07d9      	lsls	r1, r3, #31
    2076:	d4e3      	bmi.n	2040 <gpio_nrfx_pin_interrupt_configure+0x3c>
    2078:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    207c:	d1e0      	bne.n	2040 <gpio_nrfx_pin_interrupt_configure+0x3c>
        case 1: return NRF_P1;
    207e:	4a14      	ldr	r2, [pc, #80]	; (20d0 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    2080:	4814      	ldr	r0, [pc, #80]	; (20d4 <gpio_nrfx_pin_interrupt_configure+0xd0>)
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    2082:	0961      	lsrs	r1, r4, #5
        case 1: return NRF_P1;
    2084:	2901      	cmp	r1, #1
    2086:	bf08      	it	eq
    2088:	4602      	moveq	r2, r0
    *p_pin = pin_number & 0x1F;
    208a:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    208e:	3380      	adds	r3, #128	; 0x80
    2090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    2094:	07db      	lsls	r3, r3, #31
    2096:	d4d3      	bmi.n	2040 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2098:	f10d 0507 	add.w	r5, sp, #7
    209c:	4629      	mov	r1, r5
    209e:	4620      	mov	r0, r4
    20a0:	f000 fe44 	bl	2d2c <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    20a4:	4b0c      	ldr	r3, [pc, #48]	; (20d8 <gpio_nrfx_pin_interrupt_configure+0xd4>)
    20a6:	4298      	cmp	r0, r3
    20a8:	d003      	beq.n	20b2 <gpio_nrfx_pin_interrupt_configure+0xae>
		trigger_config.p_in_channel = &ch;
    20aa:	9503      	str	r5, [sp, #12]
    20ac:	e7c8      	b.n	2040 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    20ae:	2303      	movs	r3, #3
    20b0:	e7dc      	b.n	206c <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    20b2:	4628      	mov	r0, r5
    20b4:	f000 fe88 	bl	2dc8 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    20b8:	4b04      	ldr	r3, [pc, #16]	; (20cc <gpio_nrfx_pin_interrupt_configure+0xc8>)
    20ba:	4298      	cmp	r0, r3
    20bc:	d0f5      	beq.n	20aa <gpio_nrfx_pin_interrupt_configure+0xa6>
				return -ENOMEM;
    20be:	f06f 000b 	mvn.w	r0, #11
    20c2:	e7ae      	b.n	2022 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    20c4:	f06f 0015 	mvn.w	r0, #21
    20c8:	e7ab      	b.n	2022 <gpio_nrfx_pin_interrupt_configure+0x1e>
    20ca:	bf00      	nop
    20cc:	0bad0000 	.word	0x0bad0000
    20d0:	50842500 	.word	0x50842500
    20d4:	50842800 	.word	0x50842800
    20d8:	0bad0004 	.word	0x0bad0004

000020dc <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    20dc:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    20de:	f000 fe63 	bl	2da8 <nrfx_gpiote_is_init>
    20e2:	4604      	mov	r4, r0
    20e4:	b968      	cbnz	r0, 2102 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    20e6:	f000 fe37 	bl	2d58 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    20ea:	4b08      	ldr	r3, [pc, #32]	; (210c <gpio_nrfx_init+0x30>)
    20ec:	4298      	cmp	r0, r3
    20ee:	d10a      	bne.n	2106 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    20f0:	4621      	mov	r1, r4
    20f2:	4807      	ldr	r0, [pc, #28]	; (2110 <gpio_nrfx_init+0x34>)
    20f4:	f000 fe14 	bl	2d20 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    20f8:	4622      	mov	r2, r4
    20fa:	2105      	movs	r1, #5
    20fc:	200d      	movs	r0, #13
    20fe:	f7ff f97b 	bl	13f8 <z_arm_irq_priority_set>
		return 0;
    2102:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    2104:	bd10      	pop	{r4, pc}
		return -EIO;
    2106:	f06f 0004 	mvn.w	r0, #4
    210a:	e7fb      	b.n	2104 <gpio_nrfx_init+0x28>
    210c:	0bad0000 	.word	0x0bad0000
    2110:	00002115 	.word	0x00002115

00002114 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2114:	0942      	lsrs	r2, r0, #5
{
    2116:	4603      	mov	r3, r0
    2118:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    211a:	d002      	beq.n	2122 <nrfx_gpio_handler+0xe>
    211c:	2a01      	cmp	r2, #1
    211e:	d017      	beq.n	2150 <nrfx_gpio_handler+0x3c>
}
    2120:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2122:	4e0d      	ldr	r6, [pc, #52]	; (2158 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    2124:	6932      	ldr	r2, [r6, #16]
    2126:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2128:	2900      	cmp	r1, #0
    212a:	d0f9      	beq.n	2120 <nrfx_gpio_handler+0xc>
    212c:	2501      	movs	r5, #1
    *p_pin = pin_number & 0x1F;
    212e:	f003 031f 	and.w	r3, r3, #31
    2132:	680c      	ldr	r4, [r1, #0]
    2134:	409d      	lsls	r5, r3
    2136:	2900      	cmp	r1, #0
    2138:	d0f2      	beq.n	2120 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    213a:	688a      	ldr	r2, [r1, #8]
    213c:	402a      	ands	r2, r5
    213e:	d002      	beq.n	2146 <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    2140:	4630      	mov	r0, r6
    2142:	684b      	ldr	r3, [r1, #4]
    2144:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2146:	b12c      	cbz	r4, 2154 <nrfx_gpio_handler+0x40>
    2148:	6823      	ldr	r3, [r4, #0]
    214a:	4621      	mov	r1, r4
    214c:	461c      	mov	r4, r3
    214e:	e7f2      	b.n	2136 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2150:	4e02      	ldr	r6, [pc, #8]	; (215c <nrfx_gpio_handler+0x48>)
    2152:	e7e7      	b.n	2124 <nrfx_gpio_handler+0x10>
    2154:	4623      	mov	r3, r4
    2156:	e7f8      	b.n	214a <nrfx_gpio_handler+0x36>
    2158:	00005040 	.word	0x00005040
    215c:	00005028 	.word	0x00005028

00002160 <gpio_nrfx_pin_configure>:
{
    2160:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    2164:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2166:	f001 051f 	and.w	r5, r1, #31
    216a:	7b3b      	ldrb	r3, [r7, #12]
{
    216c:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    216e:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    2172:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2174:	4628      	mov	r0, r5
    2176:	f10d 0103 	add.w	r1, sp, #3
    217a:	f000 fdd7 	bl	2d2c <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    217e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2182:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    2184:	d10b      	bne.n	219e <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    2186:	4628      	mov	r0, r5
    2188:	f000 fe92 	bl	2eb0 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    218c:	4b3c      	ldr	r3, [pc, #240]	; (2280 <gpio_nrfx_pin_configure+0x120>)
    218e:	4598      	cmp	r8, r3
    2190:	d103      	bne.n	219a <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    2192:	f89d 0003 	ldrb.w	r0, [sp, #3]
    2196:	f000 fe11 	bl	2dbc <nrfx_gpiote_channel_free>
		return 0;
    219a:	2000      	movs	r0, #0
    219c:	e00c      	b.n	21b8 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    219e:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    21a0:	4628      	mov	r0, r5
    21a2:	4619      	mov	r1, r3
    21a4:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
    21a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    21aa:	f000 fc97 	bl	2adc <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    21ae:	4b34      	ldr	r3, [pc, #208]	; (2280 <gpio_nrfx_pin_configure+0x120>)
    21b0:	4298      	cmp	r0, r3
    21b2:	d004      	beq.n	21be <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    21b4:	f06f 0015 	mvn.w	r0, #21
}
    21b8:	b004      	add	sp, #16
    21ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    21be:	4580      	cmp	r8, r0
    21c0:	d103      	bne.n	21ca <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    21c2:	f89d 0003 	ldrb.w	r0, [sp, #3]
    21c6:	f000 fdf9 	bl	2dbc <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    21ca:	03a3      	lsls	r3, r4, #14
    21cc:	d549      	bpl.n	2262 <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    21ce:	f240 3306 	movw	r3, #774	; 0x306
    21d2:	4023      	ands	r3, r4
    21d4:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    21d8:	d019      	beq.n	220e <gpio_nrfx_pin_configure+0xae>
    21da:	d80c      	bhi.n	21f6 <gpio_nrfx_pin_configure+0x96>
    21dc:	2b06      	cmp	r3, #6
    21de:	d017      	beq.n	2210 <gpio_nrfx_pin_configure+0xb0>
    21e0:	d804      	bhi.n	21ec <gpio_nrfx_pin_configure+0x8c>
    21e2:	b1ab      	cbz	r3, 2210 <gpio_nrfx_pin_configure+0xb0>
    21e4:	2b02      	cmp	r3, #2
    21e6:	d1e5      	bne.n	21b4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    21e8:	2304      	movs	r3, #4
    21ea:	e011      	b.n	2210 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    21ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    21f0:	d1e0      	bne.n	21b4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    21f2:	2301      	movs	r3, #1
    21f4:	e00c      	b.n	2210 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    21f6:	f240 2202 	movw	r2, #514	; 0x202
    21fa:	4293      	cmp	r3, r2
    21fc:	d026      	beq.n	224c <gpio_nrfx_pin_configure+0xec>
    21fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    2202:	d025      	beq.n	2250 <gpio_nrfx_pin_configure+0xf0>
    2204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2208:	d1d4      	bne.n	21b4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    220a:	2302      	movs	r3, #2
    220c:	e000      	b.n	2210 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    220e:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    2210:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    2214:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    2218:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    221c:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    221e:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    2222:	bf4c      	ite	mi
    2224:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
    2226:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    222a:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    222c:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2230:	d510      	bpl.n	2254 <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2232:	2301      	movs	r3, #1
    2234:	687a      	ldr	r2, [r7, #4]
    2236:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    2238:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    223a:	2200      	movs	r2, #0
    223c:	4628      	mov	r0, r5
    223e:	a901      	add	r1, sp, #4
    2240:	f000 fcfa 	bl	2c38 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2244:	4b0e      	ldr	r3, [pc, #56]	; (2280 <gpio_nrfx_pin_configure+0x120>)
    2246:	4298      	cmp	r0, r3
    2248:	d0a7      	beq.n	219a <gpio_nrfx_pin_configure+0x3a>
    224a:	e7b3      	b.n	21b4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    224c:	2305      	movs	r3, #5
    224e:	e7df      	b.n	2210 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    2250:	2303      	movs	r3, #3
    2252:	e7dd      	b.n	2210 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2254:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    2256:	bf41      	itttt	mi
    2258:	2301      	movmi	r3, #1
    225a:	687a      	ldrmi	r2, [r7, #4]
    225c:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    225e:	60d3      	strmi	r3, [r2, #12]
}
    2260:	e7eb      	b.n	223a <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
    2262:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2264:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    2268:	bf4c      	ite	mi
    226a:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
    226c:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2270:	461a      	mov	r2, r3
    2272:	4628      	mov	r0, r5
    2274:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    2276:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    227a:	f000 fc2f 	bl	2adc <nrfx_gpiote_input_configure>
    227e:	e7e1      	b.n	2244 <gpio_nrfx_pin_configure+0xe4>
    2280:	0bad0000 	.word	0x0bad0000

00002284 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    2284:	2301      	movs	r3, #1
    2286:	4083      	lsls	r3, r0
{
    2288:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    228a:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    228c:	4a0b      	ldr	r2, [pc, #44]	; (22bc <compare_int_lock+0x38>)
    228e:	e8d2 1fef 	ldaex	r1, [r2]
    2292:	ea01 0504 	and.w	r5, r1, r4
    2296:	e8c2 5fe6 	stlex	r6, r5, [r2]
    229a:	2e00      	cmp	r6, #0
    229c:	d1f7      	bne.n	228e <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    229e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    22a2:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    22a4:	4806      	ldr	r0, [pc, #24]	; (22c0 <compare_int_lock+0x3c>)
    22a6:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    22aa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    22ae:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    22b2:	420b      	tst	r3, r1
}
    22b4:	bf14      	ite	ne
    22b6:	2001      	movne	r0, #1
    22b8:	2000      	moveq	r0, #0
    22ba:	bd70      	pop	{r4, r5, r6, pc}
    22bc:	200008d8 	.word	0x200008d8
    22c0:	50015000 	.word	0x50015000

000022c4 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    22c4:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    22c6:	490e      	ldr	r1, [pc, #56]	; (2300 <sys_clock_timeout_handler+0x3c>)
	return absolute_time & COUNTER_MAX;
    22c8:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    22cc:	e9d1 3400 	ldrd	r3, r4, [r1]
    22d0:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    22d2:	18c3      	adds	r3, r0, r3
    22d4:	f144 0400 	adc.w	r4, r4, #0
    22d8:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    22dc:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    22e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    22e4:	d209      	bcs.n	22fa <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    22e6:	4b07      	ldr	r3, [pc, #28]	; (2304 <sys_clock_timeout_handler+0x40>)
    22e8:	681b      	ldr	r3, [r3, #0]
    22ea:	0a1a      	lsrs	r2, r3, #8
    22ec:	061b      	lsls	r3, r3, #24
    22ee:	199c      	adds	r4, r3, r6
    22f0:	4b05      	ldr	r3, [pc, #20]	; (2308 <sys_clock_timeout_handler+0x44>)
    22f2:	f142 0500 	adc.w	r5, r2, #0
    22f6:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    22fa:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    22fc:	f001 be24 	b.w	3f48 <sys_clock_announce>
    2300:	20000180 	.word	0x20000180
    2304:	200008dc 	.word	0x200008dc
    2308:	20000188 	.word	0x20000188

0000230c <compare_int_unlock>:
	if (key) {
    230c:	b1d9      	cbz	r1, 2346 <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
    230e:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2310:	4a0d      	ldr	r2, [pc, #52]	; (2348 <compare_int_unlock+0x3c>)
    2312:	4083      	lsls	r3, r0
    2314:	e8d2 cfef 	ldaex	ip, [r2]
    2318:	ea4c 0c03 	orr.w	ip, ip, r3
    231c:	e8c2 cfe1 	stlex	r1, ip, [r2]
    2320:	2900      	cmp	r1, #0
    2322:	d1f7      	bne.n	2314 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2324:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    2328:	4a08      	ldr	r2, [pc, #32]	; (234c <compare_int_unlock+0x40>)
    232a:	4083      	lsls	r3, r0
    232c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2330:	4b07      	ldr	r3, [pc, #28]	; (2350 <compare_int_unlock+0x44>)
    2332:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    2336:	40c3      	lsrs	r3, r0
    2338:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    233a:	bf42      	ittt	mi
    233c:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    2340:	4b04      	ldrmi	r3, [pc, #16]	; (2354 <compare_int_unlock+0x48>)
    2342:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    2346:	4770      	bx	lr
    2348:	200008d8 	.word	0x200008d8
    234c:	50015000 	.word	0x50015000
    2350:	200008d4 	.word	0x200008d4
    2354:	e000e100 	.word	0xe000e100

00002358 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    2358:	4b0d      	ldr	r3, [pc, #52]	; (2390 <z_nrf_rtc_timer_read+0x38>)
    235a:	6818      	ldr	r0, [r3, #0]
    235c:	0a01      	lsrs	r1, r0, #8
    235e:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    2360:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    2364:	4b0b      	ldr	r3, [pc, #44]	; (2394 <z_nrf_rtc_timer_read+0x3c>)
    2366:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    236a:	1818      	adds	r0, r3, r0
    236c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    2370:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2374:	d20a      	bcs.n	238c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    2376:	4b08      	ldr	r3, [pc, #32]	; (2398 <z_nrf_rtc_timer_read+0x40>)
    2378:	e9d3 2300 	ldrd	r2, r3, [r3]
    237c:	4290      	cmp	r0, r2
    237e:	eb71 0303 	sbcs.w	r3, r1, r3
    2382:	d203      	bcs.n	238c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    2384:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    2388:	f141 0100 	adc.w	r1, r1, #0
}
    238c:	4770      	bx	lr
    238e:	bf00      	nop
    2390:	200008dc 	.word	0x200008dc
    2394:	50015000 	.word	0x50015000
    2398:	20000188 	.word	0x20000188

0000239c <compare_set>:
{
    239c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23a0:	4616      	mov	r6, r2
    23a2:	461f      	mov	r7, r3
    23a4:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    23a6:	f7ff ff6d 	bl	2284 <compare_int_lock>
    23aa:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    23ac:	f7ff ffd4 	bl	2358 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    23b0:	42b0      	cmp	r0, r6
    23b2:	eb71 0307 	sbcs.w	r3, r1, r7
    23b6:	d250      	bcs.n	245a <compare_set+0xbe>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    23b8:	4b38      	ldr	r3, [pc, #224]	; (249c <compare_set+0x100>)
    23ba:	1a30      	subs	r0, r6, r0
    23bc:	eb67 0101 	sbc.w	r1, r7, r1
    23c0:	4298      	cmp	r0, r3
    23c2:	f171 0100 	sbcs.w	r1, r1, #0
    23c6:	d265      	bcs.n	2494 <compare_set+0xf8>
		if (target_time != cc_data[chan].target_time) {
    23c8:	4b35      	ldr	r3, [pc, #212]	; (24a0 <compare_set+0x104>)
    23ca:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    23ce:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    23d2:	429f      	cmp	r7, r3
    23d4:	bf08      	it	eq
    23d6:	4296      	cmpeq	r6, r2
    23d8:	d049      	beq.n	246e <compare_set+0xd2>
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    23da:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    23de:	4931      	ldr	r1, [pc, #196]	; (24a4 <compare_set+0x108>)
    23e0:	fa09 f904 	lsl.w	r9, r9, r4
	event_clear(chan);
    23e4:	4620      	mov	r0, r4
	return absolute_time & COUNTER_MAX;
    23e6:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    23ea:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    23ee:	f002 fa78 	bl	48e2 <event_clear>
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    23f2:	f04f 0a03 	mov.w	sl, #3
	uint32_t cc_val = req_cc;
    23f6:	4658      	mov	r0, fp
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    23f8:	f104 0550 	add.w	r5, r4, #80	; 0x50
    23fc:	00ad      	lsls	r5, r5, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    23fe:	b2ad      	uxth	r5, r5
    2400:	f105 2550 	add.w	r5, r5, #1342197760	; 0x50005000
    p_reg->CC[ch] = cc_val;
    2404:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    2408:	4a27      	ldr	r2, [pc, #156]	; (24a8 <compare_set+0x10c>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    240a:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
    p_reg->CC[ch] = cc_val;
    240e:	9301      	str	r3, [sp, #4]
    2410:	f8dd c004 	ldr.w	ip, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    2414:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    2418:	f841 302c 	str.w	r3, [r1, ip, lsl #2]
    p_reg->EVTENSET = mask;
    241c:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    2420:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    2424:	eba0 0008 	sub.w	r0, r0, r8
    2428:	3803      	subs	r0, #3
    242a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    242e:	4290      	cmp	r0, r2
    2430:	d91d      	bls.n	246e <compare_set+0xd2>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2432:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    2434:	b160      	cbz	r0, 2450 <compare_set+0xb4>
     return p_reg->COUNTER;
    2436:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    243a:	eba8 000b 	sub.w	r0, r8, fp
    243e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    2442:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2446:	d912      	bls.n	246e <compare_set+0xd2>
					event_clear(chan);
    2448:	4620      	mov	r0, r4
    244a:	f002 fa4a 	bl	48e2 <event_clear>
    244e:	4a16      	ldr	r2, [pc, #88]	; (24a8 <compare_set+0x10c>)
			cc_val = now + cc_inc;
    2450:	eb0a 0008 	add.w	r0, sl, r8
			cc_inc++;
    2454:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    2458:	e7da      	b.n	2410 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    245a:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    245c:	4a13      	ldr	r2, [pc, #76]	; (24ac <compare_set+0x110>)
    245e:	40a3      	lsls	r3, r4
    2460:	e8d2 0fef 	ldaex	r0, [r2]
    2464:	4318      	orrs	r0, r3
    2466:	e8c2 0fe1 	stlex	r1, r0, [r2]
    246a:	2900      	cmp	r1, #0
    246c:	d1f8      	bne.n	2460 <compare_set+0xc4>
	return ret;
    246e:	2500      	movs	r5, #0
	cc_data[chan].target_time = target_time;
    2470:	490b      	ldr	r1, [pc, #44]	; (24a0 <compare_set+0x104>)
	cc_data[chan].callback = handler;
    2472:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    2474:	0123      	lsls	r3, r4, #4
    2476:	eb01 1204 	add.w	r2, r1, r4, lsl #4
	cc_data[chan].callback = handler;
    247a:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
    247c:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].user_context = user_data;
    2480:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2482:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
    2484:	4620      	mov	r0, r4
    2486:	9900      	ldr	r1, [sp, #0]
    2488:	f7ff ff40 	bl	230c <compare_int_unlock>
}
    248c:	4628      	mov	r0, r5
    248e:	b003      	add	sp, #12
    2490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    2494:	f06f 0515 	mvn.w	r5, #21
    2498:	e7f4      	b.n	2484 <compare_set+0xe8>
    249a:	bf00      	nop
    249c:	00800001 	.word	0x00800001
    24a0:	20000170 	.word	0x20000170
    24a4:	50015000 	.word	0x50015000
    24a8:	007ffffd 	.word	0x007ffffd
    24ac:	200008d4 	.word	0x200008d4

000024b0 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    24b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
    24b2:	2500      	movs	r5, #0
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    24b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    24b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    p_reg->INTENCLR = mask;
    24bc:	4c18      	ldr	r4, [pc, #96]	; (2520 <sys_clock_driver_init+0x70>)
    24be:	4b19      	ldr	r3, [pc, #100]	; (2524 <sys_clock_driver_init+0x74>)
    p_reg->INTENSET = mask;
    24c0:	2602      	movs	r6, #2
    p_reg->INTENCLR = mask;
    24c2:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    24c6:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    24ca:	4b17      	ldr	r3, [pc, #92]	; (2528 <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
    24cc:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    24d0:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    24d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    24d8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    24dc:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    24e0:	4b12      	ldr	r3, [pc, #72]	; (252c <sys_clock_driver_init+0x7c>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    24e2:	2101      	movs	r1, #1
    24e4:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    24e8:	2015      	movs	r0, #21
    24ea:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    24ee:	462a      	mov	r2, r5
    24f0:	f7fe ff82 	bl	13f8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    24f4:	2015      	movs	r0, #21
    24f6:	f7fe ff4f 	bl	1398 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    24fa:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    24fc:	4a0c      	ldr	r2, [pc, #48]	; (2530 <sys_clock_driver_init+0x80>)
    24fe:	60a3      	str	r3, [r4, #8]
    2500:	6023      	str	r3, [r4, #0]
    2502:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    2504:	4b0b      	ldr	r3, [pc, #44]	; (2534 <sys_clock_driver_init+0x84>)
    2506:	4a0c      	ldr	r2, [pc, #48]	; (2538 <sys_clock_driver_init+0x88>)
    2508:	9300      	str	r3, [sp, #0]
    250a:	4628      	mov	r0, r5
    250c:	2300      	movs	r3, #0
    250e:	9501      	str	r5, [sp, #4]
    2510:	f7ff ff44 	bl	239c <compare_set>

	z_nrf_clock_control_lf_on(mode);
    2514:	4630      	mov	r0, r6
    2516:	f7ff fcbf 	bl	1e98 <z_nrf_clock_control_lf_on>

	return 0;
}
    251a:	4628      	mov	r0, r5
    251c:	b002      	add	sp, #8
    251e:	bd70      	pop	{r4, r5, r6, pc}
    2520:	50015000 	.word	0x50015000
    2524:	000f0003 	.word	0x000f0003
    2528:	20000170 	.word	0x20000170
    252c:	e000e100 	.word	0xe000e100
    2530:	200008d8 	.word	0x200008d8
    2534:	000022c5 	.word	0x000022c5
    2538:	007fffff 	.word	0x007fffff

0000253c <rtc_nrf_isr>:
{
    253c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    2540:	4b2e      	ldr	r3, [pc, #184]	; (25fc <rtc_nrf_isr+0xc0>)
    2542:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    2546:	0790      	lsls	r0, r2, #30
    2548:	d50b      	bpl.n	2562 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    254a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    254e:	b142      	cbz	r2, 2562 <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2550:	2200      	movs	r2, #0
    2552:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
    2556:	4a2a      	ldr	r2, [pc, #168]	; (2600 <rtc_nrf_isr+0xc4>)
    2558:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    255c:	6813      	ldr	r3, [r2, #0]
    255e:	3301      	adds	r3, #1
    2560:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    2562:	4a26      	ldr	r2, [pc, #152]	; (25fc <rtc_nrf_isr+0xc0>)
    2564:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    2568:	03d9      	lsls	r1, r3, #15
    256a:	d527      	bpl.n	25bc <rtc_nrf_isr+0x80>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    256c:	4b25      	ldr	r3, [pc, #148]	; (2604 <rtc_nrf_isr+0xc8>)
    256e:	e8d3 1fef 	ldaex	r1, [r3]
    2572:	f021 0001 	bic.w	r0, r1, #1
    2576:	e8c3 0fe4 	stlex	r4, r0, [r3]
    257a:	2c00      	cmp	r4, #0
    257c:	d1f7      	bne.n	256e <rtc_nrf_isr+0x32>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    257e:	07cb      	lsls	r3, r1, #31
    2580:	d402      	bmi.n	2588 <rtc_nrf_isr+0x4c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2582:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
    2586:	b1cb      	cbz	r3, 25bc <rtc_nrf_isr+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2588:	2500      	movs	r5, #0
    258a:	4c1c      	ldr	r4, [pc, #112]	; (25fc <rtc_nrf_isr+0xc0>)
    258c:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    2590:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    2594:	f7ff fee0 	bl	2358 <z_nrf_rtc_timer_read>
    2598:	f04f 0320 	mov.w	r3, #32
    259c:	f3ef 8211 	mrs	r2, BASEPRI
    25a0:	f383 8812 	msr	BASEPRI_MAX, r3
    25a4:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    25a8:	4b17      	ldr	r3, [pc, #92]	; (2608 <rtc_nrf_isr+0xcc>)
    25aa:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    25ae:	42b0      	cmp	r0, r6
    25b0:	41b9      	sbcs	r1, r7
    25b2:	d206      	bcs.n	25c2 <rtc_nrf_isr+0x86>
	__asm__ volatile(
    25b4:	f382 8811 	msr	BASEPRI, r2
    25b8:	f3bf 8f6f 	isb	sy
}
    25bc:	b003      	add	sp, #12
    25be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    25c2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    25c6:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    25ca:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			cc_data[chan].callback = NULL;
    25ce:	601d      	str	r5, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    25d0:	e9c3 8902 	strd	r8, r9, [r3, #8]
    p_reg->EVTENCLR = mask;
    25d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    25d8:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    25dc:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    25e0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    25e4:	f382 8811 	msr	BASEPRI, r2
    25e8:	f3bf 8f6f 	isb	sy
		if (handler) {
    25ec:	2900      	cmp	r1, #0
    25ee:	d0e5      	beq.n	25bc <rtc_nrf_isr+0x80>
			handler(chan, expire_time, user_context);
    25f0:	9000      	str	r0, [sp, #0]
    25f2:	4632      	mov	r2, r6
    25f4:	463b      	mov	r3, r7
    25f6:	4628      	mov	r0, r5
    25f8:	4788      	blx	r1
    25fa:	e7df      	b.n	25bc <rtc_nrf_isr+0x80>
    25fc:	50015000 	.word	0x50015000
    2600:	200008dc 	.word	0x200008dc
    2604:	200008d4 	.word	0x200008d4
    2608:	20000170 	.word	0x20000170

0000260c <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    260c:	1c43      	adds	r3, r0, #1
{
    260e:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    2610:	d021      	beq.n	2656 <sys_clock_set_timeout+0x4a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    2612:	2801      	cmp	r0, #1
    2614:	dd21      	ble.n	265a <sys_clock_set_timeout+0x4e>
    2616:	4a12      	ldr	r2, [pc, #72]	; (2660 <sys_clock_set_timeout+0x54>)
    2618:	4b12      	ldr	r3, [pc, #72]	; (2664 <sys_clock_set_timeout+0x58>)
    261a:	4290      	cmp	r0, r2
    261c:	bfd4      	ite	le
    261e:	4604      	movle	r4, r0
    2620:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    2622:	f7ff fe99 	bl	2358 <z_nrf_rtc_timer_read>
    2626:	4b10      	ldr	r3, [pc, #64]	; (2668 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    2628:	490e      	ldr	r1, [pc, #56]	; (2664 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    262a:	e9d3 2300 	ldrd	r2, r3, [r3]
    262e:	1a80      	subs	r0, r0, r2
		cyc = 0;
    2630:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2634:	bf28      	it	cs
    2636:	2400      	movcs	r4, #0
	cyc += unannounced;
    2638:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    263a:	428c      	cmp	r4, r1
    263c:	bf28      	it	cs
    263e:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    2640:	2000      	movs	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    2642:	490a      	ldr	r1, [pc, #40]	; (266c <sys_clock_set_timeout+0x60>)
	uint64_t target_time = cyc + last_count;
    2644:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    2646:	9001      	str	r0, [sp, #4]
    2648:	9100      	str	r1, [sp, #0]
    264a:	f143 0300 	adc.w	r3, r3, #0
    264e:	f7ff fea5 	bl	239c <compare_set>
}
    2652:	b002      	add	sp, #8
    2654:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    2656:	4c03      	ldr	r4, [pc, #12]	; (2664 <sys_clock_set_timeout+0x58>)
    2658:	e7e3      	b.n	2622 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    265a:	2401      	movs	r4, #1
    265c:	e7e1      	b.n	2622 <sys_clock_set_timeout+0x16>
    265e:	bf00      	nop
    2660:	007ffffe 	.word	0x007ffffe
    2664:	007fffff 	.word	0x007fffff
    2668:	20000180 	.word	0x20000180
    266c:	000022c5 	.word	0x000022c5

00002670 <sys_clock_elapsed>:
{
    2670:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    2672:	f7ff fe71 	bl	2358 <z_nrf_rtc_timer_read>
    2676:	4b02      	ldr	r3, [pc, #8]	; (2680 <sys_clock_elapsed+0x10>)
    2678:	681b      	ldr	r3, [r3, #0]
}
    267a:	1ac0      	subs	r0, r0, r3
    267c:	bd08      	pop	{r3, pc}
    267e:	bf00      	nop
    2680:	20000180 	.word	0x20000180

00002684 <sys_clock_disable>:
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2684:	2301      	movs	r3, #1
{
    2686:	b510      	push	{r4, lr}
    2688:	4c07      	ldr	r4, [pc, #28]	; (26a8 <sys_clock_disable+0x24>)
	irq_disable(RTC_IRQn);
    268a:	2015      	movs	r0, #21
    268c:	6063      	str	r3, [r4, #4]
    268e:	f7fe fe91 	bl	13b4 <arch_irq_disable>
    2692:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->INTENCLR = mask;
    2696:	4b05      	ldr	r3, [pc, #20]	; (26ac <sys_clock_disable+0x28>)
    2698:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    269c:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    26a0:	4b03      	ldr	r3, [pc, #12]	; (26b0 <sys_clock_disable+0x2c>)
    26a2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    26a6:	bd10      	pop	{r4, pc}
    26a8:	50015000 	.word	0x50015000
    26ac:	000f0003 	.word	0x000f0003
    26b0:	e000e100 	.word	0xe000e100

000026b4 <nrf53_errata_42>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    26b4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    26b8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    26bc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    26c0:	2a07      	cmp	r2, #7
    26c2:	d105      	bne.n	26d0 <nrf53_errata_42+0x1c>
                {
                    switch(var2)
    26c4:	3b02      	subs	r3, #2
    26c6:	2b03      	cmp	r3, #3
    26c8:	d802      	bhi.n	26d0 <nrf53_errata_42+0x1c>
    26ca:	4a02      	ldr	r2, [pc, #8]	; (26d4 <nrf53_errata_42+0x20>)
    26cc:	5cd0      	ldrb	r0, [r2, r3]
    26ce:	4770      	bx	lr
                    {
                        case 0x02ul:
                            return true;
                        case 0x03ul:
                            return false;
    26d0:	2000      	movs	r0, #0
                }
            #endif
        #endif
        return false;
    #endif
}
    26d2:	4770      	bx	lr
    26d4:	00005577 	.word	0x00005577

000026d8 <SystemInit>:
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}

void SystemInit(void)
{
    26d8:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    26da:	f7ff ffeb 	bl	26b4 <nrf53_errata_42>
    26de:	b158      	cbz	r0, 26f8 <SystemInit+0x20>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    26e0:	4b64      	ldr	r3, [pc, #400]	; (2874 <SystemInit+0x19c>)
    26e2:	f8d3 2a20 	ldr.w	r2, [r3, #2592]	; 0xa20
    26e6:	b93a      	cbnz	r2, 26f8 <SystemInit+0x20>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    26e8:	210d      	movs	r1, #13
    26ea:	f8c3 1a20 	str.w	r1, [r3, #2592]	; 0xa20
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    26ee:	2101      	movs	r1, #1
    26f0:	f8c3 191c 	str.w	r1, [r3, #2332]	; 0x91c
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    26f4:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
{
    26f8:	2200      	movs	r2, #0
    26fa:	00d3      	lsls	r3, r2, #3
    26fc:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    2700:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    2704:	3101      	adds	r1, #1
    2706:	d007      	beq.n	2718 <SystemInit+0x40>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    2708:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    270c:	3201      	adds	r2, #1
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    270e:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    2712:	2a20      	cmp	r2, #32
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    2714:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    2716:	d1f0      	bne.n	26fa <SystemInit+0x22>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    2718:	f7ff ffcc 	bl	26b4 <nrf53_errata_42>
    271c:	2800      	cmp	r0, #0
    271e:	f040 80a0 	bne.w	2862 <SystemInit+0x18a>
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    2722:	f7ff ffc7 	bl	26b4 <nrf53_errata_42>
    2726:	b140      	cbz	r0, 273a <SystemInit+0x62>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    2728:	4b53      	ldr	r3, [pc, #332]	; (2878 <SystemInit+0x1a0>)
    272a:	4a54      	ldr	r2, [pc, #336]	; (287c <SystemInit+0x1a4>)
    272c:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    2730:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2734:	2201      	movs	r2, #1
    2736:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    273a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    273e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2742:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    2746:	2a07      	cmp	r2, #7
    2748:	d109      	bne.n	275e <SystemInit+0x86>
                {
                    switch(var2)
    274a:	3b02      	subs	r3, #2
    274c:	2b03      	cmp	r3, #3
    274e:	d806      	bhi.n	275e <SystemInit+0x86>
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    2750:	4a4b      	ldr	r2, [pc, #300]	; (2880 <SystemInit+0x1a8>)
    2752:	5cd3      	ldrb	r3, [r2, r3]
    2754:	b11b      	cbz	r3, 275e <SystemInit+0x86>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    2756:	2200      	movs	r2, #0
    2758:	4b4a      	ldr	r3, [pc, #296]	; (2884 <SystemInit+0x1ac>)
    275a:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    275e:	f7ff ffa9 	bl	26b4 <nrf53_errata_42>
    2762:	b150      	cbz	r0, 277a <SystemInit+0xa2>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    2764:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2768:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    276c:	07d1      	lsls	r1, r2, #31
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    276e:	bf42      	ittt	mi
    2770:	2200      	movmi	r2, #0
    2772:	f8c3 2114 	strmi.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    2776:	f8c3 2118 	strmi.w	r2, [r3, #280]	; 0x118
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    277a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    277e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2782:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    2786:	2a07      	cmp	r2, #7
    2788:	d109      	bne.n	279e <SystemInit+0xc6>

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    278a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    278e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2792:	07d2      	lsls	r2, r2, #31
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    2794:	bf44      	itt	mi
    2796:	f06f 0201 	mvnmi.w	r2, #1
    279a:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    279e:	f7ff ff89 	bl	26b4 <nrf53_errata_42>
    27a2:	b118      	cbz	r0, 27ac <SystemInit+0xd4>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    27a4:	2265      	movs	r2, #101	; 0x65
    27a6:	4b33      	ldr	r3, [pc, #204]	; (2874 <SystemInit+0x19c>)
    27a8:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    27ac:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    27b0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    27b4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                if (var1 == 0x07)
    27b8:	2a07      	cmp	r2, #7
    27ba:	d116      	bne.n	27ea <SystemInit+0x112>
        }

        if (nrf53_errata_140())
        {
            if (*(volatile uint32_t *)0x50032420 & 0x80000000)
    27bc:	4b31      	ldr	r3, [pc, #196]	; (2884 <SystemInit+0x1ac>)
    27be:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
    27c2:	2b00      	cmp	r3, #0
    27c4:	da11      	bge.n	27ea <SystemInit+0x112>
            {
                /* Reset occured during calibration */
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFSYNT;
    27c6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    27ca:	2203      	movs	r2, #3
    27cc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
                NRF_CLOCK_S->TASKS_LFCLKSTART = 1;
    27d0:	2201      	movs	r2, #1
    27d2:	609a      	str	r2, [r3, #8]
                while (NRF_CLOCK_S->EVENTS_LFCLKSTARTED == 0) {}
    27d4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    27d8:	2a00      	cmp	r2, #0
    27da:	d0fb      	beq.n	27d4 <SystemInit+0xfc>
                NRF_CLOCK_S->EVENTS_LFCLKSTARTED = 0;
    27dc:	2200      	movs	r2, #0
    27de:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                NRF_CLOCK_S->TASKS_LFCLKSTOP = 1;
    27e2:	2201      	movs	r2, #1
    27e4:	60da      	str	r2, [r3, #12]
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFRC;
    27e6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    27ea:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    27ee:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    27f2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    27f6:	2a07      	cmp	r2, #7
    27f8:	d123      	bne.n	2842 <SystemInit+0x16a>
                {
                    switch(var2)
    27fa:	3b02      	subs	r3, #2
    27fc:	2b03      	cmp	r3, #3
    27fe:	d802      	bhi.n	2806 <SystemInit+0x12e>
            }
        }

        if (nrf53_errata_160())
    2800:	4a21      	ldr	r2, [pc, #132]	; (2888 <SystemInit+0x1b0>)
    2802:	5cd3      	ldrb	r3, [r2, r3]
    2804:	b1eb      	cbz	r3, 2842 <SystemInit+0x16a>
        {
            *((volatile uint32_t *)0x5000470C) = 0x7Eul;
    2806:	227e      	movs	r2, #126	; 0x7e
    2808:	4b1a      	ldr	r3, [pc, #104]	; (2874 <SystemInit+0x19c>)
            *((volatile uint32_t *)0x5000493C) = 0x7Eul;
            *((volatile uint32_t *)0x50002118) = 0x7Ful;
            *((volatile uint32_t *)0x50039E04) = 0x0ul;
    280a:	491b      	ldr	r1, [pc, #108]	; (2878 <SystemInit+0x1a0>)
            *((volatile uint32_t *)0x5000470C) = 0x7Eul;
    280c:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000493C) = 0x7Eul;
    2810:	f8c3 293c 	str.w	r2, [r3, #2364]	; 0x93c
            *((volatile uint32_t *)0x50002118) = 0x7Ful;
    2814:	237f      	movs	r3, #127	; 0x7f
    2816:	4a1d      	ldr	r2, [pc, #116]	; (288c <SystemInit+0x1b4>)
    2818:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
            *((volatile uint32_t *)0x50039E04) = 0x0ul;
    281c:	2300      	movs	r3, #0
    281e:	f8c1 3e04 	str.w	r3, [r1, #3588]	; 0xe04
            *((volatile uint32_t *)0x50039E08) = 0x0ul;
    2822:	f8c1 3e08 	str.w	r3, [r1, #3592]	; 0xe08
            *((volatile uint32_t *)0x50101110) = 0x0ul;
    2826:	f501 2148 	add.w	r1, r1, #819200	; 0xc8000
    282a:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110
            *((volatile uint32_t *)0x50002124) = 0x0ul;
    282e:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
            *((volatile uint32_t *)0x5000212C) = 0x0ul;
    2832:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
            *((volatile uint32_t *)0x502012A0) = 0x0ul;
    2836:	f502 12ff 	add.w	r2, r2, #2088960	; 0x1fe000
    283a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    283e:	f8c2 32a0 	str.w	r3, [r2, #672]	; 0x2a0

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    2842:	4a13      	ldr	r2, [pc, #76]	; (2890 <SystemInit+0x1b8>)
    2844:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    2848:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    284c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    2850:	4a10      	ldr	r2, [pc, #64]	; (2894 <SystemInit+0x1bc>)
    2852:	4b11      	ldr	r3, [pc, #68]	; (2898 <SystemInit+0x1c0>)
    2854:	6811      	ldr	r1, [r2, #0]
    2856:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    285a:	69d2      	ldr	r2, [r2, #28]
    285c:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif
}
    2860:	bd08      	pop	{r3, pc}
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    2862:	2229      	movs	r2, #41	; 0x29
    2864:	4b03      	ldr	r3, [pc, #12]	; (2874 <SystemInit+0x19c>)
    2866:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    286a:	2203      	movs	r2, #3
    286c:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
    2870:	e757      	b.n	2722 <SystemInit+0x4a>
    2872:	bf00      	nop
    2874:	50004000 	.word	0x50004000
    2878:	50039000 	.word	0x50039000
    287c:	beef0044 	.word	0xbeef0044
    2880:	00005573 	.word	0x00005573
    2884:	50032000 	.word	0x50032000
    2888:	0000556f 	.word	0x0000556f
    288c:	50002000 	.word	0x50002000
    2890:	e000ed00 	.word	0xe000ed00
    2894:	00ff8000 	.word	0x00ff8000
    2898:	50006000 	.word	0x50006000

0000289c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    289c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    289e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    28a0:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    28a2:	fab2 f382 	clz	r3, r2
    28a6:	f1c3 031f 	rsb	r3, r3, #31
    28aa:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    28ac:	fa05 f403 	lsl.w	r4, r5, r3
    28b0:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    28b4:	e8d0 6fef 	ldaex	r6, [r0]
    28b8:	4296      	cmp	r6, r2
    28ba:	d104      	bne.n	28c6 <nrfx_flag32_alloc+0x2a>
    28bc:	e8c0 4fec 	stlex	ip, r4, [r0]
    28c0:	f1bc 0f00 	cmp.w	ip, #0
    28c4:	d1f6      	bne.n	28b4 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    28c6:	d1eb      	bne.n	28a0 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    28c8:	4801      	ldr	r0, [pc, #4]	; (28d0 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
    28ca:	700b      	strb	r3, [r1, #0]
}
    28cc:	bd70      	pop	{r4, r5, r6, pc}
    28ce:	bf00      	nop
    28d0:	0bad0000 	.word	0x0bad0000

000028d4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    28d4:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    28d6:	6803      	ldr	r3, [r0, #0]
    28d8:	40cb      	lsrs	r3, r1
    28da:	07db      	lsls	r3, r3, #31
    28dc:	d410      	bmi.n	2900 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    28de:	2301      	movs	r3, #1
    28e0:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    28e2:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    28e4:	ea43 0102 	orr.w	r1, r3, r2
    28e8:	e8d0 4fef 	ldaex	r4, [r0]
    28ec:	4294      	cmp	r4, r2
    28ee:	d104      	bne.n	28fa <nrfx_flag32_free+0x26>
    28f0:	e8c0 1fec 	stlex	ip, r1, [r0]
    28f4:	f1bc 0f00 	cmp.w	ip, #0
    28f8:	d1f6      	bne.n	28e8 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    28fa:	d1f2      	bne.n	28e2 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    28fc:	4801      	ldr	r0, [pc, #4]	; (2904 <nrfx_flag32_free+0x30>)
}
    28fe:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    2900:	4801      	ldr	r0, [pc, #4]	; (2908 <nrfx_flag32_free+0x34>)
    2902:	e7fc      	b.n	28fe <nrfx_flag32_free+0x2a>
    2904:	0bad0000 	.word	0x0bad0000
    2908:	0bad0004 	.word	0x0bad0004

0000290c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    290c:	4b04      	ldr	r3, [pc, #16]	; (2920 <nrfx_clock_init+0x14>)
    290e:	791a      	ldrb	r2, [r3, #4]
    2910:	b922      	cbnz	r2, 291c <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    2912:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    2914:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    2916:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    2918:	4802      	ldr	r0, [pc, #8]	; (2924 <nrfx_clock_init+0x18>)
    291a:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    291c:	4802      	ldr	r0, [pc, #8]	; (2928 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    291e:	4770      	bx	lr
    2920:	200008e0 	.word	0x200008e0
    2924:	0bad0000 	.word	0x0bad0000
    2928:	0bad000c 	.word	0x0bad000c

0000292c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    292c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    2930:	b510      	push	{r4, lr}
    2932:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    2936:	b152      	cbz	r2, 294e <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2938:	2000      	movs	r0, #0
    293a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    293e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    2942:	2201      	movs	r2, #1
    2944:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    2948:	4b23      	ldr	r3, [pc, #140]	; (29d8 <nrfx_power_clock_irq_handler+0xac>)
    294a:	681b      	ldr	r3, [r3, #0]
    294c:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    294e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2952:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    2956:	b18a      	cbz	r2, 297c <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2958:	2200      	movs	r2, #0
    295a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    295e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2962:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2966:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    296a:	f002 0203 	and.w	r2, r2, #3
    296e:	2a01      	cmp	r2, #1
    2970:	f04f 0102 	mov.w	r1, #2
    2974:	d128      	bne.n	29c8 <nrfx_power_clock_irq_handler+0x9c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    2976:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    297a:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    297c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2980:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    2984:	b162      	cbz	r2, 29a0 <nrfx_power_clock_irq_handler+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2986:	2200      	movs	r2, #0
    2988:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    298c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
    2990:	f44f 7280 	mov.w	r2, #256	; 0x100
    2994:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    2998:	4b0f      	ldr	r3, [pc, #60]	; (29d8 <nrfx_power_clock_irq_handler+0xac>)
    299a:	2004      	movs	r0, #4
    299c:	681b      	ldr	r3, [r3, #0]
    299e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    29a0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    29a4:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    29a8:	b1aa      	cbz	r2, 29d6 <nrfx_power_clock_irq_handler+0xaa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    29aa:	2200      	movs	r2, #0
    29ac:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    29b0:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
    29b4:	f44f 7200 	mov.w	r2, #512	; 0x200
    29b8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    29bc:	4b06      	ldr	r3, [pc, #24]	; (29d8 <nrfx_power_clock_irq_handler+0xac>)
    29be:	2005      	movs	r0, #5
    }
#endif
}
    29c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    29c4:	681b      	ldr	r3, [r3, #0]
    29c6:	4718      	bx	r3
    29c8:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    29cc:	4b02      	ldr	r3, [pc, #8]	; (29d8 <nrfx_power_clock_irq_handler+0xac>)
    29ce:	2001      	movs	r0, #1
    29d0:	681b      	ldr	r3, [r3, #0]
    29d2:	4798      	blx	r3
    29d4:	e7d2      	b.n	297c <nrfx_power_clock_irq_handler+0x50>
}
    29d6:	bd10      	pop	{r4, pc}
    29d8:	200008e0 	.word	0x200008e0

000029dc <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    29dc:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    29de:	f003 021f 	and.w	r2, r3, #31
    29e2:	6002      	str	r2, [r0, #0]
}
    29e4:	4a03      	ldr	r2, [pc, #12]	; (29f4 <nrf_gpio_pin_port_decode+0x18>)
    29e6:	4804      	ldr	r0, [pc, #16]	; (29f8 <nrf_gpio_pin_port_decode+0x1c>)
    return pin_number >> 5;
    29e8:	095b      	lsrs	r3, r3, #5
}
    29ea:	2b01      	cmp	r3, #1
    29ec:	bf18      	it	ne
    29ee:	4610      	movne	r0, r2
    29f0:	4770      	bx	lr
    29f2:	bf00      	nop
    29f4:	50842500 	.word	0x50842500
    29f8:	50842800 	.word	0x50842800

000029fc <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    29fc:	4b03      	ldr	r3, [pc, #12]	; (2a0c <pin_in_use_by_te+0x10>)
    29fe:	3008      	adds	r0, #8
    2a00:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    2a04:	f3c0 1040 	ubfx	r0, r0, #5, #1
    2a08:	4770      	bx	lr
    2a0a:	bf00      	nop
    2a0c:	20000030 	.word	0x20000030

00002a10 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    2a10:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2a12:	4c0d      	ldr	r4, [pc, #52]	; (2a48 <call_handler+0x38>)
    2a14:	f100 0308 	add.w	r3, r0, #8
    2a18:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
    2a1c:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2a1e:	05da      	lsls	r2, r3, #23
{
    2a20:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2a22:	d507      	bpl.n	2a34 <call_handler+0x24>
    2a24:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    2a28:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    2a2c:	6852      	ldr	r2, [r2, #4]
    2a2e:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    2a32:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    2a34:	68a3      	ldr	r3, [r4, #8]
    2a36:	b12b      	cbz	r3, 2a44 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    2a38:	4631      	mov	r1, r6
    2a3a:	4628      	mov	r0, r5
    2a3c:	68e2      	ldr	r2, [r4, #12]
    }
}
    2a3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    2a42:	4718      	bx	r3
}
    2a44:	bd70      	pop	{r4, r5, r6, pc}
    2a46:	bf00      	nop
    2a48:	20000030 	.word	0x20000030

00002a4c <release_handler>:
{
    2a4c:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2a4e:	4a12      	ldr	r2, [pc, #72]	; (2a98 <release_handler+0x4c>)
    2a50:	3008      	adds	r0, #8
    2a52:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    2a56:	05d9      	lsls	r1, r3, #23
    2a58:	d51b      	bpl.n	2a92 <release_handler+0x46>
    2a5a:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    2a5e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    2a62:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    2a66:	2000      	movs	r0, #0
    2a68:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    2a6c:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    2a70:	f413 7f80 	tst.w	r3, #256	; 0x100
    2a74:	d003      	beq.n	2a7e <release_handler+0x32>
    2a76:	f3c3 2343 	ubfx	r3, r3, #9, #4
    2a7a:	4299      	cmp	r1, r3
    2a7c:	d009      	beq.n	2a92 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    2a7e:	3001      	adds	r0, #1
    2a80:	2830      	cmp	r0, #48	; 0x30
    2a82:	d1f3      	bne.n	2a6c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    2a84:	2300      	movs	r3, #0
    2a86:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    2a8a:	4804      	ldr	r0, [pc, #16]	; (2a9c <release_handler+0x50>)
}
    2a8c:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    2a8e:	f7ff bf21 	b.w	28d4 <nrfx_flag32_free>
}
    2a92:	bc10      	pop	{r4}
    2a94:	4770      	bx	lr
    2a96:	bf00      	nop
    2a98:	20000030 	.word	0x20000030
    2a9c:	200000a4 	.word	0x200000a4

00002aa0 <pin_handler_trigger_uninit>:
{
    2aa0:	b538      	push	{r3, r4, r5, lr}
    2aa2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    2aa4:	f7ff ffaa 	bl	29fc <pin_in_use_by_te>
    2aa8:	4c0b      	ldr	r4, [pc, #44]	; (2ad8 <pin_handler_trigger_uninit+0x38>)
    2aaa:	f102 0508 	add.w	r5, r2, #8
    2aae:	b160      	cbz	r0, 2aca <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    2ab0:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2ab2:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    2ab6:	0b5b      	lsrs	r3, r3, #13
    2ab8:	009b      	lsls	r3, r3, #2
    2aba:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    2abe:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    2ac2:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
    2ac6:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
    2aca:	4610      	mov	r0, r2
    2acc:	f7ff ffbe 	bl	2a4c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    2ad0:	2300      	movs	r3, #0
    2ad2:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    2ad6:	bd38      	pop	{r3, r4, r5, pc}
    2ad8:	20000030 	.word	0x20000030

00002adc <nrfx_gpiote_input_configure>:
{
    2adc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    2ae0:	4604      	mov	r4, r0
    2ae2:	4690      	mov	r8, r2
    2ae4:	461d      	mov	r5, r3
    if (p_input_config)
    2ae6:	b301      	cbz	r1, 2b2a <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2ae8:	4e4f      	ldr	r6, [pc, #316]	; (2c28 <nrfx_gpiote_input_configure+0x14c>)
    2aea:	f100 0708 	add.w	r7, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    2aee:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    2af2:	079b      	lsls	r3, r3, #30
    2af4:	d502      	bpl.n	2afc <nrfx_gpiote_input_configure+0x20>
    2af6:	f7ff ff81 	bl	29fc <pin_in_use_by_te>
    2afa:	bb28      	cbnz	r0, 2b48 <nrfx_gpiote_input_configure+0x6c>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    2afc:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    2afe:	4620      	mov	r0, r4
    2b00:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    2b04:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    2b08:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    2b0c:	f10d 020f 	add.w	r2, sp, #15
    2b10:	460b      	mov	r3, r1
    2b12:	f10d 010e 	add.w	r1, sp, #14
    2b16:	f002 f838 	bl	4b8a <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    2b1a:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    2b1e:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    2b22:	f043 0301 	orr.w	r3, r3, #1
    2b26:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_trigger_config)
    2b2a:	f1b8 0f00 	cmp.w	r8, #0
    2b2e:	d02d      	beq.n	2b8c <nrfx_gpiote_input_configure+0xb0>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2b30:	4e3d      	ldr	r6, [pc, #244]	; (2c28 <nrfx_gpiote_input_configure+0x14c>)
    2b32:	f104 0708 	add.w	r7, r4, #8
    2b36:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    2b3a:	f898 0000 	ldrb.w	r0, [r8]
        if (pin_is_output(pin))
    2b3e:	078a      	lsls	r2, r1, #30
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    2b40:	f8d8 3004 	ldr.w	r3, [r8, #4]
        if (pin_is_output(pin))
    2b44:	d502      	bpl.n	2b4c <nrfx_gpiote_input_configure+0x70>
            if (use_evt)
    2b46:	b1cb      	cbz	r3, 2b7c <nrfx_gpiote_input_configure+0xa0>
            return NRFX_ERROR_INVALID_PARAM;
    2b48:	4838      	ldr	r0, [pc, #224]	; (2c2c <nrfx_gpiote_input_configure+0x150>)
    2b4a:	e021      	b.n	2b90 <nrfx_gpiote_input_configure+0xb4>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    2b4c:	f021 0120 	bic.w	r1, r1, #32
    2b50:	04c9      	lsls	r1, r1, #19
    2b52:	0cc9      	lsrs	r1, r1, #19
    2b54:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
    2b58:	b183      	cbz	r3, 2b7c <nrfx_gpiote_input_configure+0xa0>
                if (!edge)
    2b5a:	2803      	cmp	r0, #3
    2b5c:	d8f4      	bhi.n	2b48 <nrfx_gpiote_input_configure+0x6c>
                uint8_t ch = *p_trigger_config->p_in_channel;
    2b5e:	f8d8 3004 	ldr.w	r3, [r8, #4]
    2b62:	f893 c000 	ldrb.w	ip, [r3]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    2b66:	4662      	mov	r2, ip
    2b68:	0092      	lsls	r2, r2, #2
    2b6a:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    2b6e:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    2b72:	b980      	cbnz	r0, 2b96 <nrfx_gpiote_input_configure+0xba>
    p_reg->CONFIG[idx] = 0;
    2b74:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
    2b78:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    2b7c:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    2b80:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    2b84:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
    2b88:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
    2b8c:	bb1d      	cbnz	r5, 2bd6 <nrfx_gpiote_input_configure+0xfa>
        err = NRFX_SUCCESS;
    2b8e:	4828      	ldr	r0, [pc, #160]	; (2c30 <nrfx_gpiote_input_configure+0x154>)
}
    2b90:	b004      	add	sp, #16
    2b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    2b96:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    2b9a:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    2b9e:	f023 0303 	bic.w	r3, r3, #3
    2ba2:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    2ba6:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    2baa:	f041 0120 	orr.w	r1, r1, #32
    2bae:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
    2bb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    2bb6:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2bba:	0223      	lsls	r3, r4, #8
    2bbc:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    2bc0:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    2bc4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    2bc8:	ea43 030e 	orr.w	r3, r3, lr
    2bcc:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    2bd0:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
    2bd4:	e7d2      	b.n	2b7c <nrfx_gpiote_input_configure+0xa0>
    release_handler(pin);
    2bd6:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    2bd8:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    2bdc:	f7ff ff36 	bl	2a4c <release_handler>
    if (!handler)
    2be0:	2e00      	cmp	r6, #0
    2be2:	d0d4      	beq.n	2b8e <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    2be4:	4d10      	ldr	r5, [pc, #64]	; (2c28 <nrfx_gpiote_input_configure+0x14c>)
    2be6:	e9d5 2300 	ldrd	r2, r3, [r5]
    2bea:	4296      	cmp	r6, r2
    2bec:	d101      	bne.n	2bf2 <nrfx_gpiote_input_configure+0x116>
    2bee:	429f      	cmp	r7, r3
    2bf0:	d018      	beq.n	2c24 <nrfx_gpiote_input_configure+0x148>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    2bf2:	4810      	ldr	r0, [pc, #64]	; (2c34 <nrfx_gpiote_input_configure+0x158>)
    2bf4:	f10d 010f 	add.w	r1, sp, #15
    2bf8:	f7ff fe50 	bl	289c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    2bfc:	4b0c      	ldr	r3, [pc, #48]	; (2c30 <nrfx_gpiote_input_configure+0x154>)
    2bfe:	4298      	cmp	r0, r3
    2c00:	d1c6      	bne.n	2b90 <nrfx_gpiote_input_configure+0xb4>
        handler_id = (int32_t)id;
    2c02:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
    2c06:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    2c0a:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    2c0c:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    2c0e:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
    2c12:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    2c16:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    2c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2c1e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    2c22:	e7b4      	b.n	2b8e <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    2c24:	2200      	movs	r2, #0
    2c26:	e7ee      	b.n	2c06 <nrfx_gpiote_input_configure+0x12a>
    2c28:	20000030 	.word	0x20000030
    2c2c:	0bad0004 	.word	0x0bad0004
    2c30:	0bad0000 	.word	0x0bad0000
    2c34:	200000a4 	.word	0x200000a4

00002c38 <nrfx_gpiote_output_configure>:
{
    2c38:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c3a:	4604      	mov	r4, r0
    2c3c:	4615      	mov	r5, r2
    2c3e:	b085      	sub	sp, #20
    if (p_config)
    2c40:	b319      	cbz	r1, 2c8a <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2c42:	4e34      	ldr	r6, [pc, #208]	; (2d14 <nrfx_gpiote_output_configure+0xdc>)
    2c44:	f100 0708 	add.w	r7, r0, #8
    2c48:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    2c4c:	0793      	lsls	r3, r2, #30
    2c4e:	d403      	bmi.n	2c58 <nrfx_gpiote_output_configure+0x20>
    2c50:	f7ff fed4 	bl	29fc <pin_in_use_by_te>
    2c54:	2800      	cmp	r0, #0
    2c56:	d15a      	bne.n	2d0e <nrfx_gpiote_output_configure+0xd6>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    2c58:	f012 0f1c 	tst.w	r2, #28
    2c5c:	d002      	beq.n	2c64 <nrfx_gpiote_output_configure+0x2c>
    2c5e:	784b      	ldrb	r3, [r1, #1]
    2c60:	2b01      	cmp	r3, #1
    2c62:	d054      	beq.n	2d0e <nrfx_gpiote_output_configure+0xd6>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2c64:	2301      	movs	r3, #1
    2c66:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    2c6a:	2300      	movs	r3, #0
    2c6c:	1c4a      	adds	r2, r1, #1
    2c6e:	e9cd 1300 	strd	r1, r3, [sp]
    2c72:	4620      	mov	r0, r4
    2c74:	1c8b      	adds	r3, r1, #2
    2c76:	f10d 010f 	add.w	r1, sp, #15
    2c7a:	f001 ff86 	bl	4b8a <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    2c7e:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    2c82:	f043 0303 	orr.w	r3, r3, #3
    2c86:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    2c8a:	b915      	cbnz	r5, 2c92 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    2c8c:	4822      	ldr	r0, [pc, #136]	; (2d18 <nrfx_gpiote_output_configure+0xe0>)
}
    2c8e:	b005      	add	sp, #20
    2c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2c92:	4e20      	ldr	r6, [pc, #128]	; (2d14 <nrfx_gpiote_output_configure+0xdc>)
    2c94:	f104 0708 	add.w	r7, r4, #8
    2c98:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    2c9c:	0783      	lsls	r3, r0, #30
    2c9e:	d536      	bpl.n	2d0e <nrfx_gpiote_output_configure+0xd6>
        uint32_t ch = p_task_config->task_ch;
    2ca0:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    2ca4:	2300      	movs	r3, #0
    2ca6:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    2ca8:	f020 0020 	bic.w	r0, r0, #32
    2cac:	0089      	lsls	r1, r1, #2
    2cae:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    2cb2:	04c0      	lsls	r0, r0, #19
    2cb4:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
    2cb8:	0cc0      	lsrs	r0, r0, #19
    2cba:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    2cbe:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    2cc2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    2cc6:	786a      	ldrb	r2, [r5, #1]
    2cc8:	2a00      	cmp	r2, #0
    2cca:	d0df      	beq.n	2c8c <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    2ccc:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    2cd0:	78ad      	ldrb	r5, [r5, #2]
    2cd2:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    2cd6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    2cda:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2cde:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    2ce2:	0223      	lsls	r3, r4, #8
    2ce4:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    2ce8:	0412      	lsls	r2, r2, #16
    2cea:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2cee:	ea43 030e 	orr.w	r3, r3, lr
    2cf2:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    2cf4:	052a      	lsls	r2, r5, #20
    2cf6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    2cfa:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2cfe:	4313      	orrs	r3, r2
    2d00:	f040 0020 	orr.w	r0, r0, #32
    2d04:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    2d08:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    2d0c:	e7be      	b.n	2c8c <nrfx_gpiote_output_configure+0x54>
{
    2d0e:	4803      	ldr	r0, [pc, #12]	; (2d1c <nrfx_gpiote_output_configure+0xe4>)
    2d10:	e7bd      	b.n	2c8e <nrfx_gpiote_output_configure+0x56>
    2d12:	bf00      	nop
    2d14:	20000030 	.word	0x20000030
    2d18:	0bad0000 	.word	0x0bad0000
    2d1c:	0bad0004 	.word	0x0bad0004

00002d20 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    2d20:	4b01      	ldr	r3, [pc, #4]	; (2d28 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    2d22:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    2d26:	4770      	bx	lr
    2d28:	20000030 	.word	0x20000030

00002d2c <nrfx_gpiote_channel_get>:
{
    2d2c:	b508      	push	{r3, lr}
    2d2e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    2d30:	f7ff fe64 	bl	29fc <pin_in_use_by_te>
    2d34:	b138      	cbz	r0, 2d46 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2d36:	4b05      	ldr	r3, [pc, #20]	; (2d4c <nrfx_gpiote_channel_get+0x20>)
    2d38:	3208      	adds	r2, #8
    2d3a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
    2d3e:	4804      	ldr	r0, [pc, #16]	; (2d50 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2d40:	0b5b      	lsrs	r3, r3, #13
    2d42:	700b      	strb	r3, [r1, #0]
}
    2d44:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    2d46:	4803      	ldr	r0, [pc, #12]	; (2d54 <nrfx_gpiote_channel_get+0x28>)
    2d48:	e7fc      	b.n	2d44 <nrfx_gpiote_channel_get+0x18>
    2d4a:	bf00      	nop
    2d4c:	20000030 	.word	0x20000030
    2d50:	0bad0000 	.word	0x0bad0000
    2d54:	0bad0004 	.word	0x0bad0004

00002d58 <nrfx_gpiote_init>:
{
    2d58:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    2d5a:	4c0f      	ldr	r4, [pc, #60]	; (2d98 <nrfx_gpiote_init+0x40>)
    2d5c:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    2d60:	b9bd      	cbnz	r5, 2d92 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    2d62:	2260      	movs	r2, #96	; 0x60
    2d64:	4629      	mov	r1, r5
    2d66:	f104 0010 	add.w	r0, r4, #16
    2d6a:	f001 fcc3 	bl	46f4 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    2d6e:	200d      	movs	r0, #13
    2d70:	f7fe fb12 	bl	1398 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2d74:	4b09      	ldr	r3, [pc, #36]	; (2d9c <nrfx_gpiote_init+0x44>)
    return err_code;
    2d76:	480a      	ldr	r0, [pc, #40]	; (2da0 <nrfx_gpiote_init+0x48>)
    2d78:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    2d7c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    2d80:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    2d84:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    2d88:	2301      	movs	r3, #1
    2d8a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    2d8e:	6763      	str	r3, [r4, #116]	; 0x74
}
    2d90:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    2d92:	4804      	ldr	r0, [pc, #16]	; (2da4 <nrfx_gpiote_init+0x4c>)
    2d94:	e7fc      	b.n	2d90 <nrfx_gpiote_init+0x38>
    2d96:	bf00      	nop
    2d98:	20000030 	.word	0x20000030
    2d9c:	5000d000 	.word	0x5000d000
    2da0:	0bad0000 	.word	0x0bad0000
    2da4:	0bad0005 	.word	0x0bad0005

00002da8 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    2da8:	4b03      	ldr	r3, [pc, #12]	; (2db8 <nrfx_gpiote_is_init+0x10>)
    2daa:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    2dae:	3800      	subs	r0, #0
    2db0:	bf18      	it	ne
    2db2:	2001      	movne	r0, #1
    2db4:	4770      	bx	lr
    2db6:	bf00      	nop
    2db8:	20000030 	.word	0x20000030

00002dbc <nrfx_gpiote_channel_free>:
{
    2dbc:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    2dbe:	4801      	ldr	r0, [pc, #4]	; (2dc4 <nrfx_gpiote_channel_free+0x8>)
    2dc0:	f7ff bd88 	b.w	28d4 <nrfx_flag32_free>
    2dc4:	200000a0 	.word	0x200000a0

00002dc8 <nrfx_gpiote_channel_alloc>:
{
    2dc8:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    2dca:	4801      	ldr	r0, [pc, #4]	; (2dd0 <nrfx_gpiote_channel_alloc+0x8>)
    2dcc:	f7ff bd66 	b.w	289c <nrfx_flag32_alloc>
    2dd0:	200000a0 	.word	0x200000a0

00002dd4 <nrfx_gpiote_trigger_enable>:
{
    2dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2dd6:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    2dd8:	f7ff fe10 	bl	29fc <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2ddc:	4b1e      	ldr	r3, [pc, #120]	; (2e58 <nrfx_gpiote_trigger_enable+0x84>)
    2dde:	f104 0208 	add.w	r2, r4, #8
    2de2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    2de6:	b1e8      	cbz	r0, 2e24 <nrfx_gpiote_trigger_enable+0x50>
    2de8:	f013 0502 	ands.w	r5, r3, #2
    2dec:	d11a      	bne.n	2e24 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2dee:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    2df0:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    2df2:	f102 40a0 	add.w	r0, r2, #1342177280	; 0x50000000
    2df6:	f500 4051 	add.w	r0, r0, #53504	; 0xd100
    2dfa:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2dfe:	6005      	str	r5, [r0, #0]
    2e00:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    2e04:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    2e06:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    2e0a:	f040 0001 	orr.w	r0, r0, #1
    2e0e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    2e12:	b129      	cbz	r1, 2e20 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    2e14:	2201      	movs	r2, #1
    2e16:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    2e1a:	4a10      	ldr	r2, [pc, #64]	; (2e5c <nrfx_gpiote_trigger_enable+0x88>)
    2e1c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    2e20:	b003      	add	sp, #12
    2e22:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    2e24:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    2e28:	2b04      	cmp	r3, #4
    2e2a:	d011      	beq.n	2e50 <nrfx_gpiote_trigger_enable+0x7c>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    2e2c:	2b05      	cmp	r3, #5
    2e2e:	d011      	beq.n	2e54 <nrfx_gpiote_trigger_enable+0x80>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2e30:	a801      	add	r0, sp, #4
    2e32:	9401      	str	r4, [sp, #4]
    2e34:	f7ff fdd2 	bl	29dc <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    2e38:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    2e3a:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    2e3c:	40d9      	lsrs	r1, r3
    2e3e:	f001 0101 	and.w	r1, r1, #1
    2e42:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    2e44:	4620      	mov	r0, r4
}
    2e46:	b003      	add	sp, #12
    2e48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    2e4c:	f001 bee6 	b.w	4c1c <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    2e50:	2103      	movs	r1, #3
    2e52:	e7f7      	b.n	2e44 <nrfx_gpiote_trigger_enable+0x70>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    2e54:	2102      	movs	r1, #2
    2e56:	e7f5      	b.n	2e44 <nrfx_gpiote_trigger_enable+0x70>
    2e58:	20000030 	.word	0x20000030
    2e5c:	5000d000 	.word	0x5000d000

00002e60 <nrfx_gpiote_trigger_disable>:
{
    2e60:	b508      	push	{r3, lr}
    2e62:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    2e64:	f7ff fdca 	bl	29fc <pin_in_use_by_te>
    2e68:	b1c0      	cbz	r0, 2e9c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2e6a:	4b0f      	ldr	r3, [pc, #60]	; (2ea8 <nrfx_gpiote_trigger_disable+0x48>)
    2e6c:	f102 0108 	add.w	r1, r2, #8
    2e70:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    2e74:	0799      	lsls	r1, r3, #30
    2e76:	d411      	bmi.n	2e9c <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    2e78:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2e7a:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    2e7c:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    2e7e:	490b      	ldr	r1, [pc, #44]	; (2eac <nrfx_gpiote_trigger_disable+0x4c>)
    2e80:	009b      	lsls	r3, r3, #2
    2e82:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    2e86:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    2e8a:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    2e8e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    2e92:	f022 0203 	bic.w	r2, r2, #3
    2e96:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    2e9a:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    2e9c:	2100      	movs	r1, #0
}
    2e9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    2ea2:	4610      	mov	r0, r2
    2ea4:	f001 beba 	b.w	4c1c <nrf_gpio_cfg_sense_set>
    2ea8:	20000030 	.word	0x20000030
    2eac:	5000d000 	.word	0x5000d000

00002eb0 <nrfx_gpiote_pin_uninit>:
{
    2eb0:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    2eb2:	4b10      	ldr	r3, [pc, #64]	; (2ef4 <nrfx_gpiote_pin_uninit+0x44>)
    2eb4:	f100 0208 	add.w	r2, r0, #8
    2eb8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
    2ebc:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    2ebe:	07db      	lsls	r3, r3, #31
    2ec0:	d516      	bpl.n	2ef0 <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
    2ec2:	f7ff ffcd 	bl	2e60 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    2ec6:	4620      	mov	r0, r4
    2ec8:	f7ff fdea 	bl	2aa0 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2ecc:	a801      	add	r0, sp, #4
    2ece:	9401      	str	r4, [sp, #4]
    2ed0:	f7ff fd84 	bl	29dc <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    2ed4:	9b01      	ldr	r3, [sp, #4]
    2ed6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    2eda:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    2ede:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    2ee2:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    2ee6:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
    2eea:	4803      	ldr	r0, [pc, #12]	; (2ef8 <nrfx_gpiote_pin_uninit+0x48>)
}
    2eec:	b002      	add	sp, #8
    2eee:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    2ef0:	4802      	ldr	r0, [pc, #8]	; (2efc <nrfx_gpiote_pin_uninit+0x4c>)
    2ef2:	e7fb      	b.n	2eec <nrfx_gpiote_pin_uninit+0x3c>
    2ef4:	20000030 	.word	0x20000030
    2ef8:	0bad0000 	.word	0x0bad0000
    2efc:	0bad0004 	.word	0x0bad0004

00002f00 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    2f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
    2f04:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    2f06:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2f08:	4634      	mov	r4, r6
{
    2f0a:	4b63      	ldr	r3, [pc, #396]	; (3098 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
    2f0c:	4863      	ldr	r0, [pc, #396]	; (309c <nrfx_gpiote_irq_handler+0x19c>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    2f0e:	4964      	ldr	r1, [pc, #400]	; (30a0 <nrfx_gpiote_irq_handler+0x1a0>)
{
    2f10:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2f12:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    2f14:	b135      	cbz	r5, 2f24 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    2f16:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    2f1a:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2f1c:	bf1e      	ittt	ne
    2f1e:	601c      	strne	r4, [r3, #0]
    2f20:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    2f22:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    2f24:	3304      	adds	r3, #4
    2f26:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    2f28:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    2f2c:	d1f1      	bne.n	2f12 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2f2e:	f8df a16c 	ldr.w	sl, [pc, #364]	; 309c <nrfx_gpiote_irq_handler+0x19c>
    2f32:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    2f36:	2b00      	cmp	r3, #0
    2f38:	f000 8091 	beq.w	305e <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
    2f3c:	f8df 8164 	ldr.w	r8, [pc, #356]	; 30a4 <nrfx_gpiote_irq_handler+0x1a4>
    2f40:	f8d8 3020 	ldr.w	r3, [r8, #32]
    2f44:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    2f46:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
    2f4a:	4b57      	ldr	r3, [pc, #348]	; (30a8 <nrfx_gpiote_irq_handler+0x1a8>)
    2f4c:	6a1a      	ldr	r2, [r3, #32]
    2f4e:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    2f50:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    2f52:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
    2f56:	f10d 0b10 	add.w	fp, sp, #16
    2f5a:	ea4f 1349 	mov.w	r3, r9, lsl #5
    2f5e:	9300      	str	r3, [sp, #0]
    2f60:	e048      	b.n	2ff4 <nrfx_gpiote_irq_handler+0xf4>
                uint32_t pin = NRF_CTZ(latch[i]);
    2f62:	fa94 f4a4 	rbit	r4, r4
    2f66:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    2f6a:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    2f6c:	4a4f      	ldr	r2, [pc, #316]	; (30ac <nrfx_gpiote_irq_handler+0x1ac>)
                pin += 32 * i;
    2f6e:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    2f70:	f104 0308 	add.w	r3, r4, #8
    2f74:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    2f78:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    2f7a:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
    2f7c:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    2f80:	fa03 f202 	lsl.w	r2, r3, r2
    2f84:	f81b 3000 	ldrb.w	r3, [fp, r0]
    2f88:	9403      	str	r4, [sp, #12]
    2f8a:	ea23 0302 	bic.w	r3, r3, r2
    2f8e:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2f92:	a803      	add	r0, sp, #12
    2f94:	f7ff fd22 	bl	29dc <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    2f98:	9b03      	ldr	r3, [sp, #12]
    2f9a:	08b9      	lsrs	r1, r7, #2
    2f9c:	3380      	adds	r3, #128	; 0x80
    2f9e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    2fa2:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
    2fa6:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    2fa8:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    2faa:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    2fae:	d52b      	bpl.n	3008 <nrfx_gpiote_irq_handler+0x108>
        call_handler(pin, trigger);
    2fb0:	4620      	mov	r0, r4
    2fb2:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    2fb4:	b2dd      	uxtb	r5, r3
    2fb6:	f7ff fd2b 	bl	2a10 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2fba:	a803      	add	r0, sp, #12
    2fbc:	9403      	str	r4, [sp, #12]
    2fbe:	f7ff fd0d 	bl	29dc <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    2fc2:	9b03      	ldr	r3, [sp, #12]
    2fc4:	3380      	adds	r3, #128	; 0x80
    2fc6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    2fca:	f3c3 4301 	ubfx	r3, r3, #16, #2
    2fce:	429d      	cmp	r5, r3
    2fd0:	d107      	bne.n	2fe2 <nrfx_gpiote_irq_handler+0xe2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    2fd2:	2100      	movs	r1, #0
    2fd4:	4620      	mov	r0, r4
    2fd6:	f001 fe21 	bl	4c1c <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    2fda:	4629      	mov	r1, r5
    2fdc:	4620      	mov	r0, r4
    2fde:	f001 fe1d 	bl	4c1c <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2fe2:	a803      	add	r0, sp, #12
    2fe4:	9403      	str	r4, [sp, #12]
    2fe6:	f7ff fcf9 	bl	29dc <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    2fea:	2201      	movs	r2, #1
    2fec:	9b03      	ldr	r3, [sp, #12]
    2fee:	fa02 f303 	lsl.w	r3, r2, r3
    2ff2:	6203      	str	r3, [r0, #32]
            while (latch[i])
    2ff4:	f85b 4029 	ldr.w	r4, [fp, r9, lsl #2]
    2ff8:	2c00      	cmp	r4, #0
    2ffa:	d1b2      	bne.n	2f62 <nrfx_gpiote_irq_handler+0x62>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    2ffc:	f1b9 0f00 	cmp.w	r9, #0
    3000:	d11d      	bne.n	303e <nrfx_gpiote_irq_handler+0x13e>
    3002:	f04f 0901 	mov.w	r9, #1
    3006:	e7a8      	b.n	2f5a <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3008:	2b02      	cmp	r3, #2
    300a:	d10c      	bne.n	3026 <nrfx_gpiote_irq_handler+0x126>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    300c:	2103      	movs	r1, #3
    300e:	4620      	mov	r0, r4
    3010:	f001 fe04 	bl	4c1c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    3014:	f005 0305 	and.w	r3, r5, #5
    3018:	2b01      	cmp	r3, #1
    301a:	d1e2      	bne.n	2fe2 <nrfx_gpiote_irq_handler+0xe2>
            call_handler(pin, trigger);
    301c:	4639      	mov	r1, r7
    301e:	4620      	mov	r0, r4
    3020:	f7ff fcf6 	bl	2a10 <call_handler>
    3024:	e7dd      	b.n	2fe2 <nrfx_gpiote_irq_handler+0xe2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    3026:	2102      	movs	r1, #2
    3028:	4620      	mov	r0, r4
    302a:	9301      	str	r3, [sp, #4]
    302c:	f001 fdf6 	bl	4c1c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    3030:	2d03      	cmp	r5, #3
    3032:	d0f3      	beq.n	301c <nrfx_gpiote_irq_handler+0x11c>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    3034:	9b01      	ldr	r3, [sp, #4]
    3036:	2b03      	cmp	r3, #3
    3038:	d1d3      	bne.n	2fe2 <nrfx_gpiote_irq_handler+0xe2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    303a:	2d02      	cmp	r5, #2
    303c:	e7ed      	b.n	301a <nrfx_gpiote_irq_handler+0x11a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    303e:	f8ca 417c 	str.w	r4, [sl, #380]	; 0x17c
    3042:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    3046:	f8d8 3020 	ldr.w	r3, [r8, #32]
    304a:	4917      	ldr	r1, [pc, #92]	; (30a8 <nrfx_gpiote_irq_handler+0x1a8>)
    304c:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    304e:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
    3052:	6a0a      	ldr	r2, [r1, #32]
        if (latch[port_idx])
    3054:	4313      	orrs	r3, r2
    3056:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    3058:	620a      	str	r2, [r1, #32]
    305a:	f47f af7a 	bne.w	2f52 <nrfx_gpiote_irq_handler+0x52>
        mask &= ~NRFX_BIT(ch);
    305e:	2401      	movs	r4, #1
    while (mask)
    3060:	b916      	cbnz	r6, 3068 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    3062:	b007      	add	sp, #28
    3064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    3068:	fa96 f3a6 	rbit	r3, r6
    306c:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    3070:	fa04 f203 	lsl.w	r2, r4, r3
    3074:	009b      	lsls	r3, r3, #2
    3076:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    307a:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    307e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    3082:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    3086:	f3c0 2005 	ubfx	r0, r0, #8, #6
    308a:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
    308e:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    3092:	f7ff fcbd 	bl	2a10 <call_handler>
    3096:	e7e3      	b.n	3060 <nrfx_gpiote_irq_handler+0x160>
    3098:	5000d100 	.word	0x5000d100
    309c:	5000d000 	.word	0x5000d000
    30a0:	5000d120 	.word	0x5000d120
    30a4:	50842500 	.word	0x50842500
    30a8:	50842800 	.word	0x50842800
    30ac:	20000030 	.word	0x20000030

000030b0 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    30b0:	2303      	movs	r3, #3
static void _DoInit(void) {
    30b2:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    30b4:	4c13      	ldr	r4, [pc, #76]	; (3104 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    30b6:	4a14      	ldr	r2, [pc, #80]	; (3108 <_DoInit+0x58>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    30b8:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    30ba:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    30bc:	4b13      	ldr	r3, [pc, #76]	; (310c <_DoInit+0x5c>)
  p->aUp[0].sName         = "Terminal";
    30be:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    30c0:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    30c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
    30c6:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    30c8:	2300      	movs	r3, #0
    30ca:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    30cc:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    30ce:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    30d0:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    30d2:	4a0f      	ldr	r2, [pc, #60]	; (3110 <_DoInit+0x60>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    30d4:	490f      	ldr	r1, [pc, #60]	; (3114 <_DoInit+0x64>)
  p->aDown[0].pBuffer       = _acDownBuffer;
    30d6:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    30d8:	2210      	movs	r2, #16
  STRCPY((char*)&p->acID[7], "RTT");
    30da:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    30dc:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    30de:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    30e0:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    30e2:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    30e4:	f001 fae1 	bl	46aa <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    30e8:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    30ec:	490a      	ldr	r1, [pc, #40]	; (3118 <_DoInit+0x68>)
    30ee:	4620      	mov	r0, r4
    30f0:	f001 fadb 	bl	46aa <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    30f4:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    30f8:	2320      	movs	r3, #32
    30fa:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    30fc:	f3bf 8f5f 	dmb	sy
}
    3100:	bd10      	pop	{r4, pc}
    3102:	bf00      	nop
    3104:	200008e8 	.word	0x200008e8
    3108:	00005592 	.word	0x00005592
    310c:	20000bae 	.word	0x20000bae
    3110:	20000b9e 	.word	0x20000b9e
    3114:	0000559b 	.word	0x0000559b
    3118:	0000559f 	.word	0x0000559f

0000311c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    311c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    311e:	2718      	movs	r7, #24
    3120:	fb00 7507 	mla	r5, r0, r7, r7
    3124:	4b12      	ldr	r3, [pc, #72]	; (3170 <SEGGER_RTT_WriteNoLock+0x54>)
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    3126:	460e      	mov	r6, r1
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    3128:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    312a:	fb07 3300 	mla	r3, r7, r0, r3
    312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    3130:	4614      	mov	r4, r2
  switch (pRing->Flags) {
    3132:	2b01      	cmp	r3, #1
    3134:	d00a      	beq.n	314c <SEGGER_RTT_WriteNoLock+0x30>
    3136:	2b02      	cmp	r3, #2
    3138:	d014      	beq.n	3164 <SEGGER_RTT_WriteNoLock+0x48>
    313a:	b923      	cbnz	r3, 3146 <SEGGER_RTT_WriteNoLock+0x2a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    313c:	4628      	mov	r0, r5
    313e:	f001 fd7c 	bl	4c3a <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    3142:	4284      	cmp	r4, r0
    3144:	d908      	bls.n	3158 <SEGGER_RTT_WriteNoLock+0x3c>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
    3146:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
    3148:	4620      	mov	r0, r4
    314a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    314c:	4628      	mov	r0, r5
    314e:	f001 fd74 	bl	4c3a <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    3152:	4284      	cmp	r4, r0
    3154:	bf28      	it	cs
    3156:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    3158:	4622      	mov	r2, r4
    315a:	4631      	mov	r1, r6
    315c:	4628      	mov	r0, r5
    315e:	f001 fd75 	bl	4c4c <_WriteNoCheck>
    break;
    3162:	e7f1      	b.n	3148 <SEGGER_RTT_WriteNoLock+0x2c>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    3164:	4628      	mov	r0, r5
}
    3166:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    316a:	f001 bd8c 	b.w	4c86 <_WriteBlocking>
    316e:	bf00      	nop
    3170:	200008e8 	.word	0x200008e8

00003174 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3174:	4b10      	ldr	r3, [pc, #64]	; (31b8 <z_sys_init_run_level+0x44>)
{
    3176:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3178:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    317c:	3001      	adds	r0, #1
    317e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    3182:	42a6      	cmp	r6, r4
    3184:	d800      	bhi.n	3188 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    3186:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
    3188:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    318c:	b18d      	cbz	r5, 31b2 <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
    318e:	4628      	mov	r0, r5
    3190:	4798      	blx	r3
			if (rc != 0) {
    3192:	b138      	cbz	r0, 31a4 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    3194:	2800      	cmp	r0, #0
    3196:	bfb8      	it	lt
    3198:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
    319a:	28ff      	cmp	r0, #255	; 0xff
    319c:	bfa8      	it	ge
    319e:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    31a0:	68eb      	ldr	r3, [r5, #12]
    31a2:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    31a4:	68ea      	ldr	r2, [r5, #12]
    31a6:	7853      	ldrb	r3, [r2, #1]
    31a8:	f043 0301 	orr.w	r3, r3, #1
    31ac:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    31ae:	3408      	adds	r4, #8
    31b0:	e7e7      	b.n	3182 <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    31b2:	4798      	blx	r3
    31b4:	e7fb      	b.n	31ae <z_sys_init_run_level+0x3a>
    31b6:	bf00      	nop
    31b8:	000053d8 	.word	0x000053d8

000031bc <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    31bc:	2201      	movs	r2, #1
{
    31be:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    31c0:	4b09      	ldr	r3, [pc, #36]	; (31e8 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    31c2:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    31c4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    31c6:	f7ff ffd5 	bl	3174 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    31ca:	f000 ff41 	bl	4050 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    31ce:	2004      	movs	r0, #4
    31d0:	f7ff ffd0 	bl	3174 <z_sys_init_run_level>

	z_init_static_threads();
    31d4:	f000 f92a 	bl	342c <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    31d8:	f7fd f924 	bl	424 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    31dc:	4a03      	ldr	r2, [pc, #12]	; (31ec <bg_thread_main+0x30>)
    31de:	7b13      	ldrb	r3, [r2, #12]
    31e0:	f023 0301 	bic.w	r3, r3, #1
    31e4:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    31e6:	bd08      	pop	{r3, pc}
    31e8:	20000fae 	.word	0x20000fae
    31ec:	20000210 	.word	0x20000210

000031f0 <z_bss_zero>:
{
    31f0:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    31f2:	4803      	ldr	r0, [pc, #12]	; (3200 <z_bss_zero+0x10>)
    31f4:	4a03      	ldr	r2, [pc, #12]	; (3204 <z_bss_zero+0x14>)
    31f6:	2100      	movs	r1, #0
    31f8:	1a12      	subs	r2, r2, r0
    31fa:	f001 fd9e 	bl	4d3a <z_early_memset>
}
    31fe:	bd08      	pop	{r3, pc}
    3200:	20000170 	.word	0x20000170
    3204:	20000fb0 	.word	0x20000fb0

00003208 <z_init_cpu>:

#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    3208:	2300      	movs	r3, #0
    320a:	2201      	movs	r2, #1
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    320c:	b570      	push	{r4, r5, r6, lr}
    320e:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    3210:	e9cd 2304 	strd	r2, r3, [sp, #16]
    3214:	220f      	movs	r2, #15
    3216:	9301      	str	r3, [sp, #4]
    3218:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    321c:	2314      	movs	r3, #20
	z_setup_new_thread(thread, stack,
    321e:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3222:	4d0e      	ldr	r5, [pc, #56]	; (325c <z_init_cpu+0x54>)
	struct k_thread *thread = &z_idle_threads[i];
    3224:	4e0e      	ldr	r6, [pc, #56]	; (3260 <z_init_cpu+0x58>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3226:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
    322a:	490e      	ldr	r1, [pc, #56]	; (3264 <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
    322c:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    3230:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    3232:	fb02 1100 	mla	r1, r2, r0, r1
    3236:	4b0c      	ldr	r3, [pc, #48]	; (3268 <z_init_cpu+0x60>)
    3238:	4630      	mov	r0, r6
    323a:	9500      	str	r5, [sp, #0]
    323c:	f000 f8c6 	bl	33cc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3240:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
    3242:	742c      	strb	r4, [r5, #16]
    3244:	f023 0304 	bic.w	r3, r3, #4
    3248:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    324a:	4b08      	ldr	r3, [pc, #32]	; (326c <z_init_cpu+0x64>)
    324c:	3401      	adds	r4, #1
    324e:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    3252:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    3254:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    3256:	b006      	add	sp, #24
    3258:	bd70      	pop	{r4, r5, r6, pc}
    325a:	bf00      	nop
    325c:	20000990 	.word	0x20000990
    3260:	20000190 	.word	0x20000190
    3264:	200017b0 	.word	0x200017b0
    3268:	000034e5 	.word	0x000034e5
    326c:	20000fb0 	.word	0x20000fb0

00003270 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    3270:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    3272:	2000      	movs	r0, #0
{
    3274:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    3276:	f7ff ff7d 	bl	3174 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    327a:	4b2d      	ldr	r3, [pc, #180]	; (3330 <z_cstart+0xc0>)
	uint32_t msp =
    327c:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    3280:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    3284:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3288:	2400      	movs	r4, #0
    328a:	23e0      	movs	r3, #224	; 0xe0
    328c:	4d29      	ldr	r5, [pc, #164]	; (3334 <z_cstart+0xc4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    328e:	4e2a      	ldr	r6, [pc, #168]	; (3338 <z_cstart+0xc8>)
    3290:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    3294:	77ec      	strb	r4, [r5, #31]
    3296:	762c      	strb	r4, [r5, #24]
    3298:	766c      	strb	r4, [r5, #25]
    329a:	76ac      	strb	r4, [r5, #26]
    329c:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    32a0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    32a2:	4f26      	ldr	r7, [pc, #152]	; (333c <z_cstart+0xcc>)
    32a4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    32a8:	626b      	str	r3, [r5, #36]	; 0x24
    32aa:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    32ae:	f7fe fab9 	bl	1824 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    32b2:	f7fe f851 	bl	1358 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    32b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    32ba:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    32bc:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    32be:	f7fe fcbb 	bl	1c38 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    32c2:	f7fe fb61 	bl	1988 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    32c6:	f240 1301 	movw	r3, #257	; 0x101
    32ca:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    32ce:	ab06      	add	r3, sp, #24
    32d0:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    32d2:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    32d6:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    32d8:	f001 fd08 	bl	4cec <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    32dc:	2001      	movs	r0, #1
    32de:	f7ff ff49 	bl	3174 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    32e2:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    32e4:	4d16      	ldr	r5, [pc, #88]	; (3340 <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    32e6:	f7ff ff45 	bl	3174 <z_sys_init_run_level>
	z_sched_init();
    32ea:	f000 fc4d 	bl	3b88 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    32ee:	4b15      	ldr	r3, [pc, #84]	; (3344 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
    32f0:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    32f2:	9305      	str	r3, [sp, #20]
    32f4:	2301      	movs	r3, #1
    32f6:	4914      	ldr	r1, [pc, #80]	; (3348 <z_cstart+0xd8>)
    32f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    32fc:	e9cd 4303 	strd	r4, r3, [sp, #12]
    3300:	4628      	mov	r0, r5
    3302:	463b      	mov	r3, r7
    3304:	e9cd 4401 	strd	r4, r4, [sp, #4]
    3308:	9400      	str	r4, [sp, #0]
    330a:	f000 f85f 	bl	33cc <z_setup_new_thread>
    330e:	4606      	mov	r6, r0
    3310:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
    3312:	4628      	mov	r0, r5
    3314:	f022 0204 	bic.w	r2, r2, #4
    3318:	736a      	strb	r2, [r5, #13]
    331a:	f001 fdb5 	bl	4e88 <z_ready_thread>
	z_init_cpu(0);
    331e:	4620      	mov	r0, r4
    3320:	f7ff ff72 	bl	3208 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3324:	463a      	mov	r2, r7
    3326:	4631      	mov	r1, r6
    3328:	4628      	mov	r0, r5
    332a:	f7fe f90d 	bl	1548 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    332e:	bf00      	nop
    3330:	20000fb0 	.word	0x20000fb0
    3334:	e000ed00 	.word	0xe000ed00
    3338:	20000990 	.word	0x20000990
    333c:	000031bd 	.word	0x000031bd
    3340:	20000210 	.word	0x20000210
    3344:	000055a6 	.word	0x000055a6
    3348:	200018f0 	.word	0x200018f0

0000334c <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
	int rc = 0;
    334c:	2000      	movs	r0, #0
{
    334e:	b538      	push	{r3, r4, r5, lr}

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3350:	4c05      	ldr	r4, [pc, #20]	; (3368 <init_mem_slab_module+0x1c>)
    3352:	4d06      	ldr	r5, [pc, #24]	; (336c <init_mem_slab_module+0x20>)
    3354:	42ac      	cmp	r4, r5
    3356:	d300      	bcc.n	335a <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
    3358:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
    335a:	4620      	mov	r0, r4
    335c:	f001 fcf1 	bl	4d42 <create_free_list>
		if (rc < 0) {
    3360:	2800      	cmp	r0, #0
    3362:	dbf9      	blt.n	3358 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3364:	341c      	adds	r4, #28
    3366:	e7f5      	b.n	3354 <init_mem_slab_module+0x8>
    3368:	2000011a 	.word	0x2000011a
    336c:	2000011a 	.word	0x2000011a

00003370 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    3370:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3372:	460c      	mov	r4, r1
	__asm__ volatile(
    3374:	f04f 0520 	mov.w	r5, #32
    3378:	f3ef 8111 	mrs	r1, BASEPRI
    337c:	f385 8812 	msr	BASEPRI_MAX, r5
    3380:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    3384:	6945      	ldr	r5, [r0, #20]
    3386:	b15d      	cbz	r5, 33a0 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    3388:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    338a:	682b      	ldr	r3, [r5, #0]
    338c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    338e:	6983      	ldr	r3, [r0, #24]
    3390:	3301      	adds	r3, #1
    3392:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    3394:	2000      	movs	r0, #0
	__asm__ volatile(
    3396:	f381 8811 	msr	BASEPRI, r1
    339a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    339e:	e011      	b.n	33c4 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    33a0:	ea52 0603 	orrs.w	r6, r2, r3
    33a4:	d103      	bne.n	33ae <k_mem_slab_alloc+0x3e>
		result = -ENOMEM;
    33a6:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
    33aa:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    33ac:	e7f3      	b.n	3396 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    33ae:	e9cd 2300 	strd	r2, r3, [sp]
    33b2:	4602      	mov	r2, r0
    33b4:	3008      	adds	r0, #8
    33b6:	f000 faf1 	bl	399c <z_pend_curr>
		if (result == 0) {
    33ba:	b918      	cbnz	r0, 33c4 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    33bc:	4b02      	ldr	r3, [pc, #8]	; (33c8 <k_mem_slab_alloc+0x58>)
    33be:	689b      	ldr	r3, [r3, #8]
    33c0:	695b      	ldr	r3, [r3, #20]
    33c2:	6023      	str	r3, [r4, #0]
}
    33c4:	b002      	add	sp, #8
    33c6:	bd70      	pop	{r4, r5, r6, pc}
    33c8:	20000990 	.word	0x20000990

000033cc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    33cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    33d0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    33d2:	f100 0558 	add.w	r5, r0, #88	; 0x58
    33d6:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    33d8:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    33da:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
    33de:	2500      	movs	r5, #0
{
    33e0:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
    33e2:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    33e4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    33e6:	e9c0 5506 	strd	r5, r5, [r0, #24]
    33ea:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    33ec:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    33ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    33f0:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
    33f4:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    33f8:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    33fa:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    33fc:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    33fe:	9202      	str	r2, [sp, #8]
    3400:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
    3402:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3406:	9201      	str	r2, [sp, #4]
    3408:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    340a:	9200      	str	r2, [sp, #0]
    340c:	4642      	mov	r2, r8
    340e:	f7fe f87f 	bl	1510 <arch_new_thread>
	if (!_current) {
    3412:	4b05      	ldr	r3, [pc, #20]	; (3428 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    3414:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    3416:	689b      	ldr	r3, [r3, #8]
    3418:	b103      	cbz	r3, 341c <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    341a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
    341c:	4640      	mov	r0, r8
    341e:	6723      	str	r3, [r4, #112]	; 0x70
    3420:	b004      	add	sp, #16
    3422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3426:	bf00      	nop
    3428:	20000990 	.word	0x20000990

0000342c <z_init_static_threads>:
{
    342c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3430:	4c29      	ldr	r4, [pc, #164]	; (34d8 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    3432:	4d2a      	ldr	r5, [pc, #168]	; (34dc <z_init_static_threads+0xb0>)
{
    3434:	b087      	sub	sp, #28
    3436:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    3438:	42ae      	cmp	r6, r5
    343a:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    343e:	d30f      	bcc.n	3460 <z_init_static_threads+0x34>
	k_sched_lock();
    3440:	f000 fb72 	bl	3b28 <k_sched_lock>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    3444:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    3448:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
    344c:	4c22      	ldr	r4, [pc, #136]	; (34d8 <z_init_static_threads+0xac>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    344e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 34e0 <z_init_static_threads+0xb4>
    3452:	42ac      	cmp	r4, r5
    3454:	d320      	bcc.n	3498 <z_init_static_threads+0x6c>
}
    3456:	b007      	add	sp, #28
    3458:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    345c:	f000 bb78 	b.w	3b50 <k_sched_unlock>
		z_setup_new_thread(
    3460:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3464:	9305      	str	r3, [sp, #20]
    3466:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    346a:	9304      	str	r3, [sp, #16]
    346c:	f854 3c10 	ldr.w	r3, [r4, #-16]
    3470:	9303      	str	r3, [sp, #12]
    3472:	f854 3c14 	ldr.w	r3, [r4, #-20]
    3476:	9302      	str	r3, [sp, #8]
    3478:	f854 3c18 	ldr.w	r3, [r4, #-24]
    347c:	9301      	str	r3, [sp, #4]
    347e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    3482:	9300      	str	r3, [sp, #0]
    3484:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    3488:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    348c:	f7ff ff9e 	bl	33cc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    3490:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    3494:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    3496:	e7ce      	b.n	3436 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    3498:	6a63      	ldr	r3, [r4, #36]	; 0x24
    349a:	1c5a      	adds	r2, r3, #1
    349c:	d00d      	beq.n	34ba <z_init_static_threads+0x8e>
    349e:	2100      	movs	r1, #0
    34a0:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
    34a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    34a6:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    34aa:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    34ae:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    34b2:	d104      	bne.n	34be <z_init_static_threads+0x92>
	z_sched_start(thread);
    34b4:	4640      	mov	r0, r8
    34b6:	f000 fae7 	bl	3a88 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    34ba:	342c      	adds	r4, #44	; 0x2c
    34bc:	e7c9      	b.n	3452 <z_init_static_threads+0x26>
    34be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    34c2:	2300      	movs	r3, #0
    34c4:	f7fc fe46 	bl	154 <__aeabi_uldivmod>
    34c8:	4602      	mov	r2, r0
    34ca:	460b      	mov	r3, r1
    34cc:	f108 0018 	add.w	r0, r8, #24
    34d0:	4649      	mov	r1, r9
    34d2:	f000 fcc3 	bl	3e5c <z_add_timeout>
    34d6:	e7f0      	b.n	34ba <z_init_static_threads+0x8e>
    34d8:	00005280 	.word	0x00005280
    34dc:	00005280 	.word	0x00005280
    34e0:	00004eed 	.word	0x00004eed

000034e4 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    34e4:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    34e6:	4c0b      	ldr	r4, [pc, #44]	; (3514 <idle+0x30>)
	return !z_sys_post_kernel;
    34e8:	4d0b      	ldr	r5, [pc, #44]	; (3518 <idle+0x34>)
	__asm__ volatile(
    34ea:	f04f 0220 	mov.w	r2, #32
    34ee:	f3ef 8311 	mrs	r3, BASEPRI
    34f2:	f382 8812 	msr	BASEPRI_MAX, r2
    34f6:	f3bf 8f6f 	isb	sy
    34fa:	f001 fd43 	bl	4f84 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    34fe:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    3500:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    3502:	b913      	cbnz	r3, 350a <idle+0x26>
	arch_cpu_idle();
    3504:	f7fd ff2e 	bl	1364 <arch_cpu_idle>
}
    3508:	e7ef      	b.n	34ea <idle+0x6>
    350a:	f7fd fd5f 	bl	fcc <pm_system_suspend>
    350e:	2800      	cmp	r0, #0
    3510:	d1eb      	bne.n	34ea <idle+0x6>
    3512:	e7f7      	b.n	3504 <idle+0x20>
    3514:	20000990 	.word	0x20000990
    3518:	20000fae 	.word	0x20000fae

0000351c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    351c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3520:	4604      	mov	r4, r0
    3522:	4617      	mov	r7, r2
    3524:	461e      	mov	r6, r3
    3526:	f04f 0320 	mov.w	r3, #32
    352a:	f3ef 8811 	mrs	r8, BASEPRI
    352e:	f383 8812 	msr	BASEPRI_MAX, r3
    3532:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    3536:	68c3      	ldr	r3, [r0, #12]
    3538:	4a33      	ldr	r2, [pc, #204]	; (3608 <z_impl_k_mutex_lock+0xec>)
    353a:	b17b      	cbz	r3, 355c <z_impl_k_mutex_lock+0x40>
    353c:	6880      	ldr	r0, [r0, #8]
    353e:	6891      	ldr	r1, [r2, #8]
    3540:	4288      	cmp	r0, r1
    3542:	d019      	beq.n	3578 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    3544:	ea57 0306 	orrs.w	r3, r7, r6
    3548:	d118      	bne.n	357c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    354a:	f388 8811 	msr	BASEPRI, r8
    354e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    3552:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    3556:	b002      	add	sp, #8
    3558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    355c:	6891      	ldr	r1, [r2, #8]
    355e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    3562:	3301      	adds	r3, #1
    3564:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    3566:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    3568:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    356a:	60a3      	str	r3, [r4, #8]
    356c:	f388 8811 	msr	BASEPRI, r8
    3570:	f3bf 8f6f 	isb	sy
		return 0;
    3574:	2000      	movs	r0, #0
    3576:	e7ee      	b.n	3556 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    3578:	6921      	ldr	r1, [r4, #16]
    357a:	e7f2      	b.n	3562 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    357c:	f991 100e 	ldrsb.w	r1, [r1, #14]
    3580:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    3584:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    3588:	4299      	cmp	r1, r3
    358a:	bfa8      	it	ge
    358c:	4619      	movge	r1, r3
    358e:	4291      	cmp	r1, r2
    3590:	bfb8      	it	lt
    3592:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    3594:	428b      	cmp	r3, r1
    3596:	dd2e      	ble.n	35f6 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    3598:	f001 fc2d 	bl	4df6 <adjust_owner_prio.isra.0>
    359c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    359e:	4622      	mov	r2, r4
    35a0:	4641      	mov	r1, r8
    35a2:	e9cd 7600 	strd	r7, r6, [sp]
    35a6:	4819      	ldr	r0, [pc, #100]	; (360c <z_impl_k_mutex_lock+0xf0>)
    35a8:	f000 f9f8 	bl	399c <z_pend_curr>
	if (got_mutex == 0) {
    35ac:	2800      	cmp	r0, #0
    35ae:	d0e1      	beq.n	3574 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    35b0:	f04f 0320 	mov.w	r3, #32
    35b4:	f3ef 8611 	mrs	r6, BASEPRI
    35b8:	f383 8812 	msr	BASEPRI_MAX, r3
    35bc:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    35c0:	68a0      	ldr	r0, [r4, #8]
    35c2:	b1d0      	cbz	r0, 35fa <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    35c4:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    35c6:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    35c8:	429c      	cmp	r4, r3
    35ca:	d00a      	beq.n	35e2 <z_impl_k_mutex_lock+0xc6>
    35cc:	b14b      	cbz	r3, 35e2 <z_impl_k_mutex_lock+0xc6>
    35ce:	f993 300e 	ldrsb.w	r3, [r3, #14]
    35d2:	4299      	cmp	r1, r3
    35d4:	bfa8      	it	ge
    35d6:	4619      	movge	r1, r3
    35d8:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    35dc:	4299      	cmp	r1, r3
    35de:	bfb8      	it	lt
    35e0:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    35e2:	f001 fc08 	bl	4df6 <adjust_owner_prio.isra.0>
    35e6:	b140      	cbz	r0, 35fa <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    35e8:	4631      	mov	r1, r6
    35ea:	4808      	ldr	r0, [pc, #32]	; (360c <z_impl_k_mutex_lock+0xf0>)
    35ec:	f000 fa3a 	bl	3a64 <z_reschedule>
	return -EAGAIN;
    35f0:	f06f 000a 	mvn.w	r0, #10
    35f4:	e7af      	b.n	3556 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    35f6:	2500      	movs	r5, #0
    35f8:	e7d1      	b.n	359e <z_impl_k_mutex_lock+0x82>
	if (resched) {
    35fa:	2d00      	cmp	r5, #0
    35fc:	d1f4      	bne.n	35e8 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    35fe:	f386 8811 	msr	BASEPRI, r6
    3602:	f3bf 8f6f 	isb	sy
    3606:	e7f3      	b.n	35f0 <z_impl_k_mutex_lock+0xd4>
    3608:	20000990 	.word	0x20000990
    360c:	20000faf 	.word	0x20000faf

00003610 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    3610:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    3612:	6883      	ldr	r3, [r0, #8]
{
    3614:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    3616:	b36b      	cbz	r3, 3674 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    3618:	4a19      	ldr	r2, [pc, #100]	; (3680 <z_impl_k_mutex_unlock+0x70>)
    361a:	6892      	ldr	r2, [r2, #8]
    361c:	4293      	cmp	r3, r2
    361e:	d12c      	bne.n	367a <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    3620:	68c3      	ldr	r3, [r0, #12]
    3622:	2b01      	cmp	r3, #1
    3624:	d903      	bls.n	362e <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    3626:	3b01      	subs	r3, #1
    3628:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    362a:	2000      	movs	r0, #0
}
    362c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    362e:	f04f 0320 	mov.w	r3, #32
    3632:	f3ef 8511 	mrs	r5, BASEPRI
    3636:	f383 8812 	msr	BASEPRI_MAX, r3
    363a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    363e:	6901      	ldr	r1, [r0, #16]
    3640:	6880      	ldr	r0, [r0, #8]
    3642:	f001 fbd8 	bl	4df6 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    3646:	4620      	mov	r0, r4
    3648:	f001 fc54 	bl	4ef4 <z_unpend_first_thread>
	mutex->owner = new_owner;
    364c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    364e:	b158      	cbz	r0, 3668 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    3650:	f990 200e 	ldrsb.w	r2, [r0, #14]
    3654:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    3656:	2200      	movs	r2, #0
    3658:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    365a:	f001 fc15 	bl	4e88 <z_ready_thread>
		z_reschedule(&lock, key);
    365e:	4629      	mov	r1, r5
    3660:	4808      	ldr	r0, [pc, #32]	; (3684 <z_impl_k_mutex_unlock+0x74>)
    3662:	f000 f9ff 	bl	3a64 <z_reschedule>
    3666:	e7e0      	b.n	362a <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    3668:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    366a:	f385 8811 	msr	BASEPRI, r5
    366e:	f3bf 8f6f 	isb	sy
    3672:	e7da      	b.n	362a <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    3674:	f06f 0015 	mvn.w	r0, #21
    3678:	e7d8      	b.n	362c <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    367a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    367e:	e7d5      	b.n	362c <z_impl_k_mutex_unlock+0x1c>
    3680:	20000990 	.word	0x20000990
    3684:	20000faf 	.word	0x20000faf

00003688 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    3688:	b538      	push	{r3, r4, r5, lr}
    368a:	4604      	mov	r4, r0
	__asm__ volatile(
    368c:	f04f 0320 	mov.w	r3, #32
    3690:	f3ef 8511 	mrs	r5, BASEPRI
    3694:	f383 8812 	msr	BASEPRI_MAX, r3
    3698:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    369c:	f001 fc2a 	bl	4ef4 <z_unpend_first_thread>

	if (thread != NULL) {
    36a0:	b148      	cbz	r0, 36b6 <z_impl_k_sem_give+0x2e>
    36a2:	2200      	movs	r2, #0
    36a4:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    36a6:	f001 fbef 	bl	4e88 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    36aa:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    36ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    36b0:	4804      	ldr	r0, [pc, #16]	; (36c4 <z_impl_k_sem_give+0x3c>)
    36b2:	f000 b9d7 	b.w	3a64 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    36b6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    36ba:	429a      	cmp	r2, r3
    36bc:	bf18      	it	ne
    36be:	3301      	addne	r3, #1
    36c0:	60a3      	str	r3, [r4, #8]
}
    36c2:	e7f2      	b.n	36aa <z_impl_k_sem_give+0x22>
    36c4:	20000faf 	.word	0x20000faf

000036c8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    36c8:	b513      	push	{r0, r1, r4, lr}
    36ca:	f04f 0420 	mov.w	r4, #32
    36ce:	f3ef 8111 	mrs	r1, BASEPRI
    36d2:	f384 8812 	msr	BASEPRI_MAX, r4
    36d6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    36da:	6884      	ldr	r4, [r0, #8]
    36dc:	b144      	cbz	r4, 36f0 <z_impl_k_sem_take+0x28>
		sem->count--;
    36de:	3c01      	subs	r4, #1
    36e0:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    36e2:	f381 8811 	msr	BASEPRI, r1
    36e6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    36ea:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    36ec:	b002      	add	sp, #8
    36ee:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    36f0:	ea52 0403 	orrs.w	r4, r2, r3
    36f4:	d106      	bne.n	3704 <z_impl_k_sem_take+0x3c>
    36f6:	f381 8811 	msr	BASEPRI, r1
    36fa:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    36fe:	f06f 000f 	mvn.w	r0, #15
    3702:	e7f3      	b.n	36ec <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    3704:	e9cd 2300 	strd	r2, r3, [sp]
    3708:	4602      	mov	r2, r0
    370a:	4802      	ldr	r0, [pc, #8]	; (3714 <z_impl_k_sem_take+0x4c>)
    370c:	f000 f946 	bl	399c <z_pend_curr>
	return ret;
    3710:	e7ec      	b.n	36ec <z_impl_k_sem_take+0x24>
    3712:	bf00      	nop
    3714:	20000faf 	.word	0x20000faf

00003718 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
    3718:	89c3      	ldrh	r3, [r0, #14]
    371a:	2b7f      	cmp	r3, #127	; 0x7f
    371c:	d812      	bhi.n	3744 <sliceable+0x2c>
	int ret = slice_ticks;
    371e:	4b0a      	ldr	r3, [pc, #40]	; (3748 <sliceable+0x30>)
    3720:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
    3722:	b163      	cbz	r3, 373e <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    3724:	4b09      	ldr	r3, [pc, #36]	; (374c <sliceable+0x34>)
    3726:	f990 200e 	ldrsb.w	r2, [r0, #14]
    372a:	681b      	ldr	r3, [r3, #0]
    372c:	429a      	cmp	r2, r3
    372e:	db09      	blt.n	3744 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
    3730:	7b43      	ldrb	r3, [r0, #13]
    3732:	06db      	lsls	r3, r3, #27
    3734:	d106      	bne.n	3744 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    3736:	4b06      	ldr	r3, [pc, #24]	; (3750 <sliceable+0x38>)
    3738:	1ac3      	subs	r3, r0, r3
    373a:	bf18      	it	ne
    373c:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    373e:	f003 0001 	and.w	r0, r3, #1
    3742:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
    3744:	2300      	movs	r3, #0
    3746:	e7fa      	b.n	373e <sliceable+0x26>
    3748:	200009bc 	.word	0x200009bc
    374c:	200009b8 	.word	0x200009b8
    3750:	20000190 	.word	0x20000190

00003754 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);

	slice_expired[cpu] = true;
    3754:	2201      	movs	r2, #1
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    3756:	4b04      	ldr	r3, [pc, #16]	; (3768 <slice_timeout+0x14>)
    3758:	1ac0      	subs	r0, r0, r3
    375a:	4b04      	ldr	r3, [pc, #16]	; (376c <slice_timeout+0x18>)
    375c:	10c0      	asrs	r0, r0, #3
    375e:	4358      	muls	r0, r3
	slice_expired[cpu] = true;
    3760:	4b03      	ldr	r3, [pc, #12]	; (3770 <slice_timeout+0x1c>)
    3762:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
    3764:	4770      	bx	lr
    3766:	bf00      	nop
    3768:	20000290 	.word	0x20000290
    376c:	aaaaaaab 	.word	0xaaaaaaab
    3770:	20000faf 	.word	0x20000faf

00003774 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
    3774:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
    3776:	4b0e      	ldr	r3, [pc, #56]	; (37b0 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
    3778:	4c0e      	ldr	r4, [pc, #56]	; (37b4 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
    377a:	7c1e      	ldrb	r6, [r3, #16]
{
    377c:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
    377e:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    3782:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
    3786:	4620      	mov	r0, r4
    3788:	f001 fbe6 	bl	4f58 <z_abort_timeout>
	slice_expired[cpu] = false;
    378c:	2200      	movs	r2, #0
    378e:	4b0a      	ldr	r3, [pc, #40]	; (37b8 <z_reset_time_slice+0x44>)
	if (sliceable(curr)) {
    3790:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
    3792:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
    3794:	f7ff ffc0 	bl	3718 <sliceable>
    3798:	b148      	cbz	r0, 37ae <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
    379a:	4b08      	ldr	r3, [pc, #32]	; (37bc <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    379c:	4620      	mov	r0, r4
			      K_TICKS(slice_time(curr) - 1));
	}
}
    379e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			      K_TICKS(slice_time(curr) - 1));
    37a2:	681a      	ldr	r2, [r3, #0]
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    37a4:	4906      	ldr	r1, [pc, #24]	; (37c0 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
    37a6:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    37a8:	17d3      	asrs	r3, r2, #31
    37aa:	f000 bb57 	b.w	3e5c <z_add_timeout>
}
    37ae:	bd70      	pop	{r4, r5, r6, pc}
    37b0:	20000990 	.word	0x20000990
    37b4:	20000290 	.word	0x20000290
    37b8:	20000faf 	.word	0x20000faf
    37bc:	200009bc 	.word	0x200009bc
    37c0:	00003755 	.word	0x00003755

000037c4 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    37c4:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    37c6:	4d0d      	ldr	r5, [pc, #52]	; (37fc <update_cache+0x38>)
    37c8:	462b      	mov	r3, r5
    37ca:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    37ce:	429c      	cmp	r4, r3
    37d0:	d000      	beq.n	37d4 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    37d2:	b904      	cbnz	r4, 37d6 <update_cache+0x12>
    37d4:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    37d6:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    37d8:	b938      	cbnz	r0, 37ea <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    37da:	7b5a      	ldrb	r2, [r3, #13]
    37dc:	06d2      	lsls	r2, r2, #27
    37de:	d104      	bne.n	37ea <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    37e0:	69a2      	ldr	r2, [r4, #24]
    37e2:	b912      	cbnz	r2, 37ea <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    37e4:	89da      	ldrh	r2, [r3, #14]
    37e6:	2a7f      	cmp	r2, #127	; 0x7f
    37e8:	d805      	bhi.n	37f6 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    37ea:	429c      	cmp	r4, r3
    37ec:	d002      	beq.n	37f4 <update_cache+0x30>
			z_reset_time_slice(thread);
    37ee:	4620      	mov	r0, r4
    37f0:	f7ff ffc0 	bl	3774 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    37f4:	4623      	mov	r3, r4
    37f6:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    37f8:	bd38      	pop	{r3, r4, r5, pc}
    37fa:	bf00      	nop
    37fc:	20000990 	.word	0x20000990

00003800 <move_thread_to_end_of_prio_q>:
{
    3800:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    3802:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    3806:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    3808:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    380a:	7b43      	ldrb	r3, [r0, #13]
    380c:	da04      	bge.n	3818 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    380e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3812:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    3814:	f001 fafe 	bl	4e14 <sys_dlist_remove>
	return list->head == list;
    3818:	4a15      	ldr	r2, [pc, #84]	; (3870 <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
    381a:	7b4b      	ldrb	r3, [r1, #13]
    381c:	4610      	mov	r0, r2
    381e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3822:	734b      	strb	r3, [r1, #13]
    3824:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    3828:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    382a:	4283      	cmp	r3, r0
    382c:	bf08      	it	eq
    382e:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3830:	b923      	cbnz	r3, 383c <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    3832:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    3836:	6021      	str	r1, [r4, #0]
	list->tail = node;
    3838:	6211      	str	r1, [r2, #32]
}
    383a:	e00c      	b.n	3856 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    383c:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    3840:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    3844:	42b5      	cmp	r5, r6
    3846:	d00e      	beq.n	3866 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3848:	42ae      	cmp	r6, r5
    384a:	dd0c      	ble.n	3866 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    384c:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    384e:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    3852:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    3854:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    3856:	6890      	ldr	r0, [r2, #8]
}
    3858:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    385c:	1a43      	subs	r3, r0, r1
    385e:	4258      	negs	r0, r3
    3860:	4158      	adcs	r0, r3
    3862:	f7ff bfaf 	b.w	37c4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    3866:	429c      	cmp	r4, r3
    3868:	d0e3      	beq.n	3832 <move_thread_to_end_of_prio_q+0x32>
    386a:	681b      	ldr	r3, [r3, #0]
    386c:	e7e0      	b.n	3830 <move_thread_to_end_of_prio_q+0x30>
    386e:	bf00      	nop
    3870:	20000990 	.word	0x20000990

00003874 <ready_thread>:
{
    3874:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    3876:	f990 300d 	ldrsb.w	r3, [r0, #13]
    387a:	7b42      	ldrb	r2, [r0, #13]
    387c:	2b00      	cmp	r3, #0
    387e:	db29      	blt.n	38d4 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    3880:	06d3      	lsls	r3, r2, #27
    3882:	d127      	bne.n	38d4 <ready_thread+0x60>
	return node->next != NULL;
    3884:	6983      	ldr	r3, [r0, #24]
    3886:	bb2b      	cbnz	r3, 38d4 <ready_thread+0x60>
	return list->head == list;
    3888:	4913      	ldr	r1, [pc, #76]	; (38d8 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    388a:	f062 027f 	orn	r2, r2, #127	; 0x7f
    388e:	7342      	strb	r2, [r0, #13]
    3890:	460a      	mov	r2, r1
    3892:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3896:	4294      	cmp	r4, r2
    3898:	bf18      	it	ne
    389a:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    389c:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    389e:	b923      	cbnz	r3, 38aa <ready_thread+0x36>
	node->prev = tail;
    38a0:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    38a4:	6020      	str	r0, [r4, #0]
	list->tail = node;
    38a6:	6208      	str	r0, [r1, #32]
}
    38a8:	e00c      	b.n	38c4 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    38aa:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    38ae:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    38b2:	42b5      	cmp	r5, r6
    38b4:	d00a      	beq.n	38cc <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    38b6:	42ae      	cmp	r6, r5
    38b8:	dd08      	ble.n	38cc <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    38ba:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    38bc:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    38c0:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    38c2:	6058      	str	r0, [r3, #4]
		update_cache(0);
    38c4:	2000      	movs	r0, #0
}
    38c6:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    38c8:	f7ff bf7c 	b.w	37c4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    38cc:	42a3      	cmp	r3, r4
    38ce:	d0e7      	beq.n	38a0 <ready_thread+0x2c>
    38d0:	681b      	ldr	r3, [r3, #0]
    38d2:	e7e4      	b.n	389e <ready_thread+0x2a>
}
    38d4:	bc70      	pop	{r4, r5, r6}
    38d6:	4770      	bx	lr
    38d8:	20000990 	.word	0x20000990

000038dc <unready_thread>:
{
    38dc:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    38de:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    38e2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    38e4:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    38e6:	7b43      	ldrb	r3, [r0, #13]
    38e8:	da04      	bge.n	38f4 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    38ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    38ee:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    38f0:	f001 fa90 	bl	4e14 <sys_dlist_remove>
	update_cache(thread == _current);
    38f4:	4b04      	ldr	r3, [pc, #16]	; (3908 <unready_thread+0x2c>)
    38f6:	6898      	ldr	r0, [r3, #8]
    38f8:	1a43      	subs	r3, r0, r1
    38fa:	4258      	negs	r0, r3
    38fc:	4158      	adcs	r0, r3
}
    38fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    3902:	f7ff bf5f 	b.w	37c4 <update_cache>
    3906:	bf00      	nop
    3908:	20000990 	.word	0x20000990

0000390c <pend_locked>:
{
    390c:	b570      	push	{r4, r5, r6, lr}
    390e:	4615      	mov	r5, r2
    3910:	461c      	mov	r4, r3
    3912:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    3914:	f001 fa90 	bl	4e38 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3918:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    391c:	bf08      	it	eq
    391e:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    3922:	d008      	beq.n	3936 <pend_locked+0x2a>
    3924:	462a      	mov	r2, r5
    3926:	4623      	mov	r3, r4
    3928:	f106 0018 	add.w	r0, r6, #24
    392c:	4902      	ldr	r1, [pc, #8]	; (3938 <pend_locked+0x2c>)
}
    392e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3932:	f000 ba93 	b.w	3e5c <z_add_timeout>
    3936:	bd70      	pop	{r4, r5, r6, pc}
    3938:	00004eed 	.word	0x00004eed

0000393c <z_time_slice>:
{
    393c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    393e:	f04f 0320 	mov.w	r3, #32
    3942:	f3ef 8511 	mrs	r5, BASEPRI
    3946:	f383 8812 	msr	BASEPRI_MAX, r3
    394a:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
    394e:	4b10      	ldr	r3, [pc, #64]	; (3990 <z_time_slice+0x54>)
	if (pending_current == curr) {
    3950:	4a10      	ldr	r2, [pc, #64]	; (3994 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
    3952:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
    3954:	6810      	ldr	r0, [r2, #0]
    3956:	42a0      	cmp	r0, r4
    3958:	d106      	bne.n	3968 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
    395a:	f7ff ff0b 	bl	3774 <z_reset_time_slice>
	__asm__ volatile(
    395e:	f385 8811 	msr	BASEPRI, r5
    3962:	f3bf 8f6f 	isb	sy
}
    3966:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    3968:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    396a:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
    396c:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    396e:	4a0a      	ldr	r2, [pc, #40]	; (3998 <z_time_slice+0x5c>)
    3970:	5cd3      	ldrb	r3, [r2, r3]
    3972:	2b00      	cmp	r3, #0
    3974:	d0f3      	beq.n	395e <z_time_slice+0x22>
    3976:	4620      	mov	r0, r4
    3978:	f7ff fece 	bl	3718 <sliceable>
    397c:	2800      	cmp	r0, #0
    397e:	d0ee      	beq.n	395e <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
    3980:	7b63      	ldrb	r3, [r4, #13]
    3982:	06db      	lsls	r3, r3, #27
    3984:	d102      	bne.n	398c <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
    3986:	4620      	mov	r0, r4
    3988:	f7ff ff3a 	bl	3800 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
    398c:	4620      	mov	r0, r4
    398e:	e7e4      	b.n	395a <z_time_slice+0x1e>
    3990:	20000990 	.word	0x20000990
    3994:	200009b4 	.word	0x200009b4
    3998:	20000faf 	.word	0x20000faf

0000399c <z_pend_curr>:
{
    399c:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    399e:	480c      	ldr	r0, [pc, #48]	; (39d0 <z_pend_curr+0x34>)
    39a0:	4d0c      	ldr	r5, [pc, #48]	; (39d4 <z_pend_curr+0x38>)
    39a2:	6886      	ldr	r6, [r0, #8]
{
    39a4:	460c      	mov	r4, r1
	pending_current = _current;
    39a6:	602e      	str	r6, [r5, #0]
{
    39a8:	4611      	mov	r1, r2
    39aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    39ae:	f04f 0620 	mov.w	r6, #32
    39b2:	f3ef 8511 	mrs	r5, BASEPRI
    39b6:	f386 8812 	msr	BASEPRI_MAX, r6
    39ba:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    39be:	6880      	ldr	r0, [r0, #8]
    39c0:	f7ff ffa4 	bl	390c <pend_locked>
	ret = arch_swap(key);
    39c4:	4620      	mov	r0, r4
}
    39c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    39ca:	f7fd bd4b 	b.w	1464 <arch_swap>
    39ce:	bf00      	nop
    39d0:	20000990 	.word	0x20000990
    39d4:	200009b4 	.word	0x200009b4

000039d8 <z_set_prio>:
{
    39d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    39da:	4604      	mov	r4, r0
    39dc:	f04f 0320 	mov.w	r3, #32
    39e0:	f3ef 8611 	mrs	r6, BASEPRI
    39e4:	f383 8812 	msr	BASEPRI_MAX, r3
    39e8:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    39ec:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    39ee:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    39f0:	06da      	lsls	r2, r3, #27
    39f2:	d119      	bne.n	3a28 <z_set_prio+0x50>
	return node->next != NULL;
    39f4:	6985      	ldr	r5, [r0, #24]
    39f6:	b9bd      	cbnz	r5, 3a28 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    39f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    39fc:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    39fe:	f001 fa09 	bl	4e14 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    3a02:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    3a04:	4a16      	ldr	r2, [pc, #88]	; (3a60 <z_set_prio+0x88>)
    3a06:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3a0a:	7343      	strb	r3, [r0, #13]
    3a0c:	4613      	mov	r3, r2
				thread->base.prio = prio;
    3a0e:	7381      	strb	r1, [r0, #14]
    3a10:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3a14:	4298      	cmp	r0, r3
    3a16:	bf18      	it	ne
    3a18:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    3a1a:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3a1c:	b95d      	cbnz	r5, 3a36 <z_set_prio+0x5e>
	node->prev = tail;
    3a1e:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    3a22:	6004      	str	r4, [r0, #0]
	list->tail = node;
    3a24:	6214      	str	r4, [r2, #32]
}
    3a26:	e011      	b.n	3a4c <z_set_prio+0x74>
    3a28:	2000      	movs	r0, #0
			thread->base.prio = prio;
    3a2a:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
    3a2c:	f386 8811 	msr	BASEPRI, r6
    3a30:	f3bf 8f6f 	isb	sy
}
    3a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    3a36:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    3a3a:	42b9      	cmp	r1, r7
    3a3c:	d00b      	beq.n	3a56 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3a3e:	428f      	cmp	r7, r1
    3a40:	dd09      	ble.n	3a56 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    3a42:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    3a44:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    3a48:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    3a4a:	606c      	str	r4, [r5, #4]
			update_cache(1);
    3a4c:	2001      	movs	r0, #1
    3a4e:	f7ff feb9 	bl	37c4 <update_cache>
    3a52:	2001      	movs	r0, #1
    3a54:	e7ea      	b.n	3a2c <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    3a56:	42a8      	cmp	r0, r5
    3a58:	d0e1      	beq.n	3a1e <z_set_prio+0x46>
    3a5a:	682d      	ldr	r5, [r5, #0]
    3a5c:	e7de      	b.n	3a1c <z_set_prio+0x44>
    3a5e:	bf00      	nop
    3a60:	20000990 	.word	0x20000990

00003a64 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3a64:	b949      	cbnz	r1, 3a7a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3a66:	f3ef 8005 	mrs	r0, IPSR
    3a6a:	b930      	cbnz	r0, 3a7a <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    3a6c:	4b05      	ldr	r3, [pc, #20]	; (3a84 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    3a6e:	699a      	ldr	r2, [r3, #24]
    3a70:	689b      	ldr	r3, [r3, #8]
    3a72:	429a      	cmp	r2, r3
    3a74:	d001      	beq.n	3a7a <z_reschedule+0x16>
    3a76:	f7fd bcf5 	b.w	1464 <arch_swap>
    3a7a:	f381 8811 	msr	BASEPRI, r1
    3a7e:	f3bf 8f6f 	isb	sy
}
    3a82:	4770      	bx	lr
    3a84:	20000990 	.word	0x20000990

00003a88 <z_sched_start>:
{
    3a88:	b510      	push	{r4, lr}
	__asm__ volatile(
    3a8a:	f04f 0220 	mov.w	r2, #32
    3a8e:	f3ef 8411 	mrs	r4, BASEPRI
    3a92:	f382 8812 	msr	BASEPRI_MAX, r2
    3a96:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    3a9a:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    3a9c:	0751      	lsls	r1, r2, #29
    3a9e:	d404      	bmi.n	3aaa <z_sched_start+0x22>
	__asm__ volatile(
    3aa0:	f384 8811 	msr	BASEPRI, r4
    3aa4:	f3bf 8f6f 	isb	sy
}
    3aa8:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3aaa:	f022 0204 	bic.w	r2, r2, #4
    3aae:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    3ab0:	f7ff fee0 	bl	3874 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    3ab4:	4621      	mov	r1, r4
}
    3ab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    3aba:	4801      	ldr	r0, [pc, #4]	; (3ac0 <z_sched_start+0x38>)
    3abc:	f7ff bfd2 	b.w	3a64 <z_reschedule>
    3ac0:	20000fb0 	.word	0x20000fb0

00003ac4 <z_impl_k_thread_suspend>:
{
    3ac4:	b570      	push	{r4, r5, r6, lr}
    3ac6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    3ac8:	3018      	adds	r0, #24
    3aca:	f001 fa45 	bl	4f58 <z_abort_timeout>
	__asm__ volatile(
    3ace:	f04f 0320 	mov.w	r3, #32
    3ad2:	f3ef 8611 	mrs	r6, BASEPRI
    3ad6:	f383 8812 	msr	BASEPRI_MAX, r3
    3ada:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    3ade:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    3ae2:	7b63      	ldrb	r3, [r4, #13]
    3ae4:	2a00      	cmp	r2, #0
    3ae6:	da05      	bge.n	3af4 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3ae8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
    3aec:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3aee:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3af0:	f001 f990 	bl	4e14 <sys_dlist_remove>
		update_cache(thread == _current);
    3af4:	4d0b      	ldr	r5, [pc, #44]	; (3b24 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    3af6:	7b63      	ldrb	r3, [r4, #13]
    3af8:	68a8      	ldr	r0, [r5, #8]
    3afa:	f043 0310 	orr.w	r3, r3, #16
    3afe:	7363      	strb	r3, [r4, #13]
    3b00:	1b03      	subs	r3, r0, r4
    3b02:	4258      	negs	r0, r3
    3b04:	4158      	adcs	r0, r3
    3b06:	f7ff fe5d 	bl	37c4 <update_cache>
	__asm__ volatile(
    3b0a:	f386 8811 	msr	BASEPRI, r6
    3b0e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    3b12:	68ab      	ldr	r3, [r5, #8]
    3b14:	42a3      	cmp	r3, r4
    3b16:	d103      	bne.n	3b20 <z_impl_k_thread_suspend+0x5c>
}
    3b18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    3b1c:	f001 ba12 	b.w	4f44 <z_reschedule_unlocked>
}
    3b20:	bd70      	pop	{r4, r5, r6, pc}
    3b22:	bf00      	nop
    3b24:	20000990 	.word	0x20000990

00003b28 <k_sched_lock>:
	__asm__ volatile(
    3b28:	f04f 0320 	mov.w	r3, #32
    3b2c:	f3ef 8111 	mrs	r1, BASEPRI
    3b30:	f383 8812 	msr	BASEPRI_MAX, r3
    3b34:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    3b38:	4b04      	ldr	r3, [pc, #16]	; (3b4c <k_sched_lock+0x24>)
    3b3a:	689a      	ldr	r2, [r3, #8]
    3b3c:	7bd3      	ldrb	r3, [r2, #15]
    3b3e:	3b01      	subs	r3, #1
    3b40:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    3b42:	f381 8811 	msr	BASEPRI, r1
    3b46:	f3bf 8f6f 	isb	sy
}
    3b4a:	4770      	bx	lr
    3b4c:	20000990 	.word	0x20000990

00003b50 <k_sched_unlock>:
{
    3b50:	b510      	push	{r4, lr}
	__asm__ volatile(
    3b52:	f04f 0320 	mov.w	r3, #32
    3b56:	f3ef 8411 	mrs	r4, BASEPRI
    3b5a:	f383 8812 	msr	BASEPRI_MAX, r3
    3b5e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    3b62:	4b08      	ldr	r3, [pc, #32]	; (3b84 <k_sched_unlock+0x34>)
		update_cache(0);
    3b64:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    3b66:	689a      	ldr	r2, [r3, #8]
    3b68:	7bd3      	ldrb	r3, [r2, #15]
    3b6a:	3301      	adds	r3, #1
    3b6c:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    3b6e:	f7ff fe29 	bl	37c4 <update_cache>
	__asm__ volatile(
    3b72:	f384 8811 	msr	BASEPRI, r4
    3b76:	f3bf 8f6f 	isb	sy
}
    3b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    3b7e:	f001 b9e1 	b.w	4f44 <z_reschedule_unlocked>
    3b82:	bf00      	nop
    3b84:	20000990 	.word	0x20000990

00003b88 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    3b88:	4b02      	ldr	r3, [pc, #8]	; (3b94 <z_sched_init+0xc>)
    3b8a:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
    3b8e:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
    3b92:	4770      	bx	lr
    3b94:	20000990 	.word	0x20000990

00003b98 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    3b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    3b9a:	f04f 0320 	mov.w	r3, #32
    3b9e:	f3ef 8511 	mrs	r5, BASEPRI
    3ba2:	f383 8812 	msr	BASEPRI_MAX, r3
    3ba6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    3baa:	4919      	ldr	r1, [pc, #100]	; (3c10 <z_impl_k_yield+0x78>)
    3bac:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3bae:	7b43      	ldrb	r3, [r0, #13]
    3bb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3bb4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3bb6:	f001 f92d 	bl	4e14 <sys_dlist_remove>
	return list->head == list;
    3bba:	4608      	mov	r0, r1
	}
	queue_thread(_current);
    3bbc:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    3bbe:	7b5a      	ldrb	r2, [r3, #13]
    3bc0:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3bc4:	735a      	strb	r2, [r3, #13]
    3bc6:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
    3bca:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3bcc:	4282      	cmp	r2, r0
    3bce:	bf08      	it	eq
    3bd0:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3bd2:	b922      	cbnz	r2, 3bde <z_impl_k_yield+0x46>
	node->prev = tail;
    3bd4:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    3bd8:	6023      	str	r3, [r4, #0]
	list->tail = node;
    3bda:	620b      	str	r3, [r1, #32]
}
    3bdc:	e00c      	b.n	3bf8 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    3bde:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    3be2:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    3be6:	42be      	cmp	r6, r7
    3be8:	d00e      	beq.n	3c08 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3bea:	42b7      	cmp	r7, r6
    3bec:	dd0c      	ble.n	3c08 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    3bee:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    3bf0:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    3bf4:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    3bf6:	6053      	str	r3, [r2, #4]
	update_cache(1);
    3bf8:	2001      	movs	r0, #1
    3bfa:	f7ff fde3 	bl	37c4 <update_cache>
    3bfe:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    3c00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3c04:	f7fd bc2e 	b.w	1464 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    3c08:	42a2      	cmp	r2, r4
    3c0a:	d0e3      	beq.n	3bd4 <z_impl_k_yield+0x3c>
    3c0c:	6812      	ldr	r2, [r2, #0]
    3c0e:	e7e0      	b.n	3bd2 <z_impl_k_yield+0x3a>
    3c10:	20000990 	.word	0x20000990

00003c14 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    3c14:	ea50 0301 	orrs.w	r3, r0, r1
{
    3c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3c1c:	4605      	mov	r5, r0
    3c1e:	460e      	mov	r6, r1
	if (ticks == 0) {
    3c20:	d103      	bne.n	3c2a <z_tick_sleep+0x16>
	z_impl_k_yield();
    3c22:	f7ff ffb9 	bl	3b98 <z_impl_k_yield>
		k_yield();
		return 0;
    3c26:	2000      	movs	r0, #0
    3c28:	e02c      	b.n	3c84 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    3c2a:	1c83      	adds	r3, r0, #2
    3c2c:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    3c30:	db2a      	blt.n	3c88 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    3c32:	f001 f9b7 	bl	4fa4 <sys_clock_tick_get_32>
    3c36:	182c      	adds	r4, r5, r0
    3c38:	f04f 0320 	mov.w	r3, #32
    3c3c:	f3ef 8811 	mrs	r8, BASEPRI
    3c40:	f383 8812 	msr	BASEPRI_MAX, r3
    3c44:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    3c48:	4f11      	ldr	r7, [pc, #68]	; (3c90 <z_tick_sleep+0x7c>)
    3c4a:	4b12      	ldr	r3, [pc, #72]	; (3c94 <z_tick_sleep+0x80>)
    3c4c:	68b8      	ldr	r0, [r7, #8]
    3c4e:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    3c50:	f7ff fe44 	bl	38dc <unready_thread>
	z_add_thread_timeout(_current, timeout);
    3c54:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3c56:	4910      	ldr	r1, [pc, #64]	; (3c98 <z_tick_sleep+0x84>)
    3c58:	462a      	mov	r2, r5
    3c5a:	4633      	mov	r3, r6
    3c5c:	3018      	adds	r0, #24
    3c5e:	f000 f8fd 	bl	3e5c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    3c62:	68ba      	ldr	r2, [r7, #8]
    3c64:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
    3c66:	7b53      	ldrb	r3, [r2, #13]
    3c68:	f043 0310 	orr.w	r3, r3, #16
    3c6c:	7353      	strb	r3, [r2, #13]
    3c6e:	f7fd fbf9 	bl	1464 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    3c72:	f001 f997 	bl	4fa4 <sys_clock_tick_get_32>
    3c76:	1a20      	subs	r0, r4, r0
    3c78:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    3c7c:	2801      	cmp	r0, #1
    3c7e:	f173 0300 	sbcs.w	r3, r3, #0
    3c82:	dbd0      	blt.n	3c26 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    3c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    3c88:	f06f 0401 	mvn.w	r4, #1
    3c8c:	1a24      	subs	r4, r4, r0
    3c8e:	e7d3      	b.n	3c38 <z_tick_sleep+0x24>
    3c90:	20000990 	.word	0x20000990
    3c94:	200009b4 	.word	0x200009b4
    3c98:	00004eed 	.word	0x00004eed

00003c9c <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3c9c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    3ca0:	bf08      	it	eq
    3ca2:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    3ca6:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3ca8:	d106      	bne.n	3cb8 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    3caa:	4b08      	ldr	r3, [pc, #32]	; (3ccc <z_impl_k_sleep+0x30>)
    3cac:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    3cae:	f7ff ff09 	bl	3ac4 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    3cb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    3cb6:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    3cb8:	f7ff ffac 	bl	3c14 <z_tick_sleep>
    3cbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    3cc0:	fb80 0303 	smull	r0, r3, r0, r3
    3cc4:	0bc0      	lsrs	r0, r0, #15
    3cc6:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    3cca:	e7f4      	b.n	3cb6 <z_impl_k_sleep+0x1a>
    3ccc:	20000990 	.word	0x20000990

00003cd0 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    3cd0:	4b01      	ldr	r3, [pc, #4]	; (3cd8 <z_impl_z_current_get+0x8>)
    3cd2:	6898      	ldr	r0, [r3, #8]
    3cd4:	4770      	bx	lr
    3cd6:	bf00      	nop
    3cd8:	20000990 	.word	0x20000990

00003cdc <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    3cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ce0:	4604      	mov	r4, r0
    3ce2:	f04f 0320 	mov.w	r3, #32
    3ce6:	f3ef 8611 	mrs	r6, BASEPRI
    3cea:	f383 8812 	msr	BASEPRI_MAX, r3
    3cee:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    3cf2:	7b03      	ldrb	r3, [r0, #12]
    3cf4:	07d9      	lsls	r1, r3, #31
    3cf6:	d50b      	bpl.n	3d10 <z_thread_abort+0x34>
	__asm__ volatile(
    3cf8:	f386 8811 	msr	BASEPRI, r6
    3cfc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    3d00:	4040      	eors	r0, r0
    3d02:	f380 8811 	msr	BASEPRI, r0
    3d06:	f04f 0004 	mov.w	r0, #4
    3d0a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    3d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    3d10:	7b43      	ldrb	r3, [r0, #13]
    3d12:	071a      	lsls	r2, r3, #28
    3d14:	d504      	bpl.n	3d20 <z_thread_abort+0x44>
    3d16:	f386 8811 	msr	BASEPRI, r6
    3d1a:	f3bf 8f6f 	isb	sy
    3d1e:	e7f5      	b.n	3d0c <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    3d20:	f023 0220 	bic.w	r2, r3, #32
    3d24:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    3d28:	09d2      	lsrs	r2, r2, #7
    3d2a:	d120      	bne.n	3d6e <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    3d2c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    3d2e:	68a3      	ldr	r3, [r4, #8]
    3d30:	b113      	cbz	r3, 3d38 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    3d32:	4620      	mov	r0, r4
    3d34:	f001 f876 	bl	4e24 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    3d38:	f104 0018 	add.w	r0, r4, #24
    3d3c:	f001 f90c 	bl	4f58 <z_abort_timeout>
    3d40:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    3d44:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    3d48:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3d4a:	42bd      	cmp	r5, r7
    3d4c:	d000      	beq.n	3d50 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    3d4e:	b9b5      	cbnz	r5, 3d7e <z_thread_abort+0xa2>
		update_cache(1);
    3d50:	2001      	movs	r0, #1
    3d52:	f7ff fd37 	bl	37c4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    3d56:	4b10      	ldr	r3, [pc, #64]	; (3d98 <z_thread_abort+0xbc>)
    3d58:	689b      	ldr	r3, [r3, #8]
    3d5a:	42a3      	cmp	r3, r4
    3d5c:	d1db      	bne.n	3d16 <z_thread_abort+0x3a>
    3d5e:	f3ef 8305 	mrs	r3, IPSR
    3d62:	2b00      	cmp	r3, #0
    3d64:	d1d7      	bne.n	3d16 <z_thread_abort+0x3a>
    3d66:	4630      	mov	r0, r6
    3d68:	f7fd fb7c 	bl	1464 <arch_swap>
	return ret;
    3d6c:	e7d3      	b.n	3d16 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3d6e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    3d72:	f043 0308 	orr.w	r3, r3, #8
    3d76:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3d78:	f001 f84c 	bl	4e14 <sys_dlist_remove>
}
    3d7c:	e7d7      	b.n	3d2e <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    3d7e:	4628      	mov	r0, r5
    3d80:	f001 f850 	bl	4e24 <unpend_thread_no_timeout>
    3d84:	f105 0018 	add.w	r0, r5, #24
    3d88:	f001 f8e6 	bl	4f58 <z_abort_timeout>
		ready_thread(thread);
    3d8c:	4628      	mov	r0, r5
    3d8e:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
    3d92:	f7ff fd6f 	bl	3874 <ready_thread>
    3d96:	e7d7      	b.n	3d48 <z_thread_abort+0x6c>
    3d98:	20000990 	.word	0x20000990

00003d9c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    3d9c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    3d9e:	4806      	ldr	r0, [pc, #24]	; (3db8 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    3da0:	4a06      	ldr	r2, [pc, #24]	; (3dbc <z_data_copy+0x20>)
    3da2:	4907      	ldr	r1, [pc, #28]	; (3dc0 <z_data_copy+0x24>)
    3da4:	1a12      	subs	r2, r2, r0
    3da6:	f000 ffca 	bl	4d3e <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    3daa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    3dae:	4a05      	ldr	r2, [pc, #20]	; (3dc4 <z_data_copy+0x28>)
    3db0:	4905      	ldr	r1, [pc, #20]	; (3dc8 <z_data_copy+0x2c>)
    3db2:	4806      	ldr	r0, [pc, #24]	; (3dcc <z_data_copy+0x30>)
    3db4:	f000 bfc3 	b.w	4d3e <z_early_memcpy>
    3db8:	20000000 	.word	0x20000000
    3dbc:	2000016c 	.word	0x2000016c
    3dc0:	000055e0 	.word	0x000055e0
    3dc4:	00000000 	.word	0x00000000
    3dc8:	000055e0 	.word	0x000055e0
    3dcc:	20000000 	.word	0x20000000

00003dd0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    3dd0:	4b03      	ldr	r3, [pc, #12]	; (3de0 <elapsed+0x10>)
    3dd2:	681b      	ldr	r3, [r3, #0]
    3dd4:	b90b      	cbnz	r3, 3dda <elapsed+0xa>
    3dd6:	f7fe bc4b 	b.w	2670 <sys_clock_elapsed>
}
    3dda:	2000      	movs	r0, #0
    3ddc:	4770      	bx	lr
    3dde:	bf00      	nop
    3de0:	200009c0 	.word	0x200009c0

00003de4 <next_timeout>:

static int32_t next_timeout(void)
{
    3de4:	b510      	push	{r4, lr}
	return list->head == list;
    3de6:	4b0e      	ldr	r3, [pc, #56]	; (3e20 <next_timeout+0x3c>)
    3de8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3dea:	429c      	cmp	r4, r3
    3dec:	d104      	bne.n	3df8 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    3dee:	f7ff ffef 	bl	3dd0 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    3df2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
    3df6:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    3df8:	f7ff ffea 	bl	3dd0 <elapsed>
	if ((to == NULL) ||
    3dfc:	2c00      	cmp	r4, #0
    3dfe:	d0f8      	beq.n	3df2 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    3e00:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    3e04:	1a1b      	subs	r3, r3, r0
    3e06:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    3e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    3e0e:	f172 0100 	sbcs.w	r1, r2, #0
    3e12:	daee      	bge.n	3df2 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    3e14:	2a00      	cmp	r2, #0
    3e16:	bfac      	ite	ge
    3e18:	4618      	movge	r0, r3
    3e1a:	2000      	movlt	r0, #0
	return ret;
    3e1c:	e7eb      	b.n	3df6 <next_timeout+0x12>
    3e1e:	bf00      	nop
    3e20:	200000ac 	.word	0x200000ac

00003e24 <remove_timeout>:
{
    3e24:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3e26:	b170      	cbz	r0, 3e46 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    3e28:	4b0b      	ldr	r3, [pc, #44]	; (3e58 <remove_timeout+0x34>)
    3e2a:	685b      	ldr	r3, [r3, #4]
    3e2c:	4298      	cmp	r0, r3
    3e2e:	d00a      	beq.n	3e46 <remove_timeout+0x22>
    3e30:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    3e32:	b143      	cbz	r3, 3e46 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    3e34:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    3e38:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    3e3c:	1912      	adds	r2, r2, r4
    3e3e:	eb41 0105 	adc.w	r1, r1, r5
    3e42:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    3e46:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    3e4a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    3e4c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    3e4e:	2300      	movs	r3, #0
	node->prev = NULL;
    3e50:	e9c0 3300 	strd	r3, r3, [r0]
}
    3e54:	bd30      	pop	{r4, r5, pc}
    3e56:	bf00      	nop
    3e58:	200000ac 	.word	0x200000ac

00003e5c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3e5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    3e60:	bf08      	it	eq
    3e62:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    3e66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e68:	4604      	mov	r4, r0
    3e6a:	461d      	mov	r5, r3
    3e6c:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3e6e:	d05c      	beq.n	3f2a <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    3e70:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    3e72:	f04f 0320 	mov.w	r3, #32
    3e76:	f3ef 8711 	mrs	r7, BASEPRI
    3e7a:	f383 8812 	msr	BASEPRI_MAX, r3
    3e7e:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    3e82:	3201      	adds	r2, #1
    3e84:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    3e88:	da24      	bge.n	3ed4 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    3e8a:	f06f 0301 	mvn.w	r3, #1
    3e8e:	492c      	ldr	r1, [pc, #176]	; (3f40 <z_add_timeout+0xe4>)
    3e90:	e9d1 2000 	ldrd	r2, r0, [r1]
    3e94:	1a9b      	subs	r3, r3, r2
    3e96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3e9a:	eb62 0000 	sbc.w	r0, r2, r0
    3e9e:	1b9e      	subs	r6, r3, r6
    3ea0:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    3ea4:	2e01      	cmp	r6, #1
    3ea6:	f170 0300 	sbcs.w	r3, r0, #0
    3eaa:	da01      	bge.n	3eb0 <z_add_timeout+0x54>
    3eac:	2601      	movs	r6, #1
    3eae:	2000      	movs	r0, #0
    3eb0:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    3eb4:	4e23      	ldr	r6, [pc, #140]	; (3f44 <z_add_timeout+0xe8>)
    3eb6:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    3eba:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3ebc:	45b4      	cmp	ip, r6
    3ebe:	bf08      	it	eq
    3ec0:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    3ec4:	f1bc 0f00 	cmp.w	ip, #0
    3ec8:	d10d      	bne.n	3ee6 <z_add_timeout+0x8a>
	node->prev = tail;
    3eca:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    3ece:	602c      	str	r4, [r5, #0]
	list->tail = node;
    3ed0:	6074      	str	r4, [r6, #4]
}
    3ed2:	e01c      	b.n	3f0e <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    3ed4:	f7ff ff7c 	bl	3dd0 <elapsed>
    3ed8:	3601      	adds	r6, #1
    3eda:	f145 0500 	adc.w	r5, r5, #0
    3ede:	1836      	adds	r6, r6, r0
    3ee0:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    3ee4:	e7e4      	b.n	3eb0 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    3ee6:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    3eea:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    3eee:	4293      	cmp	r3, r2
    3ef0:	eb71 0e00 	sbcs.w	lr, r1, r0
    3ef4:	da1a      	bge.n	3f2c <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
    3ef6:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    3ef8:	f8dc 3004 	ldr.w	r3, [ip, #4]
    3efc:	eb60 0001 	sbc.w	r0, r0, r1
    3f00:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    3f04:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    3f08:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    3f0a:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    3f0e:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3f10:	42b3      	cmp	r3, r6
    3f12:	d006      	beq.n	3f22 <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    3f14:	429c      	cmp	r4, r3
    3f16:	d104      	bne.n	3f22 <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
    3f18:	f7ff ff64 	bl	3de4 <next_timeout>
    3f1c:	2100      	movs	r1, #0
    3f1e:	f7fe fb75 	bl	260c <sys_clock_set_timeout>
	__asm__ volatile(
    3f22:	f387 8811 	msr	BASEPRI, r7
    3f26:	f3bf 8f6f 	isb	sy
		}
	}
}
    3f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    3f2c:	1a9b      	subs	r3, r3, r2
    3f2e:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    3f32:	45ac      	cmp	ip, r5
    3f34:	e9c4 3104 	strd	r3, r1, [r4, #16]
    3f38:	d0c7      	beq.n	3eca <z_add_timeout+0x6e>
    3f3a:	f8dc c000 	ldr.w	ip, [ip]
    3f3e:	e7c1      	b.n	3ec4 <z_add_timeout+0x68>
    3f40:	200002a8 	.word	0x200002a8
    3f44:	200000ac 	.word	0x200000ac

00003f48 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    3f48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    3f4c:	f04f 0320 	mov.w	r3, #32
    3f50:	f3ef 8c11 	mrs	ip, BASEPRI
    3f54:	f383 8812 	msr	BASEPRI_MAX, r3
    3f58:	f3bf 8f6f 	isb	sy
	return list->head == list;
    3f5c:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 4010 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x10>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    3f60:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 4014 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x14>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
    3f64:	2400      	movs	r4, #0
	announce_remaining = ticks;
    3f66:	f8c9 0000 	str.w	r0, [r9]
    3f6a:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
    3f6e:	2500      	movs	r5, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3f70:	4550      	cmp	r0, sl
    3f72:	bf08      	it	eq
    3f74:	2000      	moveq	r0, #0
		curr_tick += dt;
    3f76:	4f28      	ldr	r7, [pc, #160]	; (4018 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x18>)
    3f78:	46e0      	mov	r8, ip
    3f7a:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
    3f7e:	f8d9 3000 	ldr.w	r3, [r9]
    3f82:	b380      	cbz	r0, 3fe6 <sys_clock_announce+0x9e>
    3f84:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
    3f88:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    3f8c:	42b3      	cmp	r3, r6
    3f8e:	eb7e 0b0c 	sbcs.w	fp, lr, ip
    3f92:	da05      	bge.n	3fa0 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    3f94:	1af6      	subs	r6, r6, r3
    3f96:	eb6c 040e 	sbc.w	r4, ip, lr
    3f9a:	e9c0 6404 	strd	r6, r4, [r0, #16]
    3f9e:	e022      	b.n	3fe6 <sys_clock_announce+0x9e>
		curr_tick += dt;
    3fa0:	18b2      	adds	r2, r6, r2
    3fa2:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
    3fa6:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
    3faa:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
    3fae:	f7ff ff39 	bl	3e24 <remove_timeout>
	__asm__ volatile(
    3fb2:	f388 8811 	msr	BASEPRI, r8
    3fb6:	f3bf 8f6f 	isb	sy
		t->fn(t);
    3fba:	6883      	ldr	r3, [r0, #8]
    3fbc:	4798      	blx	r3
	__asm__ volatile(
    3fbe:	f04f 0320 	mov.w	r3, #32
    3fc2:	f3ef 8811 	mrs	r8, BASEPRI
    3fc6:	f383 8812 	msr	BASEPRI_MAX, r3
    3fca:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    3fce:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
    3fd2:	f8da 0000 	ldr.w	r0, [sl]
    3fd6:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3fd8:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
    3fda:	46c4      	mov	ip, r8
    3fdc:	f8c9 3000 	str.w	r3, [r9]
    3fe0:	d1ca      	bne.n	3f78 <sys_clock_announce+0x30>
		curr_tick += dt;
    3fe2:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    3fe6:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    3fe8:	189a      	adds	r2, r3, r2
    3fea:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
    3fee:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
    3ff2:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
    3ff6:	f7ff fef5 	bl	3de4 <next_timeout>
    3ffa:	4621      	mov	r1, r4
    3ffc:	f7fe fb06 	bl	260c <sys_clock_set_timeout>
	__asm__ volatile(
    4000:	f388 8811 	msr	BASEPRI, r8
    4004:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
    4008:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
    400c:	f7ff bc96 	b.w	393c <z_time_slice>
    4010:	200000ac 	.word	0x200000ac
    4014:	200009c0 	.word	0x200009c0
    4018:	200002a8 	.word	0x200002a8

0000401c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    401c:	b510      	push	{r4, lr}
	__asm__ volatile(
    401e:	f04f 0320 	mov.w	r3, #32
    4022:	f3ef 8411 	mrs	r4, BASEPRI
    4026:	f383 8812 	msr	BASEPRI_MAX, r3
    402a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    402e:	f7ff fecf 	bl	3dd0 <elapsed>
    4032:	4603      	mov	r3, r0
    4034:	4a05      	ldr	r2, [pc, #20]	; (404c <sys_clock_tick_get+0x30>)
    4036:	e9d2 0100 	ldrd	r0, r1, [r2]
    403a:	1818      	adds	r0, r3, r0
    403c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    4040:	f384 8811 	msr	BASEPRI, r4
    4044:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    4048:	bd10      	pop	{r4, pc}
    404a:	bf00      	nop
    404c:	200002a8 	.word	0x200002a8

00004050 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    4050:	4801      	ldr	r0, [pc, #4]	; (4058 <boot_banner+0x8>)
    4052:	f000 b997 	b.w	4384 <printk>
    4056:	bf00      	nop
    4058:	000055ae 	.word	0x000055ae

0000405c <nrf_cc3xx_platform_init_no_rng>:
    405c:	b510      	push	{r4, lr}
    405e:	4c0a      	ldr	r4, [pc, #40]	; (4088 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    4060:	6823      	ldr	r3, [r4, #0]
    4062:	b11b      	cbz	r3, 406c <nrf_cc3xx_platform_init_no_rng+0x10>
    4064:	2301      	movs	r3, #1
    4066:	6023      	str	r3, [r4, #0]
    4068:	2000      	movs	r0, #0
    406a:	bd10      	pop	{r4, pc}
    406c:	f000 f8f4 	bl	4258 <CC_LibInitNoRng>
    4070:	2800      	cmp	r0, #0
    4072:	d0f7      	beq.n	4064 <nrf_cc3xx_platform_init_no_rng+0x8>
    4074:	3801      	subs	r0, #1
    4076:	2807      	cmp	r0, #7
    4078:	d803      	bhi.n	4082 <nrf_cc3xx_platform_init_no_rng+0x26>
    407a:	4b04      	ldr	r3, [pc, #16]	; (408c <nrf_cc3xx_platform_init_no_rng+0x30>)
    407c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    4080:	bd10      	pop	{r4, pc}
    4082:	4803      	ldr	r0, [pc, #12]	; (4090 <nrf_cc3xx_platform_init_no_rng+0x34>)
    4084:	bd10      	pop	{r4, pc}
    4086:	bf00      	nop
    4088:	200009c4 	.word	0x200009c4
    408c:	000053f0 	.word	0x000053f0
    4090:	ffff8ffe 	.word	0xffff8ffe

00004094 <nrf_cc3xx_platform_abort>:
    4094:	f3bf 8f4f 	dsb	sy
    4098:	4905      	ldr	r1, [pc, #20]	; (40b0 <nrf_cc3xx_platform_abort+0x1c>)
    409a:	4b06      	ldr	r3, [pc, #24]	; (40b4 <nrf_cc3xx_platform_abort+0x20>)
    409c:	68ca      	ldr	r2, [r1, #12]
    409e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    40a2:	4313      	orrs	r3, r2
    40a4:	60cb      	str	r3, [r1, #12]
    40a6:	f3bf 8f4f 	dsb	sy
    40aa:	bf00      	nop
    40ac:	e7fd      	b.n	40aa <nrf_cc3xx_platform_abort+0x16>
    40ae:	bf00      	nop
    40b0:	e000ed00 	.word	0xe000ed00
    40b4:	05fa0004 	.word	0x05fa0004

000040b8 <CC_PalAbort>:
    40b8:	b430      	push	{r4, r5}
    40ba:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    40be:	2500      	movs	r5, #0
    40c0:	4b0b      	ldr	r3, [pc, #44]	; (40f0 <CC_PalAbort+0x38>)
    40c2:	4c0c      	ldr	r4, [pc, #48]	; (40f4 <CC_PalAbort+0x3c>)
    40c4:	490c      	ldr	r1, [pc, #48]	; (40f8 <CC_PalAbort+0x40>)
    40c6:	6849      	ldr	r1, [r1, #4]
    40c8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    40cc:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    40d0:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    40d4:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    40d8:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    40dc:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
    40e0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    40e4:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
    40e8:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    40ec:	bc30      	pop	{r4, r5}
    40ee:	4708      	bx	r1
    40f0:	50845000 	.word	0x50845000
    40f4:	50844000 	.word	0x50844000
    40f8:	200000b4 	.word	0x200000b4

000040fc <nrf_cc3xx_platform_set_abort>:
    40fc:	4b02      	ldr	r3, [pc, #8]	; (4108 <nrf_cc3xx_platform_set_abort+0xc>)
    40fe:	e9d0 1200 	ldrd	r1, r2, [r0]
    4102:	e9c3 1200 	strd	r1, r2, [r3]
    4106:	4770      	bx	lr
    4108:	200000b4 	.word	0x200000b4

0000410c <mutex_free>:
    410c:	b510      	push	{r4, lr}
    410e:	4604      	mov	r4, r0
    4110:	b150      	cbz	r0, 4128 <mutex_free+0x1c>
    4112:	6863      	ldr	r3, [r4, #4]
    4114:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    4118:	d005      	beq.n	4126 <mutex_free+0x1a>
    411a:	4a06      	ldr	r2, [pc, #24]	; (4134 <mutex_free+0x28>)
    411c:	4293      	cmp	r3, r2
    411e:	d002      	beq.n	4126 <mutex_free+0x1a>
    4120:	2300      	movs	r3, #0
    4122:	6062      	str	r2, [r4, #4]
    4124:	6023      	str	r3, [r4, #0]
    4126:	bd10      	pop	{r4, pc}
    4128:	4b03      	ldr	r3, [pc, #12]	; (4138 <mutex_free+0x2c>)
    412a:	4804      	ldr	r0, [pc, #16]	; (413c <mutex_free+0x30>)
    412c:	685b      	ldr	r3, [r3, #4]
    412e:	4798      	blx	r3
    4130:	e7ef      	b.n	4112 <mutex_free+0x6>
    4132:	bf00      	nop
    4134:	a95c5f2c 	.word	0xa95c5f2c
    4138:	200000b4 	.word	0x200000b4
    413c:	00005410 	.word	0x00005410

00004140 <mutex_lock>:
    4140:	b1c8      	cbz	r0, 4176 <mutex_lock+0x36>
    4142:	6843      	ldr	r3, [r0, #4]
    4144:	4a0d      	ldr	r2, [pc, #52]	; (417c <mutex_lock+0x3c>)
    4146:	4293      	cmp	r3, r2
    4148:	d013      	beq.n	4172 <mutex_lock+0x32>
    414a:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    414e:	d00e      	beq.n	416e <mutex_lock+0x2e>
    4150:	2301      	movs	r3, #1
    4152:	e850 2f00 	ldrex	r2, [r0]
    4156:	4619      	mov	r1, r3
    4158:	e840 1c00 	strex	ip, r1, [r0]
    415c:	f09c 0f00 	teq	ip, #0
    4160:	d1f7      	bne.n	4152 <mutex_lock+0x12>
    4162:	2a01      	cmp	r2, #1
    4164:	d0f5      	beq.n	4152 <mutex_lock+0x12>
    4166:	f3bf 8f5f 	dmb	sy
    416a:	2000      	movs	r0, #0
    416c:	4770      	bx	lr
    416e:	4804      	ldr	r0, [pc, #16]	; (4180 <mutex_lock+0x40>)
    4170:	4770      	bx	lr
    4172:	4804      	ldr	r0, [pc, #16]	; (4184 <mutex_lock+0x44>)
    4174:	4770      	bx	lr
    4176:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    417a:	4770      	bx	lr
    417c:	a95c5f2c 	.word	0xa95c5f2c
    4180:	ffff8fe9 	.word	0xffff8fe9
    4184:	ffff8fea 	.word	0xffff8fea

00004188 <mutex_unlock>:
    4188:	4603      	mov	r3, r0
    418a:	b180      	cbz	r0, 41ae <mutex_unlock+0x26>
    418c:	6842      	ldr	r2, [r0, #4]
    418e:	4909      	ldr	r1, [pc, #36]	; (41b4 <mutex_unlock+0x2c>)
    4190:	428a      	cmp	r2, r1
    4192:	d00a      	beq.n	41aa <mutex_unlock+0x22>
    4194:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    4198:	d005      	beq.n	41a6 <mutex_unlock+0x1e>
    419a:	f3bf 8f5f 	dmb	sy
    419e:	2200      	movs	r2, #0
    41a0:	4610      	mov	r0, r2
    41a2:	601a      	str	r2, [r3, #0]
    41a4:	4770      	bx	lr
    41a6:	4804      	ldr	r0, [pc, #16]	; (41b8 <mutex_unlock+0x30>)
    41a8:	4770      	bx	lr
    41aa:	4804      	ldr	r0, [pc, #16]	; (41bc <mutex_unlock+0x34>)
    41ac:	4770      	bx	lr
    41ae:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    41b2:	4770      	bx	lr
    41b4:	a95c5f2c 	.word	0xa95c5f2c
    41b8:	ffff8fe9 	.word	0xffff8fe9
    41bc:	ffff8fea 	.word	0xffff8fea

000041c0 <mutex_init>:
    41c0:	b510      	push	{r4, lr}
    41c2:	4604      	mov	r4, r0
    41c4:	b120      	cbz	r0, 41d0 <mutex_init+0x10>
    41c6:	2300      	movs	r3, #0
    41c8:	4a03      	ldr	r2, [pc, #12]	; (41d8 <mutex_init+0x18>)
    41ca:	6023      	str	r3, [r4, #0]
    41cc:	6062      	str	r2, [r4, #4]
    41ce:	bd10      	pop	{r4, pc}
    41d0:	4802      	ldr	r0, [pc, #8]	; (41dc <mutex_init+0x1c>)
    41d2:	f7ff ff71 	bl	40b8 <CC_PalAbort>
    41d6:	e7f6      	b.n	41c6 <mutex_init+0x6>
    41d8:	3a00003a 	.word	0x3a00003a
    41dc:	00005438 	.word	0x00005438

000041e0 <nrf_cc3xx_platform_set_mutexes>:
    41e0:	b570      	push	{r4, r5, r6, lr}
    41e2:	4c19      	ldr	r4, [pc, #100]	; (4248 <nrf_cc3xx_platform_set_mutexes+0x68>)
    41e4:	f8d0 c004 	ldr.w	ip, [r0, #4]
    41e8:	6806      	ldr	r6, [r0, #0]
    41ea:	f8c4 c004 	str.w	ip, [r4, #4]
    41ee:	f8d0 c008 	ldr.w	ip, [r0, #8]
    41f2:	68c0      	ldr	r0, [r0, #12]
    41f4:	f8c4 c008 	str.w	ip, [r4, #8]
    41f8:	60e0      	str	r0, [r4, #12]
    41fa:	6026      	str	r6, [r4, #0]
    41fc:	6808      	ldr	r0, [r1, #0]
    41fe:	4b13      	ldr	r3, [pc, #76]	; (424c <nrf_cc3xx_platform_set_mutexes+0x6c>)
    4200:	4d13      	ldr	r5, [pc, #76]	; (4250 <nrf_cc3xx_platform_set_mutexes+0x70>)
    4202:	6018      	str	r0, [r3, #0]
    4204:	6848      	ldr	r0, [r1, #4]
    4206:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
    420a:	6058      	str	r0, [r3, #4]
    420c:	6888      	ldr	r0, [r1, #8]
    420e:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    4212:	6098      	str	r0, [r3, #8]
    4214:	68c8      	ldr	r0, [r1, #12]
    4216:	6909      	ldr	r1, [r1, #16]
    4218:	60d8      	str	r0, [r3, #12]
    421a:	6119      	str	r1, [r3, #16]
    421c:	d012      	beq.n	4244 <nrf_cc3xx_platform_set_mutexes+0x64>
    421e:	2300      	movs	r3, #0
    4220:	4a0c      	ldr	r2, [pc, #48]	; (4254 <nrf_cc3xx_platform_set_mutexes+0x74>)
    4222:	f505 708a 	add.w	r0, r5, #276	; 0x114
    4226:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
    422a:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    422e:	f8c5 2118 	str.w	r2, [r5, #280]	; 0x118
    4232:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
    4236:	47b0      	blx	r6
    4238:	6823      	ldr	r3, [r4, #0]
    423a:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    423e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4242:	4718      	bx	r3
    4244:	bd70      	pop	{r4, r5, r6, pc}
    4246:	bf00      	nop
    4248:	200000d0 	.word	0x200000d0
    424c:	200000bc 	.word	0x200000bc
    4250:	200009dc 	.word	0x200009dc
    4254:	a95c5f2c 	.word	0xa95c5f2c

00004258 <CC_LibInitNoRng>:
    4258:	b508      	push	{r3, lr}
    425a:	f000 f811 	bl	4280 <CC_HalInit>
    425e:	b930      	cbnz	r0, 426e <CC_LibInitNoRng+0x16>
    4260:	f000 f810 	bl	4284 <CC_PalInit>
    4264:	b938      	cbnz	r0, 4276 <CC_LibInitNoRng+0x1e>
    4266:	4a05      	ldr	r2, [pc, #20]	; (427c <CC_LibInitNoRng+0x24>)
    4268:	f8c2 0a0c 	str.w	r0, [r2, #2572]	; 0xa0c
    426c:	bd08      	pop	{r3, pc}
    426e:	f000 f837 	bl	42e0 <CC_PalTerminate>
    4272:	2003      	movs	r0, #3
    4274:	bd08      	pop	{r3, pc}
    4276:	2004      	movs	r0, #4
    4278:	bd08      	pop	{r3, pc}
    427a:	bf00      	nop
    427c:	50845000 	.word	0x50845000

00004280 <CC_HalInit>:
    4280:	2000      	movs	r0, #0
    4282:	4770      	bx	lr

00004284 <CC_PalInit>:
    4284:	b510      	push	{r4, lr}
    4286:	4811      	ldr	r0, [pc, #68]	; (42cc <CC_PalInit+0x48>)
    4288:	f000 f848 	bl	431c <CC_PalMutexCreate>
    428c:	b100      	cbz	r0, 4290 <CC_PalInit+0xc>
    428e:	bd10      	pop	{r4, pc}
    4290:	480f      	ldr	r0, [pc, #60]	; (42d0 <CC_PalInit+0x4c>)
    4292:	f000 f843 	bl	431c <CC_PalMutexCreate>
    4296:	2800      	cmp	r0, #0
    4298:	d1f9      	bne.n	428e <CC_PalInit+0xa>
    429a:	4c0e      	ldr	r4, [pc, #56]	; (42d4 <CC_PalInit+0x50>)
    429c:	4620      	mov	r0, r4
    429e:	f000 f83d 	bl	431c <CC_PalMutexCreate>
    42a2:	2800      	cmp	r0, #0
    42a4:	d1f3      	bne.n	428e <CC_PalInit+0xa>
    42a6:	4b0c      	ldr	r3, [pc, #48]	; (42d8 <CC_PalInit+0x54>)
    42a8:	480c      	ldr	r0, [pc, #48]	; (42dc <CC_PalInit+0x58>)
    42aa:	601c      	str	r4, [r3, #0]
    42ac:	f000 f836 	bl	431c <CC_PalMutexCreate>
    42b0:	4601      	mov	r1, r0
    42b2:	2800      	cmp	r0, #0
    42b4:	d1eb      	bne.n	428e <CC_PalInit+0xa>
    42b6:	f000 f82d 	bl	4314 <CC_PalDmaInit>
    42ba:	4604      	mov	r4, r0
    42bc:	b108      	cbz	r0, 42c2 <CC_PalInit+0x3e>
    42be:	4620      	mov	r0, r4
    42c0:	bd10      	pop	{r4, pc}
    42c2:	f000 f83f 	bl	4344 <CC_PalPowerSaveModeInit>
    42c6:	4620      	mov	r0, r4
    42c8:	e7fa      	b.n	42c0 <CC_PalInit+0x3c>
    42ca:	bf00      	nop
    42cc:	20000110 	.word	0x20000110
    42d0:	2000010c 	.word	0x2000010c
    42d4:	20000108 	.word	0x20000108
    42d8:	20000100 	.word	0x20000100
    42dc:	20000104 	.word	0x20000104

000042e0 <CC_PalTerminate>:
    42e0:	b508      	push	{r3, lr}
    42e2:	4808      	ldr	r0, [pc, #32]	; (4304 <CC_PalTerminate+0x24>)
    42e4:	f000 f824 	bl	4330 <CC_PalMutexDestroy>
    42e8:	4807      	ldr	r0, [pc, #28]	; (4308 <CC_PalTerminate+0x28>)
    42ea:	f000 f821 	bl	4330 <CC_PalMutexDestroy>
    42ee:	4807      	ldr	r0, [pc, #28]	; (430c <CC_PalTerminate+0x2c>)
    42f0:	f000 f81e 	bl	4330 <CC_PalMutexDestroy>
    42f4:	4806      	ldr	r0, [pc, #24]	; (4310 <CC_PalTerminate+0x30>)
    42f6:	f000 f81b 	bl	4330 <CC_PalMutexDestroy>
    42fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    42fe:	f000 b80b 	b.w	4318 <CC_PalDmaTerminate>
    4302:	bf00      	nop
    4304:	20000110 	.word	0x20000110
    4308:	2000010c 	.word	0x2000010c
    430c:	20000108 	.word	0x20000108
    4310:	20000104 	.word	0x20000104

00004314 <CC_PalDmaInit>:
    4314:	2000      	movs	r0, #0
    4316:	4770      	bx	lr

00004318 <CC_PalDmaTerminate>:
    4318:	4770      	bx	lr
    431a:	bf00      	nop

0000431c <CC_PalMutexCreate>:
    431c:	b508      	push	{r3, lr}
    431e:	4b03      	ldr	r3, [pc, #12]	; (432c <CC_PalMutexCreate+0x10>)
    4320:	6802      	ldr	r2, [r0, #0]
    4322:	681b      	ldr	r3, [r3, #0]
    4324:	6810      	ldr	r0, [r2, #0]
    4326:	4798      	blx	r3
    4328:	2000      	movs	r0, #0
    432a:	bd08      	pop	{r3, pc}
    432c:	200000d0 	.word	0x200000d0

00004330 <CC_PalMutexDestroy>:
    4330:	b508      	push	{r3, lr}
    4332:	4b03      	ldr	r3, [pc, #12]	; (4340 <CC_PalMutexDestroy+0x10>)
    4334:	6802      	ldr	r2, [r0, #0]
    4336:	685b      	ldr	r3, [r3, #4]
    4338:	6810      	ldr	r0, [r2, #0]
    433a:	4798      	blx	r3
    433c:	2000      	movs	r0, #0
    433e:	bd08      	pop	{r3, pc}
    4340:	200000d0 	.word	0x200000d0

00004344 <CC_PalPowerSaveModeInit>:
    4344:	b570      	push	{r4, r5, r6, lr}
    4346:	4c09      	ldr	r4, [pc, #36]	; (436c <CC_PalPowerSaveModeInit+0x28>)
    4348:	4d09      	ldr	r5, [pc, #36]	; (4370 <CC_PalPowerSaveModeInit+0x2c>)
    434a:	6920      	ldr	r0, [r4, #16]
    434c:	68ab      	ldr	r3, [r5, #8]
    434e:	4798      	blx	r3
    4350:	b118      	cbz	r0, 435a <CC_PalPowerSaveModeInit+0x16>
    4352:	4b08      	ldr	r3, [pc, #32]	; (4374 <CC_PalPowerSaveModeInit+0x30>)
    4354:	4808      	ldr	r0, [pc, #32]	; (4378 <CC_PalPowerSaveModeInit+0x34>)
    4356:	685b      	ldr	r3, [r3, #4]
    4358:	4798      	blx	r3
    435a:	2100      	movs	r1, #0
    435c:	4a07      	ldr	r2, [pc, #28]	; (437c <CC_PalPowerSaveModeInit+0x38>)
    435e:	68eb      	ldr	r3, [r5, #12]
    4360:	6011      	str	r1, [r2, #0]
    4362:	6920      	ldr	r0, [r4, #16]
    4364:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4368:	4718      	bx	r3
    436a:	bf00      	nop
    436c:	200000bc 	.word	0x200000bc
    4370:	200000d0 	.word	0x200000d0
    4374:	200000b4 	.word	0x200000b4
    4378:	0000545c 	.word	0x0000545c
    437c:	200009d8 	.word	0x200009d8

00004380 <arch_printk_char_out>:
}
    4380:	2000      	movs	r0, #0
    4382:	4770      	bx	lr

00004384 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    4384:	b40f      	push	{r0, r1, r2, r3}
    4386:	b507      	push	{r0, r1, r2, lr}
    4388:	a904      	add	r1, sp, #16
    438a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    438e:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    4390:	f7fc f880 	bl	494 <vprintk>

	va_end(ap);
}
    4394:	b003      	add	sp, #12
    4396:	f85d eb04 	ldr.w	lr, [sp], #4
    439a:	b004      	add	sp, #16
    439c:	4770      	bx	lr

0000439e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    439e:	4604      	mov	r4, r0
    43a0:	b508      	push	{r3, lr}
    43a2:	4608      	mov	r0, r1
    43a4:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    43a6:	461a      	mov	r2, r3
    43a8:	47a0      	blx	r4
	return z_impl_z_current_get();
    43aa:	f7ff fc91 	bl	3cd0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    43ae:	f7fd fad5 	bl	195c <z_impl_k_thread_abort>

000043b2 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    43b2:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    43b4:	f013 0307 	ands.w	r3, r3, #7
    43b8:	d105      	bne.n	43c6 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    43ba:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    43bc:	2b00      	cmp	r3, #0
    43be:	bf0c      	ite	eq
    43c0:	2000      	moveq	r0, #0
    43c2:	2003      	movne	r0, #3
    43c4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    43c6:	2b02      	cmp	r3, #2
    43c8:	d105      	bne.n	43d6 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    43ca:	8b40      	ldrh	r0, [r0, #26]
    43cc:	fab0 f080 	clz	r0, r0
    43d0:	0940      	lsrs	r0, r0, #5
    43d2:	0080      	lsls	r0, r0, #2
    43d4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    43d6:	2b01      	cmp	r3, #1
    43d8:	d105      	bne.n	43e6 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    43da:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    43dc:	2b00      	cmp	r3, #0
    43de:	bf0c      	ite	eq
    43e0:	2000      	moveq	r0, #0
    43e2:	2005      	movne	r0, #5
    43e4:	4770      	bx	lr
	int evt = EVT_NOP;
    43e6:	2000      	movs	r0, #0
}
    43e8:	4770      	bx	lr

000043ea <validate_args>:
{
    43ea:	b510      	push	{r4, lr}
    43ec:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    43ee:	b100      	cbz	r0, 43f2 <validate_args+0x8>
    43f0:	b911      	cbnz	r1, 43f8 <validate_args+0xe>
		return -EINVAL;
    43f2:	f06f 0015 	mvn.w	r0, #21
}
    43f6:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    43f8:	1d08      	adds	r0, r1, #4
    43fa:	f000 f895 	bl	4528 <sys_notify_validate>
	if ((rv == 0)
    43fe:	2800      	cmp	r0, #0
    4400:	d1f9      	bne.n	43f6 <validate_args+0xc>
	    && ((cli->notify.flags
    4402:	68a3      	ldr	r3, [r4, #8]
    4404:	2b03      	cmp	r3, #3
    4406:	d9f6      	bls.n	43f6 <validate_args+0xc>
    4408:	e7f3      	b.n	43f2 <validate_args+0x8>

0000440a <notify_one>:
{
    440a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    440e:	460d      	mov	r5, r1
    4410:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    4412:	4619      	mov	r1, r3
    4414:	1d28      	adds	r0, r5, #4
{
    4416:	4690      	mov	r8, r2
    4418:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    441a:	f000 f896 	bl	454a <sys_notify_finalize>
	if (cb) {
    441e:	4604      	mov	r4, r0
    4420:	b138      	cbz	r0, 4432 <notify_one+0x28>
		cb(mgr, cli, state, res);
    4422:	4633      	mov	r3, r6
    4424:	4642      	mov	r2, r8
    4426:	4629      	mov	r1, r5
    4428:	4638      	mov	r0, r7
    442a:	46a4      	mov	ip, r4
}
    442c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    4430:	4760      	bx	ip
}
    4432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004436 <transition_complete>:
{
    4436:	b410      	push	{r4}
	__asm__ volatile(
    4438:	f04f 0420 	mov.w	r4, #32
    443c:	f3ef 8211 	mrs	r2, BASEPRI
    4440:	f384 8812 	msr	BASEPRI_MAX, r4
    4444:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    4448:	6141      	str	r1, [r0, #20]
}
    444a:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    444c:	2101      	movs	r1, #1
    444e:	f7fc b82f 	b.w	4b0 <process_event>

00004452 <onoff_manager_init>:
{
    4452:	b538      	push	{r3, r4, r5, lr}
    4454:	460c      	mov	r4, r1
	if ((mgr == NULL)
    4456:	4605      	mov	r5, r0
    4458:	b158      	cbz	r0, 4472 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    445a:	b151      	cbz	r1, 4472 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    445c:	680b      	ldr	r3, [r1, #0]
    445e:	b143      	cbz	r3, 4472 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    4460:	684b      	ldr	r3, [r1, #4]
    4462:	b133      	cbz	r3, 4472 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    4464:	221c      	movs	r2, #28
    4466:	2100      	movs	r1, #0
    4468:	f000 f944 	bl	46f4 <memset>
	return 0;
    446c:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    446e:	612c      	str	r4, [r5, #16]
}
    4470:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    4472:	f06f 0015 	mvn.w	r0, #21
    4476:	e7fb      	b.n	4470 <onoff_manager_init+0x1e>

00004478 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    4478:	b570      	push	{r4, r5, r6, lr}
    447a:	4605      	mov	r5, r0
    447c:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    447e:	f7ff ffb4 	bl	43ea <validate_args>

	if (rv < 0) {
    4482:	1e04      	subs	r4, r0, #0
    4484:	db15      	blt.n	44b2 <onoff_request+0x3a>
    4486:	f04f 0320 	mov.w	r3, #32
    448a:	f3ef 8211 	mrs	r2, BASEPRI
    448e:	f383 8812 	msr	BASEPRI_MAX, r3
    4492:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    4496:	f64f 71ff 	movw	r1, #65535	; 0xffff
    449a:	8b6b      	ldrh	r3, [r5, #26]
    449c:	8b2c      	ldrh	r4, [r5, #24]
    449e:	428b      	cmp	r3, r1
    44a0:	f004 0407 	and.w	r4, r4, #7
    44a4:	d107      	bne.n	44b6 <onoff_request+0x3e>
	__asm__ volatile(
    44a6:	f382 8811 	msr	BASEPRI, r2
    44aa:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    44ae:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    44b2:	4620      	mov	r0, r4
    44b4:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    44b6:	2c02      	cmp	r4, #2
    44b8:	d10c      	bne.n	44d4 <onoff_request+0x5c>
		mgr->refs += 1U;
    44ba:	3301      	adds	r3, #1
    44bc:	836b      	strh	r3, [r5, #26]
    44be:	f382 8811 	msr	BASEPRI, r2
    44c2:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    44c6:	2300      	movs	r3, #0
    44c8:	4622      	mov	r2, r4
    44ca:	4631      	mov	r1, r6
    44cc:	4628      	mov	r0, r5
    44ce:	f7ff ff9c 	bl	440a <notify_one>
    44d2:	e7ee      	b.n	44b2 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    44d4:	2c06      	cmp	r4, #6
    44d6:	d814      	bhi.n	4502 <onoff_request+0x8a>
    44d8:	e8df f004 	tbb	[pc, r4]
    44dc:	13131304 	.word	0x13131304
    44e0:	1a04      	.short	0x1a04
    44e2:	04          	.byte	0x04
    44e3:	00          	.byte	0x00
	parent->next = child;
    44e4:	2300      	movs	r3, #0
    44e6:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    44e8:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    44ea:	b93b      	cbnz	r3, 44fc <onoff_request+0x84>
	list->head = node;
    44ec:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    44f0:	b9ac      	cbnz	r4, 451e <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    44f2:	2102      	movs	r1, #2
    44f4:	4628      	mov	r0, r5
    44f6:	f7fb ffdb 	bl	4b0 <process_event>
    44fa:	e7da      	b.n	44b2 <onoff_request+0x3a>
	parent->next = child;
    44fc:	601e      	str	r6, [r3, #0]
	list->tail = node;
    44fe:	606e      	str	r6, [r5, #4]
}
    4500:	e7f6      	b.n	44f0 <onoff_request+0x78>
    4502:	f382 8811 	msr	BASEPRI, r2
    4506:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    450a:	f06f 0404 	mvn.w	r4, #4
    450e:	e7d0      	b.n	44b2 <onoff_request+0x3a>
    4510:	f382 8811 	msr	BASEPRI, r2
    4514:	f3bf 8f6f 	isb	sy
    4518:	f06f 0485 	mvn.w	r4, #133	; 0x85
    451c:	e7c9      	b.n	44b2 <onoff_request+0x3a>
    451e:	f382 8811 	msr	BASEPRI, r2
    4522:	f3bf 8f6f 	isb	sy
		if (notify) {
    4526:	e7c4      	b.n	44b2 <onoff_request+0x3a>

00004528 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    4528:	4603      	mov	r3, r0
    452a:	b158      	cbz	r0, 4544 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    452c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    452e:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    4532:	2a01      	cmp	r2, #1
    4534:	d003      	beq.n	453e <sys_notify_validate+0x16>
    4536:	2a03      	cmp	r2, #3
    4538:	d104      	bne.n	4544 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    453a:	6802      	ldr	r2, [r0, #0]
    453c:	b112      	cbz	r2, 4544 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    453e:	2000      	movs	r0, #0
    4540:	6098      	str	r0, [r3, #8]
    4542:	4770      	bx	lr
    4544:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    4548:	4770      	bx	lr

0000454a <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    454a:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    454c:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    454e:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    4552:	2a03      	cmp	r2, #3
    4554:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
    4558:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = NULL;
    455a:	bf14      	ite	ne
    455c:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    455e:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    4560:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    4562:	4770      	bx	lr

00004564 <encode_uint>:
{
    4564:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4568:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
    456a:	78d3      	ldrb	r3, [r2, #3]
{
    456c:	4680      	mov	r8, r0
	switch (specifier) {
    456e:	2b6f      	cmp	r3, #111	; 0x6f
{
    4570:	460f      	mov	r7, r1
    4572:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    4574:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    4578:	d029      	beq.n	45ce <encode_uint+0x6a>
    457a:	d824      	bhi.n	45c6 <encode_uint+0x62>
		return 10;
    457c:	2b58      	cmp	r3, #88	; 0x58
    457e:	bf0c      	ite	eq
    4580:	2610      	moveq	r6, #16
    4582:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    4584:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    4588:	4632      	mov	r2, r6
    458a:	2300      	movs	r3, #0
    458c:	4640      	mov	r0, r8
    458e:	4639      	mov	r1, r7
    4590:	f7fb fde0 	bl	154 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4594:	2a09      	cmp	r2, #9
    4596:	b2d4      	uxtb	r4, r2
    4598:	d81e      	bhi.n	45d8 <encode_uint+0x74>
    459a:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    459c:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    459e:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    45a0:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    45a4:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    45a8:	d301      	bcc.n	45ae <encode_uint+0x4a>
    45aa:	45d1      	cmp	r9, sl
    45ac:	d811      	bhi.n	45d2 <encode_uint+0x6e>
	if (conv->flag_hash) {
    45ae:	782b      	ldrb	r3, [r5, #0]
    45b0:	069b      	lsls	r3, r3, #26
    45b2:	d505      	bpl.n	45c0 <encode_uint+0x5c>
		if (radix == 8) {
    45b4:	2e08      	cmp	r6, #8
    45b6:	d115      	bne.n	45e4 <encode_uint+0x80>
			conv->altform_0 = true;
    45b8:	78ab      	ldrb	r3, [r5, #2]
    45ba:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    45be:	70ab      	strb	r3, [r5, #2]
}
    45c0:	4648      	mov	r0, r9
    45c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    45c6:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    45ca:	2b70      	cmp	r3, #112	; 0x70
    45cc:	e7d7      	b.n	457e <encode_uint+0x1a>
	switch (specifier) {
    45ce:	2608      	movs	r6, #8
    45d0:	e7d8      	b.n	4584 <encode_uint+0x20>
		value /= radix;
    45d2:	4680      	mov	r8, r0
    45d4:	460f      	mov	r7, r1
    45d6:	e7d7      	b.n	4588 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    45d8:	f1bb 0f19 	cmp.w	fp, #25
    45dc:	bf94      	ite	ls
    45de:	3437      	addls	r4, #55	; 0x37
    45e0:	3457      	addhi	r4, #87	; 0x57
    45e2:	e7db      	b.n	459c <encode_uint+0x38>
		} else if (radix == 16) {
    45e4:	2e10      	cmp	r6, #16
    45e6:	d1eb      	bne.n	45c0 <encode_uint+0x5c>
			conv->altform_0c = true;
    45e8:	78ab      	ldrb	r3, [r5, #2]
    45ea:	f043 0310 	orr.w	r3, r3, #16
    45ee:	e7e6      	b.n	45be <encode_uint+0x5a>

000045f0 <outs>:
{
    45f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    45f4:	4607      	mov	r7, r0
    45f6:	4688      	mov	r8, r1
    45f8:	4615      	mov	r5, r2
    45fa:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    45fc:	4614      	mov	r4, r2
    45fe:	42b4      	cmp	r4, r6
    4600:	d305      	bcc.n	460e <outs+0x1e>
    4602:	b10e      	cbz	r6, 4608 <outs+0x18>
	return (int)count;
    4604:	1b60      	subs	r0, r4, r5
    4606:	e008      	b.n	461a <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    4608:	7823      	ldrb	r3, [r4, #0]
    460a:	2b00      	cmp	r3, #0
    460c:	d0fa      	beq.n	4604 <outs+0x14>
		int rc = out((int)*sp++, ctx);
    460e:	4641      	mov	r1, r8
    4610:	f814 0b01 	ldrb.w	r0, [r4], #1
    4614:	47b8      	blx	r7
		if (rc < 0) {
    4616:	2800      	cmp	r0, #0
    4618:	daf1      	bge.n	45fe <outs+0xe>
}
    461a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000461e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    461e:	4770      	bx	lr

00004620 <pm_state_exit_post_ops>:
    4620:	2300      	movs	r3, #0
    4622:	f383 8811 	msr	BASEPRI, r3
    4626:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    462a:	4770      	bx	lr

0000462c <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    462c:	2000      	movs	r0, #0
{
    462e:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    4630:	f7fc fbfe 	bl	e30 <sys_reboot>

00004634 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    4634:	f000 bb66 	b.w	4d04 <z_fatal_error>

00004638 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    4638:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    463a:	6800      	ldr	r0, [r0, #0]
    463c:	f000 bb62 	b.w	4d04 <z_fatal_error>

00004640 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    4640:	2100      	movs	r1, #0
    4642:	2001      	movs	r0, #1
    4644:	f7ff bff6 	b.w	4634 <z_arm_fatal_error>

00004648 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    4648:	b508      	push	{r3, lr}
	handler();
    464a:	f7fc feeb 	bl	1424 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    464e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    4652:	f7fc bfad 	b.w	15b0 <z_arm_exc_exit>

00004656 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    4656:	6e43      	ldr	r3, [r0, #100]	; 0x64
    4658:	f383 880b 	msr	PSPLIM, r3
}
    465c:	4770      	bx	lr

0000465e <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    465e:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
    4662:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    4666:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
    4668:	bf08      	it	eq
    466a:	f06f 0015 	mvneq.w	r0, #21
    466e:	4770      	bx	lr

00004670 <mpu_configure_region>:
{
    4670:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	p_attr->rbar = attr->rbar &
    4672:	890a      	ldrh	r2, [r1, #8]
    4674:	894e      	ldrh	r6, [r1, #10]
	region_conf.base = new_region->start;
    4676:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
    4678:	684d      	ldr	r5, [r1, #4]
    467a:	f002 021f 	and.w	r2, r2, #31
    467e:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
	region_conf.base = new_region->start;
    4682:	9300      	str	r3, [sp, #0]
    4684:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    4688:	f023 031f 	bic.w	r3, r3, #31
    468c:	1e6a      	subs	r2, r5, #1
    468e:	4413      	add	r3, r2
    4690:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    4694:	2807      	cmp	r0, #7
    4696:	9303      	str	r3, [sp, #12]
    4698:	d804      	bhi.n	46a4 <mpu_configure_region+0x34>
	region_init(index, region_conf);
    469a:	4669      	mov	r1, sp
    469c:	f7fd f990 	bl	19c0 <region_init>
}
    46a0:	b004      	add	sp, #16
    46a2:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    46a4:	f06f 0015 	mvn.w	r0, #21
	return region_allocate_and_init(index,
    46a8:	e7fa      	b.n	46a0 <mpu_configure_region+0x30>

000046aa <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    46aa:	4603      	mov	r3, r0
    46ac:	3901      	subs	r1, #1
    46ae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    46b2:	b90a      	cbnz	r2, 46b8 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    46b4:	701a      	strb	r2, [r3, #0]

	return dest;
}
    46b6:	4770      	bx	lr
		*d = *s;
    46b8:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    46bc:	e7f7      	b.n	46ae <strcpy+0x4>

000046be <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    46be:	4603      	mov	r3, r0
	size_t n = 0;
    46c0:	2000      	movs	r0, #0

	while (*s != '\0') {
    46c2:	5c1a      	ldrb	r2, [r3, r0]
    46c4:	b902      	cbnz	r2, 46c8 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    46c6:	4770      	bx	lr
		n++;
    46c8:	3001      	adds	r0, #1
    46ca:	e7fa      	b.n	46c2 <strlen+0x4>

000046cc <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    46cc:	4603      	mov	r3, r0
	size_t n = 0;
    46ce:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    46d0:	5c1a      	ldrb	r2, [r3, r0]
    46d2:	b10a      	cbz	r2, 46d8 <strnlen+0xc>
    46d4:	4288      	cmp	r0, r1
    46d6:	d100      	bne.n	46da <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    46d8:	4770      	bx	lr
		n++;
    46da:	3001      	adds	r0, #1
    46dc:	e7f8      	b.n	46d0 <strnlen+0x4>

000046de <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    46de:	b510      	push	{r4, lr}
    46e0:	1e43      	subs	r3, r0, #1
    46e2:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    46e4:	4291      	cmp	r1, r2
    46e6:	d100      	bne.n	46ea <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    46e8:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    46ea:	f811 4b01 	ldrb.w	r4, [r1], #1
    46ee:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    46f2:	e7f7      	b.n	46e4 <memcpy+0x6>

000046f4 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    46f4:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
    46f6:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    46f8:	4402      	add	r2, r0
    46fa:	4293      	cmp	r3, r2
    46fc:	d100      	bne.n	4700 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    46fe:	4770      	bx	lr
		*(d_byte++) = c_byte;
    4700:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    4704:	e7f9      	b.n	46fa <memset+0x6>

00004706 <_stdout_hook_default>:
}
    4706:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    470a:	4770      	bx	lr

0000470c <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    470c:	220c      	movs	r2, #12
    470e:	6903      	ldr	r3, [r0, #16]
    4710:	b2c9      	uxtb	r1, r1
    4712:	fb01 3302 	mla	r3, r1, r2, r3
    4716:	6f98      	ldr	r0, [r3, #120]	; 0x78
}
    4718:	f000 0007 	and.w	r0, r0, #7
    471c:	4770      	bx	lr

0000471e <set_on_state>:
	__asm__ volatile(
    471e:	f04f 0320 	mov.w	r3, #32
    4722:	f3ef 8211 	mrs	r2, BASEPRI
    4726:	f383 8812 	msr	BASEPRI_MAX, r3
    472a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    472e:	6803      	ldr	r3, [r0, #0]
    4730:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    4734:	f043 0302 	orr.w	r3, r3, #2
    4738:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    473a:	f382 8811 	msr	BASEPRI, r2
    473e:	f3bf 8f6f 	isb	sy
}
    4742:	4770      	bx	lr

00004744 <stop>:
{
    4744:	b570      	push	{r4, r5, r6, lr}
    4746:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    4748:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    474a:	f04f 0420 	mov.w	r4, #32
    474e:	f3ef 8511 	mrs	r5, BASEPRI
    4752:	f384 8812 	msr	BASEPRI_MAX, r4
    4756:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    475a:	260c      	movs	r6, #12
    475c:	fb06 3401 	mla	r4, r6, r1, r3
    4760:	6fa4      	ldr	r4, [r4, #120]	; 0x78
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    4762:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    4766:	d008      	beq.n	477a <stop+0x36>
    4768:	42a2      	cmp	r2, r4
    476a:	d006      	beq.n	477a <stop+0x36>
	__asm__ volatile(
    476c:	f385 8811 	msr	BASEPRI, r5
    4770:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    4774:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    4778:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    477a:	2201      	movs	r2, #1
    477c:	fb06 3301 	mla	r3, r6, r1, r3
    4780:	679a      	str	r2, [r3, #120]	; 0x78
    4782:	f385 8811 	msr	BASEPRI, r5
    4786:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    478a:	6843      	ldr	r3, [r0, #4]
    478c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    4790:	685b      	ldr	r3, [r3, #4]
    4792:	4798      	blx	r3
	return 0;
    4794:	2000      	movs	r0, #0
    4796:	e7ef      	b.n	4778 <stop+0x34>

00004798 <api_stop>:
	return stop(dev, subsys, CTX_API);
    4798:	2280      	movs	r2, #128	; 0x80
    479a:	f7ff bfd3 	b.w	4744 <stop>

0000479e <async_start>:
{
    479e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    47a0:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    47a2:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    47a4:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    47a6:	f04f 0520 	mov.w	r5, #32
    47aa:	f3ef 8611 	mrs	r6, BASEPRI
    47ae:	f385 8812 	msr	BASEPRI_MAX, r5
    47b2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    47b6:	250c      	movs	r5, #12
    47b8:	fb05 4401 	mla	r4, r5, r1, r4
    47bc:	6fa5      	ldr	r5, [r4, #120]	; 0x78
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    47be:	f005 0c07 	and.w	ip, r5, #7
    47c2:	f1bc 0f01 	cmp.w	ip, #1
    47c6:	d10c      	bne.n	47e2 <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    47c8:	67a7      	str	r7, [r4, #120]	; 0x78
	__asm__ volatile(
    47ca:	f386 8811 	msr	BASEPRI, r6
    47ce:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    47d2:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
	 get_sub_config(dev, type)->start();
    47d6:	6843      	ldr	r3, [r0, #4]
    47d8:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    47dc:	4798      	blx	r3
	return 0;
    47de:	2000      	movs	r0, #0
}
    47e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    47e2:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    47e6:	42af      	cmp	r7, r5
    47e8:	f386 8811 	msr	BASEPRI, r6
    47ec:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    47f0:	bf0c      	ite	eq
    47f2:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    47f6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    47fa:	e7f1      	b.n	47e0 <async_start+0x42>

000047fc <api_start>:
{
    47fc:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    47fe:	2480      	movs	r4, #128	; 0x80
    4800:	9400      	str	r4, [sp, #0]
    4802:	f7ff ffcc 	bl	479e <async_start>
}
    4806:	b002      	add	sp, #8
    4808:	bd10      	pop	{r4, pc}

0000480a <onoff_started_callback>:
{
    480a:	b410      	push	{r4}
	notify(mgr, 0);
    480c:	241c      	movs	r4, #28
	return &data->mgr[type];
    480e:	6900      	ldr	r0, [r0, #16]
    4810:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    4812:	fb03 0004 	mla	r0, r3, r4, r0
    4816:	2100      	movs	r1, #0
}
    4818:	bc10      	pop	{r4}
	notify(mgr, 0);
    481a:	4710      	bx	r2

0000481c <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    481c:	2003      	movs	r0, #3
    481e:	f000 b953 	b.w	4ac8 <nrfx_clock_start>

00004822 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    4822:	2002      	movs	r0, #2
    4824:	f000 b950 	b.w	4ac8 <nrfx_clock_start>

00004828 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    4828:	2000      	movs	r0, #0
    482a:	f000 b94d 	b.w	4ac8 <nrfx_clock_start>

0000482e <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    482e:	2003      	movs	r0, #3
    4830:	f000 b9a9 	b.w	4b86 <nrfx_clock_stop>

00004834 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    4834:	2002      	movs	r0, #2
    4836:	f000 b9a6 	b.w	4b86 <nrfx_clock_stop>

0000483a <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    483a:	2000      	movs	r0, #0
    483c:	f000 b9a3 	b.w	4b86 <nrfx_clock_stop>

00004840 <blocking_start_callback>:
{
    4840:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    4842:	f7fe bf21 	b.w	3688 <z_impl_k_sem_give>

00004846 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4846:	6843      	ldr	r3, [r0, #4]
}
    4848:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    484a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    484c:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    484e:	600b      	str	r3, [r1, #0]
}
    4850:	4770      	bx	lr

00004852 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4852:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
    4854:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4858:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
    485a:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    485e:	6098      	str	r0, [r3, #8]
}
    4860:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    4862:	60d9      	str	r1, [r3, #12]
    4864:	4770      	bx	lr

00004866 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4866:	6843      	ldr	r3, [r0, #4]
}
    4868:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    486a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    486c:	6099      	str	r1, [r3, #8]
}
    486e:	4770      	bx	lr

00004870 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4870:	6843      	ldr	r3, [r0, #4]
}
    4872:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4874:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    4876:	60d9      	str	r1, [r3, #12]
}
    4878:	4770      	bx	lr

0000487a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    487a:	6843      	ldr	r3, [r0, #4]
    487c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    487e:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
    4880:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    4884:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    4886:	6090      	str	r0, [r2, #8]
}
    4888:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    488a:	60d3      	str	r3, [r2, #12]
    488c:	4770      	bx	lr

0000488e <gpio_nrfx_manage_callback>:
{
    488e:	b510      	push	{r4, lr}
	return port->data;
    4890:	6903      	ldr	r3, [r0, #16]
	return list->head;
    4892:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    4894:	b1f8      	cbz	r0, 48d6 <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4896:	4288      	cmp	r0, r1
    4898:	d119      	bne.n	48ce <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    489a:	689c      	ldr	r4, [r3, #8]
	return node->next;
    489c:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    489e:	42a1      	cmp	r1, r4
	list->head = node;
    48a0:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    48a2:	d100      	bne.n	48a6 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    48a4:	6098      	str	r0, [r3, #8]
	parent->next = child;
    48a6:	2000      	movs	r0, #0
    48a8:	6008      	str	r0, [r1, #0]
	if (set) {
    48aa:	b12a      	cbz	r2, 48b8 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    48ac:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    48ae:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    48b0:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    48b2:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    48b4:	b902      	cbnz	r2, 48b8 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    48b6:	6099      	str	r1, [r3, #8]
	return 0;
    48b8:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    48ba:	e010      	b.n	48de <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    48bc:	4281      	cmp	r1, r0
    48be:	d106      	bne.n	48ce <gpio_nrfx_manage_callback+0x40>
	return node->next;
    48c0:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    48c2:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    48c4:	6898      	ldr	r0, [r3, #8]
    48c6:	4281      	cmp	r1, r0
    48c8:	d1ed      	bne.n	48a6 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    48ca:	609c      	str	r4, [r3, #8]
}
    48cc:	e7eb      	b.n	48a6 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    48ce:	4604      	mov	r4, r0
    48d0:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    48d2:	2800      	cmp	r0, #0
    48d4:	d1f2      	bne.n	48bc <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    48d6:	2a00      	cmp	r2, #0
    48d8:	d1e8      	bne.n	48ac <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    48da:	f06f 0015 	mvn.w	r0, #21
}
    48de:	bd10      	pop	{r4, pc}

000048e0 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    48e0:	4770      	bx	lr

000048e2 <event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    48e2:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    48e4:	f100 0350 	add.w	r3, r0, #80	; 0x50
    48e8:	009b      	lsls	r3, r3, #2
    48ea:	b29b      	uxth	r3, r3
    48ec:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    48f0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    48f4:	601a      	str	r2, [r3, #0]
    48f6:	681b      	ldr	r3, [r3, #0]
}
    48f8:	4770      	bx	lr

000048fa <k_sys_fatal_error_handler>:

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    48fa:	2000      	movs	r0, #0
{
    48fc:	b508      	push	{r3, lr}
		sys_arch_reboot(0);
    48fe:	f7fc ffe3 	bl	18c8 <sys_arch_reboot>

00004902 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    4902:	f7ff bbab 	b.w	405c <nrf_cc3xx_platform_init_no_rng>

00004906 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(void)
{
    4906:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    4908:	f7fc fc28 	bl	115c <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    490c:	f7fc fd0e 	bl	132c <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal();
	return res;
}
    4910:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    4914:	f7ff bba2 	b.w	405c <nrf_cc3xx_platform_init_no_rng>

00004918 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    4918:	4700      	bx	r0

0000491a <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    491a:	f000 bb47 	b.w	4fac <z_impl_k_busy_wait>

0000491e <clock_stop>:
{
    491e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch (domain)
    4920:	2803      	cmp	r0, #3
    4922:	f200 80a7 	bhi.w	4a74 <clock_stop+0x156>
    4926:	e8df f000 	tbb	[pc, r0]
    492a:	1902      	.short	0x1902
    492c:	3527      	.short	0x3527
    492e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4932:	2202      	movs	r2, #2
    4934:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4938:	2200      	movs	r2, #0
    493a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    493e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4942:	2201      	movs	r2, #1
    4944:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    4946:	2400      	movs	r4, #0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    4948:	2301      	movs	r3, #1
    494a:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
    494e:	2803      	cmp	r0, #3
    4950:	f200 8090 	bhi.w	4a74 <clock_stop+0x156>
    4954:	e8df f000 	tbb	[pc, r0]
    4958:	9a78692c 	.word	0x9a78692c
    p_reg->INTENCLR = mask;
    495c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4960:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4962:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
    4964:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4968:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    496c:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    4970:	f10d 0407 	add.w	r4, sp, #7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4974:	605a      	str	r2, [r3, #4]
    4976:	e7e7      	b.n	4948 <clock_stop+0x2a>
    p_reg->INTENCLR = mask;
    4978:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    497c:	f44f 7200 	mov.w	r2, #512	; 0x200
    4980:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4984:	2200      	movs	r2, #0
    4986:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    498a:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    498e:	2201      	movs	r2, #1
    4990:	625a      	str	r2, [r3, #36]	; 0x24
    4992:	e7d8      	b.n	4946 <clock_stop+0x28>
    p_reg->INTENCLR = mask;
    4994:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4998:	f44f 7280 	mov.w	r2, #256	; 0x100
    499c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    49a0:	2200      	movs	r2, #0
    49a2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    49a6:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    49aa:	2201      	movs	r2, #1
    49ac:	61da      	str	r2, [r3, #28]
    49ae:	e7ca      	b.n	4946 <clock_stop+0x28>
    switch (domain)
    49b0:	f242 7510 	movw	r5, #10000	; 0x2710
    49b4:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
            if (p_clk_src != NULL)
    49b8:	b36c      	cbz	r4, 4a16 <clock_stop+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    49ba:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    49be:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    49c2:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    49c4:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    49c8:	03d9      	lsls	r1, r3, #15
    49ca:	d553      	bpl.n	4a74 <clock_stop+0x156>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    49cc:	f89d 0007 	ldrb.w	r0, [sp, #7]
    49d0:	2801      	cmp	r0, #1
    49d2:	d14f      	bne.n	4a74 <clock_stop+0x156>
    49d4:	f7ff ffa1 	bl	491a <nrfx_busy_wait>
    49d8:	3d01      	subs	r5, #1
    49da:	d1ed      	bne.n	49b8 <clock_stop+0x9a>
    49dc:	e04a      	b.n	4a74 <clock_stop+0x156>
    49de:	f89d 0007 	ldrb.w	r0, [sp, #7]
    49e2:	2801      	cmp	r0, #1
    49e4:	d146      	bne.n	4a74 <clock_stop+0x156>
    49e6:	f7ff ff98 	bl	491a <nrfx_busy_wait>
    49ea:	3d01      	subs	r5, #1
    49ec:	d152      	bne.n	4a94 <clock_stop+0x176>
    49ee:	e041      	b.n	4a74 <clock_stop+0x156>
    49f0:	f89d 0007 	ldrb.w	r0, [sp, #7]
    49f4:	2801      	cmp	r0, #1
    49f6:	d13d      	bne.n	4a74 <clock_stop+0x156>
    49f8:	f7ff ff8f 	bl	491a <nrfx_busy_wait>
    49fc:	3d01      	subs	r5, #1
    49fe:	d039      	beq.n	4a74 <clock_stop+0x156>
            if (p_clk_src != NULL)
    4a00:	b1c4      	cbz	r4, 4a34 <clock_stop+0x116>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4a02:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    4a06:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    4a0a:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4a0c:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    4a10:	03db      	lsls	r3, r3, #15
    4a12:	d52f      	bpl.n	4a74 <clock_stop+0x156>
    4a14:	e7ec      	b.n	49f0 <clock_stop+0xd2>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4a16:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    4a1a:	03da      	lsls	r2, r3, #15
    4a1c:	d52a      	bpl.n	4a74 <clock_stop+0x156>
    4a1e:	2001      	movs	r0, #1
    4a20:	f7ff ff7b 	bl	491a <nrfx_busy_wait>
    4a24:	3d01      	subs	r5, #1
    4a26:	d1f6      	bne.n	4a16 <clock_stop+0xf8>
    4a28:	e024      	b.n	4a74 <clock_stop+0x156>
    switch (domain)
    4a2a:	f242 7510 	movw	r5, #10000	; 0x2710
    4a2e:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    4a32:	e7e5      	b.n	4a00 <clock_stop+0xe2>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4a34:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    4a38:	03d8      	lsls	r0, r3, #15
    4a3a:	d51b      	bpl.n	4a74 <clock_stop+0x156>
    4a3c:	2001      	movs	r0, #1
    4a3e:	f7ff ff6c 	bl	491a <nrfx_busy_wait>
    4a42:	3d01      	subs	r5, #1
    4a44:	d1f6      	bne.n	4a34 <clock_stop+0x116>
    4a46:	e015      	b.n	4a74 <clock_stop+0x156>
    switch (domain)
    4a48:	f242 7510 	movw	r5, #10000	; 0x2710
    4a4c:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
            if (p_clk_src != NULL)
    4a50:	b194      	cbz	r4, 4a78 <clock_stop+0x15a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    4a52:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    4a56:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    4a5a:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    4a5c:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    4a60:	03d9      	lsls	r1, r3, #15
    4a62:	d507      	bpl.n	4a74 <clock_stop+0x156>
    4a64:	f89d 0007 	ldrb.w	r0, [sp, #7]
    4a68:	2801      	cmp	r0, #1
    4a6a:	d103      	bne.n	4a74 <clock_stop+0x156>
    4a6c:	f7ff ff55 	bl	491a <nrfx_busy_wait>
    4a70:	3d01      	subs	r5, #1
    4a72:	d1ed      	bne.n	4a50 <clock_stop+0x132>
}
    4a74:	b002      	add	sp, #8
    4a76:	bd70      	pop	{r4, r5, r6, pc}
    4a78:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    4a7c:	03da      	lsls	r2, r3, #15
    4a7e:	d5f9      	bpl.n	4a74 <clock_stop+0x156>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    4a80:	2001      	movs	r0, #1
    4a82:	f7ff ff4a 	bl	491a <nrfx_busy_wait>
    4a86:	3d01      	subs	r5, #1
    4a88:	d1f6      	bne.n	4a78 <clock_stop+0x15a>
    4a8a:	e7f3      	b.n	4a74 <clock_stop+0x156>
    switch (domain)
    4a8c:	f242 7510 	movw	r5, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    4a90:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    4a94:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
    4a98:	03db      	lsls	r3, r3, #15
    4a9a:	d5eb      	bpl.n	4a74 <clock_stop+0x156>
    4a9c:	2c00      	cmp	r4, #0
    4a9e:	d19e      	bne.n	49de <clock_stop+0xc0>
    4aa0:	2001      	movs	r0, #1
    4aa2:	e7a0      	b.n	49e6 <clock_stop+0xc8>

00004aa4 <nrfx_clock_enable>:
{
    4aa4:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    4aa6:	2005      	movs	r0, #5
    4aa8:	f7fc fc98 	bl	13dc <arch_irq_is_enabled>
    4aac:	b910      	cbnz	r0, 4ab4 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    4aae:	2005      	movs	r0, #5
    4ab0:	f7fc fc72 	bl	1398 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4ab4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4ab8:	2201      	movs	r2, #1
    4aba:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
    4abe:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    4ac2:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
}
    4ac6:	bd08      	pop	{r3, pc}

00004ac8 <nrfx_clock_start>:
{
    4ac8:	b508      	push	{r3, lr}
    switch (domain)
    4aca:	2803      	cmp	r0, #3
    4acc:	d819      	bhi.n	4b02 <nrfx_clock_start+0x3a>
    4ace:	e8df f000 	tbb	[pc, r0]
    4ad2:	3202      	.short	0x3202
    4ad4:	4c3e      	.short	0x4c3e
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4ad6:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    4ada:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4ade:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    4ae2:	03c9      	lsls	r1, r1, #15
    4ae4:	d40e      	bmi.n	4b04 <nrfx_clock_start+0x3c>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    4ae6:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    4aea:	07db      	lsls	r3, r3, #31
    4aec:	d513      	bpl.n	4b16 <nrfx_clock_start+0x4e>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4aee:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    4af2:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    4af6:	3b01      	subs	r3, #1
    4af8:	2b01      	cmp	r3, #1
    4afa:	d809      	bhi.n	4b10 <nrfx_clock_start+0x48>
    p_reg->INTENSET = mask;
    4afc:	2302      	movs	r3, #2
    4afe:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    4b02:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4b04:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    4b08:	2b02      	cmp	r3, #2
    4b0a:	d005      	beq.n	4b18 <nrfx_clock_start+0x50>
    4b0c:	2b01      	cmp	r3, #1
    4b0e:	d002      	beq.n	4b16 <nrfx_clock_start+0x4e>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    4b10:	2000      	movs	r0, #0
    4b12:	f7ff ff04 	bl	491e <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    4b16:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
    4b18:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    4b1c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4b20:	2300      	movs	r3, #0
    4b22:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    4b26:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    4b2a:	2302      	movs	r3, #2
    4b2c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4b30:	2301      	movs	r3, #1
    4b32:	6093      	str	r3, [r2, #8]
}
    4b34:	e7e5      	b.n	4b02 <nrfx_clock_start+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4b36:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4b3a:	2200      	movs	r2, #0
    4b3c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    4b40:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    4b44:	2201      	movs	r2, #1
    4b46:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4b4a:	601a      	str	r2, [r3, #0]
}
    4b4c:	e7d9      	b.n	4b02 <nrfx_clock_start+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4b4e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4b52:	2200      	movs	r2, #0
    4b54:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    4b58:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
    4b5c:	f44f 7200 	mov.w	r2, #512	; 0x200
    4b60:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4b64:	2201      	movs	r2, #1
    4b66:	621a      	str	r2, [r3, #32]
}
    4b68:	e7cb      	b.n	4b02 <nrfx_clock_start+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4b6a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4b6e:	2200      	movs	r2, #0
    4b70:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    4b74:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
    4b78:	f44f 7280 	mov.w	r2, #256	; 0x100
    4b7c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4b80:	2201      	movs	r2, #1
    4b82:	619a      	str	r2, [r3, #24]
}
    4b84:	e7bd      	b.n	4b02 <nrfx_clock_start+0x3a>

00004b86 <nrfx_clock_stop>:
    clock_stop(domain);
    4b86:	f7ff beca 	b.w	491e <clock_stop>

00004b8a <nrf_gpio_reconfigure>:
{
    4b8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4b8c:	4616      	mov	r6, r2
    4b8e:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    4b92:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4b94:	a801      	add	r0, sp, #4
{
    4b96:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4b98:	f7fd ff20 	bl	29dc <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4b9c:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    4b9e:	f1b6 0c00 	subs.w	ip, r6, #0
    4ba2:	bf18      	it	ne
    4ba4:	f04f 0c01 	movne.w	ip, #1
    4ba8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    4bac:	1e0b      	subs	r3, r1, #0
    4bae:	bf18      	it	ne
    4bb0:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    4bb2:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    4bb4:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    4bb8:	bf14      	ite	ne
    4bba:	f04f 0c0c 	movne.w	ip, #12
    4bbe:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    4bc2:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    4bc4:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    4bc8:	bf14      	ite	ne
    4bca:	f44f 6c70 	movne.w	ip, #3840	; 0xf00
    4bce:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    4bd2:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    4bd4:	ea43 030c 	orr.w	r3, r3, ip
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    4bd8:	bf14      	ite	ne
    4bda:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    4bde:	f04f 0c00 	moveq.w	ip, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4be2:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    4be6:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    4bea:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4bee:	b101      	cbz	r1, 4bf2 <nrf_gpio_reconfigure+0x68>
    4bf0:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    4bf2:	b10e      	cbz	r6, 4bf8 <nrf_gpio_reconfigure+0x6e>
    4bf4:	7836      	ldrb	r6, [r6, #0]
    4bf6:	0076      	lsls	r6, r6, #1
    4bf8:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4bfa:	b10d      	cbz	r5, 4c00 <nrf_gpio_reconfigure+0x76>
    4bfc:	782d      	ldrb	r5, [r5, #0]
    4bfe:	00ad      	lsls	r5, r5, #2
    4c00:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    4c02:	b10c      	cbz	r4, 4c08 <nrf_gpio_reconfigure+0x7e>
    4c04:	7824      	ldrb	r4, [r4, #0]
    4c06:	0224      	lsls	r4, r4, #8
    4c08:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    4c0a:	b10f      	cbz	r7, 4c10 <nrf_gpio_reconfigure+0x86>
    4c0c:	783f      	ldrb	r7, [r7, #0]
    4c0e:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4c10:	430c      	orrs	r4, r1
    4c12:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    4c14:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
    4c18:	b003      	add	sp, #12
    4c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004c1c <nrf_gpio_cfg_sense_set>:
{
    4c1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    4c1e:	f10d 030f 	add.w	r3, sp, #15
    4c22:	9301      	str	r3, [sp, #4]
    4c24:	2300      	movs	r3, #0
{
    4c26:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    4c2a:	461a      	mov	r2, r3
    4c2c:	4619      	mov	r1, r3
    4c2e:	9300      	str	r3, [sp, #0]
    4c30:	f7ff ffab 	bl	4b8a <nrf_gpio_reconfigure>
}
    4c34:	b005      	add	sp, #20
    4c36:	f85d fb04 	ldr.w	pc, [sp], #4

00004c3a <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
    4c3a:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    4c3c:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
    4c3e:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    4c40:	bf9c      	itt	ls
    4c42:	6881      	ldrls	r1, [r0, #8]
    4c44:	185b      	addls	r3, r3, r1
    r = RdOff - WrOff - 1u;
    4c46:	3b01      	subs	r3, #1
    4c48:	1a98      	subs	r0, r3, r2
}
    4c4a:	4770      	bx	lr

00004c4c <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    4c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4c50:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
    4c52:	e9d0 8402 	ldrd	r8, r4, [r0, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    4c56:	6840      	ldr	r0, [r0, #4]
  Rem = pRing->SizeOfBuffer - WrOff;
    4c58:	eba8 0604 	sub.w	r6, r8, r4
  if (Rem > NumBytes) {
    4c5c:	4296      	cmp	r6, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    4c5e:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    4c60:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
    4c62:	4414      	add	r4, r2
  if (Rem > NumBytes) {
    4c64:	d906      	bls.n	4c74 <_WriteNoCheck+0x28>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    4c66:	f7ff fd3a 	bl	46de <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    4c6a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
    4c6e:	60ec      	str	r4, [r5, #12]
}
    4c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    4c74:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
    4c76:	eba4 0408 	sub.w	r4, r4, r8
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    4c7a:	f7ff fd30 	bl	46de <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    4c7e:	4622      	mov	r2, r4
    4c80:	6868      	ldr	r0, [r5, #4]
    4c82:	19b9      	adds	r1, r7, r6
    4c84:	e7ef      	b.n	4c66 <_WriteNoCheck+0x1a>

00004c86 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    4c86:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4c8a:	4606      	mov	r6, r0
    4c8c:	4689      	mov	r9, r1
    4c8e:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
    4c90:	f04f 0800 	mov.w	r8, #0
  WrOff = pRing->WrOff;
    4c94:	68c5      	ldr	r5, [r0, #12]
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    4c96:	6933      	ldr	r3, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    4c98:	68b4      	ldr	r4, [r6, #8]
    if (RdOff > WrOff) {
    4c9a:	429d      	cmp	r5, r3
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    4c9c:	bf28      	it	cs
    4c9e:	191b      	addcs	r3, r3, r4
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    4ca0:	1b64      	subs	r4, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    4ca2:	42bc      	cmp	r4, r7
    4ca4:	bf28      	it	cs
    4ca6:	463c      	movcs	r4, r7
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    4ca8:	3b01      	subs	r3, #1
    4caa:	1b5b      	subs	r3, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    4cac:	429c      	cmp	r4, r3
    4cae:	bf28      	it	cs
    4cb0:	461c      	movcs	r4, r3
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    4cb2:	6870      	ldr	r0, [r6, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    4cb4:	4649      	mov	r1, r9
    4cb6:	4622      	mov	r2, r4
    4cb8:	4428      	add	r0, r5
    4cba:	f7ff fd10 	bl	46de <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
    4cbe:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
    4cc0:	4425      	add	r5, r4
      WrOff = 0u;
    4cc2:	42ab      	cmp	r3, r5
    4cc4:	bf08      	it	eq
    4cc6:	2500      	moveq	r5, #0
    NumBytesWritten += NumBytesToWrite;
    4cc8:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
    4cca:	44a1      	add	r9, r4
    NumBytes        -= NumBytesToWrite;
    4ccc:	1b3f      	subs	r7, r7, r4
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    4cce:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
    4cd2:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    4cd4:	2f00      	cmp	r7, #0
    4cd6:	d1de      	bne.n	4c96 <_WriteBlocking+0x10>
}
    4cd8:	4640      	mov	r0, r8
    4cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00004cde <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    4cde:	f7fe b9e7 	b.w	30b0 <_DoInit>

00004ce2 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(void)
{
    4ce2:	b508      	push	{r3, lr}

	SEGGER_RTT_Init();
    4ce4:	f7ff fffb 	bl	4cde <SEGGER_RTT_Init>

	return 0;
}
    4ce8:	2000      	movs	r0, #0
    4cea:	bd08      	pop	{r3, pc}

00004cec <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    4cec:	4770      	bx	lr

00004cee <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    4cee:	b140      	cbz	r0, 4d02 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    4cf0:	68c3      	ldr	r3, [r0, #12]
    4cf2:	7858      	ldrb	r0, [r3, #1]
    4cf4:	f010 0001 	ands.w	r0, r0, #1
    4cf8:	bf1e      	ittt	ne
    4cfa:	7818      	ldrbne	r0, [r3, #0]
    4cfc:	fab0 f080 	clzne	r0, r0
    4d00:	0940      	lsrne	r0, r0, #5
}
    4d02:	4770      	bx	lr

00004d04 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d06:	4605      	mov	r5, r0
    4d08:	460e      	mov	r6, r1
	__asm__ volatile(
    4d0a:	f04f 0320 	mov.w	r3, #32
    4d0e:	f3ef 8711 	mrs	r7, BASEPRI
    4d12:	f383 8812 	msr	BASEPRI_MAX, r3
    4d16:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    4d1a:	f7fe ffd9 	bl	3cd0 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    4d1e:	4631      	mov	r1, r6
    4d20:	4604      	mov	r4, r0
    4d22:	4628      	mov	r0, r5
    4d24:	f7ff fde9 	bl	48fa <k_sys_fatal_error_handler>
	__asm__ volatile(
    4d28:	f387 8811 	msr	BASEPRI, r7
    4d2c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    4d30:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    4d32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4d36:	f7fc be11 	b.w	195c <z_impl_k_thread_abort>

00004d3a <z_early_memset>:
	(void) memset(dst, c, n);
    4d3a:	f7ff bcdb 	b.w	46f4 <memset>

00004d3e <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    4d3e:	f7ff bcce 	b.w	46de <memcpy>

00004d42 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    4d42:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    4d46:	4313      	orrs	r3, r2
    4d48:	f013 0303 	ands.w	r3, r3, #3
    4d4c:	d10c      	bne.n	4d68 <create_free_list+0x26>
	slab->free_list = NULL;
    4d4e:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    4d50:	6881      	ldr	r1, [r0, #8]
    4d52:	4299      	cmp	r1, r3
    4d54:	d801      	bhi.n	4d5a <create_free_list+0x18>
	return 0;
    4d56:	2000      	movs	r0, #0
    4d58:	4770      	bx	lr
		*(char **)p = slab->free_list;
    4d5a:	6941      	ldr	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    4d5c:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
    4d5e:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
    4d60:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
    4d62:	6142      	str	r2, [r0, #20]
		p += slab->block_size;
    4d64:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    4d66:	e7f3      	b.n	4d50 <create_free_list+0xe>
		return -EINVAL;
    4d68:	f06f 0015 	mvn.w	r0, #21
}
    4d6c:	4770      	bx	lr

00004d6e <k_mem_slab_init>:
{
    4d6e:	b510      	push	{r4, lr}
	slab->block_size = block_size;
    4d70:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
    4d74:	2300      	movs	r3, #0
	slab->buffer = buffer;
    4d76:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    4d78:	6183      	str	r3, [r0, #24]
{
    4d7a:	4604      	mov	r4, r0
	rc = create_free_list(slab);
    4d7c:	f7ff ffe1 	bl	4d42 <create_free_list>
	if (rc < 0) {
    4d80:	2800      	cmp	r0, #0
	list->tail = (sys_dnode_t *)list;
    4d82:	bfa8      	it	ge
    4d84:	e9c4 4400 	strdge	r4, r4, [r4]
}
    4d88:	bd10      	pop	{r4, pc}

00004d8a <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    4d8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d8c:	4604      	mov	r4, r0
    4d8e:	460d      	mov	r5, r1
	__asm__ volatile(
    4d90:	f04f 0320 	mov.w	r3, #32
    4d94:	f3ef 8611 	mrs	r6, BASEPRI
    4d98:	f383 8812 	msr	BASEPRI_MAX, r3
    4d9c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    4da0:	6947      	ldr	r7, [r0, #20]
    4da2:	b977      	cbnz	r7, 4dc2 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    4da4:	f000 f8a6 	bl	4ef4 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    4da8:	b158      	cbz	r0, 4dc2 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    4daa:	682a      	ldr	r2, [r5, #0]
    4dac:	6787      	str	r7, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    4dae:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    4db0:	f000 f86a 	bl	4e88 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    4db4:	4631      	mov	r1, r6
    4db6:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    4dba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    4dbe:	f7fe be51 	b.w	3a64 <z_reschedule>
	**(char ***) mem = slab->free_list;
    4dc2:	682b      	ldr	r3, [r5, #0]
    4dc4:	6962      	ldr	r2, [r4, #20]
    4dc6:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    4dc8:	682b      	ldr	r3, [r5, #0]
    4dca:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    4dcc:	69a3      	ldr	r3, [r4, #24]
    4dce:	3b01      	subs	r3, #1
    4dd0:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    4dd2:	f386 8811 	msr	BASEPRI, r6
    4dd6:	f3bf 8f6f 	isb	sy
}
    4dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004ddc <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4ddc:	f3ef 8005 	mrs	r0, IPSR
}
    4de0:	3800      	subs	r0, #0
    4de2:	bf18      	it	ne
    4de4:	2001      	movne	r0, #1
    4de6:	4770      	bx	lr

00004de8 <z_pm_save_idle_exit>:
{
    4de8:	b508      	push	{r3, lr}
	pm_system_resume();
    4dea:	f7fc f8b7 	bl	f5c <pm_system_resume>
}
    4dee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    4df2:	f7ff bd75 	b.w	48e0 <sys_clock_idle_exit>

00004df6 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    4df6:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4dfa:	428b      	cmp	r3, r1
    4dfc:	d001      	beq.n	4e02 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    4dfe:	f7fe bdeb 	b.w	39d8 <z_set_prio>
}
    4e02:	2000      	movs	r0, #0
    4e04:	4770      	bx	lr

00004e06 <z_impl_k_mutex_init>:
{
    4e06:	4603      	mov	r3, r0
	mutex->owner = NULL;
    4e08:	2000      	movs	r0, #0
    4e0a:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
    4e0e:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
    4e12:	4770      	bx	lr

00004e14 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    4e14:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    4e18:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    4e1a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4e1c:	2300      	movs	r3, #0
	node->prev = NULL;
    4e1e:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    4e22:	4770      	bx	lr

00004e24 <unpend_thread_no_timeout>:
{
    4e24:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    4e26:	f7ff fff5 	bl	4e14 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    4e2a:	7b43      	ldrb	r3, [r0, #13]
    4e2c:	f023 0302 	bic.w	r3, r3, #2
    4e30:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    4e32:	2300      	movs	r3, #0
    4e34:	6083      	str	r3, [r0, #8]
}
    4e36:	bd08      	pop	{r3, pc}

00004e38 <add_to_waitq_locked>:
{
    4e38:	b538      	push	{r3, r4, r5, lr}
    4e3a:	4604      	mov	r4, r0
    4e3c:	460d      	mov	r5, r1
	unready_thread(thread);
    4e3e:	f7fe fd4d 	bl	38dc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    4e42:	7b63      	ldrb	r3, [r4, #13]
    4e44:	f043 0302 	orr.w	r3, r3, #2
    4e48:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    4e4a:	b1e5      	cbz	r5, 4e86 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    4e4c:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    4e4e:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4e50:	429d      	cmp	r5, r3
    4e52:	d109      	bne.n	4e68 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    4e54:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    4e56:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    4e5a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4e5c:	606c      	str	r4, [r5, #4]
}
    4e5e:	e012      	b.n	4e86 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    4e60:	686a      	ldr	r2, [r5, #4]
    4e62:	4293      	cmp	r3, r2
    4e64:	d0f6      	beq.n	4e54 <add_to_waitq_locked+0x1c>
    4e66:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4e68:	2b00      	cmp	r3, #0
    4e6a:	d0f3      	beq.n	4e54 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    4e6c:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    4e70:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    4e74:	428a      	cmp	r2, r1
    4e76:	d0f3      	beq.n	4e60 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4e78:	4291      	cmp	r1, r2
    4e7a:	ddf1      	ble.n	4e60 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    4e7c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4e7e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4e82:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4e84:	605c      	str	r4, [r3, #4]
}
    4e86:	bd38      	pop	{r3, r4, r5, pc}

00004e88 <z_ready_thread>:
{
    4e88:	b510      	push	{r4, lr}
	__asm__ volatile(
    4e8a:	f04f 0320 	mov.w	r3, #32
    4e8e:	f3ef 8411 	mrs	r4, BASEPRI
    4e92:	f383 8812 	msr	BASEPRI_MAX, r3
    4e96:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    4e9a:	f7fe fceb 	bl	3874 <ready_thread>
	__asm__ volatile(
    4e9e:	f384 8811 	msr	BASEPRI, r4
    4ea2:	f3bf 8f6f 	isb	sy
}
    4ea6:	bd10      	pop	{r4, pc}

00004ea8 <z_sched_wake_thread>:
{
    4ea8:	b538      	push	{r3, r4, r5, lr}
    4eaa:	4604      	mov	r4, r0
	__asm__ volatile(
    4eac:	f04f 0320 	mov.w	r3, #32
    4eb0:	f3ef 8511 	mrs	r5, BASEPRI
    4eb4:	f383 8812 	msr	BASEPRI_MAX, r3
    4eb8:	f3bf 8f6f 	isb	sy
		if (!killed) {
    4ebc:	7b43      	ldrb	r3, [r0, #13]
    4ebe:	f013 0f28 	tst.w	r3, #40	; 0x28
    4ec2:	d10b      	bne.n	4edc <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
    4ec4:	6883      	ldr	r3, [r0, #8]
    4ec6:	b10b      	cbz	r3, 4ecc <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
    4ec8:	f7ff ffac 	bl	4e24 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4ecc:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
    4ece:	b951      	cbnz	r1, 4ee6 <z_sched_wake_thread+0x3e>
    4ed0:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
			ready_thread(thread);
    4ed4:	4620      	mov	r0, r4
    4ed6:	7363      	strb	r3, [r4, #13]
    4ed8:	f7fe fccc 	bl	3874 <ready_thread>
	__asm__ volatile(
    4edc:	f385 8811 	msr	BASEPRI, r5
    4ee0:	f3bf 8f6f 	isb	sy
}
    4ee4:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    4ee6:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
    4eea:	e7f3      	b.n	4ed4 <z_sched_wake_thread+0x2c>

00004eec <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
    4eec:	2101      	movs	r1, #1
    4eee:	3818      	subs	r0, #24
    4ef0:	f7ff bfda 	b.w	4ea8 <z_sched_wake_thread>

00004ef4 <z_unpend_first_thread>:
{
    4ef4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4ef6:	f04f 0320 	mov.w	r3, #32
    4efa:	f3ef 8511 	mrs	r5, BASEPRI
    4efe:	f383 8812 	msr	BASEPRI_MAX, r3
    4f02:	f3bf 8f6f 	isb	sy
	return list->head == list;
    4f06:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4f08:	42a0      	cmp	r0, r4
    4f0a:	d00d      	beq.n	4f28 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    4f0c:	b134      	cbz	r4, 4f1c <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    4f0e:	4620      	mov	r0, r4
    4f10:	f7ff ff88 	bl	4e24 <unpend_thread_no_timeout>
    4f14:	f104 0018 	add.w	r0, r4, #24
    4f18:	f000 f81e 	bl	4f58 <z_abort_timeout>
	__asm__ volatile(
    4f1c:	f385 8811 	msr	BASEPRI, r5
    4f20:	f3bf 8f6f 	isb	sy
}
    4f24:	4620      	mov	r0, r4
    4f26:	bd38      	pop	{r3, r4, r5, pc}
    4f28:	2400      	movs	r4, #0
    4f2a:	e7f7      	b.n	4f1c <z_unpend_first_thread+0x28>

00004f2c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4f2c:	4603      	mov	r3, r0
    4f2e:	b920      	cbnz	r0, 4f3a <z_reschedule_irqlock+0xe>
    4f30:	f3ef 8205 	mrs	r2, IPSR
    4f34:	b90a      	cbnz	r2, 4f3a <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    4f36:	f7fc ba95 	b.w	1464 <arch_swap>
    4f3a:	f383 8811 	msr	BASEPRI, r3
    4f3e:	f3bf 8f6f 	isb	sy
}
    4f42:	4770      	bx	lr

00004f44 <z_reschedule_unlocked>:
	__asm__ volatile(
    4f44:	f04f 0320 	mov.w	r3, #32
    4f48:	f3ef 8011 	mrs	r0, BASEPRI
    4f4c:	f383 8812 	msr	BASEPRI_MAX, r3
    4f50:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    4f54:	f7ff bfea 	b.w	4f2c <z_reschedule_irqlock>

00004f58 <z_abort_timeout>:
{
    4f58:	b510      	push	{r4, lr}
    4f5a:	f04f 0220 	mov.w	r2, #32
    4f5e:	f3ef 8411 	mrs	r4, BASEPRI
    4f62:	f382 8812 	msr	BASEPRI_MAX, r2
    4f66:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    4f6a:	6803      	ldr	r3, [r0, #0]
    4f6c:	b13b      	cbz	r3, 4f7e <z_abort_timeout+0x26>
			remove_timeout(to);
    4f6e:	f7fe ff59 	bl	3e24 <remove_timeout>
			ret = 0;
    4f72:	2000      	movs	r0, #0
	__asm__ volatile(
    4f74:	f384 8811 	msr	BASEPRI, r4
    4f78:	f3bf 8f6f 	isb	sy
}
    4f7c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    4f7e:	f06f 0015 	mvn.w	r0, #21
    4f82:	e7f7      	b.n	4f74 <z_abort_timeout+0x1c>

00004f84 <z_get_next_timeout_expiry>:
{
    4f84:	b510      	push	{r4, lr}
	__asm__ volatile(
    4f86:	f04f 0320 	mov.w	r3, #32
    4f8a:	f3ef 8411 	mrs	r4, BASEPRI
    4f8e:	f383 8812 	msr	BASEPRI_MAX, r3
    4f92:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    4f96:	f7fe ff25 	bl	3de4 <next_timeout>
	__asm__ volatile(
    4f9a:	f384 8811 	msr	BASEPRI, r4
    4f9e:	f3bf 8f6f 	isb	sy
}
    4fa2:	bd10      	pop	{r4, pc}

00004fa4 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    4fa4:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    4fa6:	f7ff f839 	bl	401c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    4faa:	bd08      	pop	{r3, pc}

00004fac <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    4fac:	b108      	cbz	r0, 4fb2 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    4fae:	f7fb bf85 	b.w	ebc <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    4fb2:	4770      	bx	lr

00004fb4 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    4fb4:	4770      	bx	lr
	...
