
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	08 1d 00 20 85 19 00 00 8f 47 00 00 59 19 00 00     ... .....G..Y...
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
  10:	59 19 00 00 59 19 00 00 59 19 00 00 59 19 00 00     Y...Y...Y...Y...
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	0d 16 00 00 59 19 00 00 00 00 00 00 b5 15 00 00     ....Y...........
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  3c:	59 19 00 00                                         Y...

00000040 <_irq_vector_table>:
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
  40:	8d 16 00 00 8d 16 00 00 8d 16 00 00 8d 16 00 00     ................
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
  50:	8d 16 00 00 8d 16 00 00 8d 16 00 00 8d 16 00 00     ................
		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
				*(const char **)buf = s;
  60:	8d 16 00 00 8d 16 00 00 8d 16 00 00 8d 16 00 00     ................
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
  70:	8d 16 00 00 8d 16 00 00 8d 16 00 00 8d 16 00 00     ................
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
  80:	8d 16 00 00 8d 16 00 00 8d 16 00 00 8d 16 00 00     ................
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
  90:	8d 16 00 00 8d 16 00 00 8d 16 00 00 8d 16 00 00     ................
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
					str_ptr_arg[s_idx] = arg_idx;
  a0:	8d 16 00 00 8d 16 00 00 8d 16 00 00 8d 16 00 00     ................
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
						s_ro_cnt++;
					} else {
						s_rw_cnt++;
  b0:	8d 16 00 00 8d 16 00 00 8d 16 00 00 8d 16 00 00     ................
			switch (*fmt) {
  c0:	8d 16 00 00 8d 16 00 00 8d 16 00 00 8d 16 00 00     ................
  d0:	8d 16 00 00 8d 16 00 00 8d 16 00 00 8d 16 00 00     ................
  e0:	8d 16 00 00 8d 16 00 00 8d 16 00 00 8d 16 00 00     ................
  f0:	8d 16 00 00 8d 16 00 00 8d 16 00 00 8d 16 00 00     ................
 100:	8d 16 00 00 8d 16 00 00 8d 16 00 00 8d 16 00 00     ................
 110:	8d 16 00 00 8d 16 00 00 8d 16 00 00 8d 16 00 00     ................
				align = VA_STACK_ALIGN(void *);
 120:	8d 16 00 00 8d 16 00 00 8d 16 00 00 8d 16 00 00     ................
			switch (*fmt) {
 130:	8d 16 00 00 8d 16 00 00 8d 16 00 00 8d 16 00 00     ................
 140:	8d 16 00 00 8d 16 00 00 8d 16 00 00 8d 16 00 00     ................
		if (buf0 != NULL && BUF_OFFSET + size > len) {
 150:	8d 16 00 00                                         ....

Disassembly of section text:

00000154 <__aeabi_uldivmod>:
     154:	b953      	cbnz	r3, 16c <__aeabi_uldivmod+0x18>
     156:	b94a      	cbnz	r2, 16c <__aeabi_uldivmod+0x18>
     158:	2900      	cmp	r1, #0
     15a:	bf08      	it	eq
     15c:	2800      	cmpeq	r0, #0
		if (is_str_arg) {
     15e:	bf1c      	itt	ne
     160:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
				s_idx++;
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     164:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
			int v = va_arg(ap, int);
     168:	f000 b80c 	b.w	184 <__aeabi_idiv0>

			if (buf0 != NULL) {
				*(int *)buf = v;
			}
			buf += sizeof(int);
     16c:	f1ad 0c08 	sub.w	ip, sp, #8
     170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
				arg_idx--;
     174:	f000 f808 	bl	188 <__udivmoddi4>
				parsing = false;
     178:	f8dd e004 	ldr.w	lr, [sp, #4]
				continue;
     17c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
				if (fmt[-1] == 'l') {
     180:	b004      	add	sp, #16
     182:	4770      	bx	lr

00000184 <__aeabi_idiv0>:
     184:	4770      	bx	lr
					if (fmt[-2] == 'l') {
     186:	bf00      	nop

00000188 <__udivmoddi4>:
     188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				parsing = false;
     18c:	4686      	mov	lr, r0
					if (fmt[-2] == 'l') {
     18e:	468c      	mov	ip, r1
     190:	4608      	mov	r0, r1
						align = VA_STACK_ALIGN(long long);
     192:	9e08      	ldr	r6, [sp, #32]
     194:	4615      	mov	r5, r2
				size = sizeof(void *);
     196:	4674      	mov	r4, lr
     198:	4619      	mov	r1, r3
					v.ld = va_arg(ap, long double);
     19a:	2b00      	cmp	r3, #0
     19c:	f040 80c1 	bne.w	322 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa2>
     1a0:	4285      	cmp	r5, r0
				buf = (void *) ROUND_UP(buf, align);
     1a2:	fab2 f282 	clz	r2, r2
     1a6:	d945      	bls.n	234 <CONFIG_SRAM_SIZE+0x34>
					v.ld = va_arg(ap, long double);
     1a8:	b14a      	cbz	r2, 1be <__udivmoddi4+0x36>
     1aa:	f1c2 0320 	rsb	r3, r2, #32
					if (BUF_OFFSET + size > len) {
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	4095      	lsls	r5, r2
     1b4:	4094      	lsls	r4, r2
     1b6:	fa2e f303 	lsr.w	r3, lr, r3
						*(long double *)buf = v.ld;
     1ba:	ea43 0c0c 	orr.w	ip, r3, ip
				parsing = false;
     1be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
			switch (*fmt) {
     1c2:	b2a8      	uxth	r0, r5
     1c4:	0c23      	lsrs	r3, r4, #16
     1c6:	fbbc f8fe 	udiv	r8, ip, lr
			if (*++fmt == '\0') {
     1ca:	fb0e cc18 	mls	ip, lr, r8, ip
     1ce:	fb08 f900 	mul.w	r9, r8, r0
			if (!parsing) {
     1d2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     1d6:	4599      	cmp	r9, r3
				if (*fmt == '%') {
     1d8:	d928      	bls.n	22c <CONFIG_SRAM_SIZE+0x2c>
     1da:	18eb      	adds	r3, r5, r3
					parsing = true;
     1dc:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
					arg_idx++;
     1e0:	d204      	bcs.n	1ec <__udivmoddi4+0x64>
     1e2:	4599      	cmp	r9, r3
     1e4:	d902      	bls.n	1ec <__udivmoddi4+0x64>
				align = VA_STACK_ALIGN(size_t);
     1e6:	f1a8 0702 	sub.w	r7, r8, #2
     1ea:	442b      	add	r3, r5
			switch (*fmt) {
     1ec:	eba3 0309 	sub.w	r3, r3, r9
     1f0:	b2a4      	uxth	r4, r4
				parsing = false;
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     1f6:	fb0e 331c 	mls	r3, lr, ip, r3
					return -EINVAL;
     1fa:	fb0c f000 	mul.w	r0, ip, r0
     1fe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
			long long v = va_arg(ap, long long);
     202:	42a0      	cmp	r0, r4
     204:	d914      	bls.n	230 <CONFIG_SRAM_SIZE+0x30>
     206:	192c      	adds	r4, r5, r4
     208:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff

			if (buf0 != NULL) {
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     20c:	d204      	bcs.n	218 <CONFIG_SRAM_SIZE+0x18>
     20e:	42a0      	cmp	r0, r4
				}
			}
			buf += sizeof(long long);
     210:	d902      	bls.n	218 <CONFIG_SRAM_SIZE+0x18>
     212:	f1ac 0302 	sub.w	r3, ip, #2
		if (is_str_arg) {
     216:	442c      	add	r4, r5
		} else if (size == sizeof(int)) {
     218:	1a24      	subs	r4, r4, r0
     21a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
			int v = va_arg(ap, int);
     21e:	b11e      	cbz	r6, 228 <CONFIG_SRAM_SIZE+0x28>
			if (buf0 != NULL) {
     220:	40d4      	lsrs	r4, r2
		} else if (size == sizeof(long long)) {
     222:	2300      	movs	r3, #0
     224:	6034      	str	r4, [r6, #0]
			long long v = va_arg(ap, long long);
     226:	6073      	str	r3, [r6, #4]
     228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     22c:	4647      	mov	r7, r8
     22e:	e7dd      	b.n	1ec <__udivmoddi4+0x64>
     230:	4663      	mov	r3, ip
			if (buf0 != NULL) {
     232:	e7f1      	b.n	218 <CONFIG_SRAM_SIZE+0x18>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     234:	bb92      	cbnz	r2, 29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     236:	1b43      	subs	r3, r0, r5
     238:	2101      	movs	r1, #1
			s = va_arg(ap, char *);
     23a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     23e:	b2af      	uxth	r7, r5
     240:	0c20      	lsrs	r0, r4, #16
			if (is_ro && !do_ro) {
     242:	fbb3 fcfe 	udiv	ip, r3, lr
     246:	fb0e 331c 	mls	r3, lr, ip, r3
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     24a:	fb0c f807 	mul.w	r8, ip, r7
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     24e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     252:	4598      	cmp	r8, r3
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     254:	d961      	bls.n	31a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9a>
     256:	18eb      	adds	r3, r5, r3
     258:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     25c:	d204      	bcs.n	268 <CONFIG_SRAM_SIZE+0x68>
				if (buf0 != NULL) {
     25e:	4598      	cmp	r8, r3
					str_ptr_pos[s_idx] = s_ptr_idx;
     260:	d902      	bls.n	268 <CONFIG_SRAM_SIZE+0x68>
     262:	f1ac 0002 	sub.w	r0, ip, #2
     266:	442b      	add	r3, r5
					str_ptr_arg[s_idx] = arg_idx;
     268:	eba3 0308 	sub.w	r3, r3, r8
					str_ptr_pos[s_idx] = s_ptr_idx;
     26c:	b2a4      	uxth	r4, r4
     26e:	fbb3 fcfe 	udiv	ip, r3, lr
					str_ptr_arg[s_idx] = arg_idx;
     272:	fb0e 331c 	mls	r3, lr, ip, r3
					if (is_ro) {
     276:	fb0c f707 	mul.w	r7, ip, r7
     27a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     27e:	42a7      	cmp	r7, r4
     280:	d94d      	bls.n	31e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9e>
     282:	192c      	adds	r4, r5, r4
						s_ro_cnt++;
     284:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
				s_idx++;
     288:	d204      	bcs.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
					if (BUF_OFFSET + size > len) {
     28a:	42a7      	cmp	r7, r4
     28c:	d902      	bls.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
			switch (*fmt) {
     28e:	f1ac 0302 	sub.w	r3, ip, #2
			buf += sizeof(char *);
     292:	442c      	add	r4, r5
					if (BUF_OFFSET + size > len) {
     294:	1be4      	subs	r4, r4, r7
     296:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     29a:	e7c0      	b.n	21e <CONFIG_SRAM_SIZE+0x1e>
     29c:	f1c2 0320 	rsb	r3, r2, #32
				} else if (is_ro) {
     2a0:	4095      	lsls	r5, r2
     2a2:	4094      	lsls	r4, r2
					len += 1;
     2a4:	fa20 f103 	lsr.w	r1, r0, r3
				} else if (rws_pos_en) {
     2a8:	fa2e f303 	lsr.w	r3, lr, r3
     2ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
					len += strlen(s) + 1 + 1;
     2b0:	4090      	lsls	r0, r2
     2b2:	b2af      	uxth	r7, r5
     2b4:	4303      	orrs	r3, r0
     2b6:	fbb1 fcfe 	udiv	ip, r1, lr
     2ba:	fb0e 101c 	mls	r0, lr, ip, r1
     2be:	0c19      	lsrs	r1, r3, #16
     2c0:	fb0c f807 	mul.w	r8, ip, r7
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     2c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2c8:	4588      	cmp	r8, r1

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     2ca:	d922      	bls.n	312 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x92>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     2cc:	1869      	adds	r1, r5, r1
     2ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     2d2:	d204      	bcs.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     2d4:	4588      	cmp	r8, r1
     2d6:	d902      	bls.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     2d8:	f1ac 0002 	sub.w	r0, ip, #2
	*(char **)buf0 = NULL;

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);

	if (rws_pos_en) {
     2dc:	4429      	add	r1, r5
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     2de:	eba1 0108 	sub.w	r1, r1, r8
     2e2:	b29b      	uxth	r3, r3
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     2e4:	fbb1 fcfe 	udiv	ip, r1, lr
	if (rws_pos_en) {
     2e8:	fb0e 111c 	mls	r1, lr, ip, r1
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     2ec:	fb0c f707 	mul.w	r7, ip, r7
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     2f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2f4:	429f      	cmp	r7, r3
		for (i = 0; i < s_idx; i++) {
     2f6:	d90e      	bls.n	316 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x96>
     2f8:	18eb      	adds	r3, r5, r3
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
     2fa:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
		for (i = 0; i < s_idx; i++) {
     2fe:	d204      	bcs.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     300:	429f      	cmp	r7, r3
			continue;
		}

		if (rws_pos_en) {
			size = 0;
			*buf++ = str_ptr_arg[i];
     302:	d902      	bls.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     304:	f1ac 0102 	sub.w	r1, ip, #2
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     308:	442b      	add	r3, r5
     30a:	1bdb      	subs	r3, r3, r7
     30c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
			*buf++ = str_ptr_arg[i];
     310:	e793      	b.n	23a <CONFIG_SRAM_SIZE+0x3a>
     312:	4660      	mov	r0, ip
	for (i = 0; i < s_idx; i++) {
     314:	e7e3      	b.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     316:	4661      	mov	r1, ip
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     318:	e7f7      	b.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     31a:	4660      	mov	r0, ip
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     31c:	e7a4      	b.n	268 <CONFIG_SRAM_SIZE+0x68>
		pkg_hdr->desc.rw_str_cnt = 0;
     31e:	4663      	mov	r3, ip
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     320:	e7b8      	b.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     322:	4283      	cmp	r3, r0
     324:	d906      	bls.n	334 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb4>
     326:	b916      	cbnz	r6, 32e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xae>
			if (BUF_OFFSET + 1 > len) {
     328:	2100      	movs	r1, #0
     32a:	4608      	mov	r0, r1
     32c:	e77c      	b.n	228 <CONFIG_SRAM_SIZE+0x28>
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     32e:	e9c6 e000 	strd	lr, r0, [r6]
			if (BUF_OFFSET + 1 > len) {
     332:	e7f9      	b.n	328 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa8>
     334:	fab3 f783 	clz	r7, r3
			*buf++ = pos;
     338:	b98f      	cbnz	r7, 35e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xde>
		for (i = 0; i < s_idx; i++) {
     33a:	4283      	cmp	r3, r0
     33c:	d301      	bcc.n	342 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc2>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     33e:	4572      	cmp	r2, lr
     340:	d808      	bhi.n	354 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd4>
     342:	ebbe 0402 	subs.w	r4, lr, r2
     346:	eb60 0303 	sbc.w	r3, r0, r3
     34a:	2001      	movs	r0, #1
		if (rws_pos_en) {
     34c:	469c      	mov	ip, r3
     34e:	b91e      	cbnz	r6, 358 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd8>
			*buf++ = str_ptr_arg[i];
     350:	2100      	movs	r1, #0
     352:	e769      	b.n	228 <CONFIG_SRAM_SIZE+0x28>
     354:	4638      	mov	r0, r7
     356:	e7fa      	b.n	34e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xce>
			size = 0;
     358:	e9c6 4c00 	strd	r4, ip, [r6]
		if (BUF_OFFSET + 1 + size > len) {
     35c:	e7f8      	b.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     35e:	f1c7 0c20 	rsb	ip, r7, #32
     362:	40bb      	lsls	r3, r7
     364:	fa0e f507 	lsl.w	r5, lr, r7
		*buf++ = str_ptr_pos[i];
     368:	fa22 f40c 	lsr.w	r4, r2, ip
     36c:	fa2e f10c 	lsr.w	r1, lr, ip
		memcpy(buf, s, size);
     370:	40ba      	lsls	r2, r7
     372:	431c      	orrs	r4, r3
     374:	fa20 f30c 	lsr.w	r3, r0, ip
		buf += size;
     378:	40b8      	lsls	r0, r7
     37a:	ea4f 4914 	mov.w	r9, r4, lsr #16
	for (i = 0; i < s_idx; i++) {
     37e:	4301      	orrs	r1, r0
     380:	fa1f fe84 	uxth.w	lr, r4
     384:	fbb3 f8f9 	udiv	r8, r3, r9
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     388:	fb09 3018 	mls	r0, r9, r8, r3
     38c:	0c0b      	lsrs	r3, r1, #16
     38e:	fb08 fa0e 	mul.w	sl, r8, lr
			size = strlen(s) + 1;
     392:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     396:	459a      	cmp	sl, r3
			size = strlen(s) + 1;
     398:	d940      	bls.n	41c <CONFIG_FLASH_SIZE+0x1c>
     39a:	18e3      	adds	r3, r4, r3
     39c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
		return -EFAULT;
     3a0:	d204      	bcs.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     3a2:	459a      	cmp	sl, r3
     3a4:	d902      	bls.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     3a6:	f1a8 0002 	sub.w	r0, r8, #2
     3aa:	4423      	add	r3, r4
     3ac:	eba3 030a 	sub.w	r3, r3, sl
     3b0:	b289      	uxth	r1, r1
     3b2:	fbb3 f8f9 	udiv	r8, r3, r9
     3b6:	fb09 3318 	mls	r3, r9, r8, r3
     3ba:	fb08 fe0e 	mul.w	lr, r8, lr
     3be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     3c2:	458e      	cmp	lr, r1
     3c4:	d92c      	bls.n	420 <CONFIG_FLASH_SIZE+0x20>
     3c6:	1861      	adds	r1, r4, r1
     3c8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     3cc:	d204      	bcs.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>
     3ce:	458e      	cmp	lr, r1
     3d0:	d902      	bls.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>
     3d2:	f1a8 0302 	sub.w	r3, r8, #2
     3d6:	4421      	add	r1, r4
     3d8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     3dc:	eba1 010e 	sub.w	r1, r1, lr
     3e0:	fba0 9802 	umull	r9, r8, r0, r2
     3e4:	4541      	cmp	r1, r8
     3e6:	46ce      	mov	lr, r9
     3e8:	4643      	mov	r3, r8
     3ea:	d302      	bcc.n	3f2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x172>
     3ec:	d106      	bne.n	3fc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x17c>
     3ee:	454d      	cmp	r5, r9
     3f0:	d204      	bcs.n	3fc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x17c>
     3f2:	3801      	subs	r0, #1
     3f4:	ebb9 0e02 	subs.w	lr, r9, r2
     3f8:	eb68 0304 	sbc.w	r3, r8, r4
     3fc:	2e00      	cmp	r6, #0
     3fe:	d0a7      	beq.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     400:	ebb5 020e 	subs.w	r2, r5, lr
     404:	eb61 0103 	sbc.w	r1, r1, r3
     408:	fa01 fc0c 	lsl.w	ip, r1, ip
     40c:	fa22 f307 	lsr.w	r3, r2, r7
     410:	40f9      	lsrs	r1, r7
     412:	ea4c 0303 	orr.w	r3, ip, r3
     416:	e9c6 3100 	strd	r3, r1, [r6]
     41a:	e799      	b.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     41c:	4640      	mov	r0, r8
     41e:	e7c5      	b.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     420:	4643      	mov	r3, r8
     422:	e7d9      	b.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>

00000424 <button_pressed>:
static struct gpio_dt_spec led = GPIO_DT_SPEC_GET_OR(DT_ALIAS(led0), gpios,
						     {0});

void button_pressed(const struct device *dev, struct gpio_callback *cb,
		    uint32_t pins)
{
     424:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
     426:	f004 fb0b 	bl	4a40 <sys_clock_cycle_get_32>
	printk("Button pressed at %" PRIu32 "\n", k_cycle_get_32());
}
     42a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     42e:	4601      	mov	r1, r0
	printk("Button pressed at %" PRIu32 "\n", k_cycle_get_32());
     430:	4801      	ldr	r0, [pc, #4]	; (438 <button_pressed+0x14>)
     432:	f004 b84a 	b.w	44ca <printk>
     436:	bf00      	nop
     438:	000055d4 	.word	0x000055d4

0000043c <main>:

int main(void)
{
     43c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     43e:	4d49      	ldr	r5, [pc, #292]	; (564 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x7c>)
     440:	4628      	mov	r0, r5
     442:	f004 fcfb 	bl	4e3c <z_device_is_ready>
	int ret;

	if (!gpio_is_ready_dt(&button)) {
     446:	b930      	cbnz	r0, 456 <main+0x1a>
		printk("Error: button device %s is not ready\n",
     448:	6829      	ldr	r1, [r5, #0]
     44a:	4847      	ldr	r0, [pc, #284]	; (568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>)
     44c:	f004 f83d 	bl	44ca <printk>
			}
			k_msleep(SLEEP_TIME_MS);
		}
	}
	return 0;
}
     450:	2000      	movs	r0, #0
     452:	b003      	add	sp, #12
     454:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = gpio_pin_configure_dt(&button, GPIO_INPUT);
     456:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     45a:	4844      	ldr	r0, [pc, #272]	; (56c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x84>)
     45c:	f004 f81e 	bl	449c <gpio_pin_configure_dt>
	if (ret != 0) {
     460:	4601      	mov	r1, r0
     462:	b128      	cbz	r0, 470 <main+0x34>
		printk("Error %d: failed to configure %s pin %d\n",
     464:	2301      	movs	r3, #1
     466:	682a      	ldr	r2, [r5, #0]
     468:	4841      	ldr	r0, [pc, #260]	; (570 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x88>)
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
     46a:	f004 f82e 	bl	44ca <printk>
		return 0;
     46e:	e7ef      	b.n	450 <main+0x14>

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
     470:	692b      	ldr	r3, [r5, #16]
	const struct gpio_driver_api *api =
     472:	68ae      	ldr	r6, [r5, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
     474:	681b      	ldr	r3, [r3, #0]
					     GPIO_INT_ENABLE_DISABLE_ONLY));
#else
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));
#endif /* CONFIG_GPIO_ENABLE_DISABLE_INTERRUPT */

	return api->pin_interrupt_configure(port, pin, mode, trig);
     476:	2101      	movs	r1, #1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
     478:	f013 0f02 	tst.w	r3, #2
	return api->pin_interrupt_configure(port, pin, mode, trig);
     47c:	69b4      	ldr	r4, [r6, #24]
     47e:	bf14      	ite	ne
     480:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
     484:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
     488:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
     48c:	4628      	mov	r0, r5
     48e:	47a0      	blx	r4
			ret, button.port->name, button.pin);
     490:	682c      	ldr	r4, [r5, #0]
	if (ret != 0) {
     492:	4601      	mov	r1, r0
     494:	b118      	cbz	r0, 49e <main+0x62>
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
     496:	2301      	movs	r3, #1
     498:	4622      	mov	r2, r4
     49a:	4836      	ldr	r0, [pc, #216]	; (574 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8c>)
     49c:	e7e5      	b.n	46a <main+0x2e>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
     49e:	4936      	ldr	r1, [pc, #216]	; (578 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x90>)
     4a0:	4b36      	ldr	r3, [pc, #216]	; (57c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x94>)
     4a2:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
     4a4:	2302      	movs	r3, #2
     4a6:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
     4a8:	69f3      	ldr	r3, [r6, #28]
     4aa:	b113      	cbz	r3, 4b2 <main+0x76>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
     4ac:	2201      	movs	r2, #1
     4ae:	4628      	mov	r0, r5
     4b0:	4798      	blx	r3
	printk("Set up button at %s pin %d\n", button.port->name, button.pin);
     4b2:	4621      	mov	r1, r4
	if (led.port && !gpio_is_ready_dt(&led)) {
     4b4:	4c32      	ldr	r4, [pc, #200]	; (580 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x98>)
	printk("Set up button at %s pin %d\n", button.port->name, button.pin);
     4b6:	4833      	ldr	r0, [pc, #204]	; (584 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x9c>)
     4b8:	2201      	movs	r2, #1
     4ba:	f004 f806 	bl	44ca <printk>
	if (led.port && !gpio_is_ready_dt(&led)) {
     4be:	6820      	ldr	r0, [r4, #0]
     4c0:	b150      	cbz	r0, 4d8 <main+0x9c>
     4c2:	f004 fcbb 	bl	4e3c <z_device_is_ready>
		       ret, led.port->name);
     4c6:	6823      	ldr	r3, [r4, #0]
	if (led.port && !gpio_is_ready_dt(&led)) {
     4c8:	4606      	mov	r6, r0
     4ca:	bb08      	cbnz	r0, 510 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28>
		printk("Error %d: LED device %s is not ready; ignoring it\n",
     4cc:	4601      	mov	r1, r0
     4ce:	681a      	ldr	r2, [r3, #0]
     4d0:	482d      	ldr	r0, [pc, #180]	; (588 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa0>)
     4d2:	f003 fffa 	bl	44ca <printk>
		led.port = NULL;
     4d6:	6026      	str	r6, [r4, #0]
	printk("Press the button\n");
     4d8:	482c      	ldr	r0, [pc, #176]	; (58c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa4>)
     4da:	f003 fff6 	bl	44ca <printk>
	if (led.port) {
     4de:	6823      	ldr	r3, [r4, #0]
     4e0:	2b00      	cmp	r3, #0
     4e2:	d0b5      	beq.n	450 <main+0x14>
	const struct gpio_driver_data *const data =
     4e4:	692e      	ldr	r6, [r5, #16]
	return api->port_get_raw(port, value);
     4e6:	4f1f      	ldr	r7, [pc, #124]	; (564 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x7c>)
     4e8:	68ab      	ldr	r3, [r5, #8]
     4ea:	4638      	mov	r0, r7
     4ec:	685b      	ldr	r3, [r3, #4]
     4ee:	a901      	add	r1, sp, #4
     4f0:	4798      	blx	r3
	if (ret == 0) {
     4f2:	1e03      	subs	r3, r0, #0
     4f4:	d025      	beq.n	542 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5a>
			if (val >= 0) {
     4f6:	db2f      	blt.n	558 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x70>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     4f8:	2101      	movs	r1, #1
     4fa:	7922      	ldrb	r2, [r4, #4]
	return gpio_pin_set(spec->port, spec->pin, value);
     4fc:	6820      	ldr	r0, [r4, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     4fe:	4091      	lsls	r1, r2
     500:	6902      	ldr	r2, [r0, #16]
     502:	6812      	ldr	r2, [r2, #0]
     504:	4211      	tst	r1, r2
     506:	d022      	beq.n	54e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x66>
	if (value != 0)	{
     508:	b31b      	cbz	r3, 552 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6a>
	return api->port_clear_bits_raw(port, pins);
     50a:	6883      	ldr	r3, [r0, #8]
     50c:	691b      	ldr	r3, [r3, #16]
     50e:	e022      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
	if (led.port) {
     510:	2b00      	cmp	r3, #0
     512:	d0e1      	beq.n	4d8 <main+0x9c>
		ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT);
     514:	f44f 3100 	mov.w	r1, #131072	; 0x20000
     518:	4620      	mov	r0, r4
     51a:	f003 ffbf 	bl	449c <gpio_pin_configure_dt>
		if (ret != 0) {
     51e:	7923      	ldrb	r3, [r4, #4]
     520:	4601      	mov	r1, r0
     522:	b138      	cbz	r0, 534 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4c>
			       ret, led.port->name, led.pin);
     524:	6822      	ldr	r2, [r4, #0]
			printk("Error %d: failed to configure LED device %s pin %d\n",
     526:	481a      	ldr	r0, [pc, #104]	; (590 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa8>)
     528:	6812      	ldr	r2, [r2, #0]
     52a:	f003 ffce 	bl	44ca <printk>
			led.port = NULL;
     52e:	2300      	movs	r3, #0
     530:	6023      	str	r3, [r4, #0]
     532:	e7d1      	b.n	4d8 <main+0x9c>
			printk("Set up LED at %s pin %d\n", led.port->name, led.pin);
     534:	6821      	ldr	r1, [r4, #0]
     536:	461a      	mov	r2, r3
     538:	6809      	ldr	r1, [r1, #0]
     53a:	4816      	ldr	r0, [pc, #88]	; (594 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xac>)
     53c:	f003 ffc5 	bl	44ca <printk>
     540:	e7ca      	b.n	4d8 <main+0x9c>
		*value ^= data->invert;
     542:	6832      	ldr	r2, [r6, #0]
     544:	9b01      	ldr	r3, [sp, #4]
     546:	4053      	eors	r3, r2
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
     548:	f3c3 0340 	ubfx	r3, r3, #1, #1
			if (val >= 0) {
     54c:	e7d4      	b.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
	if (value != 0)	{
     54e:	2b00      	cmp	r3, #0
     550:	d0db      	beq.n	50a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x22>
	return api->port_set_bits_raw(port, pins);
     552:	6883      	ldr	r3, [r0, #8]
     554:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
     556:	4798      	blx	r3
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     558:	2100      	movs	r1, #0
     55a:	2021      	movs	r0, #33	; 0x21
     55c:	f003 fc2c 	bl	3db8 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
     560:	e7c2      	b.n	4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>
     562:	bf00      	nop
     564:	00005174 	.word	0x00005174
     568:	000055ea 	.word	0x000055ea
     56c:	00005438 	.word	0x00005438
     570:	00005610 	.word	0x00005610
     574:	00005639 	.word	0x00005639
     578:	200002b8 	.word	0x200002b8
     57c:	00000425 	.word	0x00000425
     580:	20000000 	.word	0x20000000
     584:	0000566f 	.word	0x0000566f
     588:	0000568b 	.word	0x0000568b
     58c:	0000570b 	.word	0x0000570b
     590:	000056be 	.word	0x000056be
     594:	000056f2 	.word	0x000056f2

00000598 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
     598:	4b01      	ldr	r3, [pc, #4]	; (5a0 <char_out+0x8>)
     59a:	681b      	ldr	r3, [r3, #0]
     59c:	4718      	bx	r3
     59e:	bf00      	nop
     5a0:	20000008 	.word	0x20000008

000005a4 <__printk_hook_install>:
	_char_out = fn;
     5a4:	4b01      	ldr	r3, [pc, #4]	; (5ac <__printk_hook_install+0x8>)
     5a6:	6018      	str	r0, [r3, #0]
}
     5a8:	4770      	bx	lr
     5aa:	bf00      	nop
     5ac:	20000008 	.word	0x20000008

000005b0 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
     5b0:	b507      	push	{r0, r1, r2, lr}
     5b2:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     5b4:	2100      	movs	r1, #0
     5b6:	4602      	mov	r2, r0
     5b8:	9100      	str	r1, [sp, #0]
     5ba:	4803      	ldr	r0, [pc, #12]	; (5c8 <vprintk+0x18>)
     5bc:	f000 f914 	bl	7e8 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     5c0:	b003      	add	sp, #12
     5c2:	f85d fb04 	ldr.w	pc, [sp], #4
     5c6:	bf00      	nop
     5c8:	00000599 	.word	0x00000599

000005cc <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     5cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     5d0:	8b05      	ldrh	r5, [r0, #24]
{
     5d2:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     5d4:	0728      	lsls	r0, r5, #28
{
     5d6:	4690      	mov	r8, r2
	if (processing) {
     5d8:	d411      	bmi.n	5fe <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
     5da:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     5dc:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     5e0:	f040 80cd 	bne.w	77e <process_event+0x1b2>
			evt = process_recheck(mgr);
     5e4:	4620      	mov	r0, r4
     5e6:	f003 ff87 	bl	44f8 <process_recheck>
		}

		if (evt == EVT_NOP) {
     5ea:	b178      	cbz	r0, 60c <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
     5ec:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5ee:	8b21      	ldrh	r1, [r4, #24]
     5f0:	2804      	cmp	r0, #4
     5f2:	d811      	bhi.n	618 <process_event+0x4c>
     5f4:	e8df f000 	tbb	[pc, r0]
     5f8:	856d10c3 	.word	0x856d10c3
     5fc:	95          	.byte	0x95
     5fd:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
     5fe:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     600:	bf0c      	ite	eq
     602:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
     606:	f045 0520 	orrne.w	r5, r5, #32
     60a:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     60c:	f388 8811 	msr	BASEPRI, r8
     610:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     618:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     61c:	45aa      	cmp	sl, r5
     61e:	f000 80a6 	beq.w	76e <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
     622:	2700      	movs	r7, #0
     624:	46b9      	mov	r9, r7
     626:	463e      	mov	r6, r7
     628:	68a3      	ldr	r3, [r4, #8]
     62a:	2b00      	cmp	r3, #0
     62c:	f000 80bd 	beq.w	7aa <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     630:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     634:	8321      	strh	r1, [r4, #24]
     636:	f388 8811 	msr	BASEPRI, r8
     63a:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     63e:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     640:	2900      	cmp	r1, #0
     642:	f000 80bb 	beq.w	7bc <process_event+0x1f0>
	return node->next;
     646:	680d      	ldr	r5, [r1, #0]
     648:	2900      	cmp	r1, #0
     64a:	f000 80b7 	beq.w	7bc <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
     64e:	4633      	mov	r3, r6
     650:	4652      	mov	r2, sl
     652:	4620      	mov	r0, r4
     654:	f8d1 8004 	ldr.w	r8, [r1, #4]
     658:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     65a:	2d00      	cmp	r5, #0
     65c:	d076      	beq.n	74c <process_event+0x180>
     65e:	682b      	ldr	r3, [r5, #0]
     660:	4629      	mov	r1, r5
     662:	461d      	mov	r5, r3
     664:	e7f0      	b.n	648 <process_event+0x7c>
     666:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     66a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     66c:	2a01      	cmp	r2, #1
     66e:	d81b      	bhi.n	6a8 <process_event+0xdc>
	list->head = NULL;
     670:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     672:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     676:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     678:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     67a:	b289      	uxth	r1, r1
	list->tail = NULL;
     67c:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     680:	d109      	bne.n	696 <process_event+0xca>
     682:	463b      	mov	r3, r7
     684:	e003      	b.n	68e <process_event+0xc2>
				mgr->refs += 1U;
     686:	8b62      	ldrh	r2, [r4, #26]
     688:	3201      	adds	r2, #1
     68a:	8362      	strh	r2, [r4, #26]
	return node->next;
     68c:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     68e:	2b00      	cmp	r3, #0
     690:	d1f9      	bne.n	686 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     692:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
     696:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
     698:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     69a:	f003 ff2d 	bl	44f8 <process_recheck>
     69e:	2800      	cmp	r0, #0
     6a0:	d07b      	beq.n	79a <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     6a2:	f041 0120 	orr.w	r1, r1, #32
     6a6:	e077      	b.n	798 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
     6a8:	2b04      	cmp	r3, #4
     6aa:	d10a      	bne.n	6c2 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6ac:	f021 0107 	bic.w	r1, r1, #7
     6b0:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
     6b2:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
     6b4:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     6b6:	f003 ff1f 	bl	44f8 <process_recheck>
     6ba:	b110      	cbz	r0, 6c2 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     6bc:	f041 0120 	orr.w	r1, r1, #32
     6c0:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     6c2:	8b21      	ldrh	r1, [r4, #24]
     6c4:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     6c8:	45aa      	cmp	sl, r5
     6ca:	d050      	beq.n	76e <process_event+0x1a2>
     6cc:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
     6ce:	46b9      	mov	r9, r7
     6d0:	e7aa      	b.n	628 <process_event+0x5c>
			transit = mgr->transitions->start;
     6d2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6d4:	f021 0107 	bic.w	r1, r1, #7
     6d8:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
     6dc:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
     6de:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
     6e2:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     6e4:	d12d      	bne.n	742 <process_event+0x176>
		    || (transit != NULL)) {
     6e6:	f1b9 0f00 	cmp.w	r9, #0
     6ea:	d040      	beq.n	76e <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     6ec:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     6f0:	8321      	strh	r1, [r4, #24]
     6f2:	f388 8811 	msr	BASEPRI, r8
     6f6:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
     6fa:	4620      	mov	r0, r4
     6fc:	4939      	ldr	r1, [pc, #228]	; (7e4 <process_event+0x218>)
     6fe:	47c8      	blx	r9
     700:	e029      	b.n	756 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     702:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
     706:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     708:	f041 0104 	orr.w	r1, r1, #4
     70c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     70e:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
     710:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
     714:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     716:	d0e6      	beq.n	6e6 <process_event+0x11a>
     718:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     71a:	f04f 0a04 	mov.w	sl, #4
		res = 0;
     71e:	463e      	mov	r6, r7
     720:	e782      	b.n	628 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     722:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
     726:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     728:	f041 0105 	orr.w	r1, r1, #5
     72c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     72e:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
     730:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
     734:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     736:	d0d6      	beq.n	6e6 <process_event+0x11a>
     738:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     73a:	f04f 0a05 	mov.w	sl, #5
		res = 0;
     73e:	463e      	mov	r6, r7
     740:	e772      	b.n	628 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
     742:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     744:	f04f 0a06 	mov.w	sl, #6
		res = 0;
     748:	463e      	mov	r6, r7
     74a:	e76d      	b.n	628 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     74c:	462b      	mov	r3, r5
     74e:	e787      	b.n	660 <process_event+0x94>
			if (transit != NULL) {
     750:	f1b9 0f00 	cmp.w	r9, #0
     754:	d1d1      	bne.n	6fa <process_event+0x12e>
	__asm__ volatile(
     756:	f04f 0320 	mov.w	r3, #32
     75a:	f3ef 8811 	mrs	r8, BASEPRI
     75e:	f383 8812 	msr	BASEPRI_MAX, r3
     762:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     766:	8b23      	ldrh	r3, [r4, #24]
     768:	f023 0308 	bic.w	r3, r3, #8
     76c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     76e:	8b25      	ldrh	r5, [r4, #24]
     770:	06ea      	lsls	r2, r5, #27
     772:	d52e      	bpl.n	7d2 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     774:	f025 0310 	bic.w	r3, r5, #16
     778:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     77a:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
     77e:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     780:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     782:	2e00      	cmp	r6, #0
     784:	f6bf af6f 	bge.w	666 <process_event+0x9a>
	list->head = NULL;
     788:	2300      	movs	r3, #0
		*clients = mgr->clients;
     78a:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
     78c:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     790:	f021 0107 	bic.w	r1, r1, #7
     794:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
     798:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     79a:	8b21      	ldrh	r1, [r4, #24]
     79c:	f04f 0900 	mov.w	r9, #0
     7a0:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     7a4:	45aa      	cmp	sl, r5
     7a6:	f47f af3f 	bne.w	628 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
     7aa:	2f00      	cmp	r7, #0
     7ac:	d09b      	beq.n	6e6 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     7ae:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     7b2:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
     7b4:	f388 8811 	msr	BASEPRI, r8
     7b8:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
     7bc:	2f00      	cmp	r7, #0
     7be:	d0c7      	beq.n	750 <process_event+0x184>
	return node->next;
     7c0:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
     7c2:	4639      	mov	r1, r7
     7c4:	4633      	mov	r3, r6
     7c6:	4652      	mov	r2, sl
     7c8:	4620      	mov	r0, r4
     7ca:	f003 fec1 	bl	4550 <notify_one>
	list->head = node;
     7ce:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
     7d0:	e7f4      	b.n	7bc <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     7d2:	06ab      	lsls	r3, r5, #26
     7d4:	f57f af1a 	bpl.w	60c <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     7d8:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     7dc:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     7de:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     7e2:	e6ff      	b.n	5e4 <process_event+0x18>
     7e4:	0000457d 	.word	0x0000457d

000007e8 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7ec:	4681      	mov	r9, r0
     7ee:	468b      	mov	fp, r1
     7f0:	4617      	mov	r7, r2
     7f2:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     7f4:	2500      	movs	r5, #0
{
     7f6:	b095      	sub	sp, #84	; 0x54
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     7f8:	7838      	ldrb	r0, [r7, #0]
     7fa:	b908      	cbnz	r0, 800 <CONFIG_ISR_STACK_SIZE>
			OUTC(' ');
			--width;
		}
	}

	return count;
     7fc:	4628      	mov	r0, r5
     7fe:	e357      	b.n	eb0 <CONFIG_ISR_STACK_SIZE+0x6b0>
			OUTC(*fp++);
     800:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
     802:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     804:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
     806:	d006      	beq.n	816 <CONFIG_ISR_STACK_SIZE+0x16>
			OUTC('%');
     808:	4659      	mov	r1, fp
     80a:	47c8      	blx	r9
     80c:	2800      	cmp	r0, #0
     80e:	f2c0 834f 	blt.w	eb0 <CONFIG_ISR_STACK_SIZE+0x6b0>
     812:	3501      	adds	r5, #1
		if (bps == NULL) {
     814:	e1fb      	b.n	c0e <CONFIG_ISR_STACK_SIZE+0x40e>
		} state = {
     816:	2218      	movs	r2, #24
     818:	2100      	movs	r1, #0
     81a:	a80e      	add	r0, sp, #56	; 0x38
     81c:	f004 f80d 	bl	483a <memset>
	if (*sp == '%') {
     820:	787b      	ldrb	r3, [r7, #1]
     822:	2b25      	cmp	r3, #37	; 0x25
     824:	d07d      	beq.n	922 <CONFIG_ISR_STACK_SIZE+0x122>
     826:	2300      	movs	r3, #0
     828:	4698      	mov	r8, r3
     82a:	469e      	mov	lr, r3
     82c:	469c      	mov	ip, r3
     82e:	461e      	mov	r6, r3
     830:	1c78      	adds	r0, r7, #1
     832:	4601      	mov	r1, r0
		switch (*sp) {
     834:	f810 2b01 	ldrb.w	r2, [r0], #1
     838:	2a2b      	cmp	r2, #43	; 0x2b
     83a:	f000 80a1 	beq.w	980 <CONFIG_ISR_STACK_SIZE+0x180>
     83e:	f200 8098 	bhi.w	972 <CONFIG_ISR_STACK_SIZE+0x172>
     842:	2a20      	cmp	r2, #32
     844:	f000 809f 	beq.w	986 <CONFIG_ISR_STACK_SIZE+0x186>
     848:	2a23      	cmp	r2, #35	; 0x23
     84a:	f000 809f 	beq.w	98c <CONFIG_ISR_STACK_SIZE+0x18c>
     84e:	b12b      	cbz	r3, 85c <CONFIG_ISR_STACK_SIZE+0x5c>
     850:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     858:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     85c:	f1b8 0f00 	cmp.w	r8, #0
     860:	d005      	beq.n	86e <CONFIG_ISR_STACK_SIZE+0x6e>
     862:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     866:	f043 0320 	orr.w	r3, r3, #32
     86a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     86e:	f1be 0f00 	cmp.w	lr, #0
     872:	d005      	beq.n	880 <CONFIG_ISR_STACK_SIZE+0x80>
     874:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     878:	f043 0310 	orr.w	r3, r3, #16
     87c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     880:	f1bc 0f00 	cmp.w	ip, #0
     884:	d005      	beq.n	892 <CONFIG_ISR_STACK_SIZE+0x92>
     886:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     88a:	f043 0308 	orr.w	r3, r3, #8
     88e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     892:	b12e      	cbz	r6, 8a0 <CONFIG_ISR_STACK_SIZE+0xa0>
     894:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     898:	f043 0304 	orr.w	r3, r3, #4
     89c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
     8a0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     8a4:	f003 0044 	and.w	r0, r3, #68	; 0x44
     8a8:	2844      	cmp	r0, #68	; 0x44
     8aa:	d103      	bne.n	8b4 <CONFIG_ISR_STACK_SIZE+0xb4>
		conv->flag_zero = false;
     8ac:	f36f 1386 	bfc	r3, #6, #1
     8b0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
     8b4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
     8b8:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
     8ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     8be:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
     8c2:	d17f      	bne.n	9c4 <CONFIG_ISR_STACK_SIZE+0x1c4>
		conv->width_star = true;
     8c4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
     8c8:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     8ca:	f042 0201 	orr.w	r2, r2, #1
     8ce:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
     8d2:	781a      	ldrb	r2, [r3, #0]
     8d4:	2a2e      	cmp	r2, #46	; 0x2e
     8d6:	bf0c      	ite	eq
     8d8:	2101      	moveq	r1, #1
     8da:	2100      	movne	r1, #0
     8dc:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     8e0:	f361 0241 	bfi	r2, r1, #1, #1
     8e4:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
     8e8:	d178      	bne.n	9dc <CONFIG_ISR_STACK_SIZE+0x1dc>
	if (*sp == '*') {
     8ea:	785a      	ldrb	r2, [r3, #1]
     8ec:	2a2a      	cmp	r2, #42	; 0x2a
     8ee:	d06e      	beq.n	9ce <CONFIG_ISR_STACK_SIZE+0x1ce>
	size_t val = 0;
     8f0:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     8f2:	f04f 0c0a 	mov.w	ip, #10
	++sp;
     8f6:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     8f8:	4619      	mov	r1, r3
     8fa:	f811 0b01 	ldrb.w	r0, [r1], #1
     8fe:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
     902:	2e09      	cmp	r6, #9
     904:	f240 8095 	bls.w	a32 <CONFIG_ISR_STACK_SIZE+0x232>
	conv->unsupported |= ((conv->prec_value < 0)
     908:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
     90c:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
     90e:	f3c1 0040 	ubfx	r0, r1, #1, #1
     912:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
     916:	460a      	mov	r2, r1
     918:	f360 0241 	bfi	r2, r0, #1, #1
     91c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
     920:	e05c      	b.n	9dc <CONFIG_ISR_STACK_SIZE+0x1dc>
		conv->specifier = *sp++;
     922:	1cba      	adds	r2, r7, #2
     924:	9203      	str	r2, [sp, #12]
     926:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
     92a:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
     92e:	07da      	lsls	r2, r3, #31
     930:	f140 812e 	bpl.w	b90 <CONFIG_ISR_STACK_SIZE+0x390>
			width = va_arg(ap, int);
     934:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
     938:	f1b8 0f00 	cmp.w	r8, #0
     93c:	da07      	bge.n	94e <CONFIG_ISR_STACK_SIZE+0x14e>
				conv->flag_dash = true;
     93e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				width = -width;
     942:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
     946:	f042 0204 	orr.w	r2, r2, #4
     94a:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
		if (conv->prec_star) {
     94e:	075e      	lsls	r6, r3, #29
     950:	f140 8127 	bpl.w	ba2 <CONFIG_ISR_STACK_SIZE+0x3a2>
			int arg = va_arg(ap, int);
     954:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
     958:	f1ba 0f00 	cmp.w	sl, #0
     95c:	f280 8126 	bge.w	bac <CONFIG_ISR_STACK_SIZE+0x3ac>
				conv->prec_present = false;
     960:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
     964:	f36f 0341 	bfc	r3, #1, #1
     968:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
     96c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
     970:	e11c      	b.n	bac <CONFIG_ISR_STACK_SIZE+0x3ac>
		switch (*sp) {
     972:	2a2d      	cmp	r2, #45	; 0x2d
     974:	d00d      	beq.n	992 <CONFIG_ISR_STACK_SIZE+0x192>
     976:	2a30      	cmp	r2, #48	; 0x30
     978:	f47f af69 	bne.w	84e <CONFIG_ISR_STACK_SIZE+0x4e>
     97c:	2301      	movs	r3, #1
	} while (loop);
     97e:	e758      	b.n	832 <CONFIG_ISR_STACK_SIZE+0x32>
		switch (*sp) {
     980:	f04f 0c01 	mov.w	ip, #1
     984:	e755      	b.n	832 <CONFIG_ISR_STACK_SIZE+0x32>
     986:	f04f 0e01 	mov.w	lr, #1
     98a:	e752      	b.n	832 <CONFIG_ISR_STACK_SIZE+0x32>
     98c:	f04f 0801 	mov.w	r8, #1
     990:	e74f      	b.n	832 <CONFIG_ISR_STACK_SIZE+0x32>
     992:	2601      	movs	r6, #1
     994:	e74d      	b.n	832 <CONFIG_ISR_STACK_SIZE+0x32>
		val = 10U * val + *sp++ - '0';
     996:	4603      	mov	r3, r0
     998:	fb0e 6202 	mla	r2, lr, r2, r6
     99c:	3a30      	subs	r2, #48	; 0x30
     99e:	4618      	mov	r0, r3
     9a0:	f810 6b01 	ldrb.w	r6, [r0], #1
     9a4:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
     9a8:	f1bc 0f09 	cmp.w	ip, #9
     9ac:	d9f3      	bls.n	996 <CONFIG_ISR_STACK_SIZE+0x196>
	if (sp != wp) {
     9ae:	4299      	cmp	r1, r3
     9b0:	d08f      	beq.n	8d2 <CONFIG_ISR_STACK_SIZE+0xd2>
		conv->unsupported |= ((conv->width_value < 0)
     9b2:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
     9b6:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
     9b8:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     9ba:	f362 0141 	bfi	r1, r2, #1, #1
     9be:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
     9c2:	e786      	b.n	8d2 <CONFIG_ISR_STACK_SIZE+0xd2>
     9c4:	460b      	mov	r3, r1
	size_t val = 0;
     9c6:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     9c8:	f04f 0e0a 	mov.w	lr, #10
     9cc:	e7e7      	b.n	99e <CONFIG_ISR_STACK_SIZE+0x19e>
		conv->prec_star = true;
     9ce:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
     9d2:	3302      	adds	r3, #2
		conv->prec_star = true;
     9d4:	f042 0204 	orr.w	r2, r2, #4
     9d8:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	switch (*sp) {
     9dc:	781a      	ldrb	r2, [r3, #0]
     9de:	2a6c      	cmp	r2, #108	; 0x6c
     9e0:	d047      	beq.n	a72 <CONFIG_ISR_STACK_SIZE+0x272>
     9e2:	d82b      	bhi.n	a3c <CONFIG_ISR_STACK_SIZE+0x23c>
     9e4:	2a68      	cmp	r2, #104	; 0x68
     9e6:	d031      	beq.n	a4c <CONFIG_ISR_STACK_SIZE+0x24c>
     9e8:	2a6a      	cmp	r2, #106	; 0x6a
     9ea:	d04b      	beq.n	a84 <CONFIG_ISR_STACK_SIZE+0x284>
     9ec:	2a4c      	cmp	r2, #76	; 0x4c
     9ee:	d051      	beq.n	a94 <CONFIG_ISR_STACK_SIZE+0x294>
	conv->specifier = *sp++;
     9f0:	461a      	mov	r2, r3
     9f2:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
     9f6:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
     9f8:	9203      	str	r2, [sp, #12]
     9fa:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->length_mod == LENGTH_UPPER_L) {
     9fe:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	switch (conv->specifier) {
     a02:	f200 80be 	bhi.w	b82 <CONFIG_ISR_STACK_SIZE+0x382>
     a06:	2b6d      	cmp	r3, #109	; 0x6d
     a08:	d851      	bhi.n	aae <CONFIG_ISR_STACK_SIZE+0x2ae>
     a0a:	2b69      	cmp	r3, #105	; 0x69
     a0c:	f200 80b9 	bhi.w	b82 <CONFIG_ISR_STACK_SIZE+0x382>
     a10:	2b57      	cmp	r3, #87	; 0x57
     a12:	d867      	bhi.n	ae4 <CONFIG_ISR_STACK_SIZE+0x2e4>
     a14:	2b41      	cmp	r3, #65	; 0x41
     a16:	d003      	beq.n	a20 <CONFIG_ISR_STACK_SIZE+0x220>
     a18:	3b45      	subs	r3, #69	; 0x45
     a1a:	2b02      	cmp	r3, #2
     a1c:	f200 80b1 	bhi.w	b82 <CONFIG_ISR_STACK_SIZE+0x382>
		conv->specifier_cat = SPECIFIER_FP;
     a20:	2204      	movs	r2, #4
     a22:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     a26:	f362 0302 	bfi	r3, r2, #0, #3
     a2a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
     a2e:	2301      	movs	r3, #1
			break;
     a30:	e073      	b.n	b1a <CONFIG_ISR_STACK_SIZE+0x31a>
		val = 10U * val + *sp++ - '0';
     a32:	fb0c 0202 	mla	r2, ip, r2, r0
     a36:	460b      	mov	r3, r1
     a38:	3a30      	subs	r2, #48	; 0x30
     a3a:	e75d      	b.n	8f8 <CONFIG_ISR_STACK_SIZE+0xf8>
	switch (*sp) {
     a3c:	2a74      	cmp	r2, #116	; 0x74
     a3e:	d025      	beq.n	a8c <CONFIG_ISR_STACK_SIZE+0x28c>
     a40:	2a7a      	cmp	r2, #122	; 0x7a
     a42:	d1d5      	bne.n	9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
		conv->length_mod = LENGTH_Z;
     a44:	2106      	movs	r1, #6
     a46:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     a4a:	e00c      	b.n	a66 <CONFIG_ISR_STACK_SIZE+0x266>
		if (*++sp == 'h') {
     a4c:	785a      	ldrb	r2, [r3, #1]
     a4e:	2a68      	cmp	r2, #104	; 0x68
     a50:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     a54:	d106      	bne.n	a64 <CONFIG_ISR_STACK_SIZE+0x264>
			conv->length_mod = LENGTH_HH;
     a56:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     a58:	f361 02c6 	bfi	r2, r1, #3, #4
     a5c:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
     a60:	3302      	adds	r3, #2
     a62:	e7c5      	b.n	9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
			conv->length_mod = LENGTH_H;
     a64:	2102      	movs	r1, #2
     a66:	f361 02c6 	bfi	r2, r1, #3, #4
     a6a:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
     a6e:	3301      	adds	r3, #1
     a70:	e7be      	b.n	9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
		if (*++sp == 'l') {
     a72:	785a      	ldrb	r2, [r3, #1]
     a74:	2a6c      	cmp	r2, #108	; 0x6c
     a76:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     a7a:	d101      	bne.n	a80 <CONFIG_ISR_STACK_SIZE+0x280>
			conv->length_mod = LENGTH_LL;
     a7c:	2104      	movs	r1, #4
     a7e:	e7eb      	b.n	a58 <CONFIG_ISR_STACK_SIZE+0x258>
			conv->length_mod = LENGTH_L;
     a80:	2103      	movs	r1, #3
     a82:	e7f0      	b.n	a66 <CONFIG_ISR_STACK_SIZE+0x266>
		conv->length_mod = LENGTH_J;
     a84:	2105      	movs	r1, #5
     a86:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     a8a:	e7ec      	b.n	a66 <CONFIG_ISR_STACK_SIZE+0x266>
		conv->length_mod = LENGTH_T;
     a8c:	2107      	movs	r1, #7
     a8e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     a92:	e7e8      	b.n	a66 <CONFIG_ISR_STACK_SIZE+0x266>
		conv->unsupported = true;
     a94:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
     a98:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
     a9c:	f022 0202 	bic.w	r2, r2, #2
     aa0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
     aa4:	f042 0202 	orr.w	r2, r2, #2
     aa8:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
     aac:	e7df      	b.n	a6e <CONFIG_ISR_STACK_SIZE+0x26e>
	switch (conv->specifier) {
     aae:	3b6e      	subs	r3, #110	; 0x6e
     ab0:	b2d9      	uxtb	r1, r3
     ab2:	2301      	movs	r3, #1
     ab4:	408b      	lsls	r3, r1
     ab6:	f240 4182 	movw	r1, #1154	; 0x482
     aba:	420b      	tst	r3, r1
     abc:	d137      	bne.n	b2e <CONFIG_ISR_STACK_SIZE+0x32e>
     abe:	f013 0f24 	tst.w	r3, #36	; 0x24
     ac2:	d151      	bne.n	b68 <CONFIG_ISR_STACK_SIZE+0x368>
     ac4:	07d8      	lsls	r0, r3, #31
     ac6:	d55c      	bpl.n	b82 <CONFIG_ISR_STACK_SIZE+0x382>
		conv->specifier_cat = SPECIFIER_PTR;
     ac8:	2103      	movs	r1, #3
     aca:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     ace:	f361 0302 	bfi	r3, r1, #0, #3
     ad2:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
     ad6:	f002 0378 	and.w	r3, r2, #120	; 0x78
     ada:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
     ade:	424b      	negs	r3, r1
     ae0:	414b      	adcs	r3, r1
     ae2:	e01a      	b.n	b1a <CONFIG_ISR_STACK_SIZE+0x31a>
     ae4:	2001      	movs	r0, #1
	switch (conv->specifier) {
     ae6:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
     aea:	b2c9      	uxtb	r1, r1
     aec:	fa00 f101 	lsl.w	r1, r0, r1
     af0:	f411 4f62 	tst.w	r1, #57856	; 0xe200
     af4:	d194      	bne.n	a20 <CONFIG_ISR_STACK_SIZE+0x220>
     af6:	f640 0601 	movw	r6, #2049	; 0x801
     afa:	4231      	tst	r1, r6
     afc:	d11d      	bne.n	b3a <CONFIG_ISR_STACK_SIZE+0x33a>
     afe:	f411 3f04 	tst.w	r1, #135168	; 0x21000
     b02:	d03e      	beq.n	b82 <CONFIG_ISR_STACK_SIZE+0x382>
		conv->specifier_cat = SPECIFIER_SINT;
     b04:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     b08:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     b0c:	f002 0278 	and.w	r2, r2, #120	; 0x78
     b10:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
     b12:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
     b16:	d034      	beq.n	b82 <CONFIG_ISR_STACK_SIZE+0x382>
	bool unsupported = false;
     b18:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
     b1a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
     b1e:	f3c2 0140 	ubfx	r1, r2, #1, #1
     b22:	430b      	orrs	r3, r1
     b24:	f363 0241 	bfi	r2, r3, #1, #1
     b28:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
     b2c:	e6fd      	b.n	92a <CONFIG_ISR_STACK_SIZE+0x12a>
		conv->specifier_cat = SPECIFIER_UINT;
     b2e:	2102      	movs	r1, #2
     b30:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     b34:	f361 0302 	bfi	r3, r1, #0, #3
     b38:	e7e8      	b.n	b0c <CONFIG_ISR_STACK_SIZE+0x30c>
     b3a:	2002      	movs	r0, #2
     b3c:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
     b40:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     b44:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     b48:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     b4a:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
     b4e:	bf02      	ittt	eq
     b50:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
     b54:	f041 0101 	orreq.w	r1, r1, #1
     b58:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
     b5c:	2b63      	cmp	r3, #99	; 0x63
     b5e:	d1db      	bne.n	b18 <CONFIG_ISR_STACK_SIZE+0x318>
			unsupported = (conv->length_mod != LENGTH_NONE);
     b60:	1e13      	subs	r3, r2, #0
     b62:	bf18      	it	ne
     b64:	2301      	movne	r3, #1
     b66:	e7d8      	b.n	b1a <CONFIG_ISR_STACK_SIZE+0x31a>
		conv->specifier_cat = SPECIFIER_PTR;
     b68:	2103      	movs	r1, #3
     b6a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
     b6e:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     b72:	f361 0302 	bfi	r3, r1, #0, #3
     b76:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
     b7a:	bf14      	ite	ne
     b7c:	2301      	movne	r3, #1
     b7e:	2300      	moveq	r3, #0
     b80:	e7cb      	b.n	b1a <CONFIG_ISR_STACK_SIZE+0x31a>
		conv->invalid = true;
     b82:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     b86:	f043 0301 	orr.w	r3, r3, #1
     b8a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
     b8e:	e7c3      	b.n	b18 <CONFIG_ISR_STACK_SIZE+0x318>
		} else if (conv->width_present) {
     b90:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
     b94:	2a00      	cmp	r2, #0
		int width = -1;
     b96:	bfac      	ite	ge
     b98:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
			width = conv->width_value;
     b9c:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
     ba0:	e6d5      	b.n	94e <CONFIG_ISR_STACK_SIZE+0x14e>
		} else if (conv->prec_present) {
     ba2:	0798      	lsls	r0, r3, #30
     ba4:	f57f aee2 	bpl.w	96c <CONFIG_ISR_STACK_SIZE+0x16c>
			precision = conv->prec_value;
     ba8:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
		conv->pad0_value = 0;
     bac:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     bae:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
     bb2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
			= (enum length_mod_enum)conv->length_mod;
     bb6:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		enum specifier_cat_enum specifier_cat
     bba:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     bbe:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     bc0:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     bc4:	d133      	bne.n	c2e <CONFIG_ISR_STACK_SIZE+0x42e>
			switch (length_mod) {
     bc6:	1ecb      	subs	r3, r1, #3
     bc8:	2b04      	cmp	r3, #4
     bca:	d804      	bhi.n	bd6 <CONFIG_ISR_STACK_SIZE+0x3d6>
     bcc:	e8df f003 	tbb	[pc, r3]
     bd0:	21464621 	.word	0x21464621
     bd4:	21          	.byte	0x21
     bd5:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     bd6:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
     bd8:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
     bda:	ea4f 72e3 	mov.w	r2, r3, asr #31
     bde:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
     be2:	d11c      	bne.n	c1e <CONFIG_ISR_STACK_SIZE+0x41e>
				value->sint = (signed char)value->sint;
     be4:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
     be8:	17da      	asrs	r2, r3, #31
     bea:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
     bee:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
     bf0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     bf4:	f013 0603 	ands.w	r6, r3, #3
     bf8:	d050      	beq.n	c9c <CONFIG_ISR_STACK_SIZE+0x49c>
			OUTS(sp, fp);
     bfa:	463a      	mov	r2, r7
     bfc:	4659      	mov	r1, fp
     bfe:	4648      	mov	r0, r9
     c00:	9b03      	ldr	r3, [sp, #12]
     c02:	f003 fd98 	bl	4736 <outs>
     c06:	2800      	cmp	r0, #0
     c08:	f2c0 8152 	blt.w	eb0 <CONFIG_ISR_STACK_SIZE+0x6b0>
     c0c:	4405      	add	r5, r0
			continue;
     c0e:	9f03      	ldr	r7, [sp, #12]
     c10:	e5f2      	b.n	7f8 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     c12:	f854 3b04 	ldr.w	r3, [r4], #4
     c16:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
     c18:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
     c1c:	e7e8      	b.n	bf0 <CONFIG_ISR_STACK_SIZE+0x3f0>
			} else if (length_mod == LENGTH_H) {
     c1e:	2902      	cmp	r1, #2
     c20:	d1e5      	bne.n	bee <CONFIG_ISR_STACK_SIZE+0x3ee>
				value->sint = (short)value->sint;
     c22:	b21a      	sxth	r2, r3
     c24:	f343 33c0 	sbfx	r3, r3, #15, #1
     c28:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
     c2c:	e7df      	b.n	bee <CONFIG_ISR_STACK_SIZE+0x3ee>
		} else if (specifier_cat == SPECIFIER_UINT) {
     c2e:	2b02      	cmp	r3, #2
     c30:	d124      	bne.n	c7c <CONFIG_ISR_STACK_SIZE+0x47c>
			switch (length_mod) {
     c32:	1ecb      	subs	r3, r1, #3
     c34:	2b04      	cmp	r3, #4
     c36:	d804      	bhi.n	c42 <CONFIG_ISR_STACK_SIZE+0x442>
     c38:	e8df f003 	tbb	[pc, r3]
     c3c:	18101018 	.word	0x18101018
     c40:	18          	.byte	0x18
     c41:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
     c42:	2901      	cmp	r1, #1
     c44:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
     c48:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     c4c:	d014      	beq.n	c78 <CONFIG_ISR_STACK_SIZE+0x478>
			} else if (length_mod == LENGTH_H) {
     c4e:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
     c50:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
     c54:	d1cc      	bne.n	bf0 <CONFIG_ISR_STACK_SIZE+0x3f0>
				value->uint = (unsigned short)value->uint;
     c56:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
     c58:	930e      	str	r3, [sp, #56]	; 0x38
     c5a:	e7c9      	b.n	bf0 <CONFIG_ISR_STACK_SIZE+0x3f0>
					(uint_value_type)va_arg(ap,
     c5c:	3407      	adds	r4, #7
     c5e:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
     c62:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     c66:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
     c6a:	e7c1      	b.n	bf0 <CONFIG_ISR_STACK_SIZE+0x3f0>
					(uint_value_type)va_arg(ap, size_t);
     c6c:	f854 3b04 	ldr.w	r3, [r4], #4
     c70:	930e      	str	r3, [sp, #56]	; 0x38
     c72:	2300      	movs	r3, #0
     c74:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
     c76:	e7bb      	b.n	bf0 <CONFIG_ISR_STACK_SIZE+0x3f0>
				value->uint = (unsigned char)value->uint;
     c78:	b2db      	uxtb	r3, r3
     c7a:	e7cd      	b.n	c18 <CONFIG_ISR_STACK_SIZE+0x418>
		} else if (specifier_cat == SPECIFIER_FP) {
     c7c:	2b04      	cmp	r3, #4
     c7e:	d108      	bne.n	c92 <CONFIG_ISR_STACK_SIZE+0x492>
					(sint_value_type)va_arg(ap, long long);
     c80:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
     c82:	f024 0407 	bic.w	r4, r4, #7
     c86:	e9d4 2300 	ldrd	r2, r3, [r4]
     c8a:	3408      	adds	r4, #8
     c8c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
     c90:	e7ae      	b.n	bf0 <CONFIG_ISR_STACK_SIZE+0x3f0>
		} else if (specifier_cat == SPECIFIER_PTR) {
     c92:	2b03      	cmp	r3, #3
     c94:	d1ac      	bne.n	bf0 <CONFIG_ISR_STACK_SIZE+0x3f0>
			value->ptr = va_arg(ap, void *);
     c96:	f854 3b04 	ldr.w	r3, [r4], #4
     c9a:	e7dd      	b.n	c58 <CONFIG_ISR_STACK_SIZE+0x458>
		switch (conv->specifier) {
     c9c:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
     ca0:	2878      	cmp	r0, #120	; 0x78
     ca2:	d8b4      	bhi.n	c0e <CONFIG_ISR_STACK_SIZE+0x40e>
     ca4:	2862      	cmp	r0, #98	; 0x62
     ca6:	d81c      	bhi.n	ce2 <CONFIG_ISR_STACK_SIZE+0x4e2>
     ca8:	2825      	cmp	r0, #37	; 0x25
     caa:	f43f adad 	beq.w	808 <CONFIG_ISR_STACK_SIZE+0x8>
     cae:	2858      	cmp	r0, #88	; 0x58
     cb0:	d1ad      	bne.n	c0e <CONFIG_ISR_STACK_SIZE+0x40e>
			bps = encode_uint(value->uint, conv, buf, bpe);
     cb2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
     cb6:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     cba:	9300      	str	r3, [sp, #0]
     cbc:	aa10      	add	r2, sp, #64	; 0x40
     cbe:	ab08      	add	r3, sp, #32
     cc0:	f003 fcf3 	bl	46aa <encode_uint>
			if (precision >= 0) {
     cc4:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
     cc8:	4607      	mov	r7, r0
			if (precision >= 0) {
     cca:	f280 8099 	bge.w	e00 <CONFIG_ISR_STACK_SIZE+0x600>
		if (bps == NULL) {
     cce:	2f00      	cmp	r7, #0
     cd0:	d09d      	beq.n	c0e <CONFIG_ISR_STACK_SIZE+0x40e>
		size_t nj_len = (bpe - bps);
     cd2:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     cd6:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
     cd8:	2e00      	cmp	r6, #0
     cda:	f000 80c0 	beq.w	e5e <CONFIG_ISR_STACK_SIZE+0x65e>
			nj_len += 1U;
     cde:	3001      	adds	r0, #1
     ce0:	e0bd      	b.n	e5e <CONFIG_ISR_STACK_SIZE+0x65e>
		switch (conv->specifier) {
     ce2:	3863      	subs	r0, #99	; 0x63
     ce4:	2815      	cmp	r0, #21
     ce6:	d892      	bhi.n	c0e <CONFIG_ISR_STACK_SIZE+0x40e>
     ce8:	a201      	add	r2, pc, #4	; (adr r2, cf0 <CONFIG_ISR_STACK_SIZE+0x4f0>)
     cea:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
     cee:	bf00      	nop
     cf0:	00000dc5 	.word	0x00000dc5
     cf4:	00000dd7 	.word	0x00000dd7
     cf8:	00000c0f 	.word	0x00000c0f
     cfc:	00000c0f 	.word	0x00000c0f
     d00:	00000c0f 	.word	0x00000c0f
     d04:	00000c0f 	.word	0x00000c0f
     d08:	00000dd7 	.word	0x00000dd7
     d0c:	00000c0f 	.word	0x00000c0f
     d10:	00000c0f 	.word	0x00000c0f
     d14:	00000c0f 	.word	0x00000c0f
     d18:	00000c0f 	.word	0x00000c0f
     d1c:	00000e63 	.word	0x00000e63
     d20:	00000dfb 	.word	0x00000dfb
     d24:	00000e21 	.word	0x00000e21
     d28:	00000c0f 	.word	0x00000c0f
     d2c:	00000c0f 	.word	0x00000c0f
     d30:	00000d49 	.word	0x00000d49
     d34:	00000c0f 	.word	0x00000c0f
     d38:	00000dfb 	.word	0x00000dfb
     d3c:	00000c0f 	.word	0x00000c0f
     d40:	00000c0f 	.word	0x00000c0f
     d44:	00000dfb 	.word	0x00000dfb
			if (precision >= 0) {
     d48:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
     d4c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
     d4e:	db35      	blt.n	dbc <CONFIG_ISR_STACK_SIZE+0x5bc>
				len = strnlen(bps, precision);
     d50:	4651      	mov	r1, sl
     d52:	4638      	mov	r0, r7
     d54:	f003 fd5d 	bl	4812 <strnlen>
			bpe = bps + len;
     d58:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
     d5c:	2f00      	cmp	r7, #0
     d5e:	f43f af56 	beq.w	c0e <CONFIG_ISR_STACK_SIZE+0x40e>
		char sign = 0;
     d62:	2600      	movs	r6, #0
		if (conv->altform_0c) {
     d64:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     d68:	f013 0210 	ands.w	r2, r3, #16
     d6c:	9205      	str	r2, [sp, #20]
     d6e:	f000 8092 	beq.w	e96 <CONFIG_ISR_STACK_SIZE+0x696>
			nj_len += 2U;
     d72:	3002      	adds	r0, #2
		if (conv->pad_fp) {
     d74:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
     d76:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
     d78:	bf48      	it	mi
     d7a:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
     d7c:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
     d7e:	bf48      	it	mi
     d80:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
     d82:	f1b8 0f00 	cmp.w	r8, #0
		nj_len += conv->pad0_value;
     d86:	9204      	str	r2, [sp, #16]
		if (width > 0) {
     d88:	f340 809f 	ble.w	eca <CONFIG_ISR_STACK_SIZE+0x6ca>
			if (!conv->flag_dash) {
     d8c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
     d90:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
     d94:	f3c2 0380 	ubfx	r3, r2, #2, #1
     d98:	0750      	lsls	r0, r2, #29
     d9a:	9306      	str	r3, [sp, #24]
     d9c:	f100 8095 	bmi.w	eca <CONFIG_ISR_STACK_SIZE+0x6ca>
				if (conv->flag_zero) {
     da0:	0651      	lsls	r1, r2, #25
     da2:	f140 8088 	bpl.w	eb6 <CONFIG_ISR_STACK_SIZE+0x6b6>
					if (sign != 0) {
     da6:	b13e      	cbz	r6, db8 <CONFIG_ISR_STACK_SIZE+0x5b8>
						OUTC(sign);
     da8:	4659      	mov	r1, fp
     daa:	4630      	mov	r0, r6
     dac:	47c8      	blx	r9
     dae:	2800      	cmp	r0, #0
     db0:	db7e      	blt.n	eb0 <CONFIG_ISR_STACK_SIZE+0x6b0>
     db2:	9b06      	ldr	r3, [sp, #24]
     db4:	3501      	adds	r5, #1
     db6:	461e      	mov	r6, r3
					pad = '0';
     db8:	2230      	movs	r2, #48	; 0x30
     dba:	e07d      	b.n	eb8 <CONFIG_ISR_STACK_SIZE+0x6b8>
				len = strlen(bps);
     dbc:	4638      	mov	r0, r7
     dbe:	f003 fd21 	bl	4804 <strlen>
     dc2:	e7c9      	b.n	d58 <CONFIG_ISR_STACK_SIZE+0x558>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     dc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		char sign = 0;
     dc6:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
     dc8:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     dca:	f88d 3020 	strb.w	r3, [sp, #32]
			bps = buf;
     dce:	af08      	add	r7, sp, #32
			bpe = buf + 1;
     dd0:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
     dd4:	e7c6      	b.n	d64 <CONFIG_ISR_STACK_SIZE+0x564>
			if (conv->flag_plus) {
     dd6:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
     dd8:	bf5a      	itte	pl
     dda:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
     dde:	015e      	lslpl	r6, r3, #5
				sign = '+';
     de0:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
     de2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
			if (sint < 0) {
     de6:	2b00      	cmp	r3, #0
     de8:	f6bf af63 	bge.w	cb2 <CONFIG_ISR_STACK_SIZE+0x4b2>
				value->uint = (uint_value_type)-sint;
     dec:	4252      	negs	r2, r2
     dee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
     df2:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
     df4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
     df8:	e75b      	b.n	cb2 <CONFIG_ISR_STACK_SIZE+0x4b2>
		switch (conv->specifier) {
     dfa:	2600      	movs	r6, #0
     dfc:	e759      	b.n	cb2 <CONFIG_ISR_STACK_SIZE+0x4b2>
		char sign = 0;
     dfe:	2600      	movs	r6, #0
				conv->flag_zero = false;
     e00:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
     e04:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     e08:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
     e0a:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     e0e:	459a      	cmp	sl, r3
				conv->flag_zero = false;
     e10:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
     e14:	f67f af5b 	bls.w	cce <CONFIG_ISR_STACK_SIZE+0x4ce>
					conv->pad0_value = precision - (int)len;
     e18:	ebaa 0303 	sub.w	r3, sl, r3
     e1c:	9311      	str	r3, [sp, #68]	; 0x44
     e1e:	e756      	b.n	cce <CONFIG_ISR_STACK_SIZE+0x4ce>
			if (value->ptr != NULL) {
     e20:	980e      	ldr	r0, [sp, #56]	; 0x38
     e22:	b390      	cbz	r0, e8a <CONFIG_ISR_STACK_SIZE+0x68a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     e24:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     e28:	9300      	str	r3, [sp, #0]
     e2a:	2100      	movs	r1, #0
     e2c:	ab08      	add	r3, sp, #32
     e2e:	aa10      	add	r2, sp, #64	; 0x40
     e30:	f003 fc3b 	bl	46aa <encode_uint>
				conv->altform_0c = true;
     e34:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
     e38:	f1ba 0f00 	cmp.w	sl, #0
				conv->altform_0c = true;
     e3c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     e40:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     e44:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
     e48:	4607      	mov	r7, r0
				conv->altform_0c = true;
     e4a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
     e4e:	dad6      	bge.n	dfe <CONFIG_ISR_STACK_SIZE+0x5fe>
		if (bps == NULL) {
     e50:	2800      	cmp	r0, #0
     e52:	f43f aedc 	beq.w	c0e <CONFIG_ISR_STACK_SIZE+0x40e>
		char sign = 0;
     e56:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
     e58:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     e5c:	1a18      	subs	r0, r3, r0
		if (sign != 0) {
     e5e:	469a      	mov	sl, r3
     e60:	e780      	b.n	d64 <CONFIG_ISR_STACK_SIZE+0x564>
				store_count(conv, value->ptr, count);
     e62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
     e64:	2907      	cmp	r1, #7
     e66:	f63f aed2 	bhi.w	c0e <CONFIG_ISR_STACK_SIZE+0x40e>
     e6a:	e8df f001 	tbb	[pc, r1]
     e6e:	040c      	.short	0x040c
     e70:	08080c06 	.word	0x08080c06
     e74:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
     e76:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
     e78:	e6c9      	b.n	c0e <CONFIG_ISR_STACK_SIZE+0x40e>
		*(short *)dp = (short)count;
     e7a:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
     e7c:	e6c7      	b.n	c0e <CONFIG_ISR_STACK_SIZE+0x40e>
		*(intmax_t *)dp = (intmax_t)count;
     e7e:	17ea      	asrs	r2, r5, #31
     e80:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
     e84:	e6c3      	b.n	c0e <CONFIG_ISR_STACK_SIZE+0x40e>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     e86:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
     e88:	e6c1      	b.n	c0e <CONFIG_ISR_STACK_SIZE+0x40e>
     e8a:	4f2f      	ldr	r7, [pc, #188]	; (f48 <CONFIG_ISR_STACK_SIZE+0x748>)
		char sign = 0;
     e8c:	4606      	mov	r6, r0
			bpe = bps + 5;
     e8e:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
     e92:	2005      	movs	r0, #5
     e94:	e766      	b.n	d64 <CONFIG_ISR_STACK_SIZE+0x564>
		} else if (conv->altform_0) {
     e96:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
     e98:	bf48      	it	mi
     e9a:	3001      	addmi	r0, #1
     e9c:	e76a      	b.n	d74 <CONFIG_ISR_STACK_SIZE+0x574>
					OUTC(pad);
     e9e:	4610      	mov	r0, r2
     ea0:	9307      	str	r3, [sp, #28]
     ea2:	9206      	str	r2, [sp, #24]
     ea4:	4659      	mov	r1, fp
     ea6:	47c8      	blx	r9
     ea8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
     eac:	2800      	cmp	r0, #0
     eae:	da04      	bge.n	eba <CONFIG_ISR_STACK_SIZE+0x6ba>
#undef OUTS
#undef OUTC
}
     eb0:	b015      	add	sp, #84	; 0x54
     eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     eb6:	2220      	movs	r2, #32
					pad = '0';
     eb8:	4643      	mov	r3, r8
				while (width-- > 0) {
     eba:	4619      	mov	r1, r3
     ebc:	2900      	cmp	r1, #0
     ebe:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
     ec2:	dcec      	bgt.n	e9e <CONFIG_ISR_STACK_SIZE+0x69e>
     ec4:	4445      	add	r5, r8
     ec6:	4698      	mov	r8, r3
     ec8:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
     eca:	b12e      	cbz	r6, ed8 <CONFIG_ISR_STACK_SIZE+0x6d8>
			OUTC(sign);
     ecc:	4659      	mov	r1, fp
     ece:	4630      	mov	r0, r6
     ed0:	47c8      	blx	r9
     ed2:	2800      	cmp	r0, #0
     ed4:	dbec      	blt.n	eb0 <CONFIG_ISR_STACK_SIZE+0x6b0>
     ed6:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
     ed8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     edc:	06da      	lsls	r2, r3, #27
     ede:	d401      	bmi.n	ee4 <CONFIG_ISR_STACK_SIZE+0x6e4>
     ee0:	071b      	lsls	r3, r3, #28
     ee2:	d505      	bpl.n	ef0 <CONFIG_ISR_STACK_SIZE+0x6f0>
				OUTC('0');
     ee4:	4659      	mov	r1, fp
     ee6:	2030      	movs	r0, #48	; 0x30
     ee8:	47c8      	blx	r9
     eea:	2800      	cmp	r0, #0
     eec:	dbe0      	blt.n	eb0 <CONFIG_ISR_STACK_SIZE+0x6b0>
     eee:	3501      	adds	r5, #1
			if (conv->altform_0c) {
     ef0:	9b05      	ldr	r3, [sp, #20]
     ef2:	b133      	cbz	r3, f02 <CONFIG_ISR_STACK_SIZE+0x702>
				OUTC(conv->specifier);
     ef4:	4659      	mov	r1, fp
     ef6:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
     efa:	47c8      	blx	r9
     efc:	2800      	cmp	r0, #0
     efe:	dbd7      	blt.n	eb0 <CONFIG_ISR_STACK_SIZE+0x6b0>
     f00:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     f02:	9e04      	ldr	r6, [sp, #16]
     f04:	442e      	add	r6, r5
     f06:	e005      	b.n	f14 <CONFIG_ISR_STACK_SIZE+0x714>
				OUTC('0');
     f08:	4659      	mov	r1, fp
     f0a:	2030      	movs	r0, #48	; 0x30
     f0c:	47c8      	blx	r9
     f0e:	2800      	cmp	r0, #0
     f10:	dbce      	blt.n	eb0 <CONFIG_ISR_STACK_SIZE+0x6b0>
     f12:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     f14:	1b73      	subs	r3, r6, r5
     f16:	2b00      	cmp	r3, #0
     f18:	dcf6      	bgt.n	f08 <CONFIG_ISR_STACK_SIZE+0x708>
			OUTS(bps, bpe);
     f1a:	4653      	mov	r3, sl
     f1c:	463a      	mov	r2, r7
     f1e:	4659      	mov	r1, fp
     f20:	4648      	mov	r0, r9
     f22:	f003 fc08 	bl	4736 <outs>
     f26:	2800      	cmp	r0, #0
     f28:	dbc2      	blt.n	eb0 <CONFIG_ISR_STACK_SIZE+0x6b0>
     f2a:	4405      	add	r5, r0
		while (width > 0) {
     f2c:	44a8      	add	r8, r5
     f2e:	eba8 0305 	sub.w	r3, r8, r5
     f32:	2b00      	cmp	r3, #0
     f34:	f77f ae6b 	ble.w	c0e <CONFIG_ISR_STACK_SIZE+0x40e>
			OUTC(' ');
     f38:	4659      	mov	r1, fp
     f3a:	2020      	movs	r0, #32
     f3c:	47c8      	blx	r9
     f3e:	2800      	cmp	r0, #0
     f40:	dbb6      	blt.n	eb0 <CONFIG_ISR_STACK_SIZE+0x6b0>
     f42:	3501      	adds	r5, #1
			--width;
     f44:	e7f3      	b.n	f2e <CONFIG_ISR_STACK_SIZE+0x72e>
     f46:	bf00      	nop
     f48:	0000572e 	.word	0x0000572e

00000f4c <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
     f4c:	4604      	mov	r4, r0
     f4e:	b508      	push	{r3, lr}
	__asm__ volatile(
     f50:	f04f 0220 	mov.w	r2, #32
     f54:	f3ef 8311 	mrs	r3, BASEPRI
     f58:	f382 8812 	msr	BASEPRI_MAX, r2
     f5c:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
     f60:	f001 fc1e 	bl	27a0 <sys_clock_disable>
	}

	sys_arch_reboot(type);
     f64:	4620      	mov	r0, r4
     f66:	f000 fd3d 	bl	19e4 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
     f6a:	4803      	ldr	r0, [pc, #12]	; (f78 <sys_reboot+0x2c>)
     f6c:	f003 faad 	bl	44ca <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
     f70:	f000 fa86 	bl	1480 <arch_cpu_idle>
     f74:	e7fc      	b.n	f70 <sys_reboot+0x24>
     f76:	bf00      	nop
     f78:	00005734 	.word	0x00005734

00000f7c <nrf_gpio_pin_control_select.constprop.0>:

#if NRF_GPIO_HAS_SEL
NRF_STATIC_INLINE void nrf_gpio_pin_control_select(uint32_t pin_number, nrf_gpio_pin_sel_t ctrl)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
     f7c:	4b05      	ldr	r3, [pc, #20]	; (f94 <nrf_gpio_pin_control_select.constprop.0+0x18>)
     f7e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     f82:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
     f86:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_MCUSEL_Pos);
     f8a:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
     f8e:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
     f92:	4770      	bx	lr
     f94:	50842500 	.word	0x50842500

00000f98 <nordicsemi_nrf53_init>:
	return ok_to_sleep;
}
#endif /* CONFIG_SOC_NRF53_ANOMALY_160_WORKAROUND */

static int nordicsemi_nrf53_init(void)
{
     f98:	b508      	push	{r3, lr}
     f9a:	f04f 0320 	mov.w	r3, #32
     f9e:	f3ef 8111 	mrs	r1, BASEPRI
     fa2:	f383 8812 	msr	BASEPRI_MAX, r3
     fa6:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
     faa:	2201      	movs	r2, #1
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
     fac:	2002      	movs	r0, #2
     fae:	4b09      	ldr	r3, [pc, #36]	; (fd4 <nordicsemi_nrf53_init+0x3c>)
     fb0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
     fb4:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
     fb8:	f8c3 06d0 	str.w	r0, [r3, #1744]	; 0x6d0
#if !defined(CONFIG_BUILD_WITH_TFM)
	/* This can only be done from secure code.
	 * This is handled by the TF-M platform so we skip it when TF-M is
	 * enabled.
	 */
	nrf_gpio_pin_control_select(PIN_XL1, NRF_GPIO_PIN_SEL_PERIPHERAL);
     fbc:	2000      	movs	r0, #0
     fbe:	f7ff ffdd 	bl	f7c <nrf_gpio_pin_control_select.constprop.0>
	nrf_gpio_pin_control_select(PIN_XL2, NRF_GPIO_PIN_SEL_PERIPHERAL);
     fc2:	4610      	mov	r0, r2
     fc4:	f7ff ffda 	bl	f7c <nrf_gpio_pin_control_select.constprop.0>
	__asm__ volatile(
     fc8:	f381 8811 	msr	BASEPRI, r1
     fcc:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     fd0:	2000      	movs	r0, #0
     fd2:	bd08      	pop	{r3, pc}
     fd4:	50001000 	.word	0x50001000

00000fd8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
     fd8:	b148      	cbz	r0, fee <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
     fda:	4b05      	ldr	r3, [pc, #20]	; (ff0 <arch_busy_wait+0x18>)
     fdc:	4a05      	ldr	r2, [pc, #20]	; (ff4 <arch_busy_wait+0x1c>)
     fde:	681b      	ldr	r3, [r3, #0]
     fe0:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
     fe4:	4358      	muls	r0, r3
     fe6:	4b04      	ldr	r3, [pc, #16]	; (ff8 <arch_busy_wait+0x20>)
     fe8:	f043 0301 	orr.w	r3, r3, #1
     fec:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
     fee:	4770      	bx	lr
     ff0:	20000034 	.word	0x20000034
     ff4:	000f4240 	.word	0x000f4240
     ff8:	00005430 	.word	0x00005430

00000ffc <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
     ffc:	2806      	cmp	r0, #6
     ffe:	d107      	bne.n	1010 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x10>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    1000:	2201      	movs	r2, #1
    1002:	4b04      	ldr	r3, [pc, #16]	; (1014 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x14>)
    1004:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1008:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
    100c:	bf20      	wfe
    while (true)
    100e:	e7fd      	b.n	100c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xc>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    1010:	4770      	bx	lr
    1012:	bf00      	nop
    1014:	50004000 	.word	0x50004000

00001018 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    1018:	f001 bbec 	b.w	27f4 <SystemInit>

0000101c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    101c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1020:	4605      	mov	r5, r0
	__asm__ volatile(
    1022:	f04f 0320 	mov.w	r3, #32
    1026:	f3ef 8611 	mrs	r6, BASEPRI
    102a:	f383 8812 	msr	BASEPRI_MAX, r3
    102e:	f3bf 8f6f 	isb	sy
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1032:	f04f 090c 	mov.w	r9, #12
	return list->head;
    1036:	4b0d      	ldr	r3, [pc, #52]	; (106c <pm_state_notify+0x50>)
    1038:	4f0d      	ldr	r7, [pc, #52]	; (1070 <pm_state_notify+0x54>)
    103a:	681c      	ldr	r4, [r3, #0]
    103c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 1074 <pm_state_notify+0x58>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1040:	b92c      	cbnz	r4, 104e <pm_state_notify+0x32>
	__asm__ volatile(
    1042:	f386 8811 	msr	BASEPRI, r6
    1046:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    104a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    104e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    1052:	2d00      	cmp	r5, #0
    1054:	bf18      	it	ne
    1056:	4613      	movne	r3, r2
		if (callback) {
    1058:	b12b      	cbz	r3, 1066 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    105a:	f898 2010 	ldrb.w	r2, [r8, #16]
    105e:	fb09 f202 	mul.w	r2, r9, r2
    1062:	5cb8      	ldrb	r0, [r7, r2]
    1064:	4798      	blx	r3
	return node->next;
    1066:	6824      	ldr	r4, [r4, #0]
    1068:	e7ea      	b.n	1040 <pm_state_notify+0x24>
    106a:	bf00      	nop
    106c:	200002dc 	.word	0x200002dc
    1070:	200002d0 	.word	0x200002d0
    1074:	200009a4 	.word	0x200009a4

00001078 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1078:	2201      	movs	r2, #1

void pm_system_resume(void)
{
    107a:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    107c:	4b16      	ldr	r3, [pc, #88]	; (10d8 <pm_system_resume+0x60>)
    107e:	7c1c      	ldrb	r4, [r3, #16]
    1080:	f004 031f 	and.w	r3, r4, #31
    1084:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1086:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1088:	4b14      	ldr	r3, [pc, #80]	; (10dc <pm_system_resume+0x64>)
    108a:	0961      	lsrs	r1, r4, #5
    108c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1090:	e8d3 1fef 	ldaex	r1, [r3]
    1094:	ea01 0500 	and.w	r5, r1, r0
    1098:	e8c3 5fe6 	stlex	r6, r5, [r3]
    109c:	2e00      	cmp	r6, #0
    109e:	d1f7      	bne.n	1090 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    10a0:	420a      	tst	r2, r1
    10a2:	d013      	beq.n	10cc <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
    10a4:	4b0e      	ldr	r3, [pc, #56]	; (10e0 <pm_system_resume+0x68>)
    10a6:	4d0f      	ldr	r5, [pc, #60]	; (10e4 <pm_system_resume+0x6c>)
    10a8:	b18b      	cbz	r3, 10ce <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
    10aa:	230c      	movs	r3, #12
    10ac:	4363      	muls	r3, r4
    10ae:	18ea      	adds	r2, r5, r3
    10b0:	7851      	ldrb	r1, [r2, #1]
    10b2:	5ce8      	ldrb	r0, [r5, r3]
    10b4:	f003 fb57 	bl	4766 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    10b8:	2000      	movs	r0, #0
    10ba:	f7ff ffaf 	bl	101c <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    10be:	230c      	movs	r3, #12
    10c0:	435c      	muls	r4, r3
    10c2:	2300      	movs	r3, #0
    10c4:	192a      	adds	r2, r5, r4
    10c6:	512b      	str	r3, [r5, r4]
    10c8:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    10cc:	bd70      	pop	{r4, r5, r6, pc}
    10ce:	f383 8811 	msr	BASEPRI, r3
    10d2:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    10d6:	e7ef      	b.n	10b8 <pm_system_resume+0x40>
    10d8:	200009a4 	.word	0x200009a4
    10dc:	200002e4 	.word	0x200002e4
    10e0:	00004767 	.word	0x00004767
    10e4:	200002d0 	.word	0x200002d0

000010e8 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    10e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    10ec:	4b32      	ldr	r3, [pc, #200]	; (11b8 <pm_system_suspend+0xd0>)
{
    10ee:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    10f0:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
    10f2:	f04f 0320 	mov.w	r3, #32
    10f6:	f3ef 8811 	mrs	r8, BASEPRI
    10fa:	f383 8812 	msr	BASEPRI_MAX, r3
    10fe:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    1102:	240c      	movs	r4, #12
    1104:	436c      	muls	r4, r5
    1106:	4b2d      	ldr	r3, [pc, #180]	; (11bc <pm_system_suspend+0xd4>)
    1108:	4e2d      	ldr	r6, [pc, #180]	; (11c0 <pm_system_suspend+0xd8>)
    110a:	5d19      	ldrb	r1, [r3, r4]
    110c:	191a      	adds	r2, r3, r4
    110e:	2900      	cmp	r1, #0
    1110:	d047      	beq.n	11a2 <pm_system_suspend+0xba>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    1112:	ca07      	ldmia	r2, {r0, r1, r2}
    1114:	eb06 0c04 	add.w	ip, r6, r4
    1118:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    111c:	2200      	movs	r2, #0
    111e:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    1120:	f388 8811 	msr	BASEPRI, r8
    1124:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    1128:	230c      	movs	r3, #12
    112a:	436b      	muls	r3, r5
    112c:	5cf0      	ldrb	r0, [r6, r3]
    112e:	18f2      	adds	r2, r6, r3
    1130:	b3a8      	cbz	r0, 119e <pm_system_suspend+0xb6>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    1132:	1c7b      	adds	r3, r7, #1
    1134:	d010      	beq.n	1158 <pm_system_suspend+0x70>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    1136:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    113a:	2100      	movs	r1, #0
    113c:	f8d2 c008 	ldr.w	ip, [r2, #8]
    1140:	4c20      	ldr	r4, [pc, #128]	; (11c4 <pm_system_suspend+0xdc>)
    1142:	2300      	movs	r3, #0
    1144:	fbec 4100 	umlal	r4, r1, ip, r0
    1148:	4a1f      	ldr	r2, [pc, #124]	; (11c8 <pm_system_suspend+0xe0>)
    114a:	4620      	mov	r0, r4
    114c:	f7ff f802 	bl	154 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    1150:	2101      	movs	r1, #1
    1152:	1a38      	subs	r0, r7, r0
    1154:	f001 fae8 	bl	2728 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    1158:	f002 fd74 	bl	3c44 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    115c:	2001      	movs	r0, #1
    115e:	f7ff ff5d 	bl	101c <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1162:	4b1a      	ldr	r3, [pc, #104]	; (11cc <pm_system_suspend+0xe4>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    1164:	096a      	lsrs	r2, r5, #5
    1166:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    116a:	2201      	movs	r2, #1
    116c:	f005 011f 	and.w	r1, r5, #31
    1170:	408a      	lsls	r2, r1
    1172:	e8d3 0fef 	ldaex	r0, [r3]
    1176:	4310      	orrs	r0, r2
    1178:	e8c3 0fe1 	stlex	r1, r0, [r3]
    117c:	2900      	cmp	r1, #0
    117e:	d1f8      	bne.n	1172 <pm_system_suspend+0x8a>
	if (pm_state_set != NULL) {
    1180:	4b13      	ldr	r3, [pc, #76]	; (11d0 <pm_system_suspend+0xe8>)
    1182:	b13b      	cbz	r3, 1194 <pm_system_suspend+0xac>
		pm_state_set(info->state, info->substate_id);
    1184:	230c      	movs	r3, #12
    1186:	fb03 f005 	mul.w	r0, r3, r5
    118a:	1833      	adds	r3, r6, r0
    118c:	7859      	ldrb	r1, [r3, #1]
    118e:	5c30      	ldrb	r0, [r6, r0]
    1190:	f7ff ff34 	bl	ffc <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    1194:	f7ff ff70 	bl	1078 <pm_system_resume>
	k_sched_unlock();
    1198:	f002 fd68 	bl	3c6c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    119c:	2001      	movs	r0, #1
}
    119e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    11a2:	4601      	mov	r1, r0
    11a4:	4628      	mov	r0, r5
    11a6:	f000 f815 	bl	11d4 <pm_policy_next_state>
		if (info != NULL) {
    11aa:	2800      	cmp	r0, #0
    11ac:	d0b8      	beq.n	1120 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    11ae:	c807      	ldmia	r0, {r0, r1, r2}
    11b0:	4434      	add	r4, r6
    11b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    11b6:	e7b3      	b.n	1120 <pm_system_suspend+0x38>
    11b8:	200009a4 	.word	0x200009a4
    11bc:	200002c4 	.word	0x200002c4
    11c0:	200002d0 	.word	0x200002d0
    11c4:	000f423f 	.word	0x000f423f
    11c8:	000f4240 	.word	0x000f4240
    11cc:	200002e4 	.word	0x200002e4
    11d0:	00000ffd 	.word	0x00000ffd

000011d4 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    11d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    11d8:	b085      	sub	sp, #20
    11da:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    11dc:	a903      	add	r1, sp, #12
    11de:	f000 f843 	bl	1268 <pm_state_cpu_get_all>
    11e2:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    11e6:	4604      	mov	r4, r0
    11e8:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    11ec:	4b1b      	ldr	r3, [pc, #108]	; (125c <pm_policy_next_state+0x88>)
    11ee:	9d03      	ldr	r5, [sp, #12]
    11f0:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    11f4:	1e43      	subs	r3, r0, #1
    11f6:	b21b      	sxth	r3, r3
    11f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    11fc:	f8df 8060 	ldr.w	r8, [pc, #96]	; 1260 <pm_policy_next_state+0x8c>
    1200:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    1204:	b924      	cbnz	r4, 1210 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    1206:	46a1      	mov	r9, r4
}
    1208:	4648      	mov	r0, r9
    120a:	b005      	add	sp, #20
    120c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1210:	46c4      	mov	ip, r8
    1212:	4659      	mov	r1, fp
    1214:	6868      	ldr	r0, [r5, #4]
    1216:	2300      	movs	r3, #0
    1218:	fbe0 c107 	umlal	ip, r1, r0, r7
    121c:	4a11      	ldr	r2, [pc, #68]	; (1264 <pm_policy_next_state+0x90>)
    121e:	4660      	mov	r0, ip
    1220:	f7fe ff98 	bl	154 <__aeabi_uldivmod>
    1224:	46c4      	mov	ip, r8
    1226:	4659      	mov	r1, fp
    1228:	9001      	str	r0, [sp, #4]
    122a:	68a8      	ldr	r0, [r5, #8]
    122c:	2300      	movs	r3, #0
    122e:	fbe0 c107 	umlal	ip, r1, r0, r7
    1232:	4a0c      	ldr	r2, [pc, #48]	; (1264 <pm_policy_next_state+0x90>)
    1234:	4660      	mov	r0, ip
    1236:	f7fe ff8d 	bl	154 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    123a:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
		const struct pm_state_info *state = &cpu_states[i];
    123e:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1240:	d001      	beq.n	1246 <pm_policy_next_state+0x72>
    1242:	4582      	cmp	sl, r0
    1244:	d905      	bls.n	1252 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    1246:	1c73      	adds	r3, r6, #1
    1248:	d0de      	beq.n	1208 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    124a:	9b01      	ldr	r3, [sp, #4]
    124c:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    124e:	42b0      	cmp	r0, r6
    1250:	d9da      	bls.n	1208 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1252:	3c01      	subs	r4, #1
    1254:	b2a4      	uxth	r4, r4
    1256:	3d0c      	subs	r5, #12
    1258:	e7d4      	b.n	1204 <pm_policy_next_state+0x30>
    125a:	bf00      	nop
    125c:	2000000c 	.word	0x2000000c
    1260:	000f423f 	.word	0x000f423f
    1264:	000f4240 	.word	0x000f4240

00001268 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    1268:	b908      	cbnz	r0, 126e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    126a:	4b02      	ldr	r3, [pc, #8]	; (1274 <pm_state_cpu_get_all+0xc>)
    126c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    126e:	2000      	movs	r0, #0
    1270:	4770      	bx	lr
    1272:	bf00      	nop
    1274:	00005440 	.word	0x00005440

00001278 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1278:	4801      	ldr	r0, [pc, #4]	; (1280 <nrf_cc3xx_platform_abort_init+0x8>)
    127a:	f002 bfcd 	b.w	4218 <nrf_cc3xx_platform_set_abort>
    127e:	bf00      	nop
    1280:	00005440 	.word	0x00005440

00001284 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1284:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    1286:	4604      	mov	r4, r0
    1288:	b918      	cbnz	r0, 1292 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    128a:	4b0f      	ldr	r3, [pc, #60]	; (12c8 <mutex_free_platform+0x44>)
    128c:	480f      	ldr	r0, [pc, #60]	; (12cc <mutex_free_platform+0x48>)
    128e:	685b      	ldr	r3, [r3, #4]
    1290:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1292:	6861      	ldr	r1, [r4, #4]
    1294:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
    1298:	d00f      	beq.n	12ba <mutex_free_platform+0x36>
    129a:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
    129e:	d00c      	beq.n	12ba <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    12a0:	4d0b      	ldr	r5, [pc, #44]	; (12d0 <mutex_free_platform+0x4c>)
    12a2:	42a9      	cmp	r1, r5
    12a4:	d009      	beq.n	12ba <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    12a6:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
    12aa:	d007      	beq.n	12bc <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    12ac:	4621      	mov	r1, r4
    12ae:	4809      	ldr	r0, [pc, #36]	; (12d4 <mutex_free_platform+0x50>)
    12b0:	f003 fe12 	bl	4ed8 <k_mem_slab_free>
        mutex->mutex = NULL;
    12b4:	2300      	movs	r3, #0
    12b6:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    12b8:	6065      	str	r5, [r4, #4]
}
    12ba:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    12bc:	2214      	movs	r2, #20
    12be:	6820      	ldr	r0, [r4, #0]
    12c0:	f003 fabb 	bl	483a <memset>
    12c4:	e7f8      	b.n	12b8 <mutex_free_platform+0x34>
    12c6:	bf00      	nop
    12c8:	200000bc 	.word	0x200000bc
    12cc:	00005764 	.word	0x00005764
    12d0:	a95c5f2c 	.word	0xa95c5f2c
    12d4:	200007e8 	.word	0x200007e8

000012d8 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    12d8:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    12da:	b360      	cbz	r0, 1336 <mutex_lock_platform+0x5e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    12dc:	6843      	ldr	r3, [r0, #4]
    12de:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    12e2:	d00e      	beq.n	1302 <mutex_lock_platform+0x2a>
    12e4:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    12e8:	d018      	beq.n	131c <mutex_lock_platform+0x44>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    12ea:	4a14      	ldr	r2, [pc, #80]	; (133c <mutex_lock_platform+0x64>)
    12ec:	4293      	cmp	r3, r2
    12ee:	d020      	beq.n	1332 <mutex_lock_platform+0x5a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    12f0:	6800      	ldr	r0, [r0, #0]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    12f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    12f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    12fa:	f002 f99d 	bl	3638 <z_impl_k_mutex_lock>

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
    12fe:	b158      	cbz	r0, 1318 <mutex_lock_platform+0x40>
    1300:	e015      	b.n	132e <mutex_lock_platform+0x56>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    1302:	2201      	movs	r2, #1
    1304:	6803      	ldr	r3, [r0, #0]
    1306:	e8d3 1fef 	ldaex	r1, [r3]
    130a:	2900      	cmp	r1, #0
    130c:	d103      	bne.n	1316 <mutex_lock_platform+0x3e>
    130e:	e8c3 2fe0 	stlex	r0, r2, [r3]
    1312:	2800      	cmp	r0, #0
    1314:	d1f7      	bne.n	1306 <mutex_lock_platform+0x2e>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1316:	d10a      	bne.n	132e <mutex_lock_platform+0x56>
            return NRF_CC3XX_PLATFORM_SUCCESS;
    1318:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    131a:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    131c:	6803      	ldr	r3, [r0, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_mutex_lock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    131e:	4a08      	ldr	r2, [pc, #32]	; (1340 <mutex_lock_platform+0x68>)
    1320:	781b      	ldrb	r3, [r3, #0]
    1322:	f503 7380 	add.w	r3, r3, #256	; 0x100
    1326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    132a:	2b00      	cmp	r3, #0
    132c:	d0f4      	beq.n	1318 <mutex_lock_platform+0x40>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    132e:	4805      	ldr	r0, [pc, #20]	; (1344 <mutex_lock_platform+0x6c>)
    1330:	e7f3      	b.n	131a <mutex_lock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1332:	4805      	ldr	r0, [pc, #20]	; (1348 <mutex_lock_platform+0x70>)
    1334:	e7f1      	b.n	131a <mutex_lock_platform+0x42>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1336:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    133a:	e7ee      	b.n	131a <mutex_lock_platform+0x42>
    133c:	a95c5f2c 	.word	0xa95c5f2c
    1340:	50030000 	.word	0x50030000
    1344:	ffff8fe9 	.word	0xffff8fe9
    1348:	ffff8fea 	.word	0xffff8fea

0000134c <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    134c:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    134e:	b320      	cbz	r0, 139a <mutex_unlock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1350:	6843      	ldr	r3, [r0, #4]
    1352:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    1356:	d009      	beq.n	136c <mutex_unlock_platform+0x20>
    1358:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    135c:	d013      	beq.n	1386 <mutex_unlock_platform+0x3a>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    135e:	4a11      	ldr	r2, [pc, #68]	; (13a4 <mutex_unlock_platform+0x58>)
    1360:	4293      	cmp	r3, r2
    1362:	d01d      	beq.n	13a0 <mutex_unlock_platform+0x54>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    1364:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    1366:	f002 f9e1 	bl	372c <z_impl_k_mutex_unlock>
    136a:	e014      	b.n	1396 <mutex_unlock_platform+0x4a>
    136c:	2200      	movs	r2, #0
    136e:	6803      	ldr	r3, [r0, #0]
    1370:	e8d3 1fef 	ldaex	r1, [r3]
    1374:	2901      	cmp	r1, #1
    1376:	d103      	bne.n	1380 <mutex_unlock_platform+0x34>
    1378:	e8c3 2fe0 	stlex	r0, r2, [r3]
    137c:	2800      	cmp	r0, #0
    137e:	d1f7      	bne.n	1370 <mutex_unlock_platform+0x24>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1380:	d009      	beq.n	1396 <mutex_unlock_platform+0x4a>
    1382:	4809      	ldr	r0, [pc, #36]	; (13a8 <mutex_unlock_platform+0x5c>)

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    1384:	bd08      	pop	{r3, pc}
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    1386:	2100      	movs	r1, #0
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    1388:	6803      	ldr	r3, [r0, #0]
    138a:	4a08      	ldr	r2, [pc, #32]	; (13ac <mutex_unlock_platform+0x60>)
    138c:	781b      	ldrb	r3, [r3, #0]
    138e:	f503 7380 	add.w	r3, r3, #256	; 0x100
    1392:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return NRF_CC3XX_PLATFORM_SUCCESS;
    1396:	2000      	movs	r0, #0
    1398:	e7f4      	b.n	1384 <mutex_unlock_platform+0x38>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    139a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    139e:	e7f1      	b.n	1384 <mutex_unlock_platform+0x38>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    13a0:	4803      	ldr	r0, [pc, #12]	; (13b0 <mutex_unlock_platform+0x64>)
    13a2:	e7ef      	b.n	1384 <mutex_unlock_platform+0x38>
    13a4:	a95c5f2c 	.word	0xa95c5f2c
    13a8:	ffff8fe9 	.word	0xffff8fe9
    13ac:	50030000 	.word	0x50030000
    13b0:	ffff8fea 	.word	0xffff8fea

000013b4 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    13b4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    13b6:	4604      	mov	r4, r0
    13b8:	b918      	cbnz	r0, 13c2 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    13ba:	4b1d      	ldr	r3, [pc, #116]	; (1430 <mutex_init_platform+0x7c>)
    13bc:	481d      	ldr	r0, [pc, #116]	; (1434 <mutex_init_platform+0x80>)
    13be:	685b      	ldr	r3, [r3, #4]
    13c0:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    13c2:	6863      	ldr	r3, [r4, #4]
    13c4:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    13c8:	d02f      	beq.n	142a <mutex_init_platform+0x76>
    13ca:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    13ce:	d02c      	beq.n	142a <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    13d0:	4a19      	ldr	r2, [pc, #100]	; (1438 <mutex_init_platform+0x84>)
    13d2:	4293      	cmp	r3, r2
    13d4:	d119      	bne.n	140a <mutex_init_platform+0x56>
    13d6:	6823      	ldr	r3, [r4, #0]
    13d8:	bb03      	cbnz	r3, 141c <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    13da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    13de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    13e2:	4621      	mov	r1, r4
    13e4:	4815      	ldr	r0, [pc, #84]	; (143c <mutex_init_platform+0x88>)
    13e6:	f002 f851 	bl	348c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    13ea:	b908      	cbnz	r0, 13f0 <mutex_init_platform+0x3c>
    13ec:	6823      	ldr	r3, [r4, #0]
    13ee:	b91b      	cbnz	r3, 13f8 <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
    13f0:	4b0f      	ldr	r3, [pc, #60]	; (1430 <mutex_init_platform+0x7c>)
    13f2:	4813      	ldr	r0, [pc, #76]	; (1440 <mutex_init_platform+0x8c>)
    13f4:	685b      	ldr	r3, [r3, #4]
    13f6:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    13f8:	2214      	movs	r2, #20
    13fa:	2100      	movs	r1, #0
    13fc:	6820      	ldr	r0, [r4, #0]
    13fe:	f003 fa1c 	bl	483a <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    1402:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    1406:	6063      	str	r3, [r4, #4]
    1408:	e008      	b.n	141c <mutex_init_platform+0x68>
    switch(flags){
    140a:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    140e:	d80d      	bhi.n	142c <mutex_init_platform+0x78>
    1410:	2b3a      	cmp	r3, #58	; 0x3a
    1412:	d003      	beq.n	141c <mutex_init_platform+0x68>
    1414:	f640 62ba 	movw	r2, #3770	; 0xeba
    1418:	4293      	cmp	r3, r2
    141a:	d1de      	bne.n	13da <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    141c:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    141e:	f003 fd99 	bl	4f54 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    1422:	6863      	ldr	r3, [r4, #4]
    1424:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    1428:	6063      	str	r3, [r4, #4]
}
    142a:	bd10      	pop	{r4, pc}
    switch(flags){
    142c:	4a05      	ldr	r2, [pc, #20]	; (1444 <mutex_init_platform+0x90>)
    142e:	e7f3      	b.n	1418 <mutex_init_platform+0x64>
    1430:	200000bc 	.word	0x200000bc
    1434:	00005764 	.word	0x00005764
    1438:	a95c5f2c 	.word	0xa95c5f2c
    143c:	200007e8 	.word	0x200007e8
    1440:	0000578a 	.word	0x0000578a
    1444:	3a00003a 	.word	0x3a00003a

00001448 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    1448:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    144a:	4906      	ldr	r1, [pc, #24]	; (1464 <nrf_cc3xx_platform_mutex_init+0x1c>)
    144c:	2340      	movs	r3, #64	; 0x40
    144e:	2214      	movs	r2, #20
    1450:	4805      	ldr	r0, [pc, #20]	; (1468 <nrf_cc3xx_platform_mutex_init+0x20>)
    1452:	f003 fd33 	bl	4ebc <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    1456:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    145a:	4904      	ldr	r1, [pc, #16]	; (146c <nrf_cc3xx_platform_mutex_init+0x24>)
    145c:	4804      	ldr	r0, [pc, #16]	; (1470 <nrf_cc3xx_platform_mutex_init+0x28>)
    145e:	f002 bf4d 	b.w	42fc <nrf_cc3xx_platform_set_mutexes>
    1462:	bf00      	nop
    1464:	200002e8 	.word	0x200002e8
    1468:	200007e8 	.word	0x200007e8
    146c:	00005448 	.word	0x00005448
    1470:	0000545c 	.word	0x0000545c

00001474 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1474:	4901      	ldr	r1, [pc, #4]	; (147c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1476:	2210      	movs	r2, #16
	str	r2, [r1]
    1478:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    147a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    147c:	e000ed10 	.word	0xe000ed10

00001480 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1480:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1482:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1484:	f380 8811 	msr	BASEPRI, r0
	isb
    1488:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    148c:	f3bf 8f4f 	dsb	sy
    1490:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1492:	b662      	cpsie	i
	isb
    1494:	f3bf 8f6f 	isb	sy

	bx	lr
    1498:	4770      	bx	lr
    149a:	bf00      	nop

0000149c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    149c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    149e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    14a0:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    14a4:	f3bf 8f4f 	dsb	sy
    14a8:	bf20      	wfe

	msr	BASEPRI, r0
    14aa:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    14ae:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    14b0:	4770      	bx	lr
    14b2:	bf00      	nop

000014b4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    14b4:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    14b6:	2800      	cmp	r0, #0
    14b8:	db07      	blt.n	14ca <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    14ba:	2301      	movs	r3, #1
    14bc:	0941      	lsrs	r1, r0, #5
    14be:	4a03      	ldr	r2, [pc, #12]	; (14cc <arch_irq_enable+0x18>)
    14c0:	f000 001f 	and.w	r0, r0, #31
    14c4:	4083      	lsls	r3, r0
    14c6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    14ca:	4770      	bx	lr
    14cc:	e000e100 	.word	0xe000e100

000014d0 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    14d0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    14d2:	2800      	cmp	r0, #0
    14d4:	db0c      	blt.n	14f0 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    14d6:	2201      	movs	r2, #1
    14d8:	4906      	ldr	r1, [pc, #24]	; (14f4 <arch_irq_disable+0x24>)
    14da:	0943      	lsrs	r3, r0, #5
    14dc:	f000 001f 	and.w	r0, r0, #31
    14e0:	4082      	lsls	r2, r0
    14e2:	3320      	adds	r3, #32
    14e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    14e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    14ec:	f3bf 8f6f 	isb	sy
}
    14f0:	4770      	bx	lr
    14f2:	bf00      	nop
    14f4:	e000e100 	.word	0xe000e100

000014f8 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    14f8:	4b05      	ldr	r3, [pc, #20]	; (1510 <arch_irq_is_enabled+0x18>)
    14fa:	0942      	lsrs	r2, r0, #5
    14fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1500:	2301      	movs	r3, #1
    1502:	f000 001f 	and.w	r0, r0, #31
    1506:	fa03 f000 	lsl.w	r0, r3, r0
}
    150a:	4010      	ands	r0, r2
    150c:	4770      	bx	lr
    150e:	bf00      	nop
    1510:	e000e100 	.word	0xe000e100

00001514 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1514:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1516:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
    1518:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    151c:	bfac      	ite	ge
    151e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1522:	4b06      	ldrlt	r3, [pc, #24]	; (153c <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1524:	ea4f 1141 	mov.w	r1, r1, lsl #5
    1528:	b2c9      	uxtb	r1, r1
    152a:	bfab      	itete	ge
    152c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1530:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1534:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1538:	5419      	strblt	r1, [r3, r0]
}
    153a:	4770      	bx	lr
    153c:	e000ed14 	.word	0xe000ed14

00001540 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1540:	bf30      	wfi
    b z_SysNmiOnReset
    1542:	f7ff bffd 	b.w	1540 <z_SysNmiOnReset>
    1546:	bf00      	nop

00001548 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1548:	4a0b      	ldr	r2, [pc, #44]	; (1578 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    154a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    154c:	4b0b      	ldr	r3, [pc, #44]	; (157c <z_arm_prep_c+0x34>)
    154e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1552:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1554:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1558:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    155c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1560:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1564:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1568:	f001 fed0 	bl	330c <z_bss_zero>
	z_data_copy();
    156c:	f002 fca4 	bl	3eb8 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1570:	f000 f9fc 	bl	196c <z_arm_interrupt_init>
	z_cstart();
    1574:	f001 ff0a 	bl	338c <z_cstart>
    1578:	00000000 	.word	0x00000000
    157c:	e000ed00 	.word	0xe000ed00

00001580 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1580:	4a09      	ldr	r2, [pc, #36]	; (15a8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1582:	490a      	ldr	r1, [pc, #40]	; (15ac <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1584:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1586:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    1588:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
    158a:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    158c:	4908      	ldr	r1, [pc, #32]	; (15b0 <arch_swap+0x30>)
    158e:	684b      	ldr	r3, [r1, #4]
    1590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1594:	604b      	str	r3, [r1, #4]
    1596:	2300      	movs	r3, #0
    1598:	f383 8811 	msr	BASEPRI, r3
    159c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    15a0:	6893      	ldr	r3, [r2, #8]
}
    15a2:	6f98      	ldr	r0, [r3, #120]	; 0x78
    15a4:	4770      	bx	lr
    15a6:	bf00      	nop
    15a8:	200009a4 	.word	0x200009a4
    15ac:	0000552c 	.word	0x0000552c
    15b0:	e000ed00 	.word	0xe000ed00

000015b4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    15b4:	4913      	ldr	r1, [pc, #76]	; (1604 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    15b6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    15b8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    15bc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    15be:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    15c2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    15c6:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    15c8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    15cc:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    15d0:	4f0d      	ldr	r7, [pc, #52]	; (1608 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    15d2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    15d6:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    15d8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    15da:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    15dc:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    15de:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    15e0:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    15e2:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    15e6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    15ea:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    15ee:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    15f2:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    15f6:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    15f8:	f003 f8d0 	bl	479c <configure_builtin_stack_guard>
    pop {r2, lr}
    15fc:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1600:	4770      	bx	lr
    1602:	0000      	.short	0x0000
    ldr r1, =_kernel
    1604:	200009a4 	.word	0x200009a4
    ldr v4, =_SCS_ICSR
    1608:	e000ed04 	.word	0xe000ed04

0000160c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    160c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1610:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1612:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1616:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    161a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    161c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1620:	2902      	cmp	r1, #2
    beq _oops
    1622:	d0ff      	beq.n	1624 <_oops>

00001624 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1624:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    1626:	f003 f8aa 	bl	477e <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    162a:	bd01      	pop	{r0, pc}

0000162c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    162c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1630:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    1632:	490b      	ldr	r1, [pc, #44]	; (1660 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    1634:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    1638:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    163a:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    163e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1642:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    1644:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    1648:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    164c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1650:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1654:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1656:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1658:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    165a:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    165c:	4770      	bx	lr
    165e:	bf00      	nop
    1660:	000044e5 	.word	0x000044e5

00001664 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1664:	4b08      	ldr	r3, [pc, #32]	; (1688 <arch_switch_to_main_thread+0x24>)
    1666:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    1668:	6e43      	ldr	r3, [r0, #100]	; 0x64
    166a:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    166e:	4610      	mov	r0, r2
    1670:	f381 8809 	msr	PSP, r1
    1674:	2100      	movs	r1, #0
    1676:	b663      	cpsie	if
    1678:	f381 8811 	msr	BASEPRI, r1
    167c:	f3bf 8f6f 	isb	sy
    1680:	2200      	movs	r2, #0
    1682:	2300      	movs	r3, #0
    1684:	f002 ff2e 	bl	44e4 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1688:	200009a4 	.word	0x200009a4

0000168c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    168c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    168e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1690:	4a0b      	ldr	r2, [pc, #44]	; (16c0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1692:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    1694:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1696:	bf1e      	ittt	ne
	movne	r1, #0
    1698:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    169a:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    169c:	f003 fc4b 	blne	4f36 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    16a0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    16a2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    16a6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    16aa:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    16ae:	4905      	ldr	r1, [pc, #20]	; (16c4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    16b0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    16b2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    16b4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    16b6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    16ba:	4903      	ldr	r1, [pc, #12]	; (16c8 <_isr_wrapper+0x3c>)
	bx r1
    16bc:	4708      	bx	r1
    16be:	0000      	.short	0x0000
	ldr r2, =_kernel
    16c0:	200009a4 	.word	0x200009a4
	ldr r1, =_sw_isr_table
    16c4:	000051a4 	.word	0x000051a4
	ldr r1, =z_arm_int_exit
    16c8:	000016cd 	.word	0x000016cd

000016cc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    16cc:	4b04      	ldr	r3, [pc, #16]	; (16e0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    16ce:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    16d0:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    16d2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    16d4:	d003      	beq.n	16de <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    16d6:	4903      	ldr	r1, [pc, #12]	; (16e4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    16d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    16dc:	600a      	str	r2, [r1, #0]

000016de <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    16de:	4770      	bx	lr
	ldr r3, =_kernel
    16e0:	200009a4 	.word	0x200009a4
	ldr r1, =_SCS_ICSR
    16e4:	e000ed04 	.word	0xe000ed04

000016e8 <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    16e8:	4b15      	ldr	r3, [pc, #84]	; (1740 <usage_fault.constprop.0+0x58>)
    16ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    16ec:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    16f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    16f2:	bf14      	ite	ne
    16f4:	201e      	movne	r0, #30
    16f6:	201d      	moveq	r0, #29
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    16f8:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    16fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    16fe:	bf18      	it	ne
    1700:	201f      	movne	r0, #31
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    1702:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1706:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_STACK_CHK_FAIL;
    1708:	bf18      	it	ne
    170a:	2002      	movne	r0, #2
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    170c:	f412 2f00 	tst.w	r2, #524288	; 0x80000
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1710:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    1712:	bf18      	it	ne
    1714:	2021      	movne	r0, #33	; 0x21
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    1716:	f412 2f80 	tst.w	r2, #262144	; 0x40000
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    171a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    171c:	bf18      	it	ne
    171e:	2022      	movne	r0, #34	; 0x22
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    1720:	f412 3f00 	tst.w	r2, #131072	; 0x20000
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1724:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    1726:	bf18      	it	ne
    1728:	2023      	movne	r0, #35	; 0x23
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    172a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    172e:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	return reason;
}
    1730:	bf18      	it	ne
    1732:	2024      	movne	r0, #36	; 0x24
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1734:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1738:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    173c:	629a      	str	r2, [r3, #40]	; 0x28
}
    173e:	4770      	bx	lr
    1740:	e000ed00 	.word	0xe000ed00

00001744 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1744:	b510      	push	{r4, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1746:	4b19      	ldr	r3, [pc, #100]	; (17ac <bus_fault.constprop.0+0x68>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1748:	4602      	mov	r2, r0
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    174a:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    174c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    174e:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    1752:	bf14      	ite	ne
    1754:	2017      	movne	r0, #23
    1756:	2016      	moveq	r0, #22
		reason = K_ERR_ARM_BUS_UNSTACKING;
    1758:	f414 6f00 	tst.w	r4, #2048	; 0x800
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    175c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_UNSTACKING;
    175e:	bf18      	it	ne
    1760:	2018      	movne	r0, #24
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1762:	05a4      	lsls	r4, r4, #22
    1764:	d509      	bpl.n	177a <bus_fault.constprop.0+0x36>
		STORE_xFAR(bfar, SCB->BFAR);
    1766:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1768:	6a98      	ldr	r0, [r3, #40]	; 0x28
    176a:	0400      	lsls	r0, r0, #16
    176c:	d504      	bpl.n	1778 <bus_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
    176e:	b11a      	cbz	r2, 1778 <bus_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1770:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1772:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1776:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    1778:	2019      	movs	r0, #25
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    177a:	4b0c      	ldr	r3, [pc, #48]	; (17ac <bus_fault.constprop.0+0x68>)
    177c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    177e:	f412 6f80 	tst.w	r2, #1024	; 0x400
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1782:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    1784:	bf18      	it	ne
    1786:	201a      	movne	r0, #26
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1788:	05d2      	lsls	r2, r2, #23
    178a:	d40c      	bmi.n	17a6 <bus_fault.constprop.0+0x62>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    178c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
    178e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    1792:	bf18      	it	ne
    1794:	201c      	movne	r0, #28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1796:	4a05      	ldr	r2, [pc, #20]	; (17ac <bus_fault.constprop.0+0x68>)
    1798:	6a93      	ldr	r3, [r2, #40]	; 0x28
    179a:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    179e:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    17a0:	2300      	movs	r3, #0
    17a2:	700b      	strb	r3, [r1, #0]
}
    17a4:	bd10      	pop	{r4, pc}
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    17a6:	201b      	movs	r0, #27
    17a8:	e7f5      	b.n	1796 <bus_fault.constprop.0+0x52>
    17aa:	bf00      	nop
    17ac:	e000ed00 	.word	0xe000ed00

000017b0 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    17b0:	b510      	push	{r4, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    17b2:	4b1c      	ldr	r3, [pc, #112]	; (1824 <mem_manage_fault.constprop.0+0x74>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    17b4:	4602      	mov	r2, r0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    17b6:	6a98      	ldr	r0, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    17b8:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    17ba:	f010 0f10 	tst.w	r0, #16
    17be:	bf14      	ite	ne
    17c0:	2011      	movne	r0, #17
    17c2:	2010      	moveq	r0, #16
		reason = K_ERR_ARM_MEM_UNSTACKING;
    17c4:	f014 0f08 	tst.w	r4, #8
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    17c8:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_UNSTACKING;
    17ca:	bf18      	it	ne
    17cc:	2012      	movne	r0, #18
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    17ce:	07a4      	lsls	r4, r4, #30
    17d0:	d509      	bpl.n	17e6 <mem_manage_fault.constprop.0+0x36>
		uint32_t temp = SCB->MMFAR;
    17d2:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    17d4:	6a98      	ldr	r0, [r3, #40]	; 0x28
    17d6:	0600      	lsls	r0, r0, #24
    17d8:	d504      	bpl.n	17e4 <mem_manage_fault.constprop.0+0x34>
			if (from_hard_fault != 0) {
    17da:	b11a      	cbz	r2, 17e4 <mem_manage_fault.constprop.0+0x34>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    17dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    17de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    17e2:	629a      	str	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    17e4:	2013      	movs	r0, #19
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    17e6:	4b0f      	ldr	r3, [pc, #60]	; (1824 <mem_manage_fault.constprop.0+0x74>)
    17e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    17ea:	f012 0f01 	tst.w	r2, #1
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    17ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    17f0:	bf18      	it	ne
    17f2:	2014      	movne	r0, #20
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    17f4:	f012 0f20 	tst.w	r2, #32
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    17f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
    17fa:	bf18      	it	ne
    17fc:	2015      	movne	r0, #21
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    17fe:	06d4      	lsls	r4, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1800:	bf58      	it	pl
    1802:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1804:	4b07      	ldr	r3, [pc, #28]	; (1824 <mem_manage_fault.constprop.0+0x74>)
    1806:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1808:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    180a:	bf42      	ittt	mi
    180c:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    180e:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    1812:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1814:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1816:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    181a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    181c:	2300      	movs	r3, #0
    181e:	700b      	strb	r3, [r1, #0]
}
    1820:	bd10      	pop	{r4, pc}
    1822:	bf00      	nop
    1824:	e000ed00 	.word	0xe000ed00

00001828 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1828:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    182a:	4b44      	ldr	r3, [pc, #272]	; (193c <z_arm_fault+0x114>)
{
    182c:	4606      	mov	r6, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    182e:	685b      	ldr	r3, [r3, #4]
    1830:	2500      	movs	r5, #0
{
    1832:	b08a      	sub	sp, #40	; 0x28
    1834:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1838:	f385 8811 	msr	BASEPRI, r5
    183c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1840:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    1844:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    1848:	d111      	bne.n	186e <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    184a:	f002 000c 	and.w	r0, r2, #12
    184e:	2808      	cmp	r0, #8
    1850:	d00d      	beq.n	186e <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1852:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    1854:	bf4c      	ite	mi
    1856:	460e      	movmi	r6, r1
			*nested_exc = true;
    1858:	2501      	movpl	r5, #1
	*recoverable = false;
    185a:	2200      	movs	r2, #0
	switch (fault) {
    185c:	3b03      	subs	r3, #3
	*recoverable = false;
    185e:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    1862:	2b03      	cmp	r3, #3
    1864:	d805      	bhi.n	1872 <z_arm_fault+0x4a>
    1866:	e8df f003 	tbb	[pc, r3]
    186a:	5c1e      	.short	0x5c1e
    186c:	5960      	.short	0x5960
		return NULL;
    186e:	462e      	mov	r6, r5
    1870:	e7f3      	b.n	185a <z_arm_fault+0x32>
    1872:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1874:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1878:	b99b      	cbnz	r3, 18a2 <z_arm_fault+0x7a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    187a:	2220      	movs	r2, #32
    187c:	4631      	mov	r1, r6
    187e:	a802      	add	r0, sp, #8
    1880:	f002 ffd0 	bl	4824 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1884:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1886:	2d00      	cmp	r5, #0
    1888:	d053      	beq.n	1932 <z_arm_fault+0x10a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    188a:	f3c3 0208 	ubfx	r2, r3, #0, #9
    188e:	b922      	cbnz	r2, 189a <z_arm_fault+0x72>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1890:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1894:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1898:	9309      	str	r3, [sp, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    189a:	4620      	mov	r0, r4
    189c:	a902      	add	r1, sp, #8
    189e:	f002 ff6c 	bl	477a <z_arm_fatal_error>
}
    18a2:	b00a      	add	sp, #40	; 0x28
    18a4:	bd70      	pop	{r4, r5, r6, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    18a6:	4b25      	ldr	r3, [pc, #148]	; (193c <z_arm_fault+0x114>)
    18a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    18aa:	0791      	lsls	r1, r2, #30
    18ac:	d4e1      	bmi.n	1872 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    18ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    18b0:	2a00      	cmp	r2, #0
    18b2:	dbde      	blt.n	1872 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    18b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    18b6:	0052      	lsls	r2, r2, #1
    18b8:	d5db      	bpl.n	1872 <z_arm_fault+0x4a>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    18ba:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    18bc:	69b1      	ldr	r1, [r6, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    18be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    18c2:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    18c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    18c8:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    18cc:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    18ce:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    18d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    18d6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    18d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    18dc:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    18e0:	f64d 7202 	movw	r2, #57090	; 0xdf02
    18e4:	4291      	cmp	r1, r2
    18e6:	d009      	beq.n	18fc <z_arm_fault+0xd4>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    18e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    18ea:	b2d2      	uxtb	r2, r2
    18ec:	b142      	cbz	r2, 1900 <z_arm_fault+0xd8>
			reason = mem_manage_fault(esf, 1, recoverable);
    18ee:	2001      	movs	r0, #1
    18f0:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    18f4:	f7ff ff5c 	bl	17b0 <mem_manage_fault.constprop.0>
		reason = usage_fault(esf);
    18f8:	4604      	mov	r4, r0
		break;
    18fa:	e7bb      	b.n	1874 <z_arm_fault+0x4c>
			reason = esf->basic.r0;
    18fc:	6834      	ldr	r4, [r6, #0]
    18fe:	e7b9      	b.n	1874 <z_arm_fault+0x4c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    1900:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1902:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    1906:	d005      	beq.n	1914 <z_arm_fault+0xec>
			reason = bus_fault(esf, 1, recoverable);
    1908:	2001      	movs	r0, #1
    190a:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    190e:	f7ff ff19 	bl	1744 <bus_fault.constprop.0>
    1912:	e7f1      	b.n	18f8 <z_arm_fault+0xd0>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    1914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    191a:	d3aa      	bcc.n	1872 <z_arm_fault+0x4a>
		reason = usage_fault(esf);
    191c:	f7ff fee4 	bl	16e8 <usage_fault.constprop.0>
    1920:	e7ea      	b.n	18f8 <z_arm_fault+0xd0>
		reason = mem_manage_fault(esf, 0, recoverable);
    1922:	2000      	movs	r0, #0
    1924:	f10d 0107 	add.w	r1, sp, #7
    1928:	e7e4      	b.n	18f4 <z_arm_fault+0xcc>
		reason = bus_fault(esf, 0, recoverable);
    192a:	2000      	movs	r0, #0
    192c:	f10d 0107 	add.w	r1, sp, #7
    1930:	e7ed      	b.n	190e <z_arm_fault+0xe6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1932:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1936:	f023 0301 	bic.w	r3, r3, #1
    193a:	e7ad      	b.n	1898 <z_arm_fault+0x70>
    193c:	e000ed00 	.word	0xe000ed00

00001940 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1940:	4b04      	ldr	r3, [pc, #16]	; (1954 <z_arm_fault_init+0x14>)
    1942:	695a      	ldr	r2, [r3, #20]
    1944:	f042 0210 	orr.w	r2, r2, #16
    1948:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    194a:	695a      	ldr	r2, [r3, #20]
    194c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    1950:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    1952:	4770      	bx	lr
    1954:	e000ed00 	.word	0xe000ed00

00001958 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1958:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    195c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1960:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1962:	4672      	mov	r2, lr
	bl z_arm_fault
    1964:	f7ff ff60 	bl	1828 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1968:	bd01      	pop	{r0, pc}
    196a:	bf00      	nop

0000196c <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    196c:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    196e:	2120      	movs	r1, #32
    1970:	4803      	ldr	r0, [pc, #12]	; (1980 <z_arm_interrupt_init+0x14>)
    1972:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1974:	3301      	adds	r3, #1
    1976:	2b45      	cmp	r3, #69	; 0x45
    1978:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    197c:	d1f9      	bne.n	1972 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    197e:	4770      	bx	lr
    1980:	e000e100 	.word	0xe000e100

00001984 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1984:	2000      	movs	r0, #0
    msr CONTROL, r0
    1986:	f380 8814 	msr	CONTROL, r0
    isb
    198a:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    198e:	2000      	movs	r0, #0
    msr MSPLIM, r0
    1990:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    1994:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1998:	f7ff fb3e 	bl	1018 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    199c:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    199e:	490e      	ldr	r1, [pc, #56]	; (19d8 <__start+0x54>)
    str r0, [r1]
    19a0:	6008      	str	r0, [r1, #0]
    dsb
    19a2:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    19a6:	480d      	ldr	r0, [pc, #52]	; (19dc <__start+0x58>)
    msr msp, r0
    19a8:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    19ac:	f000 f83e 	bl	1a2c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    19b0:	2020      	movs	r0, #32
    msr BASEPRI, r0
    19b2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    19b6:	480a      	ldr	r0, [pc, #40]	; (19e0 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    19b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    19bc:	1840      	adds	r0, r0, r1
    msr PSP, r0
    19be:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    19c2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    19c6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    19c8:	4308      	orrs	r0, r1
    msr CONTROL, r0
    19ca:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    19ce:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    19d2:	f7ff fdb9 	bl	1548 <z_arm_prep_c>
    19d6:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    19d8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    19dc:	20001d08 	.word	0x20001d08
    ldr r0, =z_interrupt_stacks
    19e0:	20000fc8 	.word	0x20000fc8

000019e4 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    19e4:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    19e8:	4905      	ldr	r1, [pc, #20]	; (1a00 <sys_arch_reboot+0x1c>)
    19ea:	4b06      	ldr	r3, [pc, #24]	; (1a04 <sys_arch_reboot+0x20>)
    19ec:	68ca      	ldr	r2, [r1, #12]
    19ee:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    19f2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    19f4:	60cb      	str	r3, [r1, #12]
    19f6:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    19fa:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    19fc:	e7fd      	b.n	19fa <sys_arch_reboot+0x16>
    19fe:	bf00      	nop
    1a00:	e000ed00 	.word	0xe000ed00
    1a04:	05fa0004 	.word	0x05fa0004

00001a08 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    1a08:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    1a0a:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1a0c:	4906      	ldr	r1, [pc, #24]	; (1a28 <z_arm_clear_arm_mpu_config+0x20>)
    1a0e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    1a12:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    1a16:	4293      	cmp	r3, r2
    1a18:	db00      	blt.n	1a1c <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    1a1a:	4770      	bx	lr
  mpu->RNR = rnr;
    1a1c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    1a20:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    1a24:	3301      	adds	r3, #1
    1a26:	e7f6      	b.n	1a16 <z_arm_clear_arm_mpu_config+0xe>
    1a28:	e000ed00 	.word	0xe000ed00

00001a2c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1a2c:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1a2e:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1a30:	2400      	movs	r4, #0
    1a32:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    1a36:	f7ff ffe7 	bl	1a08 <z_arm_clear_arm_mpu_config>
    1a3a:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1a3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1a40:	4a0c      	ldr	r2, [pc, #48]	; (1a74 <z_arm_init_arch_hw_at_boot+0x48>)
    1a42:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1a46:	3301      	adds	r3, #1
    1a48:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    1a4a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1a4e:	d1f8      	bne.n	1a42 <z_arm_init_arch_hw_at_boot+0x16>
    1a50:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1a52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1a56:	4a07      	ldr	r2, [pc, #28]	; (1a74 <z_arm_init_arch_hw_at_boot+0x48>)
    1a58:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1a5c:	3301      	adds	r3, #1
    1a5e:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1a60:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1a64:	d1f8      	bne.n	1a58 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    1a66:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    1a68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a6c:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1a70:	bd10      	pop	{r4, pc}
    1a72:	bf00      	nop
    1a74:	e000e100 	.word	0xe000e100

00001a78 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    1a78:	4b08      	ldr	r3, [pc, #32]	; (1a9c <z_impl_k_thread_abort+0x24>)
    1a7a:	689b      	ldr	r3, [r3, #8]
    1a7c:	4283      	cmp	r3, r0
    1a7e:	d10b      	bne.n	1a98 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1a80:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1a84:	b143      	cbz	r3, 1a98 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1a86:	4b06      	ldr	r3, [pc, #24]	; (1aa0 <z_impl_k_thread_abort+0x28>)
    1a88:	685a      	ldr	r2, [r3, #4]
    1a8a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1a8e:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    1a90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1a92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1a96:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    1a98:	f002 b9ae 	b.w	3df8 <z_thread_abort>
    1a9c:	200009a4 	.word	0x200009a4
    1aa0:	e000ed00 	.word	0xe000ed00

00001aa4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    1aa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1aa6:	4c09      	ldr	r4, [pc, #36]	; (1acc <z_arm_configure_static_mpu_regions+0x28>)
    1aa8:	4a09      	ldr	r2, [pc, #36]	; (1ad0 <z_arm_configure_static_mpu_regions+0x2c>)
    1aaa:	4623      	mov	r3, r4
    1aac:	2101      	movs	r1, #1
    1aae:	4809      	ldr	r0, [pc, #36]	; (1ad4 <z_arm_configure_static_mpu_regions+0x30>)
    1ab0:	f000 f8ea 	bl	1c88 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    1ab4:	2300      	movs	r3, #0
    1ab6:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    1ab8:	4b07      	ldr	r3, [pc, #28]	; (1ad8 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1aba:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    1abc:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1abe:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    1ac0:	9301      	str	r3, [sp, #4]
    1ac2:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1ac4:	f000 f8ea 	bl	1c9c <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    1ac8:	b004      	add	sp, #16
    1aca:	bd10      	pop	{r4, pc}
    1acc:	20080000 	.word	0x20080000
    1ad0:	20000000 	.word	0x20000000
    1ad4:	0000546c 	.word	0x0000546c
    1ad8:	20000178 	.word	0x20000178

00001adc <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    1adc:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
    1ade:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    1ae0:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    1ae2:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
    1ae6:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    1aea:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    1aec:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    1aee:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    1af0:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
    1af4:	4905      	ldr	r1, [pc, #20]	; (1b0c <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    1af6:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    1afa:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
    1afe:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
    1b02:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
    1b06:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    1b0a:	bd10      	pop	{r4, pc}
    1b0c:	e000ed00 	.word	0xe000ed00

00001b10 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    1b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b14:	460f      	mov	r7, r1
    1b16:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    1b18:	4606      	mov	r6, r0
    1b1a:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = rnr;
    1b1e:	4d4e      	ldr	r5, [pc, #312]	; (1c58 <mpu_configure_regions_and_partition.constprop.0+0x148>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    1b20:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    1b22:	45b8      	cmp	r8, r7
    1b24:	f280 8094 	bge.w	1c50 <mpu_configure_regions_and_partition.constprop.0+0x140>
		if (regions[i].size == 0U) {
    1b28:	f8d6 9004 	ldr.w	r9, [r6, #4]
    1b2c:	f1b9 0f00 	cmp.w	r9, #0
    1b30:	d036      	beq.n	1ba0 <mpu_configure_regions_and_partition.constprop.0+0x90>
		&&
    1b32:	f1b9 0f1f 	cmp.w	r9, #31
    1b36:	f240 8089 	bls.w	1c4c <mpu_configure_regions_and_partition.constprop.0+0x13c>
		&&
    1b3a:	f019 0f1f 	tst.w	r9, #31
    1b3e:	f040 8085 	bne.w	1c4c <mpu_configure_regions_and_partition.constprop.0+0x13c>
		((part->start &
    1b42:	f8d6 a000 	ldr.w	sl, [r6]
		&&
    1b46:	f01a 0f1f 	tst.w	sl, #31
    1b4a:	d17f      	bne.n	1c4c <mpu_configure_regions_and_partition.constprop.0+0x13c>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1b4c:	4650      	mov	r0, sl
    1b4e:	f002 fe29 	bl	47a4 <arm_cmse_mpu_region_get>
    1b52:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1b54:	eb09 000a 	add.w	r0, r9, sl
    1b58:	3801      	subs	r0, #1
    1b5a:	f002 fe23 	bl	47a4 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    1b5e:	4583      	cmp	fp, r0
    1b60:	d174      	bne.n	1c4c <mpu_configure_regions_and_partition.constprop.0+0x13c>
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
    1b62:	f11b 0f16 	cmn.w	fp, #22
    1b66:	d071      	beq.n	1c4c <mpu_configure_regions_and_partition.constprop.0+0x13c>
    1b68:	455c      	cmp	r4, fp
    1b6a:	dd6f      	ble.n	1c4c <mpu_configure_regions_and_partition.constprop.0+0x13c>
	MPU->RNR = rnr;
    1b6c:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    1b70:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
    1b74:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RLAR;
    1b78:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    1b7c:	f021 011f 	bic.w	r1, r1, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    1b80:	f043 0a1f 	orr.w	sl, r3, #31
		 * The new memory region is to be placed inside the underlying
		 * region, possibly splitting the underlying region into two.
		 */
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
		uint32_t u_reg_last = mpu_region_get_last_addr(u_reg_index);
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    1b84:	e9d6 3200 	ldrd	r3, r2, [r6]
    1b88:	441a      	add	r2, r3

		if ((regions[i].start == u_reg_base) &&
    1b8a:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    1b8c:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
		if ((regions[i].start == u_reg_base) &&
    1b90:	d11e      	bne.n	1bd0 <mpu_configure_regions_and_partition.constprop.0+0xc0>
    1b92:	45ca      	cmp	sl, r9
    1b94:	d108      	bne.n	1ba8 <mpu_configure_regions_and_partition.constprop.0+0x98>
			 * underlying region. In this case we simply
			 * update the partition attributes of the
			 * underlying region with those of the new
			 * region.
			 */
			mpu_configure_region(u_reg_index, &regions[i]);
    1b96:	4631      	mov	r1, r6
    1b98:	fa5f f08b 	uxtb.w	r0, fp
    1b9c:	f002 fe0b 	bl	47b6 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    1ba0:	f108 0801 	add.w	r8, r8, #1
    1ba4:	360c      	adds	r6, #12
    1ba6:	e7bc      	b.n	1b22 <mpu_configure_regions_and_partition.constprop.0+0x12>
			 */
			mpu_region_set_base(u_reg_index,
				regions[i].start + regions[i].size);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    1ba8:	4631      	mov	r1, r6
	MPU->RNR = rnr;
    1baa:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    1bae:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
    1bb2:	f022 021f 	bic.w	r2, r2, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    1bb6:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    1bba:	4313      	orrs	r3, r2
	MPU->RBAR = rbar;
    1bbc:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    1bc0:	b2e0      	uxtb	r0, r4
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    1bc2:	f002 fdf8 	bl	47b6 <mpu_configure_region>

			if (reg_index == -EINVAL) {
    1bc6:	f110 0f16 	cmn.w	r0, #22
    1bca:	d03f      	beq.n	1c4c <mpu_configure_regions_and_partition.constprop.0+0x13c>

			if (reg_index == -EINVAL) {
				return reg_index;
			}

			reg_index++;
    1bcc:	1c44      	adds	r4, r0, #1
    1bce:	e7e7      	b.n	1ba0 <mpu_configure_regions_and_partition.constprop.0+0x90>
	MPU->RNR = rnr;
    1bd0:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RLAR;
    1bd4:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				regions[i].start - 1);
    1bd8:	3b01      	subs	r3, #1
		     | (limit & MPU_RLAR_LIMIT_Msk));
    1bda:	f023 031f 	bic.w	r3, r3, #31
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    1bde:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    1be2:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    1be4:	45ca      	cmp	sl, r9
				mpu_configure_region(reg_index, &regions[i]);
    1be6:	4631      	mov	r1, r6
				mpu_configure_region(reg_index, &regions[i]);
    1be8:	b2e0      	uxtb	r0, r4
	MPU->RLAR = rlar;
    1bea:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		} else if (reg_last == u_reg_last) {
    1bee:	d0e8      	beq.n	1bc2 <mpu_configure_regions_and_partition.constprop.0+0xb2>
				mpu_configure_region(reg_index, &regions[i]);
    1bf0:	f002 fde1 	bl	47b6 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    1bf4:	f110 0f16 	cmn.w	r0, #22
    1bf8:	d028      	beq.n	1c4c <mpu_configure_regions_and_partition.constprop.0+0x13c>
	MPU->RNR = rnr;
    1bfa:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    1bfe:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    1c02:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    1c06:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	attr->rbar = mpu_get_rbar() &
    1c0a:	f362 0304 	bfi	r3, r2, #0, #5
    1c0e:	f88d 3008 	strb.w	r3, [sp, #8]
	return MPU->RLAR;
    1c12:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    1c16:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1c1a:	085b      	lsrs	r3, r3, #1
    1c1c:	f363 1247 	bfi	r2, r3, #5, #3
    1c20:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    1c24:	e9d6 3200 	ldrd	r3, r2, [r6]
    1c28:	4413      	add	r3, r2
    1c2a:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    1c2c:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    1c30:	1c41      	adds	r1, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    1c32:	4453      	add	r3, sl
    1c34:	eba3 0309 	sub.w	r3, r3, r9
    1c38:	b2c8      	uxtb	r0, r1
    1c3a:	f023 031f 	bic.w	r3, r3, #31

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    1c3e:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
    1c40:	9303      	str	r3, [sp, #12]
    1c42:	d803      	bhi.n	1c4c <mpu_configure_regions_and_partition.constprop.0+0x13c>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    1c44:	4669      	mov	r1, sp
    1c46:	f7ff ff49 	bl	1adc <region_init>
    1c4a:	e7bf      	b.n	1bcc <mpu_configure_regions_and_partition.constprop.0+0xbc>
			return -EINVAL;
    1c4c:	f06f 0415 	mvn.w	r4, #21
		}
	}

	return reg_index;
}
    1c50:	4620      	mov	r0, r4
    1c52:	b005      	add	sp, #20
    1c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c58:	e000ed00 	.word	0xe000ed00

00001c5c <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1c5c:	2205      	movs	r2, #5
    1c5e:	4b04      	ldr	r3, [pc, #16]	; (1c70 <arm_core_mpu_enable+0x14>)
    1c60:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    1c64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1c68:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1c6c:	4770      	bx	lr
    1c6e:	bf00      	nop
    1c70:	e000ed00 	.word	0xe000ed00

00001c74 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1c74:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1c78:	2200      	movs	r2, #0
    1c7a:	4b02      	ldr	r3, [pc, #8]	; (1c84 <arm_core_mpu_disable+0x10>)
    1c7c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    1c80:	4770      	bx	lr
    1c82:	bf00      	nop
    1c84:	e000ed00 	.word	0xe000ed00

00001c88 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    1c88:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    1c8a:	4c03      	ldr	r4, [pc, #12]	; (1c98 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    1c8c:	7822      	ldrb	r2, [r4, #0]
    1c8e:	f7ff ff3f 	bl	1b10 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1c92:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    1c94:	bd10      	pop	{r4, pc}
    1c96:	bf00      	nop
    1c98:	20000bb0 	.word	0x20000bb0

00001c9c <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    1c9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ca0:	4d29      	ldr	r5, [pc, #164]	; (1d48 <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
    1ca2:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
    1ca4:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1ca6:	f04f 0800 	mov.w	r8, #0
    1caa:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
    1cac:	4f27      	ldr	r7, [pc, #156]	; (1d4c <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1cae:	45d0      	cmp	r8, sl
    1cb0:	da1b      	bge.n	1cea <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    1cb2:	f8d6 9004 	ldr.w	r9, [r6, #4]
    1cb6:	f1b9 0f00 	cmp.w	r9, #0
    1cba:	d03f      	beq.n	1d3c <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    1cbc:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1cbe:	4608      	mov	r0, r1
    1cc0:	9101      	str	r1, [sp, #4]
    1cc2:	f002 fd6f 	bl	47a4 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1cc6:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1cc8:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1cca:	eb09 0001 	add.w	r0, r9, r1
    1cce:	3801      	subs	r0, #1
    1cd0:	f002 fd68 	bl	47a4 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    1cd4:	4284      	cmp	r4, r0
    1cd6:	f04f 0214 	mov.w	r2, #20
    1cda:	4b1d      	ldr	r3, [pc, #116]	; (1d50 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
    1cdc:	d008      	beq.n	1cf0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    1cde:	fb02 f308 	mul.w	r3, r2, r8
    1ce2:	f06f 0215 	mvn.w	r2, #21
    1ce6:	f84b 2003 	str.w	r2, [fp, r3]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    1cea:	b003      	add	sp, #12
    1cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    1cf0:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    1cf4:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    1cf6:	d0f8      	beq.n	1cea <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    1cf8:	7819      	ldrb	r1, [r3, #0]
    1cfa:	42a1      	cmp	r1, r4
    1cfc:	ddf5      	ble.n	1cea <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
    1cfe:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
    1d02:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
    1d06:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
    1d0a:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    1d0e:	f100 0108 	add.w	r1, r0, #8
    1d12:	7b00      	ldrb	r0, [r0, #12]
    1d14:	f364 0004 	bfi	r0, r4, #0, #5
    1d18:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
    1d1a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    1d1e:	790c      	ldrb	r4, [r1, #4]
    1d20:	0840      	lsrs	r0, r0, #1
    1d22:	f360 1447 	bfi	r4, r0, #5, #3
    1d26:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
    1d28:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    1d2c:	f021 011f 	bic.w	r1, r1, #31
    1d30:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
    1d32:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    1d36:	f021 011f 	bic.w	r1, r1, #31
    1d3a:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1d3c:	f108 0801 	add.w	r8, r8, #1
    1d40:	3514      	adds	r5, #20
    1d42:	360c      	adds	r6, #12
    1d44:	e7b3      	b.n	1cae <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    1d46:	bf00      	nop
    1d48:	20000804 	.word	0x20000804
    1d4c:	e000ed00 	.word	0xe000ed00
    1d50:	20000bb0 	.word	0x20000bb0

00001d54 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    1d54:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1d56:	4d0e      	ldr	r5, [pc, #56]	; (1d90 <z_arm_mpu_init+0x3c>)
    1d58:	682c      	ldr	r4, [r5, #0]
    1d5a:	2c08      	cmp	r4, #8
    1d5c:	d815      	bhi.n	1d8a <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1d5e:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    1d60:	f7ff ff88 	bl	1c74 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
    1d64:	4b0b      	ldr	r3, [pc, #44]	; (1d94 <z_arm_mpu_init+0x40>)
    1d66:	4a0c      	ldr	r2, [pc, #48]	; (1d98 <z_arm_mpu_init+0x44>)
    1d68:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1d6c:	4284      	cmp	r4, r0
    1d6e:	d105      	bne.n	1d7c <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1d70:	4b0a      	ldr	r3, [pc, #40]	; (1d9c <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    1d72:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
    1d74:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    1d76:	f7ff ff71 	bl	1c5c <arm_core_mpu_enable>
}
    1d7a:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    1d7c:	6869      	ldr	r1, [r5, #4]
    1d7e:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    1d82:	f7ff feab 	bl	1adc <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1d86:	3001      	adds	r0, #1
    1d88:	e7f0      	b.n	1d6c <z_arm_mpu_init+0x18>
		return -1;
    1d8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1d8e:	e7f4      	b.n	1d7a <z_arm_mpu_init+0x26>
    1d90:	00005478 	.word	0x00005478
    1d94:	e000ed00 	.word	0xe000ed00
    1d98:	0044ffaa 	.word	0x0044ffaa
    1d9c:	20000bb0 	.word	0x20000bb0

00001da0 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    1da0:	4b01      	ldr	r3, [pc, #4]	; (1da8 <__stdout_hook_install+0x8>)
    1da2:	6018      	str	r0, [r3, #0]
}
    1da4:	4770      	bx	lr
    1da6:	bf00      	nop
    1da8:	20000030 	.word	0x20000030

00001dac <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1dac:	4b08      	ldr	r3, [pc, #32]	; (1dd0 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1dae:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1db0:	1ac3      	subs	r3, r0, r3
{
    1db2:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1db4:	4907      	ldr	r1, [pc, #28]	; (1dd4 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    1db6:	109b      	asrs	r3, r3, #2
{
    1db8:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1dba:	4359      	muls	r1, r3
    1dbc:	2240      	movs	r2, #64	; 0x40
    1dbe:	4806      	ldr	r0, [pc, #24]	; (1dd8 <onoff_stop+0x2c>)
    1dc0:	f002 fd63 	bl	488a <stop>
	notify(mgr, res);
    1dc4:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1dc6:	4601      	mov	r1, r0
	notify(mgr, res);
    1dc8:	4620      	mov	r0, r4
}
    1dca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    1dce:	4718      	bx	r3
    1dd0:	2000082c 	.word	0x2000082c
    1dd4:	b6db6db7 	.word	0xb6db6db7
    1dd8:	0000515c 	.word	0x0000515c

00001ddc <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1ddc:	2340      	movs	r3, #64	; 0x40
{
    1dde:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1de0:	4c0b      	ldr	r4, [pc, #44]	; (1e10 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1de2:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    1de4:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1de6:	460b      	mov	r3, r1
{
    1de8:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1dea:	490a      	ldr	r1, [pc, #40]	; (1e14 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
    1dec:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1dee:	4361      	muls	r1, r4
{
    1df0:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1df2:	4a09      	ldr	r2, [pc, #36]	; (1e18 <onoff_start+0x3c>)
    1df4:	4809      	ldr	r0, [pc, #36]	; (1e1c <onoff_start+0x40>)
    1df6:	f002 fd75 	bl	48e4 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    1dfa:	1e01      	subs	r1, r0, #0
    1dfc:	da05      	bge.n	1e0a <onoff_start+0x2e>
		notify(mgr, err);
    1dfe:	4630      	mov	r0, r6
    1e00:	462b      	mov	r3, r5
	}
}
    1e02:	b002      	add	sp, #8
    1e04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    1e08:	4718      	bx	r3
}
    1e0a:	b002      	add	sp, #8
    1e0c:	bd70      	pop	{r4, r5, r6, pc}
    1e0e:	bf00      	nop
    1e10:	2000082c 	.word	0x2000082c
    1e14:	b6db6db7 	.word	0xb6db6db7
    1e18:	00004951 	.word	0x00004951
    1e1c:	0000515c 	.word	0x0000515c

00001e20 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    1e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1e24:	2200      	movs	r2, #0
    1e26:	2101      	movs	r1, #1
{
    1e28:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1e2a:	2005      	movs	r0, #5
    1e2c:	f7ff fb72 	bl	1514 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1e30:	4811      	ldr	r0, [pc, #68]	; (1e78 <clk_init+0x58>)
    1e32:	f000 fdf9 	bl	2a28 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1e36:	4b11      	ldr	r3, [pc, #68]	; (1e7c <clk_init+0x5c>)
    1e38:	4298      	cmp	r0, r3
    1e3a:	d119      	bne.n	1e70 <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1e3c:	f002 fed9 	bl	4bf2 <nrfx_clock_enable>
    1e40:	2400      	movs	r4, #0
	return &data->mgr[type];
    1e42:	f04f 091c 	mov.w	r9, #28
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1e46:	270c      	movs	r7, #12
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1e48:	f8df 8034 	ldr.w	r8, [pc, #52]	; 1e80 <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
    1e4c:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1e4e:	4641      	mov	r1, r8
    1e50:	fb09 5004 	mla	r0, r9, r4, r5
    1e54:	f002 fba0 	bl	4598 <onoff_manager_init>
		if (err < 0) {
    1e58:	2800      	cmp	r0, #0
    1e5a:	db07      	blt.n	1e6c <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1e5c:	2301      	movs	r3, #1
    1e5e:	fb07 5504 	mla	r5, r7, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    1e62:	441c      	add	r4, r3
    1e64:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1e66:	67ab      	str	r3, [r5, #120]	; 0x78
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    1e68:	d1f0      	bne.n	1e4c <clk_init+0x2c>
	}

	return 0;
    1e6a:	2000      	movs	r0, #0
}
    1e6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    1e70:	f06f 0004 	mvn.w	r0, #4
    1e74:	e7fa      	b.n	1e6c <clk_init+0x4c>
    1e76:	bf00      	nop
    1e78:	00001eb9 	.word	0x00001eb9
    1e7c:	0bad0000 	.word	0x0bad0000
    1e80:	000054a0 	.word	0x000054a0

00001e84 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    1e84:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    1e86:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    1e88:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    1e8a:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    1e8c:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    1e8e:	4808      	ldr	r0, [pc, #32]	; (1eb0 <clkstarted_handle.constprop.0+0x2c>)
    1e90:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    1e92:	3378      	adds	r3, #120	; 0x78
    1e94:	4418      	add	r0, r3
	void *user_data = sub_data->user_data;
    1e96:	e9d4 561c 	ldrd	r5, r6, [r4, #112]	; 0x70
	sub_data->cb = NULL;
    1e9a:	6722      	str	r2, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    1e9c:	f002 fce2 	bl	4864 <set_on_state>
	if (callback) {
    1ea0:	b12d      	cbz	r5, 1eae <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    1ea2:	4632      	mov	r2, r6
    1ea4:	462b      	mov	r3, r5
}
    1ea6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    1eaa:	4802      	ldr	r0, [pc, #8]	; (1eb4 <clkstarted_handle.constprop.0+0x30>)
    1eac:	4718      	bx	r3
}
    1eae:	bd70      	pop	{r4, r5, r6, pc}
    1eb0:	2000082c 	.word	0x2000082c
    1eb4:	0000515c 	.word	0x0000515c

00001eb8 <clock_event_handler>:
	switch (event) {
    1eb8:	2805      	cmp	r0, #5
    1eba:	d811      	bhi.n	1ee0 <clock_event_handler+0x28>
    1ebc:	e8df f000 	tbb	[pc, r0]
    1ec0:	10100e03 	.word	0x10100e03
    1ec4:	0a0c      	.short	0x0a0c
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1ec6:	4b07      	ldr	r3, [pc, #28]	; (1ee4 <clock_event_handler+0x2c>)
    1ec8:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1eca:	f010 0007 	ands.w	r0, r0, #7
    1ece:	d107      	bne.n	1ee0 <clock_event_handler+0x28>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1ed0:	f7ff bfd8 	b.w	1e84 <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    1ed4:	2002      	movs	r0, #2
    1ed6:	e7fb      	b.n	1ed0 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    1ed8:	2003      	movs	r0, #3
    1eda:	e7f9      	b.n	1ed0 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1edc:	2001      	movs	r0, #1
    1ede:	e7f7      	b.n	1ed0 <clock_event_handler+0x18>
}
    1ee0:	4770      	bx	lr
    1ee2:	bf00      	nop
    1ee4:	2000082c 	.word	0x2000082c

00001ee8 <generic_hfclk_start>:
{
    1ee8:	b508      	push	{r3, lr}
	__asm__ volatile(
    1eea:	f04f 0320 	mov.w	r3, #32
    1eee:	f3ef 8111 	mrs	r1, BASEPRI
    1ef2:	f383 8812 	msr	BASEPRI_MAX, r3
    1ef6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1efa:	4a12      	ldr	r2, [pc, #72]	; (1f44 <generic_hfclk_start+0x5c>)
    1efc:	6813      	ldr	r3, [r2, #0]
    1efe:	f043 0002 	orr.w	r0, r3, #2
    1f02:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1f04:	07da      	lsls	r2, r3, #31
    1f06:	d408      	bmi.n	1f1a <generic_hfclk_start+0x32>
	__asm__ volatile(
    1f08:	f381 8811 	msr	BASEPRI, r1
    1f0c:	f3bf 8f6f 	isb	sy
}
    1f10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    1f14:	2001      	movs	r0, #1
    1f16:	f002 be7e 	b.w	4c16 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1f1a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1f1e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1f22:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1f26:	07d3      	lsls	r3, r2, #31
    1f28:	d5ee      	bpl.n	1f08 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    1f2a:	4807      	ldr	r0, [pc, #28]	; (1f48 <generic_hfclk_start+0x60>)
    1f2c:	f002 fc9a 	bl	4864 <set_on_state>
    1f30:	f381 8811 	msr	BASEPRI, r1
    1f34:	f3bf 8f6f 	isb	sy
}
    1f38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    1f3c:	2000      	movs	r0, #0
    1f3e:	f7ff bfa1 	b.w	1e84 <clkstarted_handle.constprop.0>
    1f42:	bf00      	nop
    1f44:	200008cc 	.word	0x200008cc
    1f48:	200008a4 	.word	0x200008a4

00001f4c <api_blocking_start>:
{
    1f4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1f4e:	2200      	movs	r2, #0
    1f50:	2301      	movs	r3, #1
    1f52:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1f56:	466b      	mov	r3, sp
    1f58:	4a08      	ldr	r2, [pc, #32]	; (1f7c <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1f5a:	f8cd d000 	str.w	sp, [sp]
    1f5e:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1f62:	f002 fcee 	bl	4942 <api_start>
	if (err < 0) {
    1f66:	2800      	cmp	r0, #0
    1f68:	db05      	blt.n	1f76 <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    1f6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1f6e:	2300      	movs	r3, #0
    1f70:	4668      	mov	r0, sp
    1f72:	f001 fc37 	bl	37e4 <z_impl_k_sem_take>
}
    1f76:	b005      	add	sp, #20
    1f78:	f85d fb04 	ldr.w	pc, [sp], #4
    1f7c:	00004987 	.word	0x00004987

00001f80 <generic_hfclk_stop>:
{
    1f80:	b510      	push	{r4, lr}
	__asm__ volatile(
    1f82:	f04f 0320 	mov.w	r3, #32
    1f86:	f3ef 8411 	mrs	r4, BASEPRI
    1f8a:	f383 8812 	msr	BASEPRI_MAX, r3
    1f8e:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    1f92:	4a07      	ldr	r2, [pc, #28]	; (1fb0 <generic_hfclk_stop+0x30>)
    1f94:	6813      	ldr	r3, [r2, #0]
    1f96:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    1f9a:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    1f9c:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    1f9e:	d402      	bmi.n	1fa6 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    1fa0:	2001      	movs	r0, #1
    1fa2:	f002 fe97 	bl	4cd4 <nrfx_clock_stop>
	__asm__ volatile(
    1fa6:	f384 8811 	msr	BASEPRI, r4
    1faa:	f3bf 8f6f 	isb	sy
}
    1fae:	bd10      	pop	{r4, pc}
    1fb0:	200008cc 	.word	0x200008cc

00001fb4 <z_nrf_clock_control_lf_on>:
{
    1fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1fb8:	2201      	movs	r2, #1
    1fba:	4607      	mov	r7, r0
    1fbc:	4937      	ldr	r1, [pc, #220]	; (209c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x9c>)
    1fbe:	e8d1 3fef 	ldaex	r3, [r1]
    1fc2:	e8c1 2fe0 	stlex	r0, r2, [r1]
    1fc6:	2800      	cmp	r0, #0
    1fc8:	d1f9      	bne.n	1fbe <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    1fca:	b933      	cbnz	r3, 1fda <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1fcc:	4934      	ldr	r1, [pc, #208]	; (20a0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xa0>)
		err = onoff_request(mgr, &cli);
    1fce:	4835      	ldr	r0, [pc, #212]	; (20a4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xa4>)
    1fd0:	604b      	str	r3, [r1, #4]
    1fd2:	60cb      	str	r3, [r1, #12]
    1fd4:	608a      	str	r2, [r1, #8]
    1fd6:	f002 faf2 	bl	45be <onoff_request>
	switch (start_mode) {
    1fda:	1e7b      	subs	r3, r7, #1
    1fdc:	2b01      	cmp	r3, #1
    1fde:	d82b      	bhi.n	2038 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x38>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1fe0:	2f01      	cmp	r7, #1
    1fe2:	d107      	bne.n	1ff4 <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1fe4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1fe8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1fec:	f003 0303 	and.w	r3, r3, #3
    1ff0:	2b02      	cmp	r3, #2
    1ff2:	d021      	beq.n	2038 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x38>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1ff4:	f002 ff99 	bl	4f2a <k_is_in_isr>
    1ff8:	4605      	mov	r5, r0
    1ffa:	b9f8      	cbnz	r0, 203c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3c>
	return !z_sys_post_kernel;
    1ffc:	4b2a      	ldr	r3, [pc, #168]	; (20a8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xa8>)
    1ffe:	781b      	ldrb	r3, [r3, #0]
    2000:	b1e3      	cbz	r3, 203c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x3c>
    p_reg->INTENCLR = mask;
    2002:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2006:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    2008:	4606      	mov	r6, r0
    200a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    200e:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2012:	f8df 8098 	ldr.w	r8, [pc, #152]	; 20ac <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xac>
    2016:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    201a:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    201e:	03d2      	lsls	r2, r2, #15
    2020:	d516      	bpl.n	2050 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x50>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    2022:	f003 0303 	and.w	r3, r3, #3
    2026:	2b02      	cmp	r3, #2
    2028:	d001      	beq.n	202e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    202a:	2f01      	cmp	r7, #1
    202c:	d110      	bne.n	2050 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x50>
	if (isr_mode) {
    202e:	b375      	cbz	r5, 208e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8e>
    2030:	f386 8811 	msr	BASEPRI, r6
    2034:	f3bf 8f6f 	isb	sy
}
    2038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    203c:	f04f 0320 	mov.w	r3, #32
    2040:	f3ef 8611 	mrs	r6, BASEPRI
    2044:	f383 8812 	msr	BASEPRI_MAX, r3
    2048:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    204c:	2501      	movs	r5, #1
    204e:	e7de      	b.n	200e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xe>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    2050:	b1c5      	cbz	r5, 2084 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x84>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    2052:	4630      	mov	r0, r6
    2054:	f7ff fa22 	bl	149c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2058:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    205c:	b2db      	uxtb	r3, r3
    205e:	2b01      	cmp	r3, #1
    2060:	d1d9      	bne.n	2016 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x16>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2062:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    2066:	2a00      	cmp	r2, #0
    2068:	d0d5      	beq.n	2016 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x16>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    206a:	2200      	movs	r2, #0
    206c:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    2070:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    2074:	2202      	movs	r2, #2
    2076:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
    207a:	2220      	movs	r2, #32
    207c:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2080:	60a3      	str	r3, [r4, #8]
}
    2082:	e7c8      	b.n	2016 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x16>
	return z_impl_k_sleep(timeout);
    2084:	2100      	movs	r1, #0
    2086:	2021      	movs	r0, #33	; 0x21
    2088:	f001 fe96 	bl	3db8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    208c:	e7e4      	b.n	2058 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x58>
    p_reg->INTENSET = mask;
    208e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2092:	2202      	movs	r2, #2
    2094:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    2098:	e7ce      	b.n	2038 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x38>
    209a:	bf00      	nop
    209c:	20000828 	.word	0x20000828
    20a0:	20000818 	.word	0x20000818
    20a4:	20000848 	.word	0x20000848
    20a8:	20000fc2 	.word	0x20000fc2
    20ac:	e000e100 	.word	0xe000e100

000020b0 <rtt_console_init>:

	return character;
}

static int rtt_console_init(void)
{
    20b0:	b510      	push	{r4, lr}

#ifdef CONFIG_PRINTK
	__printk_hook_install(rtt_console_out);
    20b2:	4c04      	ldr	r4, [pc, #16]	; (20c4 <rtt_console_init+0x14>)
    20b4:	4620      	mov	r0, r4
    20b6:	f7fe fa75 	bl	5a4 <__printk_hook_install>
#endif
	__stdout_hook_install(rtt_console_out);
    20ba:	4620      	mov	r0, r4
    20bc:	f7ff fe70 	bl	1da0 <__stdout_hook_install>

	return 0;
}
    20c0:	2000      	movs	r0, #0
    20c2:	bd10      	pop	{r4, pc}
    20c4:	000020c9 	.word	0x000020c9

000020c8 <rtt_console_out>:
{
    20c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    20ca:	4604      	mov	r4, r0
	char c = (char)character;
    20cc:	2503      	movs	r5, #3
    20ce:	4e13      	ldr	r6, [pc, #76]	; (211c <rtt_console_out+0x54>)
    20d0:	f88d 0007 	strb.w	r0, [sp, #7]
		SEGGER_RTT_LOCK();
    20d4:	f3ef 8711 	mrs	r7, BASEPRI
    20d8:	f04f 0120 	mov.w	r1, #32
    20dc:	f381 8811 	msr	BASEPRI, r1
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    20e0:	2201      	movs	r2, #1
    20e2:	f10d 0107 	add.w	r1, sp, #7
    20e6:	2000      	movs	r0, #0
    20e8:	f001 f8a6 	bl	3238 <SEGGER_RTT_WriteNoLock>
		SEGGER_RTT_UNLOCK();
    20ec:	f387 8811 	msr	BASEPRI, r7
		if (cnt) {
    20f0:	b120      	cbz	r0, 20fc <rtt_console_out+0x34>
			host_present = true;
    20f2:	2301      	movs	r3, #1
    20f4:	7033      	strb	r3, [r6, #0]
}
    20f6:	4620      	mov	r0, r4
    20f8:	b003      	add	sp, #12
    20fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (host_present) {
    20fc:	7833      	ldrb	r3, [r6, #0]
    20fe:	2b00      	cmp	r3, #0
    2100:	d0f9      	beq.n	20f6 <rtt_console_out+0x2e>
			if (max_cnt) {
    2102:	3d01      	subs	r5, #1
    2104:	d008      	beq.n	2118 <rtt_console_out+0x50>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
    2106:	f002 ff10 	bl	4f2a <k_is_in_isr>
    210a:	2800      	cmp	r0, #0
    210c:	d1e2      	bne.n	20d4 <rtt_console_out+0xc>
    210e:	2100      	movs	r1, #0
    2110:	2042      	movs	r0, #66	; 0x42
    2112:	f001 fe51 	bl	3db8 <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
    2116:	e7dd      	b.n	20d4 <rtt_console_out+0xc>
				host_present = false;
    2118:	7035      	strb	r5, [r6, #0]
    211a:	e7ec      	b.n	20f6 <rtt_console_out+0x2e>
    211c:	20000bb1 	.word	0x20000bb1

00002120 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    2120:	b530      	push	{r4, r5, lr}
	return port->config;
    2122:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2124:	f001 041f 	and.w	r4, r1, #31
    2128:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    212a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    212e:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2130:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    2134:	d105      	bne.n	2142 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    2136:	4620      	mov	r0, r4
    2138:	f000 ff20 	bl	2f7c <nrfx_gpiote_trigger_disable>

		return 0;
    213c:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    213e:	b005      	add	sp, #20
    2140:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    2142:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    2144:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    2148:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    214c:	d114      	bne.n	2178 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    214e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    2152:	bf0c      	ite	eq
    2154:	2304      	moveq	r3, #4
    2156:	2305      	movne	r3, #5
    2158:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    215c:	2300      	movs	r3, #0
    215e:	4620      	mov	r0, r4
    2160:	4619      	mov	r1, r3
    2162:	aa02      	add	r2, sp, #8
    2164:	f000 fd48 	bl	2bf8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2168:	4b1f      	ldr	r3, [pc, #124]	; (21e8 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    216a:	4298      	cmp	r0, r3
    216c:	d138      	bne.n	21e0 <gpio_nrfx_pin_interrupt_configure+0xc0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    216e:	2101      	movs	r1, #1
    2170:	4620      	mov	r0, r4
    2172:	f000 febd 	bl	2ef0 <nrfx_gpiote_trigger_enable>
	return 0;
    2176:	e7e1      	b.n	213c <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    2178:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    217c:	d025      	beq.n	21ca <gpio_nrfx_pin_interrupt_configure+0xaa>
    217e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    2182:	bf14      	ite	ne
    2184:	2301      	movne	r3, #1
    2186:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    2188:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    218c:	6883      	ldr	r3, [r0, #8]
    218e:	40cb      	lsrs	r3, r1
    2190:	07d9      	lsls	r1, r3, #31
    2192:	d4e3      	bmi.n	215c <gpio_nrfx_pin_interrupt_configure+0x3c>
    2194:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    2198:	d1e0      	bne.n	215c <gpio_nrfx_pin_interrupt_configure+0x3c>
        case 1: return NRF_P1;
    219a:	4a14      	ldr	r2, [pc, #80]	; (21ec <gpio_nrfx_pin_interrupt_configure+0xcc>)
    219c:	4814      	ldr	r0, [pc, #80]	; (21f0 <gpio_nrfx_pin_interrupt_configure+0xd0>)
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    219e:	0961      	lsrs	r1, r4, #5
        case 1: return NRF_P1;
    21a0:	2901      	cmp	r1, #1
    21a2:	bf08      	it	eq
    21a4:	4602      	moveq	r2, r0
    *p_pin = pin_number & 0x1F;
    21a6:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    21aa:	3380      	adds	r3, #128	; 0x80
    21ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    21b0:	07db      	lsls	r3, r3, #31
    21b2:	d4d3      	bmi.n	215c <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    21b4:	f10d 0507 	add.w	r5, sp, #7
    21b8:	4629      	mov	r1, r5
    21ba:	4620      	mov	r0, r4
    21bc:	f000 fe44 	bl	2e48 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    21c0:	4b0c      	ldr	r3, [pc, #48]	; (21f4 <gpio_nrfx_pin_interrupt_configure+0xd4>)
    21c2:	4298      	cmp	r0, r3
    21c4:	d003      	beq.n	21ce <gpio_nrfx_pin_interrupt_configure+0xae>
		trigger_config.p_in_channel = &ch;
    21c6:	9503      	str	r5, [sp, #12]
    21c8:	e7c8      	b.n	215c <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    21ca:	2303      	movs	r3, #3
    21cc:	e7dc      	b.n	2188 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    21ce:	4628      	mov	r0, r5
    21d0:	f000 fe88 	bl	2ee4 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    21d4:	4b04      	ldr	r3, [pc, #16]	; (21e8 <gpio_nrfx_pin_interrupt_configure+0xc8>)
    21d6:	4298      	cmp	r0, r3
    21d8:	d0f5      	beq.n	21c6 <gpio_nrfx_pin_interrupt_configure+0xa6>
				return -ENOMEM;
    21da:	f06f 000b 	mvn.w	r0, #11
    21de:	e7ae      	b.n	213e <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    21e0:	f06f 0015 	mvn.w	r0, #21
    21e4:	e7ab      	b.n	213e <gpio_nrfx_pin_interrupt_configure+0x1e>
    21e6:	bf00      	nop
    21e8:	0bad0000 	.word	0x0bad0000
    21ec:	50842500 	.word	0x50842500
    21f0:	50842800 	.word	0x50842800
    21f4:	0bad0004 	.word	0x0bad0004

000021f8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    21f8:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    21fa:	f000 fe63 	bl	2ec4 <nrfx_gpiote_is_init>
    21fe:	4604      	mov	r4, r0
    2200:	b968      	cbnz	r0, 221e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    2202:	f000 fe37 	bl	2e74 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    2206:	4b08      	ldr	r3, [pc, #32]	; (2228 <gpio_nrfx_init+0x30>)
    2208:	4298      	cmp	r0, r3
    220a:	d10a      	bne.n	2222 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    220c:	4621      	mov	r1, r4
    220e:	4807      	ldr	r0, [pc, #28]	; (222c <gpio_nrfx_init+0x34>)
    2210:	f000 fe14 	bl	2e3c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2214:	4622      	mov	r2, r4
    2216:	2105      	movs	r1, #5
    2218:	200d      	movs	r0, #13
    221a:	f7ff f97b 	bl	1514 <z_arm_irq_priority_set>
		return 0;
    221e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    2220:	bd10      	pop	{r4, pc}
		return -EIO;
    2222:	f06f 0004 	mvn.w	r0, #4
    2226:	e7fb      	b.n	2220 <gpio_nrfx_init+0x28>
    2228:	0bad0000 	.word	0x0bad0000
    222c:	00002231 	.word	0x00002231

00002230 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2230:	0942      	lsrs	r2, r0, #5
{
    2232:	4603      	mov	r3, r0
    2234:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2236:	d002      	beq.n	223e <nrfx_gpio_handler+0xe>
    2238:	2a01      	cmp	r2, #1
    223a:	d017      	beq.n	226c <nrfx_gpio_handler+0x3c>
}
    223c:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    223e:	4e0d      	ldr	r6, [pc, #52]	; (2274 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    2240:	6932      	ldr	r2, [r6, #16]
    2242:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2244:	2900      	cmp	r1, #0
    2246:	d0f9      	beq.n	223c <nrfx_gpio_handler+0xc>
    2248:	2501      	movs	r5, #1
    *p_pin = pin_number & 0x1F;
    224a:	f003 031f 	and.w	r3, r3, #31
    224e:	680c      	ldr	r4, [r1, #0]
    2250:	409d      	lsls	r5, r3
    2252:	2900      	cmp	r1, #0
    2254:	d0f2      	beq.n	223c <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    2256:	688a      	ldr	r2, [r1, #8]
    2258:	402a      	ands	r2, r5
    225a:	d002      	beq.n	2262 <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    225c:	4630      	mov	r0, r6
    225e:	684b      	ldr	r3, [r1, #4]
    2260:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2262:	b12c      	cbz	r4, 2270 <nrfx_gpio_handler+0x40>
    2264:	6823      	ldr	r3, [r4, #0]
    2266:	4621      	mov	r1, r4
    2268:	461c      	mov	r4, r3
    226a:	e7f2      	b.n	2252 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    226c:	4e02      	ldr	r6, [pc, #8]	; (2278 <nrfx_gpio_handler+0x48>)
    226e:	e7e7      	b.n	2240 <nrfx_gpio_handler+0x10>
    2270:	4623      	mov	r3, r4
    2272:	e7f8      	b.n	2266 <nrfx_gpio_handler+0x36>
    2274:	0000518c 	.word	0x0000518c
    2278:	00005174 	.word	0x00005174

0000227c <gpio_nrfx_pin_configure>:
{
    227c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    2280:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2282:	f001 051f 	and.w	r5, r1, #31
    2286:	7b3b      	ldrb	r3, [r7, #12]
{
    2288:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    228a:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    228e:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2290:	4628      	mov	r0, r5
    2292:	f10d 0103 	add.w	r1, sp, #3
    2296:	f000 fdd7 	bl	2e48 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    229a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    229e:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    22a0:	d10b      	bne.n	22ba <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    22a2:	4628      	mov	r0, r5
    22a4:	f000 fe92 	bl	2fcc <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    22a8:	4b3c      	ldr	r3, [pc, #240]	; (239c <gpio_nrfx_pin_configure+0x120>)
    22aa:	4598      	cmp	r8, r3
    22ac:	d103      	bne.n	22b6 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    22ae:	f89d 0003 	ldrb.w	r0, [sp, #3]
    22b2:	f000 fe11 	bl	2ed8 <nrfx_gpiote_channel_free>
		return 0;
    22b6:	2000      	movs	r0, #0
    22b8:	e00c      	b.n	22d4 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    22ba:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    22bc:	4628      	mov	r0, r5
    22be:	4619      	mov	r1, r3
    22c0:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
    22c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    22c6:	f000 fc97 	bl	2bf8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    22ca:	4b34      	ldr	r3, [pc, #208]	; (239c <gpio_nrfx_pin_configure+0x120>)
    22cc:	4298      	cmp	r0, r3
    22ce:	d004      	beq.n	22da <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    22d0:	f06f 0015 	mvn.w	r0, #21
}
    22d4:	b004      	add	sp, #16
    22d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    22da:	4580      	cmp	r8, r0
    22dc:	d103      	bne.n	22e6 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    22de:	f89d 0003 	ldrb.w	r0, [sp, #3]
    22e2:	f000 fdf9 	bl	2ed8 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    22e6:	03a3      	lsls	r3, r4, #14
    22e8:	d549      	bpl.n	237e <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    22ea:	f240 3306 	movw	r3, #774	; 0x306
    22ee:	4023      	ands	r3, r4
    22f0:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    22f4:	d019      	beq.n	232a <gpio_nrfx_pin_configure+0xae>
    22f6:	d80c      	bhi.n	2312 <gpio_nrfx_pin_configure+0x96>
    22f8:	2b06      	cmp	r3, #6
    22fa:	d017      	beq.n	232c <gpio_nrfx_pin_configure+0xb0>
    22fc:	d804      	bhi.n	2308 <gpio_nrfx_pin_configure+0x8c>
    22fe:	b1ab      	cbz	r3, 232c <gpio_nrfx_pin_configure+0xb0>
    2300:	2b02      	cmp	r3, #2
    2302:	d1e5      	bne.n	22d0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    2304:	2304      	movs	r3, #4
    2306:	e011      	b.n	232c <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    2308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    230c:	d1e0      	bne.n	22d0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    230e:	2301      	movs	r3, #1
    2310:	e00c      	b.n	232c <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    2312:	f240 2202 	movw	r2, #514	; 0x202
    2316:	4293      	cmp	r3, r2
    2318:	d026      	beq.n	2368 <gpio_nrfx_pin_configure+0xec>
    231a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    231e:	d025      	beq.n	236c <gpio_nrfx_pin_configure+0xf0>
    2320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    2324:	d1d4      	bne.n	22d0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    2326:	2302      	movs	r3, #2
    2328:	e000      	b.n	232c <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    232a:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    232c:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    2330:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    2334:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    2338:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    233a:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    233e:	bf4c      	ite	mi
    2340:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
    2342:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2346:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    2348:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    234c:	d510      	bpl.n	2370 <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    234e:	2301      	movs	r3, #1
    2350:	687a      	ldr	r2, [r7, #4]
    2352:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    2354:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2356:	2200      	movs	r2, #0
    2358:	4628      	mov	r0, r5
    235a:	a901      	add	r1, sp, #4
    235c:	f000 fcfa 	bl	2d54 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2360:	4b0e      	ldr	r3, [pc, #56]	; (239c <gpio_nrfx_pin_configure+0x120>)
    2362:	4298      	cmp	r0, r3
    2364:	d0a7      	beq.n	22b6 <gpio_nrfx_pin_configure+0x3a>
    2366:	e7b3      	b.n	22d0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    2368:	2305      	movs	r3, #5
    236a:	e7df      	b.n	232c <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    236c:	2303      	movs	r3, #3
    236e:	e7dd      	b.n	232c <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2370:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    2372:	bf41      	itttt	mi
    2374:	2301      	movmi	r3, #1
    2376:	687a      	ldrmi	r2, [r7, #4]
    2378:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    237a:	60d3      	strmi	r3, [r2, #12]
}
    237c:	e7eb      	b.n	2356 <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
    237e:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2380:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    2384:	bf4c      	ite	mi
    2386:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
    2388:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    238c:	461a      	mov	r2, r3
    238e:	4628      	mov	r0, r5
    2390:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    2392:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2396:	f000 fc2f 	bl	2bf8 <nrfx_gpiote_input_configure>
    239a:	e7e1      	b.n	2360 <gpio_nrfx_pin_configure+0xe4>
    239c:	0bad0000 	.word	0x0bad0000

000023a0 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    23a0:	2301      	movs	r3, #1
    23a2:	4083      	lsls	r3, r0
{
    23a4:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    23a6:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    23a8:	4a0b      	ldr	r2, [pc, #44]	; (23d8 <compare_int_lock+0x38>)
    23aa:	e8d2 1fef 	ldaex	r1, [r2]
    23ae:	ea01 0504 	and.w	r5, r1, r4
    23b2:	e8c2 5fe6 	stlex	r6, r5, [r2]
    23b6:	2e00      	cmp	r6, #0
    23b8:	d1f7      	bne.n	23aa <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    23ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    23be:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    23c0:	4806      	ldr	r0, [pc, #24]	; (23dc <compare_int_lock+0x3c>)
    23c2:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    23c6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    23ca:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    23ce:	420b      	tst	r3, r1
}
    23d0:	bf14      	ite	ne
    23d2:	2001      	movne	r0, #1
    23d4:	2000      	moveq	r0, #0
    23d6:	bd70      	pop	{r4, r5, r6, pc}
    23d8:	200008ec 	.word	0x200008ec
    23dc:	50015000 	.word	0x50015000

000023e0 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    23e0:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    23e2:	490e      	ldr	r1, [pc, #56]	; (241c <sys_clock_timeout_handler+0x3c>)
	return absolute_time & COUNTER_MAX;
    23e4:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    23e8:	e9d1 3400 	ldrd	r3, r4, [r1]
    23ec:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    23ee:	18c3      	adds	r3, r0, r3
    23f0:	f144 0400 	adc.w	r4, r4, #0
    23f4:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    23f8:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    23fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    2400:	d209      	bcs.n	2416 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    2402:	4b07      	ldr	r3, [pc, #28]	; (2420 <sys_clock_timeout_handler+0x40>)
    2404:	681b      	ldr	r3, [r3, #0]
    2406:	0a1a      	lsrs	r2, r3, #8
    2408:	061b      	lsls	r3, r3, #24
    240a:	199c      	adds	r4, r3, r6
    240c:	4b05      	ldr	r3, [pc, #20]	; (2424 <sys_clock_timeout_handler+0x44>)
    240e:	f142 0500 	adc.w	r5, r2, #0
    2412:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    2416:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    2418:	f001 be24 	b.w	4064 <sys_clock_announce>
    241c:	20000188 	.word	0x20000188
    2420:	200008f0 	.word	0x200008f0
    2424:	20000190 	.word	0x20000190

00002428 <compare_int_unlock>:
	if (key) {
    2428:	b1d9      	cbz	r1, 2462 <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
    242a:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    242c:	4a0d      	ldr	r2, [pc, #52]	; (2464 <compare_int_unlock+0x3c>)
    242e:	4083      	lsls	r3, r0
    2430:	e8d2 cfef 	ldaex	ip, [r2]
    2434:	ea4c 0c03 	orr.w	ip, ip, r3
    2438:	e8c2 cfe1 	stlex	r1, ip, [r2]
    243c:	2900      	cmp	r1, #0
    243e:	d1f7      	bne.n	2430 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2440:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    2444:	4a08      	ldr	r2, [pc, #32]	; (2468 <compare_int_unlock+0x40>)
    2446:	4083      	lsls	r3, r0
    2448:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    244c:	4b07      	ldr	r3, [pc, #28]	; (246c <compare_int_unlock+0x44>)
    244e:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    2452:	40c3      	lsrs	r3, r0
    2454:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2456:	bf42      	ittt	mi
    2458:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    245c:	4b04      	ldrmi	r3, [pc, #16]	; (2470 <compare_int_unlock+0x48>)
    245e:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    2462:	4770      	bx	lr
    2464:	200008ec 	.word	0x200008ec
    2468:	50015000 	.word	0x50015000
    246c:	200008e8 	.word	0x200008e8
    2470:	e000e100 	.word	0xe000e100

00002474 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    2474:	4b0d      	ldr	r3, [pc, #52]	; (24ac <z_nrf_rtc_timer_read+0x38>)
    2476:	6818      	ldr	r0, [r3, #0]
    2478:	0a01      	lsrs	r1, r0, #8
    247a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    247c:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    2480:	4b0b      	ldr	r3, [pc, #44]	; (24b0 <z_nrf_rtc_timer_read+0x3c>)
    2482:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    2486:	1818      	adds	r0, r3, r0
    2488:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    248c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2490:	d20a      	bcs.n	24a8 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    2492:	4b08      	ldr	r3, [pc, #32]	; (24b4 <z_nrf_rtc_timer_read+0x40>)
    2494:	e9d3 2300 	ldrd	r2, r3, [r3]
    2498:	4290      	cmp	r0, r2
    249a:	eb71 0303 	sbcs.w	r3, r1, r3
    249e:	d203      	bcs.n	24a8 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    24a0:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    24a4:	f141 0100 	adc.w	r1, r1, #0
}
    24a8:	4770      	bx	lr
    24aa:	bf00      	nop
    24ac:	200008f0 	.word	0x200008f0
    24b0:	50015000 	.word	0x50015000
    24b4:	20000190 	.word	0x20000190

000024b8 <compare_set>:
{
    24b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    24bc:	4616      	mov	r6, r2
    24be:	461f      	mov	r7, r3
    24c0:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    24c2:	f7ff ff6d 	bl	23a0 <compare_int_lock>
    24c6:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    24c8:	f7ff ffd4 	bl	2474 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    24cc:	42b0      	cmp	r0, r6
    24ce:	eb71 0307 	sbcs.w	r3, r1, r7
    24d2:	d250      	bcs.n	2576 <compare_set+0xbe>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    24d4:	4b38      	ldr	r3, [pc, #224]	; (25b8 <compare_set+0x100>)
    24d6:	1a30      	subs	r0, r6, r0
    24d8:	eb67 0101 	sbc.w	r1, r7, r1
    24dc:	4298      	cmp	r0, r3
    24de:	f171 0100 	sbcs.w	r1, r1, #0
    24e2:	d265      	bcs.n	25b0 <compare_set+0xf8>
		if (target_time != cc_data[chan].target_time) {
    24e4:	4b35      	ldr	r3, [pc, #212]	; (25bc <compare_set+0x104>)
    24e6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    24ea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    24ee:	429f      	cmp	r7, r3
    24f0:	bf08      	it	eq
    24f2:	4296      	cmpeq	r6, r2
    24f4:	d049      	beq.n	258a <compare_set+0xd2>
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    24f6:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    24fa:	4931      	ldr	r1, [pc, #196]	; (25c0 <compare_set+0x108>)
    24fc:	fa09 f904 	lsl.w	r9, r9, r4
	event_clear(chan);
    2500:	4620      	mov	r0, r4
	return absolute_time & COUNTER_MAX;
    2502:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    2506:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    250a:	f002 fa8d 	bl	4a28 <event_clear>
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    250e:	f04f 0a03 	mov.w	sl, #3
	uint32_t cc_val = req_cc;
    2512:	4658      	mov	r0, fp
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    2514:	f104 0550 	add.w	r5, r4, #80	; 0x50
    2518:	00ad      	lsls	r5, r5, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    251a:	b2ad      	uxth	r5, r5
    251c:	f105 2550 	add.w	r5, r5, #1342197760	; 0x50005000
    p_reg->CC[ch] = cc_val;
    2520:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    2524:	4a27      	ldr	r2, [pc, #156]	; (25c4 <compare_set+0x10c>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2526:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
    p_reg->CC[ch] = cc_val;
    252a:	9301      	str	r3, [sp, #4]
    252c:	f8dd c004 	ldr.w	ip, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    2530:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    2534:	f841 302c 	str.w	r3, [r1, ip, lsl #2]
    p_reg->EVTENSET = mask;
    2538:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    253c:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    2540:	eba0 0008 	sub.w	r0, r0, r8
    2544:	3803      	subs	r0, #3
    2546:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    254a:	4290      	cmp	r0, r2
    254c:	d91d      	bls.n	258a <compare_set+0xd2>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    254e:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    2550:	b160      	cbz	r0, 256c <compare_set+0xb4>
     return p_reg->COUNTER;
    2552:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    2556:	eba8 000b 	sub.w	r0, r8, fp
    255a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    255e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2562:	d912      	bls.n	258a <compare_set+0xd2>
					event_clear(chan);
    2564:	4620      	mov	r0, r4
    2566:	f002 fa5f 	bl	4a28 <event_clear>
    256a:	4a16      	ldr	r2, [pc, #88]	; (25c4 <compare_set+0x10c>)
			cc_val = now + cc_inc;
    256c:	eb0a 0008 	add.w	r0, sl, r8
			cc_inc++;
    2570:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    2574:	e7da      	b.n	252c <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    2576:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2578:	4a13      	ldr	r2, [pc, #76]	; (25c8 <compare_set+0x110>)
    257a:	40a3      	lsls	r3, r4
    257c:	e8d2 0fef 	ldaex	r0, [r2]
    2580:	4318      	orrs	r0, r3
    2582:	e8c2 0fe1 	stlex	r1, r0, [r2]
    2586:	2900      	cmp	r1, #0
    2588:	d1f8      	bne.n	257c <compare_set+0xc4>
	return ret;
    258a:	2500      	movs	r5, #0
	cc_data[chan].target_time = target_time;
    258c:	490b      	ldr	r1, [pc, #44]	; (25bc <compare_set+0x104>)
	cc_data[chan].callback = handler;
    258e:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    2590:	0123      	lsls	r3, r4, #4
    2592:	eb01 1204 	add.w	r2, r1, r4, lsl #4
	cc_data[chan].callback = handler;
    2596:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
    2598:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].user_context = user_data;
    259c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    259e:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
    25a0:	4620      	mov	r0, r4
    25a2:	9900      	ldr	r1, [sp, #0]
    25a4:	f7ff ff40 	bl	2428 <compare_int_unlock>
}
    25a8:	4628      	mov	r0, r5
    25aa:	b003      	add	sp, #12
    25ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    25b0:	f06f 0515 	mvn.w	r5, #21
    25b4:	e7f4      	b.n	25a0 <compare_set+0xe8>
    25b6:	bf00      	nop
    25b8:	00800001 	.word	0x00800001
    25bc:	20000178 	.word	0x20000178
    25c0:	50015000 	.word	0x50015000
    25c4:	007ffffd 	.word	0x007ffffd
    25c8:	200008e8 	.word	0x200008e8

000025cc <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    25cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
    25ce:	2500      	movs	r5, #0
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    25d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    25d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    p_reg->INTENCLR = mask;
    25d8:	4c18      	ldr	r4, [pc, #96]	; (263c <sys_clock_driver_init+0x70>)
    25da:	4b19      	ldr	r3, [pc, #100]	; (2640 <sys_clock_driver_init+0x74>)
    p_reg->INTENSET = mask;
    25dc:	2602      	movs	r6, #2
    p_reg->INTENCLR = mask;
    25de:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    25e2:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    25e6:	4b17      	ldr	r3, [pc, #92]	; (2644 <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
    25e8:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    25ec:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    25f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    25f4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    25f8:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    25fc:	4b12      	ldr	r3, [pc, #72]	; (2648 <sys_clock_driver_init+0x7c>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    25fe:	2101      	movs	r1, #1
    2600:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    2604:	2015      	movs	r0, #21
    2606:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    260a:	462a      	mov	r2, r5
    260c:	f7fe ff82 	bl	1514 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    2610:	2015      	movs	r0, #21
    2612:	f7fe ff4f 	bl	14b4 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2616:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    2618:	4a0c      	ldr	r2, [pc, #48]	; (264c <sys_clock_driver_init+0x80>)
    261a:	60a3      	str	r3, [r4, #8]
    261c:	6023      	str	r3, [r4, #0]
    261e:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    2620:	4b0b      	ldr	r3, [pc, #44]	; (2650 <sys_clock_driver_init+0x84>)
    2622:	4a0c      	ldr	r2, [pc, #48]	; (2654 <sys_clock_driver_init+0x88>)
    2624:	9300      	str	r3, [sp, #0]
    2626:	4628      	mov	r0, r5
    2628:	2300      	movs	r3, #0
    262a:	9501      	str	r5, [sp, #4]
    262c:	f7ff ff44 	bl	24b8 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    2630:	4630      	mov	r0, r6
    2632:	f7ff fcbf 	bl	1fb4 <z_nrf_clock_control_lf_on>

	return 0;
}
    2636:	4628      	mov	r0, r5
    2638:	b002      	add	sp, #8
    263a:	bd70      	pop	{r4, r5, r6, pc}
    263c:	50015000 	.word	0x50015000
    2640:	000f0003 	.word	0x000f0003
    2644:	20000178 	.word	0x20000178
    2648:	e000e100 	.word	0xe000e100
    264c:	200008ec 	.word	0x200008ec
    2650:	000023e1 	.word	0x000023e1
    2654:	007fffff 	.word	0x007fffff

00002658 <rtc_nrf_isr>:
{
    2658:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    265c:	4b2e      	ldr	r3, [pc, #184]	; (2718 <rtc_nrf_isr+0xc0>)
    265e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    2662:	0790      	lsls	r0, r2, #30
    2664:	d50b      	bpl.n	267e <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2666:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    266a:	b142      	cbz	r2, 267e <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    266c:	2200      	movs	r2, #0
    266e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
    2672:	4a2a      	ldr	r2, [pc, #168]	; (271c <rtc_nrf_isr+0xc4>)
    2674:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    2678:	6813      	ldr	r3, [r2, #0]
    267a:	3301      	adds	r3, #1
    267c:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    267e:	4a26      	ldr	r2, [pc, #152]	; (2718 <rtc_nrf_isr+0xc0>)
    2680:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    2684:	03d9      	lsls	r1, r3, #15
    2686:	d527      	bpl.n	26d8 <rtc_nrf_isr+0x80>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2688:	4b25      	ldr	r3, [pc, #148]	; (2720 <rtc_nrf_isr+0xc8>)
    268a:	e8d3 1fef 	ldaex	r1, [r3]
    268e:	f021 0001 	bic.w	r0, r1, #1
    2692:	e8c3 0fe4 	stlex	r4, r0, [r3]
    2696:	2c00      	cmp	r4, #0
    2698:	d1f7      	bne.n	268a <rtc_nrf_isr+0x32>
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    269a:	07cb      	lsls	r3, r1, #31
    269c:	d402      	bmi.n	26a4 <rtc_nrf_isr+0x4c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    269e:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
    26a2:	b1cb      	cbz	r3, 26d8 <rtc_nrf_isr+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    26a4:	2500      	movs	r5, #0
    26a6:	4c1c      	ldr	r4, [pc, #112]	; (2718 <rtc_nrf_isr+0xc0>)
    26a8:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    26ac:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    26b0:	f7ff fee0 	bl	2474 <z_nrf_rtc_timer_read>
    26b4:	f04f 0320 	mov.w	r3, #32
    26b8:	f3ef 8211 	mrs	r2, BASEPRI
    26bc:	f383 8812 	msr	BASEPRI_MAX, r3
    26c0:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    26c4:	4b17      	ldr	r3, [pc, #92]	; (2724 <rtc_nrf_isr+0xcc>)
    26c6:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    26ca:	42b0      	cmp	r0, r6
    26cc:	41b9      	sbcs	r1, r7
    26ce:	d206      	bcs.n	26de <rtc_nrf_isr+0x86>
	__asm__ volatile(
    26d0:	f382 8811 	msr	BASEPRI, r2
    26d4:	f3bf 8f6f 	isb	sy
}
    26d8:	b003      	add	sp, #12
    26da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    26de:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    26e2:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    26e6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			cc_data[chan].callback = NULL;
    26ea:	601d      	str	r5, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    26ec:	e9c3 8902 	strd	r8, r9, [r3, #8]
    p_reg->EVTENCLR = mask;
    26f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    26f4:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    26f8:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    26fc:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    2700:	f382 8811 	msr	BASEPRI, r2
    2704:	f3bf 8f6f 	isb	sy
		if (handler) {
    2708:	2900      	cmp	r1, #0
    270a:	d0e5      	beq.n	26d8 <rtc_nrf_isr+0x80>
			handler(chan, expire_time, user_context);
    270c:	9000      	str	r0, [sp, #0]
    270e:	4632      	mov	r2, r6
    2710:	463b      	mov	r3, r7
    2712:	4628      	mov	r0, r5
    2714:	4788      	blx	r1
    2716:	e7df      	b.n	26d8 <rtc_nrf_isr+0x80>
    2718:	50015000 	.word	0x50015000
    271c:	200008f0 	.word	0x200008f0
    2720:	200008e8 	.word	0x200008e8
    2724:	20000178 	.word	0x20000178

00002728 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    2728:	1c43      	adds	r3, r0, #1
{
    272a:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    272c:	d021      	beq.n	2772 <sys_clock_set_timeout+0x4a>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    272e:	2801      	cmp	r0, #1
    2730:	dd21      	ble.n	2776 <sys_clock_set_timeout+0x4e>
    2732:	4a12      	ldr	r2, [pc, #72]	; (277c <sys_clock_set_timeout+0x54>)
    2734:	4b12      	ldr	r3, [pc, #72]	; (2780 <sys_clock_set_timeout+0x58>)
    2736:	4290      	cmp	r0, r2
    2738:	bfd4      	ite	le
    273a:	4604      	movle	r4, r0
    273c:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    273e:	f7ff fe99 	bl	2474 <z_nrf_rtc_timer_read>
    2742:	4b10      	ldr	r3, [pc, #64]	; (2784 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    2744:	490e      	ldr	r1, [pc, #56]	; (2780 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    2746:	e9d3 2300 	ldrd	r2, r3, [r3]
    274a:	1a80      	subs	r0, r0, r2
		cyc = 0;
    274c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2750:	bf28      	it	cs
    2752:	2400      	movcs	r4, #0
	cyc += unannounced;
    2754:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    2756:	428c      	cmp	r4, r1
    2758:	bf28      	it	cs
    275a:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    275c:	2000      	movs	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    275e:	490a      	ldr	r1, [pc, #40]	; (2788 <sys_clock_set_timeout+0x60>)
	uint64_t target_time = cyc + last_count;
    2760:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    2762:	9001      	str	r0, [sp, #4]
    2764:	9100      	str	r1, [sp, #0]
    2766:	f143 0300 	adc.w	r3, r3, #0
    276a:	f7ff fea5 	bl	24b8 <compare_set>
}
    276e:	b002      	add	sp, #8
    2770:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    2772:	4c03      	ldr	r4, [pc, #12]	; (2780 <sys_clock_set_timeout+0x58>)
    2774:	e7e3      	b.n	273e <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    2776:	2401      	movs	r4, #1
    2778:	e7e1      	b.n	273e <sys_clock_set_timeout+0x16>
    277a:	bf00      	nop
    277c:	007ffffe 	.word	0x007ffffe
    2780:	007fffff 	.word	0x007fffff
    2784:	20000188 	.word	0x20000188
    2788:	000023e1 	.word	0x000023e1

0000278c <sys_clock_elapsed>:
{
    278c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    278e:	f7ff fe71 	bl	2474 <z_nrf_rtc_timer_read>
    2792:	4b02      	ldr	r3, [pc, #8]	; (279c <sys_clock_elapsed+0x10>)
    2794:	681b      	ldr	r3, [r3, #0]
}
    2796:	1ac0      	subs	r0, r0, r3
    2798:	bd08      	pop	{r3, pc}
    279a:	bf00      	nop
    279c:	20000188 	.word	0x20000188

000027a0 <sys_clock_disable>:
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    27a0:	2301      	movs	r3, #1
{
    27a2:	b510      	push	{r4, lr}
    27a4:	4c07      	ldr	r4, [pc, #28]	; (27c4 <sys_clock_disable+0x24>)
	irq_disable(RTC_IRQn);
    27a6:	2015      	movs	r0, #21
    27a8:	6063      	str	r3, [r4, #4]
    27aa:	f7fe fe91 	bl	14d0 <arch_irq_disable>
    27ae:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->INTENCLR = mask;
    27b2:	4b05      	ldr	r3, [pc, #20]	; (27c8 <sys_clock_disable+0x28>)
    27b4:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    27b8:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    27bc:	4b03      	ldr	r3, [pc, #12]	; (27cc <sys_clock_disable+0x2c>)
    27be:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
    27c2:	bd10      	pop	{r4, pc}
    27c4:	50015000 	.word	0x50015000
    27c8:	000f0003 	.word	0x000f0003
    27cc:	e000e100 	.word	0xe000e100

000027d0 <nrf53_errata_42>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    27d0:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    27d4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    27d8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    27dc:	2a07      	cmp	r2, #7
    27de:	d105      	bne.n	27ec <nrf53_errata_42+0x1c>
                {
                    switch(var2)
    27e0:	3b02      	subs	r3, #2
    27e2:	2b03      	cmp	r3, #3
    27e4:	d802      	bhi.n	27ec <nrf53_errata_42+0x1c>
    27e6:	4a02      	ldr	r2, [pc, #8]	; (27f0 <nrf53_errata_42+0x20>)
    27e8:	5cd0      	ldrb	r0, [r2, r3]
    27ea:	4770      	bx	lr
                    {
                        case 0x02ul:
                            return true;
                        case 0x03ul:
                            return false;
    27ec:	2000      	movs	r0, #0
                }
            #endif
        #endif
        return false;
    #endif
}
    27ee:	4770      	bx	lr
    27f0:	0000580f 	.word	0x0000580f

000027f4 <SystemInit>:
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#endif
}

void SystemInit(void)
{
    27f4:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    27f6:	f7ff ffeb 	bl	27d0 <nrf53_errata_42>
    27fa:	b158      	cbz	r0, 2814 <SystemInit+0x20>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    27fc:	4b64      	ldr	r3, [pc, #400]	; (2990 <SystemInit+0x19c>)
    27fe:	f8d3 2a20 	ldr.w	r2, [r3, #2592]	; 0xa20
    2802:	b93a      	cbnz	r2, 2814 <SystemInit+0x20>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    2804:	210d      	movs	r1, #13
    2806:	f8c3 1a20 	str.w	r1, [r3, #2592]	; 0xa20
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    280a:	2101      	movs	r1, #1
    280c:	f8c3 191c 	str.w	r1, [r3, #2332]	; 0x91c
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    2810:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
{
    2814:	2200      	movs	r2, #0
    2816:	00d3      	lsls	r3, r2, #3
    2818:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    281c:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    2820:	3101      	adds	r1, #1
    2822:	d007      	beq.n	2834 <SystemInit+0x40>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    2824:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    2828:	3201      	adds	r2, #1
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    282a:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    282e:	2a20      	cmp	r2, #32
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    2830:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    2832:	d1f0      	bne.n	2816 <SystemInit+0x22>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    2834:	f7ff ffcc 	bl	27d0 <nrf53_errata_42>
    2838:	2800      	cmp	r0, #0
    283a:	f040 80a0 	bne.w	297e <SystemInit+0x18a>
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    283e:	f7ff ffc7 	bl	27d0 <nrf53_errata_42>
    2842:	b140      	cbz	r0, 2856 <SystemInit+0x62>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    2844:	4b53      	ldr	r3, [pc, #332]	; (2994 <SystemInit+0x1a0>)
    2846:	4a54      	ldr	r2, [pc, #336]	; (2998 <SystemInit+0x1a4>)
    2848:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    284c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2850:	2201      	movs	r2, #1
    2852:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2856:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    285a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    285e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    2862:	2a07      	cmp	r2, #7
    2864:	d109      	bne.n	287a <SystemInit+0x86>
                {
                    switch(var2)
    2866:	3b02      	subs	r3, #2
    2868:	2b03      	cmp	r3, #3
    286a:	d806      	bhi.n	287a <SystemInit+0x86>
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    286c:	4a4b      	ldr	r2, [pc, #300]	; (299c <SystemInit+0x1a8>)
    286e:	5cd3      	ldrb	r3, [r2, r3]
    2870:	b11b      	cbz	r3, 287a <SystemInit+0x86>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    2872:	2200      	movs	r2, #0
    2874:	4b4a      	ldr	r3, [pc, #296]	; (29a0 <SystemInit+0x1ac>)
    2876:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    287a:	f7ff ffa9 	bl	27d0 <nrf53_errata_42>
    287e:	b150      	cbz	r0, 2896 <SystemInit+0xa2>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    2880:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2884:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2888:	07d1      	lsls	r1, r2, #31
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    288a:	bf42      	ittt	mi
    288c:	2200      	movmi	r2, #0
    288e:	f8c3 2114 	strmi.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    2892:	f8c3 2118 	strmi.w	r2, [r3, #280]	; 0x118
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2896:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    289a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    289e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    28a2:	2a07      	cmp	r2, #7
    28a4:	d109      	bne.n	28ba <SystemInit+0xc6>

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    28a6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    28aa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    28ae:	07d2      	lsls	r2, r2, #31
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    28b0:	bf44      	itt	mi
    28b2:	f06f 0201 	mvnmi.w	r2, #1
    28b6:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    28ba:	f7ff ff89 	bl	27d0 <nrf53_errata_42>
    28be:	b118      	cbz	r0, 28c8 <SystemInit+0xd4>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    28c0:	2265      	movs	r2, #101	; 0x65
    28c2:	4b33      	ldr	r3, [pc, #204]	; (2990 <SystemInit+0x19c>)
    28c4:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    28c8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    28cc:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    28d0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                if (var1 == 0x07)
    28d4:	2a07      	cmp	r2, #7
    28d6:	d116      	bne.n	2906 <SystemInit+0x112>
        }

        if (nrf53_errata_140())
        {
            if (*(volatile uint32_t *)0x50032420 & 0x80000000)
    28d8:	4b31      	ldr	r3, [pc, #196]	; (29a0 <SystemInit+0x1ac>)
    28da:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
    28de:	2b00      	cmp	r3, #0
    28e0:	da11      	bge.n	2906 <SystemInit+0x112>
            {
                /* Reset occured during calibration */
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFSYNT;
    28e2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    28e6:	2203      	movs	r2, #3
    28e8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
                NRF_CLOCK_S->TASKS_LFCLKSTART = 1;
    28ec:	2201      	movs	r2, #1
    28ee:	609a      	str	r2, [r3, #8]
                while (NRF_CLOCK_S->EVENTS_LFCLKSTARTED == 0) {}
    28f0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    28f4:	2a00      	cmp	r2, #0
    28f6:	d0fb      	beq.n	28f0 <SystemInit+0xfc>
                NRF_CLOCK_S->EVENTS_LFCLKSTARTED = 0;
    28f8:	2200      	movs	r2, #0
    28fa:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                NRF_CLOCK_S->TASKS_LFCLKSTOP = 1;
    28fe:	2201      	movs	r2, #1
    2900:	60da      	str	r2, [r3, #12]
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFRC;
    2902:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2906:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    290a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    290e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    2912:	2a07      	cmp	r2, #7
    2914:	d123      	bne.n	295e <SystemInit+0x16a>
                {
                    switch(var2)
    2916:	3b02      	subs	r3, #2
    2918:	2b03      	cmp	r3, #3
    291a:	d802      	bhi.n	2922 <SystemInit+0x12e>
            }
        }

        if (nrf53_errata_160())
    291c:	4a21      	ldr	r2, [pc, #132]	; (29a4 <SystemInit+0x1b0>)
    291e:	5cd3      	ldrb	r3, [r2, r3]
    2920:	b1eb      	cbz	r3, 295e <SystemInit+0x16a>
        {
            *((volatile uint32_t *)0x5000470C) = 0x7Eul;
    2922:	227e      	movs	r2, #126	; 0x7e
    2924:	4b1a      	ldr	r3, [pc, #104]	; (2990 <SystemInit+0x19c>)
            *((volatile uint32_t *)0x5000493C) = 0x7Eul;
            *((volatile uint32_t *)0x50002118) = 0x7Ful;
            *((volatile uint32_t *)0x50039E04) = 0x0ul;
    2926:	491b      	ldr	r1, [pc, #108]	; (2994 <SystemInit+0x1a0>)
            *((volatile uint32_t *)0x5000470C) = 0x7Eul;
    2928:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000493C) = 0x7Eul;
    292c:	f8c3 293c 	str.w	r2, [r3, #2364]	; 0x93c
            *((volatile uint32_t *)0x50002118) = 0x7Ful;
    2930:	237f      	movs	r3, #127	; 0x7f
    2932:	4a1d      	ldr	r2, [pc, #116]	; (29a8 <SystemInit+0x1b4>)
    2934:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
            *((volatile uint32_t *)0x50039E04) = 0x0ul;
    2938:	2300      	movs	r3, #0
    293a:	f8c1 3e04 	str.w	r3, [r1, #3588]	; 0xe04
            *((volatile uint32_t *)0x50039E08) = 0x0ul;
    293e:	f8c1 3e08 	str.w	r3, [r1, #3592]	; 0xe08
            *((volatile uint32_t *)0x50101110) = 0x0ul;
    2942:	f501 2148 	add.w	r1, r1, #819200	; 0xc8000
    2946:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110
            *((volatile uint32_t *)0x50002124) = 0x0ul;
    294a:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
            *((volatile uint32_t *)0x5000212C) = 0x0ul;
    294e:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
            *((volatile uint32_t *)0x502012A0) = 0x0ul;
    2952:	f502 12ff 	add.w	r2, r2, #2088960	; 0x1fe000
    2956:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    295a:	f8c2 32a0 	str.w	r3, [r2, #672]	; 0x2a0

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    295e:	4a13      	ldr	r2, [pc, #76]	; (29ac <SystemInit+0x1b8>)
    2960:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    2964:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    2968:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    296c:	4a10      	ldr	r2, [pc, #64]	; (29b0 <SystemInit+0x1bc>)
    296e:	4b11      	ldr	r3, [pc, #68]	; (29b4 <SystemInit+0x1c0>)
    2970:	6811      	ldr	r1, [r2, #0]
    2972:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    2976:	69d2      	ldr	r2, [r2, #28]
    2978:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif
}
    297c:	bd08      	pop	{r3, pc}
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    297e:	2229      	movs	r2, #41	; 0x29
    2980:	4b03      	ldr	r3, [pc, #12]	; (2990 <SystemInit+0x19c>)
    2982:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    2986:	2203      	movs	r2, #3
    2988:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
    298c:	e757      	b.n	283e <SystemInit+0x4a>
    298e:	bf00      	nop
    2990:	50004000 	.word	0x50004000
    2994:	50039000 	.word	0x50039000
    2998:	beef0044 	.word	0xbeef0044
    299c:	0000580b 	.word	0x0000580b
    29a0:	50032000 	.word	0x50032000
    29a4:	00005807 	.word	0x00005807
    29a8:	50002000 	.word	0x50002000
    29ac:	e000ed00 	.word	0xe000ed00
    29b0:	00ff8000 	.word	0x00ff8000
    29b4:	50006000 	.word	0x50006000

000029b8 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    29b8:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    29ba:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    29bc:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    29be:	fab2 f382 	clz	r3, r2
    29c2:	f1c3 031f 	rsb	r3, r3, #31
    29c6:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    29c8:	fa05 f403 	lsl.w	r4, r5, r3
    29cc:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    29d0:	e8d0 6fef 	ldaex	r6, [r0]
    29d4:	4296      	cmp	r6, r2
    29d6:	d104      	bne.n	29e2 <nrfx_flag32_alloc+0x2a>
    29d8:	e8c0 4fec 	stlex	ip, r4, [r0]
    29dc:	f1bc 0f00 	cmp.w	ip, #0
    29e0:	d1f6      	bne.n	29d0 <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    29e2:	d1eb      	bne.n	29bc <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    29e4:	4801      	ldr	r0, [pc, #4]	; (29ec <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
    29e6:	700b      	strb	r3, [r1, #0]
}
    29e8:	bd70      	pop	{r4, r5, r6, pc}
    29ea:	bf00      	nop
    29ec:	0bad0000 	.word	0x0bad0000

000029f0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    29f0:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    29f2:	6803      	ldr	r3, [r0, #0]
    29f4:	40cb      	lsrs	r3, r1
    29f6:	07db      	lsls	r3, r3, #31
    29f8:	d410      	bmi.n	2a1c <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    29fa:	2301      	movs	r3, #1
    29fc:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    29fe:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    2a00:	ea43 0102 	orr.w	r1, r3, r2
    2a04:	e8d0 4fef 	ldaex	r4, [r0]
    2a08:	4294      	cmp	r4, r2
    2a0a:	d104      	bne.n	2a16 <nrfx_flag32_free+0x26>
    2a0c:	e8c0 1fec 	stlex	ip, r1, [r0]
    2a10:	f1bc 0f00 	cmp.w	ip, #0
    2a14:	d1f6      	bne.n	2a04 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2a16:	d1f2      	bne.n	29fe <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    2a18:	4801      	ldr	r0, [pc, #4]	; (2a20 <nrfx_flag32_free+0x30>)
}
    2a1a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    2a1c:	4801      	ldr	r0, [pc, #4]	; (2a24 <nrfx_flag32_free+0x34>)
    2a1e:	e7fc      	b.n	2a1a <nrfx_flag32_free+0x2a>
    2a20:	0bad0000 	.word	0x0bad0000
    2a24:	0bad0004 	.word	0x0bad0004

00002a28 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    2a28:	4b04      	ldr	r3, [pc, #16]	; (2a3c <nrfx_clock_init+0x14>)
    2a2a:	791a      	ldrb	r2, [r3, #4]
    2a2c:	b922      	cbnz	r2, 2a38 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    2a2e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    2a30:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    2a32:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    2a34:	4802      	ldr	r0, [pc, #8]	; (2a40 <nrfx_clock_init+0x18>)
    2a36:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    2a38:	4802      	ldr	r0, [pc, #8]	; (2a44 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    2a3a:	4770      	bx	lr
    2a3c:	200008f4 	.word	0x200008f4
    2a40:	0bad0000 	.word	0x0bad0000
    2a44:	0bad000c 	.word	0x0bad000c

00002a48 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2a48:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    2a4c:	b510      	push	{r4, lr}
    2a4e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    2a52:	b152      	cbz	r2, 2a6a <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2a54:	2000      	movs	r0, #0
    2a56:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    2a5a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    2a5e:	2201      	movs	r2, #1
    2a60:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    2a64:	4b23      	ldr	r3, [pc, #140]	; (2af4 <nrfx_power_clock_irq_handler+0xac>)
    2a66:	681b      	ldr	r3, [r3, #0]
    2a68:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2a6a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2a6e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    2a72:	b18a      	cbz	r2, 2a98 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2a74:	2200      	movs	r2, #0
    2a76:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    2a7a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2a7e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2a82:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    2a86:	f002 0203 	and.w	r2, r2, #3
    2a8a:	2a01      	cmp	r2, #1
    2a8c:	f04f 0102 	mov.w	r1, #2
    2a90:	d128      	bne.n	2ae4 <nrfx_power_clock_irq_handler+0x9c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    2a92:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2a96:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2a98:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2a9c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    2aa0:	b162      	cbz	r2, 2abc <nrfx_power_clock_irq_handler+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2aa2:	2200      	movs	r2, #0
    2aa4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    2aa8:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
    2aac:	f44f 7280 	mov.w	r2, #256	; 0x100
    2ab0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    2ab4:	4b0f      	ldr	r3, [pc, #60]	; (2af4 <nrfx_power_clock_irq_handler+0xac>)
    2ab6:	2004      	movs	r0, #4
    2ab8:	681b      	ldr	r3, [r3, #0]
    2aba:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2abc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2ac0:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    2ac4:	b1aa      	cbz	r2, 2af2 <nrfx_power_clock_irq_handler+0xaa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2ac6:	2200      	movs	r2, #0
    2ac8:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    2acc:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
    2ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
    2ad4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    2ad8:	4b06      	ldr	r3, [pc, #24]	; (2af4 <nrfx_power_clock_irq_handler+0xac>)
    2ada:	2005      	movs	r0, #5
    }
#endif
}
    2adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    2ae0:	681b      	ldr	r3, [r3, #0]
    2ae2:	4718      	bx	r3
    2ae4:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2ae8:	4b02      	ldr	r3, [pc, #8]	; (2af4 <nrfx_power_clock_irq_handler+0xac>)
    2aea:	2001      	movs	r0, #1
    2aec:	681b      	ldr	r3, [r3, #0]
    2aee:	4798      	blx	r3
    2af0:	e7d2      	b.n	2a98 <nrfx_power_clock_irq_handler+0x50>
}
    2af2:	bd10      	pop	{r4, pc}
    2af4:	200008f4 	.word	0x200008f4

00002af8 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    2af8:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    2afa:	f003 021f 	and.w	r2, r3, #31
    2afe:	6002      	str	r2, [r0, #0]
}
    2b00:	4a03      	ldr	r2, [pc, #12]	; (2b10 <nrf_gpio_pin_port_decode+0x18>)
    2b02:	4804      	ldr	r0, [pc, #16]	; (2b14 <nrf_gpio_pin_port_decode+0x1c>)
    return pin_number >> 5;
    2b04:	095b      	lsrs	r3, r3, #5
}
    2b06:	2b01      	cmp	r3, #1
    2b08:	bf18      	it	ne
    2b0a:	4610      	movne	r0, r2
    2b0c:	4770      	bx	lr
    2b0e:	bf00      	nop
    2b10:	50842500 	.word	0x50842500
    2b14:	50842800 	.word	0x50842800

00002b18 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    2b18:	4b03      	ldr	r3, [pc, #12]	; (2b28 <pin_in_use_by_te+0x10>)
    2b1a:	3008      	adds	r0, #8
    2b1c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    2b20:	f3c0 1040 	ubfx	r0, r0, #5, #1
    2b24:	4770      	bx	lr
    2b26:	bf00      	nop
    2b28:	20000038 	.word	0x20000038

00002b2c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    2b2c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2b2e:	4c0d      	ldr	r4, [pc, #52]	; (2b64 <call_handler+0x38>)
    2b30:	f100 0308 	add.w	r3, r0, #8
    2b34:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
    2b38:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2b3a:	05da      	lsls	r2, r3, #23
{
    2b3c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2b3e:	d507      	bpl.n	2b50 <call_handler+0x24>
    2b40:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    2b44:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    2b48:	6852      	ldr	r2, [r2, #4]
    2b4a:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    2b4e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    2b50:	68a3      	ldr	r3, [r4, #8]
    2b52:	b12b      	cbz	r3, 2b60 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    2b54:	4631      	mov	r1, r6
    2b56:	4628      	mov	r0, r5
    2b58:	68e2      	ldr	r2, [r4, #12]
    }
}
    2b5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    2b5e:	4718      	bx	r3
}
    2b60:	bd70      	pop	{r4, r5, r6, pc}
    2b62:	bf00      	nop
    2b64:	20000038 	.word	0x20000038

00002b68 <release_handler>:
{
    2b68:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2b6a:	4a12      	ldr	r2, [pc, #72]	; (2bb4 <release_handler+0x4c>)
    2b6c:	3008      	adds	r0, #8
    2b6e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    2b72:	05d9      	lsls	r1, r3, #23
    2b74:	d51b      	bpl.n	2bae <release_handler+0x46>
    2b76:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    2b7a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    2b7e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    2b82:	2000      	movs	r0, #0
    2b84:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    2b88:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    2b8c:	f413 7f80 	tst.w	r3, #256	; 0x100
    2b90:	d003      	beq.n	2b9a <release_handler+0x32>
    2b92:	f3c3 2343 	ubfx	r3, r3, #9, #4
    2b96:	4299      	cmp	r1, r3
    2b98:	d009      	beq.n	2bae <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    2b9a:	3001      	adds	r0, #1
    2b9c:	2830      	cmp	r0, #48	; 0x30
    2b9e:	d1f3      	bne.n	2b88 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    2ba0:	2300      	movs	r3, #0
    2ba2:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    2ba6:	4804      	ldr	r0, [pc, #16]	; (2bb8 <release_handler+0x50>)
}
    2ba8:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    2baa:	f7ff bf21 	b.w	29f0 <nrfx_flag32_free>
}
    2bae:	bc10      	pop	{r4}
    2bb0:	4770      	bx	lr
    2bb2:	bf00      	nop
    2bb4:	20000038 	.word	0x20000038
    2bb8:	200000ac 	.word	0x200000ac

00002bbc <pin_handler_trigger_uninit>:
{
    2bbc:	b538      	push	{r3, r4, r5, lr}
    2bbe:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    2bc0:	f7ff ffaa 	bl	2b18 <pin_in_use_by_te>
    2bc4:	4c0b      	ldr	r4, [pc, #44]	; (2bf4 <pin_handler_trigger_uninit+0x38>)
    2bc6:	f102 0508 	add.w	r5, r2, #8
    2bca:	b160      	cbz	r0, 2be6 <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    2bcc:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2bce:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    2bd2:	0b5b      	lsrs	r3, r3, #13
    2bd4:	009b      	lsls	r3, r3, #2
    2bd6:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    2bda:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    2bde:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
    2be2:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
    2be6:	4610      	mov	r0, r2
    2be8:	f7ff ffbe 	bl	2b68 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    2bec:	2300      	movs	r3, #0
    2bee:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    2bf2:	bd38      	pop	{r3, r4, r5, pc}
    2bf4:	20000038 	.word	0x20000038

00002bf8 <nrfx_gpiote_input_configure>:
{
    2bf8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    2bfc:	4604      	mov	r4, r0
    2bfe:	4690      	mov	r8, r2
    2c00:	461d      	mov	r5, r3
    if (p_input_config)
    2c02:	b301      	cbz	r1, 2c46 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2c04:	4e4f      	ldr	r6, [pc, #316]	; (2d44 <nrfx_gpiote_input_configure+0x14c>)
    2c06:	f100 0708 	add.w	r7, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    2c0a:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    2c0e:	079b      	lsls	r3, r3, #30
    2c10:	d502      	bpl.n	2c18 <nrfx_gpiote_input_configure+0x20>
    2c12:	f7ff ff81 	bl	2b18 <pin_in_use_by_te>
    2c16:	bb28      	cbnz	r0, 2c64 <nrfx_gpiote_input_configure+0x6c>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    2c18:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    2c1a:	4620      	mov	r0, r4
    2c1c:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    2c20:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    2c24:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    2c28:	f10d 020f 	add.w	r2, sp, #15
    2c2c:	460b      	mov	r3, r1
    2c2e:	f10d 010e 	add.w	r1, sp, #14
    2c32:	f002 f851 	bl	4cd8 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    2c36:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    2c3a:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    2c3e:	f043 0301 	orr.w	r3, r3, #1
    2c42:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_trigger_config)
    2c46:	f1b8 0f00 	cmp.w	r8, #0
    2c4a:	d02d      	beq.n	2ca8 <nrfx_gpiote_input_configure+0xb0>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2c4c:	4e3d      	ldr	r6, [pc, #244]	; (2d44 <nrfx_gpiote_input_configure+0x14c>)
    2c4e:	f104 0708 	add.w	r7, r4, #8
    2c52:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    2c56:	f898 0000 	ldrb.w	r0, [r8]
        if (pin_is_output(pin))
    2c5a:	078a      	lsls	r2, r1, #30
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    2c5c:	f8d8 3004 	ldr.w	r3, [r8, #4]
        if (pin_is_output(pin))
    2c60:	d502      	bpl.n	2c68 <nrfx_gpiote_input_configure+0x70>
            if (use_evt)
    2c62:	b1cb      	cbz	r3, 2c98 <nrfx_gpiote_input_configure+0xa0>
            return NRFX_ERROR_INVALID_PARAM;
    2c64:	4838      	ldr	r0, [pc, #224]	; (2d48 <nrfx_gpiote_input_configure+0x150>)
    2c66:	e021      	b.n	2cac <nrfx_gpiote_input_configure+0xb4>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    2c68:	f021 0120 	bic.w	r1, r1, #32
    2c6c:	04c9      	lsls	r1, r1, #19
    2c6e:	0cc9      	lsrs	r1, r1, #19
    2c70:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
    2c74:	b183      	cbz	r3, 2c98 <nrfx_gpiote_input_configure+0xa0>
                if (!edge)
    2c76:	2803      	cmp	r0, #3
    2c78:	d8f4      	bhi.n	2c64 <nrfx_gpiote_input_configure+0x6c>
                uint8_t ch = *p_trigger_config->p_in_channel;
    2c7a:	f8d8 3004 	ldr.w	r3, [r8, #4]
    2c7e:	f893 c000 	ldrb.w	ip, [r3]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    2c82:	4662      	mov	r2, ip
    2c84:	0092      	lsls	r2, r2, #2
    2c86:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    2c8a:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    2c8e:	b980      	cbnz	r0, 2cb2 <nrfx_gpiote_input_configure+0xba>
    p_reg->CONFIG[idx] = 0;
    2c90:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
    2c94:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    2c98:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    2c9c:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    2ca0:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
    2ca4:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
    2ca8:	bb1d      	cbnz	r5, 2cf2 <nrfx_gpiote_input_configure+0xfa>
        err = NRFX_SUCCESS;
    2caa:	4828      	ldr	r0, [pc, #160]	; (2d4c <nrfx_gpiote_input_configure+0x154>)
}
    2cac:	b004      	add	sp, #16
    2cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    2cb2:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    2cb6:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    2cba:	f023 0303 	bic.w	r3, r3, #3
    2cbe:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    2cc2:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    2cc6:	f041 0120 	orr.w	r1, r1, #32
    2cca:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
    2cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    2cd2:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2cd6:	0223      	lsls	r3, r4, #8
    2cd8:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    2cdc:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    2ce0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    2ce4:	ea43 030e 	orr.w	r3, r3, lr
    2ce8:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    2cec:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
    2cf0:	e7d2      	b.n	2c98 <nrfx_gpiote_input_configure+0xa0>
    release_handler(pin);
    2cf2:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    2cf4:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    2cf8:	f7ff ff36 	bl	2b68 <release_handler>
    if (!handler)
    2cfc:	2e00      	cmp	r6, #0
    2cfe:	d0d4      	beq.n	2caa <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    2d00:	4d10      	ldr	r5, [pc, #64]	; (2d44 <nrfx_gpiote_input_configure+0x14c>)
    2d02:	e9d5 2300 	ldrd	r2, r3, [r5]
    2d06:	4296      	cmp	r6, r2
    2d08:	d101      	bne.n	2d0e <nrfx_gpiote_input_configure+0x116>
    2d0a:	429f      	cmp	r7, r3
    2d0c:	d018      	beq.n	2d40 <nrfx_gpiote_input_configure+0x148>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    2d0e:	4810      	ldr	r0, [pc, #64]	; (2d50 <nrfx_gpiote_input_configure+0x158>)
    2d10:	f10d 010f 	add.w	r1, sp, #15
    2d14:	f7ff fe50 	bl	29b8 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    2d18:	4b0c      	ldr	r3, [pc, #48]	; (2d4c <nrfx_gpiote_input_configure+0x154>)
    2d1a:	4298      	cmp	r0, r3
    2d1c:	d1c6      	bne.n	2cac <nrfx_gpiote_input_configure+0xb4>
        handler_id = (int32_t)id;
    2d1e:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
    2d22:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    2d26:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    2d28:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    2d2a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
    2d2e:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    2d32:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    2d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2d3a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    2d3e:	e7b4      	b.n	2caa <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    2d40:	2200      	movs	r2, #0
    2d42:	e7ee      	b.n	2d22 <nrfx_gpiote_input_configure+0x12a>
    2d44:	20000038 	.word	0x20000038
    2d48:	0bad0004 	.word	0x0bad0004
    2d4c:	0bad0000 	.word	0x0bad0000
    2d50:	200000ac 	.word	0x200000ac

00002d54 <nrfx_gpiote_output_configure>:
{
    2d54:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d56:	4604      	mov	r4, r0
    2d58:	4615      	mov	r5, r2
    2d5a:	b085      	sub	sp, #20
    if (p_config)
    2d5c:	b319      	cbz	r1, 2da6 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2d5e:	4e34      	ldr	r6, [pc, #208]	; (2e30 <nrfx_gpiote_output_configure+0xdc>)
    2d60:	f100 0708 	add.w	r7, r0, #8
    2d64:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    2d68:	0793      	lsls	r3, r2, #30
    2d6a:	d403      	bmi.n	2d74 <nrfx_gpiote_output_configure+0x20>
    2d6c:	f7ff fed4 	bl	2b18 <pin_in_use_by_te>
    2d70:	2800      	cmp	r0, #0
    2d72:	d15a      	bne.n	2e2a <nrfx_gpiote_output_configure+0xd6>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    2d74:	f012 0f1c 	tst.w	r2, #28
    2d78:	d002      	beq.n	2d80 <nrfx_gpiote_output_configure+0x2c>
    2d7a:	784b      	ldrb	r3, [r1, #1]
    2d7c:	2b01      	cmp	r3, #1
    2d7e:	d054      	beq.n	2e2a <nrfx_gpiote_output_configure+0xd6>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2d80:	2301      	movs	r3, #1
    2d82:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    2d86:	2300      	movs	r3, #0
    2d88:	1c4a      	adds	r2, r1, #1
    2d8a:	e9cd 1300 	strd	r1, r3, [sp]
    2d8e:	4620      	mov	r0, r4
    2d90:	1c8b      	adds	r3, r1, #2
    2d92:	f10d 010f 	add.w	r1, sp, #15
    2d96:	f001 ff9f 	bl	4cd8 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    2d9a:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    2d9e:	f043 0303 	orr.w	r3, r3, #3
    2da2:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    2da6:	b915      	cbnz	r5, 2dae <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    2da8:	4822      	ldr	r0, [pc, #136]	; (2e34 <nrfx_gpiote_output_configure+0xe0>)
}
    2daa:	b005      	add	sp, #20
    2dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2dae:	4e20      	ldr	r6, [pc, #128]	; (2e30 <nrfx_gpiote_output_configure+0xdc>)
    2db0:	f104 0708 	add.w	r7, r4, #8
    2db4:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    2db8:	0783      	lsls	r3, r0, #30
    2dba:	d536      	bpl.n	2e2a <nrfx_gpiote_output_configure+0xd6>
        uint32_t ch = p_task_config->task_ch;
    2dbc:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    2dc0:	2300      	movs	r3, #0
    2dc2:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    2dc4:	f020 0020 	bic.w	r0, r0, #32
    2dc8:	0089      	lsls	r1, r1, #2
    2dca:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    2dce:	04c0      	lsls	r0, r0, #19
    2dd0:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
    2dd4:	0cc0      	lsrs	r0, r0, #19
    2dd6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    2dda:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    2dde:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    2de2:	786a      	ldrb	r2, [r5, #1]
    2de4:	2a00      	cmp	r2, #0
    2de6:	d0df      	beq.n	2da8 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    2de8:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    2dec:	78ad      	ldrb	r5, [r5, #2]
    2dee:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    2df2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    2df6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2dfa:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    2dfe:	0223      	lsls	r3, r4, #8
    2e00:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    2e04:	0412      	lsls	r2, r2, #16
    2e06:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2e0a:	ea43 030e 	orr.w	r3, r3, lr
    2e0e:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    2e10:	052a      	lsls	r2, r5, #20
    2e12:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    2e16:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2e1a:	4313      	orrs	r3, r2
    2e1c:	f040 0020 	orr.w	r0, r0, #32
    2e20:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    2e24:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    2e28:	e7be      	b.n	2da8 <nrfx_gpiote_output_configure+0x54>
{
    2e2a:	4803      	ldr	r0, [pc, #12]	; (2e38 <nrfx_gpiote_output_configure+0xe4>)
    2e2c:	e7bd      	b.n	2daa <nrfx_gpiote_output_configure+0x56>
    2e2e:	bf00      	nop
    2e30:	20000038 	.word	0x20000038
    2e34:	0bad0000 	.word	0x0bad0000
    2e38:	0bad0004 	.word	0x0bad0004

00002e3c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    2e3c:	4b01      	ldr	r3, [pc, #4]	; (2e44 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    2e3e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    2e42:	4770      	bx	lr
    2e44:	20000038 	.word	0x20000038

00002e48 <nrfx_gpiote_channel_get>:
{
    2e48:	b508      	push	{r3, lr}
    2e4a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    2e4c:	f7ff fe64 	bl	2b18 <pin_in_use_by_te>
    2e50:	b138      	cbz	r0, 2e62 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2e52:	4b05      	ldr	r3, [pc, #20]	; (2e68 <nrfx_gpiote_channel_get+0x20>)
    2e54:	3208      	adds	r2, #8
    2e56:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
    2e5a:	4804      	ldr	r0, [pc, #16]	; (2e6c <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2e5c:	0b5b      	lsrs	r3, r3, #13
    2e5e:	700b      	strb	r3, [r1, #0]
}
    2e60:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    2e62:	4803      	ldr	r0, [pc, #12]	; (2e70 <nrfx_gpiote_channel_get+0x28>)
    2e64:	e7fc      	b.n	2e60 <nrfx_gpiote_channel_get+0x18>
    2e66:	bf00      	nop
    2e68:	20000038 	.word	0x20000038
    2e6c:	0bad0000 	.word	0x0bad0000
    2e70:	0bad0004 	.word	0x0bad0004

00002e74 <nrfx_gpiote_init>:
{
    2e74:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    2e76:	4c0f      	ldr	r4, [pc, #60]	; (2eb4 <nrfx_gpiote_init+0x40>)
    2e78:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    2e7c:	b9bd      	cbnz	r5, 2eae <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    2e7e:	2260      	movs	r2, #96	; 0x60
    2e80:	4629      	mov	r1, r5
    2e82:	f104 0010 	add.w	r0, r4, #16
    2e86:	f001 fcd8 	bl	483a <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    2e8a:	200d      	movs	r0, #13
    2e8c:	f7fe fb12 	bl	14b4 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2e90:	4b09      	ldr	r3, [pc, #36]	; (2eb8 <nrfx_gpiote_init+0x44>)
    return err_code;
    2e92:	480a      	ldr	r0, [pc, #40]	; (2ebc <nrfx_gpiote_init+0x48>)
    2e94:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    2e98:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    2e9c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    2ea0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    2ea4:	2301      	movs	r3, #1
    2ea6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    2eaa:	6763      	str	r3, [r4, #116]	; 0x74
}
    2eac:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    2eae:	4804      	ldr	r0, [pc, #16]	; (2ec0 <nrfx_gpiote_init+0x4c>)
    2eb0:	e7fc      	b.n	2eac <nrfx_gpiote_init+0x38>
    2eb2:	bf00      	nop
    2eb4:	20000038 	.word	0x20000038
    2eb8:	5000d000 	.word	0x5000d000
    2ebc:	0bad0000 	.word	0x0bad0000
    2ec0:	0bad0005 	.word	0x0bad0005

00002ec4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    2ec4:	4b03      	ldr	r3, [pc, #12]	; (2ed4 <nrfx_gpiote_is_init+0x10>)
    2ec6:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    2eca:	3800      	subs	r0, #0
    2ecc:	bf18      	it	ne
    2ece:	2001      	movne	r0, #1
    2ed0:	4770      	bx	lr
    2ed2:	bf00      	nop
    2ed4:	20000038 	.word	0x20000038

00002ed8 <nrfx_gpiote_channel_free>:
{
    2ed8:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    2eda:	4801      	ldr	r0, [pc, #4]	; (2ee0 <nrfx_gpiote_channel_free+0x8>)
    2edc:	f7ff bd88 	b.w	29f0 <nrfx_flag32_free>
    2ee0:	200000a8 	.word	0x200000a8

00002ee4 <nrfx_gpiote_channel_alloc>:
{
    2ee4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    2ee6:	4801      	ldr	r0, [pc, #4]	; (2eec <nrfx_gpiote_channel_alloc+0x8>)
    2ee8:	f7ff bd66 	b.w	29b8 <nrfx_flag32_alloc>
    2eec:	200000a8 	.word	0x200000a8

00002ef0 <nrfx_gpiote_trigger_enable>:
{
    2ef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2ef2:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    2ef4:	f7ff fe10 	bl	2b18 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2ef8:	4b1e      	ldr	r3, [pc, #120]	; (2f74 <nrfx_gpiote_trigger_enable+0x84>)
    2efa:	f104 0208 	add.w	r2, r4, #8
    2efe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    2f02:	b1e8      	cbz	r0, 2f40 <nrfx_gpiote_trigger_enable+0x50>
    2f04:	f013 0502 	ands.w	r5, r3, #2
    2f08:	d11a      	bne.n	2f40 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2f0a:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    2f0c:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    2f0e:	f102 40a0 	add.w	r0, r2, #1342177280	; 0x50000000
    2f12:	f500 4051 	add.w	r0, r0, #53504	; 0xd100
    2f16:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2f1a:	6005      	str	r5, [r0, #0]
    2f1c:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    2f20:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    2f22:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    2f26:	f040 0001 	orr.w	r0, r0, #1
    2f2a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    2f2e:	b129      	cbz	r1, 2f3c <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    2f30:	2201      	movs	r2, #1
    2f32:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    2f36:	4a10      	ldr	r2, [pc, #64]	; (2f78 <nrfx_gpiote_trigger_enable+0x88>)
    2f38:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    2f3c:	b003      	add	sp, #12
    2f3e:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    2f40:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    2f44:	2b04      	cmp	r3, #4
    2f46:	d011      	beq.n	2f6c <nrfx_gpiote_trigger_enable+0x7c>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    2f48:	2b05      	cmp	r3, #5
    2f4a:	d011      	beq.n	2f70 <nrfx_gpiote_trigger_enable+0x80>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2f4c:	a801      	add	r0, sp, #4
    2f4e:	9401      	str	r4, [sp, #4]
    2f50:	f7ff fdd2 	bl	2af8 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    2f54:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    2f56:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    2f58:	40d9      	lsrs	r1, r3
    2f5a:	f001 0101 	and.w	r1, r1, #1
    2f5e:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    2f60:	4620      	mov	r0, r4
}
    2f62:	b003      	add	sp, #12
    2f64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    2f68:	f001 beff 	b.w	4d6a <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    2f6c:	2103      	movs	r1, #3
    2f6e:	e7f7      	b.n	2f60 <nrfx_gpiote_trigger_enable+0x70>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    2f70:	2102      	movs	r1, #2
    2f72:	e7f5      	b.n	2f60 <nrfx_gpiote_trigger_enable+0x70>
    2f74:	20000038 	.word	0x20000038
    2f78:	5000d000 	.word	0x5000d000

00002f7c <nrfx_gpiote_trigger_disable>:
{
    2f7c:	b508      	push	{r3, lr}
    2f7e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    2f80:	f7ff fdca 	bl	2b18 <pin_in_use_by_te>
    2f84:	b1c0      	cbz	r0, 2fb8 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2f86:	4b0f      	ldr	r3, [pc, #60]	; (2fc4 <nrfx_gpiote_trigger_disable+0x48>)
    2f88:	f102 0108 	add.w	r1, r2, #8
    2f8c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    2f90:	0799      	lsls	r1, r3, #30
    2f92:	d411      	bmi.n	2fb8 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    2f94:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2f96:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    2f98:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    2f9a:	490b      	ldr	r1, [pc, #44]	; (2fc8 <nrfx_gpiote_trigger_disable+0x4c>)
    2f9c:	009b      	lsls	r3, r3, #2
    2f9e:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    2fa2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    2fa6:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    2faa:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    2fae:	f022 0203 	bic.w	r2, r2, #3
    2fb2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    2fb6:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    2fb8:	2100      	movs	r1, #0
}
    2fba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    2fbe:	4610      	mov	r0, r2
    2fc0:	f001 bed3 	b.w	4d6a <nrf_gpio_cfg_sense_set>
    2fc4:	20000038 	.word	0x20000038
    2fc8:	5000d000 	.word	0x5000d000

00002fcc <nrfx_gpiote_pin_uninit>:
{
    2fcc:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    2fce:	4b10      	ldr	r3, [pc, #64]	; (3010 <nrfx_gpiote_pin_uninit+0x44>)
    2fd0:	f100 0208 	add.w	r2, r0, #8
    2fd4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
    2fd8:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    2fda:	07db      	lsls	r3, r3, #31
    2fdc:	d516      	bpl.n	300c <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
    2fde:	f7ff ffcd 	bl	2f7c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    2fe2:	4620      	mov	r0, r4
    2fe4:	f7ff fdea 	bl	2bbc <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2fe8:	a801      	add	r0, sp, #4
    2fea:	9401      	str	r4, [sp, #4]
    2fec:	f7ff fd84 	bl	2af8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    2ff0:	9b01      	ldr	r3, [sp, #4]
    2ff2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    2ff6:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    2ffa:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    2ffe:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    3002:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
    3006:	4803      	ldr	r0, [pc, #12]	; (3014 <nrfx_gpiote_pin_uninit+0x48>)
}
    3008:	b002      	add	sp, #8
    300a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    300c:	4802      	ldr	r0, [pc, #8]	; (3018 <nrfx_gpiote_pin_uninit+0x4c>)
    300e:	e7fb      	b.n	3008 <nrfx_gpiote_pin_uninit+0x3c>
    3010:	20000038 	.word	0x20000038
    3014:	0bad0000 	.word	0x0bad0000
    3018:	0bad0004 	.word	0x0bad0004

0000301c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    301c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
    3020:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    3022:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3024:	4634      	mov	r4, r6
{
    3026:	4b63      	ldr	r3, [pc, #396]	; (31b4 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
    3028:	4863      	ldr	r0, [pc, #396]	; (31b8 <nrfx_gpiote_irq_handler+0x19c>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    302a:	4964      	ldr	r1, [pc, #400]	; (31bc <nrfx_gpiote_irq_handler+0x1a0>)
{
    302c:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    302e:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    3030:	b135      	cbz	r5, 3040 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    3032:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    3036:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3038:	bf1e      	ittt	ne
    303a:	601c      	strne	r4, [r3, #0]
    303c:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    303e:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3040:	3304      	adds	r3, #4
    3042:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    3044:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3048:	d1f1      	bne.n	302e <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    304a:	f8df a16c 	ldr.w	sl, [pc, #364]	; 31b8 <nrfx_gpiote_irq_handler+0x19c>
    304e:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    3052:	2b00      	cmp	r3, #0
    3054:	f000 8091 	beq.w	317a <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
    3058:	f8df 8164 	ldr.w	r8, [pc, #356]	; 31c0 <nrfx_gpiote_irq_handler+0x1a4>
    305c:	f8d8 3020 	ldr.w	r3, [r8, #32]
    3060:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    3062:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
    3066:	4b57      	ldr	r3, [pc, #348]	; (31c4 <nrfx_gpiote_irq_handler+0x1a8>)
    3068:	6a1a      	ldr	r2, [r3, #32]
    306a:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    306c:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    306e:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
    3072:	f10d 0b10 	add.w	fp, sp, #16
    3076:	ea4f 1349 	mov.w	r3, r9, lsl #5
    307a:	9300      	str	r3, [sp, #0]
    307c:	e048      	b.n	3110 <nrfx_gpiote_irq_handler+0xf4>
                uint32_t pin = NRF_CTZ(latch[i]);
    307e:	fa94 f4a4 	rbit	r4, r4
    3082:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    3086:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3088:	4a4f      	ldr	r2, [pc, #316]	; (31c8 <nrfx_gpiote_irq_handler+0x1ac>)
                pin += 32 * i;
    308a:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    308c:	f104 0308 	add.w	r3, r4, #8
    3090:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    3094:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    3096:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
    3098:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    309c:	fa03 f202 	lsl.w	r2, r3, r2
    30a0:	f81b 3000 	ldrb.w	r3, [fp, r0]
    30a4:	9403      	str	r4, [sp, #12]
    30a6:	ea23 0302 	bic.w	r3, r3, r2
    30aa:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    30ae:	a803      	add	r0, sp, #12
    30b0:	f7ff fd22 	bl	2af8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    30b4:	9b03      	ldr	r3, [sp, #12]
    30b6:	08b9      	lsrs	r1, r7, #2
    30b8:	3380      	adds	r3, #128	; 0x80
    30ba:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    30be:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
    30c2:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    30c4:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    30c6:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    30ca:	d52b      	bpl.n	3124 <nrfx_gpiote_irq_handler+0x108>
        call_handler(pin, trigger);
    30cc:	4620      	mov	r0, r4
    30ce:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    30d0:	b2dd      	uxtb	r5, r3
    30d2:	f7ff fd2b 	bl	2b2c <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    30d6:	a803      	add	r0, sp, #12
    30d8:	9403      	str	r4, [sp, #12]
    30da:	f7ff fd0d 	bl	2af8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    30de:	9b03      	ldr	r3, [sp, #12]
    30e0:	3380      	adds	r3, #128	; 0x80
    30e2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    30e6:	f3c3 4301 	ubfx	r3, r3, #16, #2
    30ea:	429d      	cmp	r5, r3
    30ec:	d107      	bne.n	30fe <nrfx_gpiote_irq_handler+0xe2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    30ee:	2100      	movs	r1, #0
    30f0:	4620      	mov	r0, r4
    30f2:	f001 fe3a 	bl	4d6a <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    30f6:	4629      	mov	r1, r5
    30f8:	4620      	mov	r0, r4
    30fa:	f001 fe36 	bl	4d6a <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    30fe:	a803      	add	r0, sp, #12
    3100:	9403      	str	r4, [sp, #12]
    3102:	f7ff fcf9 	bl	2af8 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    3106:	2201      	movs	r2, #1
    3108:	9b03      	ldr	r3, [sp, #12]
    310a:	fa02 f303 	lsl.w	r3, r2, r3
    310e:	6203      	str	r3, [r0, #32]
            while (latch[i])
    3110:	f85b 4029 	ldr.w	r4, [fp, r9, lsl #2]
    3114:	2c00      	cmp	r4, #0
    3116:	d1b2      	bne.n	307e <nrfx_gpiote_irq_handler+0x62>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    3118:	f1b9 0f00 	cmp.w	r9, #0
    311c:	d11d      	bne.n	315a <nrfx_gpiote_irq_handler+0x13e>
    311e:	f04f 0901 	mov.w	r9, #1
    3122:	e7a8      	b.n	3076 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3124:	2b02      	cmp	r3, #2
    3126:	d10c      	bne.n	3142 <nrfx_gpiote_irq_handler+0x126>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    3128:	2103      	movs	r1, #3
    312a:	4620      	mov	r0, r4
    312c:	f001 fe1d 	bl	4d6a <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    3130:	f005 0305 	and.w	r3, r5, #5
    3134:	2b01      	cmp	r3, #1
    3136:	d1e2      	bne.n	30fe <nrfx_gpiote_irq_handler+0xe2>
            call_handler(pin, trigger);
    3138:	4639      	mov	r1, r7
    313a:	4620      	mov	r0, r4
    313c:	f7ff fcf6 	bl	2b2c <call_handler>
    3140:	e7dd      	b.n	30fe <nrfx_gpiote_irq_handler+0xe2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    3142:	2102      	movs	r1, #2
    3144:	4620      	mov	r0, r4
    3146:	9301      	str	r3, [sp, #4]
    3148:	f001 fe0f 	bl	4d6a <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    314c:	2d03      	cmp	r5, #3
    314e:	d0f3      	beq.n	3138 <nrfx_gpiote_irq_handler+0x11c>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    3150:	9b01      	ldr	r3, [sp, #4]
    3152:	2b03      	cmp	r3, #3
    3154:	d1d3      	bne.n	30fe <nrfx_gpiote_irq_handler+0xe2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    3156:	2d02      	cmp	r5, #2
    3158:	e7ed      	b.n	3136 <nrfx_gpiote_irq_handler+0x11a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    315a:	f8ca 417c 	str.w	r4, [sl, #380]	; 0x17c
    315e:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    3162:	f8d8 3020 	ldr.w	r3, [r8, #32]
    3166:	4917      	ldr	r1, [pc, #92]	; (31c4 <nrfx_gpiote_irq_handler+0x1a8>)
    3168:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    316a:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
    316e:	6a0a      	ldr	r2, [r1, #32]
        if (latch[port_idx])
    3170:	4313      	orrs	r3, r2
    3172:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    3174:	620a      	str	r2, [r1, #32]
    3176:	f47f af7a 	bne.w	306e <nrfx_gpiote_irq_handler+0x52>
        mask &= ~NRFX_BIT(ch);
    317a:	2401      	movs	r4, #1
    while (mask)
    317c:	b916      	cbnz	r6, 3184 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    317e:	b007      	add	sp, #28
    3180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    3184:	fa96 f3a6 	rbit	r3, r6
    3188:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    318c:	fa04 f203 	lsl.w	r2, r4, r3
    3190:	009b      	lsls	r3, r3, #2
    3192:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    3196:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    319a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    319e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    31a2:	f3c0 2005 	ubfx	r0, r0, #8, #6
    31a6:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
    31aa:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    31ae:	f7ff fcbd 	bl	2b2c <call_handler>
    31b2:	e7e3      	b.n	317c <nrfx_gpiote_irq_handler+0x160>
    31b4:	5000d100 	.word	0x5000d100
    31b8:	5000d000 	.word	0x5000d000
    31bc:	5000d120 	.word	0x5000d120
    31c0:	50842500 	.word	0x50842500
    31c4:	50842800 	.word	0x50842800
    31c8:	20000038 	.word	0x20000038

000031cc <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    31cc:	2303      	movs	r3, #3
static void _DoInit(void) {
    31ce:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    31d0:	4c13      	ldr	r4, [pc, #76]	; (3220 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    31d2:	4a14      	ldr	r2, [pc, #80]	; (3224 <_DoInit+0x58>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    31d4:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    31d6:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    31d8:	4b13      	ldr	r3, [pc, #76]	; (3228 <_DoInit+0x5c>)
  p->aUp[0].sName         = "Terminal";
    31da:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    31dc:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    31de:	f44f 6380 	mov.w	r3, #1024	; 0x400
    31e2:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    31e4:	2300      	movs	r3, #0
    31e6:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    31e8:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    31ea:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    31ec:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    31ee:	4a0f      	ldr	r2, [pc, #60]	; (322c <_DoInit+0x60>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    31f0:	490f      	ldr	r1, [pc, #60]	; (3230 <_DoInit+0x64>)
  p->aDown[0].pBuffer       = _acDownBuffer;
    31f2:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    31f4:	2210      	movs	r2, #16
  STRCPY((char*)&p->acID[7], "RTT");
    31f6:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    31f8:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    31fa:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    31fc:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    31fe:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    3200:	f001 faf6 	bl	47f0 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    3204:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    3208:	490a      	ldr	r1, [pc, #40]	; (3234 <_DoInit+0x68>)
    320a:	4620      	mov	r0, r4
    320c:	f001 faf0 	bl	47f0 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    3210:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    3214:	2320      	movs	r3, #32
    3216:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    3218:	f3bf 8f5f 	dmb	sy
}
    321c:	bd10      	pop	{r4, pc}
    321e:	bf00      	nop
    3220:	200008fc 	.word	0x200008fc
    3224:	0000582a 	.word	0x0000582a
    3228:	20000bc2 	.word	0x20000bc2
    322c:	20000bb2 	.word	0x20000bb2
    3230:	00005833 	.word	0x00005833
    3234:	00005837 	.word	0x00005837

00003238 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    3238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    323a:	2718      	movs	r7, #24
    323c:	fb00 7507 	mla	r5, r0, r7, r7
    3240:	4b12      	ldr	r3, [pc, #72]	; (328c <SEGGER_RTT_WriteNoLock+0x54>)
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    3242:	460e      	mov	r6, r1
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    3244:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    3246:	fb07 3300 	mla	r3, r7, r0, r3
    324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    324c:	4614      	mov	r4, r2
  switch (pRing->Flags) {
    324e:	2b01      	cmp	r3, #1
    3250:	d00a      	beq.n	3268 <SEGGER_RTT_WriteNoLock+0x30>
    3252:	2b02      	cmp	r3, #2
    3254:	d014      	beq.n	3280 <SEGGER_RTT_WriteNoLock+0x48>
    3256:	b923      	cbnz	r3, 3262 <SEGGER_RTT_WriteNoLock+0x2a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    3258:	4628      	mov	r0, r5
    325a:	f001 fd95 	bl	4d88 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    325e:	4284      	cmp	r4, r0
    3260:	d908      	bls.n	3274 <SEGGER_RTT_WriteNoLock+0x3c>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
    3262:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
    3264:	4620      	mov	r0, r4
    3266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    3268:	4628      	mov	r0, r5
    326a:	f001 fd8d 	bl	4d88 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    326e:	4284      	cmp	r4, r0
    3270:	bf28      	it	cs
    3272:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    3274:	4622      	mov	r2, r4
    3276:	4631      	mov	r1, r6
    3278:	4628      	mov	r0, r5
    327a:	f001 fd8e 	bl	4d9a <_WriteNoCheck>
    break;
    327e:	e7f1      	b.n	3264 <SEGGER_RTT_WriteNoLock+0x2c>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    3280:	4628      	mov	r0, r5
}
    3282:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    3286:	f001 bda5 	b.w	4dd4 <_WriteBlocking>
    328a:	bf00      	nop
    328c:	200008fc 	.word	0x200008fc

00003290 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3290:	4b10      	ldr	r3, [pc, #64]	; (32d4 <z_sys_init_run_level+0x44>)
{
    3292:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3294:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    3298:	3001      	adds	r0, #1
    329a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    329e:	42a6      	cmp	r6, r4
    32a0:	d800      	bhi.n	32a4 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    32a2:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
    32a4:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    32a8:	b18d      	cbz	r5, 32ce <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
    32aa:	4628      	mov	r0, r5
    32ac:	4798      	blx	r3
			if (rc != 0) {
    32ae:	b138      	cbz	r0, 32c0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    32b0:	2800      	cmp	r0, #0
    32b2:	bfb8      	it	lt
    32b4:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
    32b6:	28ff      	cmp	r0, #255	; 0xff
    32b8:	bfa8      	it	ge
    32ba:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    32bc:	68eb      	ldr	r3, [r5, #12]
    32be:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    32c0:	68ea      	ldr	r2, [r5, #12]
    32c2:	7853      	ldrb	r3, [r2, #1]
    32c4:	f043 0301 	orr.w	r3, r3, #1
    32c8:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    32ca:	3408      	adds	r4, #8
    32cc:	e7e7      	b.n	329e <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    32ce:	4798      	blx	r3
    32d0:	e7fb      	b.n	32ca <z_sys_init_run_level+0x3a>
    32d2:	bf00      	nop
    32d4:	00005530 	.word	0x00005530

000032d8 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    32d8:	2201      	movs	r2, #1
{
    32da:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    32dc:	4b09      	ldr	r3, [pc, #36]	; (3304 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    32de:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    32e0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    32e2:	f7ff ffd5 	bl	3290 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    32e6:	f000 ff41 	bl	416c <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    32ea:	2004      	movs	r0, #4
    32ec:	f7ff ffd0 	bl	3290 <z_sys_init_run_level>

	z_init_static_threads();
    32f0:	f000 f92a 	bl	3548 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    32f4:	f7fd f8a2 	bl	43c <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    32f8:	4a03      	ldr	r2, [pc, #12]	; (3308 <bg_thread_main+0x30>)
    32fa:	7b13      	ldrb	r3, [r2, #12]
    32fc:	f023 0301 	bic.w	r3, r3, #1
    3300:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    3302:	bd08      	pop	{r3, pc}
    3304:	20000fc2 	.word	0x20000fc2
    3308:	20000218 	.word	0x20000218

0000330c <z_bss_zero>:
{
    330c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    330e:	4803      	ldr	r0, [pc, #12]	; (331c <z_bss_zero+0x10>)
    3310:	4a03      	ldr	r2, [pc, #12]	; (3320 <z_bss_zero+0x14>)
    3312:	2100      	movs	r1, #0
    3314:	1a12      	subs	r2, r2, r0
    3316:	f001 fdb7 	bl	4e88 <z_early_memset>
}
    331a:	bd08      	pop	{r3, pc}
    331c:	20000178 	.word	0x20000178
    3320:	20000fc4 	.word	0x20000fc4

00003324 <z_init_cpu>:

#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    3324:	2300      	movs	r3, #0
    3326:	2201      	movs	r2, #1
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    3328:	b570      	push	{r4, r5, r6, lr}
    332a:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    332c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    3330:	220f      	movs	r2, #15
    3332:	9301      	str	r3, [sp, #4]
    3334:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3338:	2314      	movs	r3, #20
	z_setup_new_thread(thread, stack,
    333a:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    333e:	4d0e      	ldr	r5, [pc, #56]	; (3378 <z_init_cpu+0x54>)
	struct k_thread *thread = &z_idle_threads[i];
    3340:	4e0e      	ldr	r6, [pc, #56]	; (337c <z_init_cpu+0x58>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3342:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
    3346:	490e      	ldr	r1, [pc, #56]	; (3380 <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
    3348:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    334c:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    334e:	fb02 1100 	mla	r1, r2, r0, r1
    3352:	4b0c      	ldr	r3, [pc, #48]	; (3384 <z_init_cpu+0x60>)
    3354:	4630      	mov	r0, r6
    3356:	9500      	str	r5, [sp, #0]
    3358:	f000 f8c6 	bl	34e8 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    335c:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
    335e:	742c      	strb	r4, [r5, #16]
    3360:	f023 0304 	bic.w	r3, r3, #4
    3364:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    3366:	4b08      	ldr	r3, [pc, #32]	; (3388 <z_init_cpu+0x64>)
    3368:	3401      	adds	r4, #1
    336a:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    336e:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    3370:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    3372:	b006      	add	sp, #24
    3374:	bd70      	pop	{r4, r5, r6, pc}
    3376:	bf00      	nop
    3378:	200009a4 	.word	0x200009a4
    337c:	20000198 	.word	0x20000198
    3380:	200017c8 	.word	0x200017c8
    3384:	00003601 	.word	0x00003601
    3388:	20000fc8 	.word	0x20000fc8

0000338c <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    338c:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    338e:	2000      	movs	r0, #0
{
    3390:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    3392:	f7ff ff7d 	bl	3290 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    3396:	4b2d      	ldr	r3, [pc, #180]	; (344c <z_cstart+0xc0>)
	uint32_t msp =
    3398:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    339c:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    33a0:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    33a4:	2400      	movs	r4, #0
    33a6:	23e0      	movs	r3, #224	; 0xe0
    33a8:	4d29      	ldr	r5, [pc, #164]	; (3450 <z_cstart+0xc4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    33aa:	4e2a      	ldr	r6, [pc, #168]	; (3454 <z_cstart+0xc8>)
    33ac:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    33b0:	77ec      	strb	r4, [r5, #31]
    33b2:	762c      	strb	r4, [r5, #24]
    33b4:	766c      	strb	r4, [r5, #25]
    33b6:	76ac      	strb	r4, [r5, #26]
    33b8:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    33bc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    33be:	4f26      	ldr	r7, [pc, #152]	; (3458 <z_cstart+0xcc>)
    33c0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    33c4:	626b      	str	r3, [r5, #36]	; 0x24
    33c6:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    33ca:	f7fe fab9 	bl	1940 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    33ce:	f7fe f851 	bl	1474 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    33d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    33d6:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    33d8:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    33da:	f7fe fcbb 	bl	1d54 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    33de:	f7fe fb61 	bl	1aa4 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    33e2:	f240 1301 	movw	r3, #257	; 0x101
    33e6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    33ea:	ab06      	add	r3, sp, #24
    33ec:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    33ee:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    33f2:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    33f4:	f001 fd21 	bl	4e3a <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    33f8:	2001      	movs	r0, #1
    33fa:	f7ff ff49 	bl	3290 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    33fe:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    3400:	4d16      	ldr	r5, [pc, #88]	; (345c <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    3402:	f7ff ff45 	bl	3290 <z_sys_init_run_level>
	z_sched_init();
    3406:	f000 fc4d 	bl	3ca4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    340a:	4b15      	ldr	r3, [pc, #84]	; (3460 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
    340c:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    340e:	9305      	str	r3, [sp, #20]
    3410:	2301      	movs	r3, #1
    3412:	4914      	ldr	r1, [pc, #80]	; (3464 <z_cstart+0xd8>)
    3414:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3418:	e9cd 4303 	strd	r4, r3, [sp, #12]
    341c:	4628      	mov	r0, r5
    341e:	463b      	mov	r3, r7
    3420:	e9cd 4401 	strd	r4, r4, [sp, #4]
    3424:	9400      	str	r4, [sp, #0]
    3426:	f000 f85f 	bl	34e8 <z_setup_new_thread>
    342a:	4606      	mov	r6, r0
    342c:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
    342e:	4628      	mov	r0, r5
    3430:	f022 0204 	bic.w	r2, r2, #4
    3434:	736a      	strb	r2, [r5, #13]
    3436:	f001 fdce 	bl	4fd6 <z_ready_thread>
	z_init_cpu(0);
    343a:	4620      	mov	r0, r4
    343c:	f7ff ff72 	bl	3324 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3440:	463a      	mov	r2, r7
    3442:	4631      	mov	r1, r6
    3444:	4628      	mov	r0, r5
    3446:	f7fe f90d 	bl	1664 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    344a:	bf00      	nop
    344c:	20000fc8 	.word	0x20000fc8
    3450:	e000ed00 	.word	0xe000ed00
    3454:	200009a4 	.word	0x200009a4
    3458:	000032d9 	.word	0x000032d9
    345c:	20000218 	.word	0x20000218
    3460:	0000583e 	.word	0x0000583e
    3464:	20001908 	.word	0x20001908

00003468 <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
	int rc = 0;
    3468:	2000      	movs	r0, #0
{
    346a:	b538      	push	{r3, r4, r5, lr}

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    346c:	4c05      	ldr	r4, [pc, #20]	; (3484 <init_mem_slab_module+0x1c>)
    346e:	4d06      	ldr	r5, [pc, #24]	; (3488 <init_mem_slab_module+0x20>)
    3470:	42ac      	cmp	r4, r5
    3472:	d300      	bcc.n	3476 <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
    3474:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
    3476:	4620      	mov	r0, r4
    3478:	f001 fd0a 	bl	4e90 <create_free_list>
		if (rc < 0) {
    347c:	2800      	cmp	r0, #0
    347e:	dbf9      	blt.n	3474 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3480:	341c      	adds	r4, #28
    3482:	e7f5      	b.n	3470 <init_mem_slab_module+0x8>
    3484:	20000122 	.word	0x20000122
    3488:	20000122 	.word	0x20000122

0000348c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    348c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    348e:	460c      	mov	r4, r1
	__asm__ volatile(
    3490:	f04f 0520 	mov.w	r5, #32
    3494:	f3ef 8111 	mrs	r1, BASEPRI
    3498:	f385 8812 	msr	BASEPRI_MAX, r5
    349c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    34a0:	6945      	ldr	r5, [r0, #20]
    34a2:	b15d      	cbz	r5, 34bc <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    34a4:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    34a6:	682b      	ldr	r3, [r5, #0]
    34a8:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    34aa:	6983      	ldr	r3, [r0, #24]
    34ac:	3301      	adds	r3, #1
    34ae:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    34b0:	2000      	movs	r0, #0
	__asm__ volatile(
    34b2:	f381 8811 	msr	BASEPRI, r1
    34b6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    34ba:	e011      	b.n	34e0 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    34bc:	ea52 0603 	orrs.w	r6, r2, r3
    34c0:	d103      	bne.n	34ca <k_mem_slab_alloc+0x3e>
		result = -ENOMEM;
    34c2:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
    34c6:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    34c8:	e7f3      	b.n	34b2 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    34ca:	e9cd 2300 	strd	r2, r3, [sp]
    34ce:	4602      	mov	r2, r0
    34d0:	3008      	adds	r0, #8
    34d2:	f000 faf1 	bl	3ab8 <z_pend_curr>
		if (result == 0) {
    34d6:	b918      	cbnz	r0, 34e0 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    34d8:	4b02      	ldr	r3, [pc, #8]	; (34e4 <k_mem_slab_alloc+0x58>)
    34da:	689b      	ldr	r3, [r3, #8]
    34dc:	695b      	ldr	r3, [r3, #20]
    34de:	6023      	str	r3, [r4, #0]
}
    34e0:	b002      	add	sp, #8
    34e2:	bd70      	pop	{r4, r5, r6, pc}
    34e4:	200009a4 	.word	0x200009a4

000034e8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    34e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    34ec:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    34ee:	f100 0558 	add.w	r5, r0, #88	; 0x58
    34f2:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    34f4:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    34f6:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
    34fa:	2500      	movs	r5, #0
{
    34fc:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
    34fe:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    3500:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    3502:	e9c0 5506 	strd	r5, r5, [r0, #24]
    3506:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3508:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    350a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    350c:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
    3510:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    3514:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    3516:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    3518:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    351a:	9202      	str	r2, [sp, #8]
    351c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
    351e:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3522:	9201      	str	r2, [sp, #4]
    3524:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3526:	9200      	str	r2, [sp, #0]
    3528:	4642      	mov	r2, r8
    352a:	f7fe f87f 	bl	162c <arch_new_thread>
	if (!_current) {
    352e:	4b05      	ldr	r3, [pc, #20]	; (3544 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    3530:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    3532:	689b      	ldr	r3, [r3, #8]
    3534:	b103      	cbz	r3, 3538 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    3536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
    3538:	4640      	mov	r0, r8
    353a:	6723      	str	r3, [r4, #112]	; 0x70
    353c:	b004      	add	sp, #16
    353e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3542:	bf00      	nop
    3544:	200009a4 	.word	0x200009a4

00003548 <z_init_static_threads>:
{
    3548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    354c:	4c29      	ldr	r4, [pc, #164]	; (35f4 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    354e:	4d2a      	ldr	r5, [pc, #168]	; (35f8 <z_init_static_threads+0xb0>)
{
    3550:	b087      	sub	sp, #28
    3552:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    3554:	42ae      	cmp	r6, r5
    3556:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    355a:	d30f      	bcc.n	357c <z_init_static_threads+0x34>
	k_sched_lock();
    355c:	f000 fb72 	bl	3c44 <k_sched_lock>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    3560:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    3564:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
    3568:	4c22      	ldr	r4, [pc, #136]	; (35f4 <z_init_static_threads+0xac>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    356a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 35fc <z_init_static_threads+0xb4>
    356e:	42ac      	cmp	r4, r5
    3570:	d320      	bcc.n	35b4 <z_init_static_threads+0x6c>
}
    3572:	b007      	add	sp, #28
    3574:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    3578:	f000 bb78 	b.w	3c6c <k_sched_unlock>
		z_setup_new_thread(
    357c:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3580:	9305      	str	r3, [sp, #20]
    3582:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    3586:	9304      	str	r3, [sp, #16]
    3588:	f854 3c10 	ldr.w	r3, [r4, #-16]
    358c:	9303      	str	r3, [sp, #12]
    358e:	f854 3c14 	ldr.w	r3, [r4, #-20]
    3592:	9302      	str	r3, [sp, #8]
    3594:	f854 3c18 	ldr.w	r3, [r4, #-24]
    3598:	9301      	str	r3, [sp, #4]
    359a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    359e:	9300      	str	r3, [sp, #0]
    35a0:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    35a4:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    35a8:	f7ff ff9e 	bl	34e8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    35ac:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    35b0:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    35b2:	e7ce      	b.n	3552 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    35b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    35b6:	1c5a      	adds	r2, r3, #1
    35b8:	d00d      	beq.n	35d6 <z_init_static_threads+0x8e>
    35ba:	2100      	movs	r1, #0
    35bc:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
    35be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    35c2:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    35c6:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    35ca:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    35ce:	d104      	bne.n	35da <z_init_static_threads+0x92>
	z_sched_start(thread);
    35d0:	4640      	mov	r0, r8
    35d2:	f000 fae7 	bl	3ba4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    35d6:	342c      	adds	r4, #44	; 0x2c
    35d8:	e7c9      	b.n	356e <z_init_static_threads+0x26>
    35da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    35de:	2300      	movs	r3, #0
    35e0:	f7fc fdb8 	bl	154 <__aeabi_uldivmod>
    35e4:	4602      	mov	r2, r0
    35e6:	460b      	mov	r3, r1
    35e8:	f108 0018 	add.w	r0, r8, #24
    35ec:	4649      	mov	r1, r9
    35ee:	f000 fcc3 	bl	3f78 <z_add_timeout>
    35f2:	e7f0      	b.n	35d6 <z_init_static_threads+0x8e>
    35f4:	000053cc 	.word	0x000053cc
    35f8:	000053cc 	.word	0x000053cc
    35fc:	0000503b 	.word	0x0000503b

00003600 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    3600:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    3602:	4c0b      	ldr	r4, [pc, #44]	; (3630 <idle+0x30>)
	return !z_sys_post_kernel;
    3604:	4d0b      	ldr	r5, [pc, #44]	; (3634 <idle+0x34>)
	__asm__ volatile(
    3606:	f04f 0220 	mov.w	r2, #32
    360a:	f3ef 8311 	mrs	r3, BASEPRI
    360e:	f382 8812 	msr	BASEPRI_MAX, r2
    3612:	f3bf 8f6f 	isb	sy
    3616:	f001 fd5c 	bl	50d2 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    361a:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    361c:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    361e:	b913      	cbnz	r3, 3626 <idle+0x26>
	arch_cpu_idle();
    3620:	f7fd ff2e 	bl	1480 <arch_cpu_idle>
}
    3624:	e7ef      	b.n	3606 <idle+0x6>
    3626:	f7fd fd5f 	bl	10e8 <pm_system_suspend>
    362a:	2800      	cmp	r0, #0
    362c:	d1eb      	bne.n	3606 <idle+0x6>
    362e:	e7f7      	b.n	3620 <idle+0x20>
    3630:	200009a4 	.word	0x200009a4
    3634:	20000fc2 	.word	0x20000fc2

00003638 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    3638:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    363c:	4604      	mov	r4, r0
    363e:	4617      	mov	r7, r2
    3640:	461e      	mov	r6, r3
    3642:	f04f 0320 	mov.w	r3, #32
    3646:	f3ef 8811 	mrs	r8, BASEPRI
    364a:	f383 8812 	msr	BASEPRI_MAX, r3
    364e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    3652:	68c3      	ldr	r3, [r0, #12]
    3654:	4a33      	ldr	r2, [pc, #204]	; (3724 <z_impl_k_mutex_lock+0xec>)
    3656:	b17b      	cbz	r3, 3678 <z_impl_k_mutex_lock+0x40>
    3658:	6880      	ldr	r0, [r0, #8]
    365a:	6891      	ldr	r1, [r2, #8]
    365c:	4288      	cmp	r0, r1
    365e:	d019      	beq.n	3694 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    3660:	ea57 0306 	orrs.w	r3, r7, r6
    3664:	d118      	bne.n	3698 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    3666:	f388 8811 	msr	BASEPRI, r8
    366a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    366e:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    3672:	b002      	add	sp, #8
    3674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    3678:	6891      	ldr	r1, [r2, #8]
    367a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    367e:	3301      	adds	r3, #1
    3680:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    3682:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    3684:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    3686:	60a3      	str	r3, [r4, #8]
    3688:	f388 8811 	msr	BASEPRI, r8
    368c:	f3bf 8f6f 	isb	sy
		return 0;
    3690:	2000      	movs	r0, #0
    3692:	e7ee      	b.n	3672 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    3694:	6921      	ldr	r1, [r4, #16]
    3696:	e7f2      	b.n	367e <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    3698:	f991 100e 	ldrsb.w	r1, [r1, #14]
    369c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    36a0:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    36a4:	4299      	cmp	r1, r3
    36a6:	bfa8      	it	ge
    36a8:	4619      	movge	r1, r3
    36aa:	4291      	cmp	r1, r2
    36ac:	bfb8      	it	lt
    36ae:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    36b0:	428b      	cmp	r3, r1
    36b2:	dd2e      	ble.n	3712 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    36b4:	f001 fc46 	bl	4f44 <adjust_owner_prio.isra.0>
    36b8:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    36ba:	4622      	mov	r2, r4
    36bc:	4641      	mov	r1, r8
    36be:	e9cd 7600 	strd	r7, r6, [sp]
    36c2:	4819      	ldr	r0, [pc, #100]	; (3728 <z_impl_k_mutex_lock+0xf0>)
    36c4:	f000 f9f8 	bl	3ab8 <z_pend_curr>
	if (got_mutex == 0) {
    36c8:	2800      	cmp	r0, #0
    36ca:	d0e1      	beq.n	3690 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    36cc:	f04f 0320 	mov.w	r3, #32
    36d0:	f3ef 8611 	mrs	r6, BASEPRI
    36d4:	f383 8812 	msr	BASEPRI_MAX, r3
    36d8:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    36dc:	68a0      	ldr	r0, [r4, #8]
    36de:	b1d0      	cbz	r0, 3716 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    36e0:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    36e2:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    36e4:	429c      	cmp	r4, r3
    36e6:	d00a      	beq.n	36fe <z_impl_k_mutex_lock+0xc6>
    36e8:	b14b      	cbz	r3, 36fe <z_impl_k_mutex_lock+0xc6>
    36ea:	f993 300e 	ldrsb.w	r3, [r3, #14]
    36ee:	4299      	cmp	r1, r3
    36f0:	bfa8      	it	ge
    36f2:	4619      	movge	r1, r3
    36f4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    36f8:	4299      	cmp	r1, r3
    36fa:	bfb8      	it	lt
    36fc:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    36fe:	f001 fc21 	bl	4f44 <adjust_owner_prio.isra.0>
    3702:	b140      	cbz	r0, 3716 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    3704:	4631      	mov	r1, r6
    3706:	4808      	ldr	r0, [pc, #32]	; (3728 <z_impl_k_mutex_lock+0xf0>)
    3708:	f000 fa3a 	bl	3b80 <z_reschedule>
	return -EAGAIN;
    370c:	f06f 000a 	mvn.w	r0, #10
    3710:	e7af      	b.n	3672 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    3712:	2500      	movs	r5, #0
    3714:	e7d1      	b.n	36ba <z_impl_k_mutex_lock+0x82>
	if (resched) {
    3716:	2d00      	cmp	r5, #0
    3718:	d1f4      	bne.n	3704 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    371a:	f386 8811 	msr	BASEPRI, r6
    371e:	f3bf 8f6f 	isb	sy
    3722:	e7f3      	b.n	370c <z_impl_k_mutex_lock+0xd4>
    3724:	200009a4 	.word	0x200009a4
    3728:	20000fc3 	.word	0x20000fc3

0000372c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    372c:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    372e:	6883      	ldr	r3, [r0, #8]
{
    3730:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    3732:	b36b      	cbz	r3, 3790 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    3734:	4a19      	ldr	r2, [pc, #100]	; (379c <z_impl_k_mutex_unlock+0x70>)
    3736:	6892      	ldr	r2, [r2, #8]
    3738:	4293      	cmp	r3, r2
    373a:	d12c      	bne.n	3796 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    373c:	68c3      	ldr	r3, [r0, #12]
    373e:	2b01      	cmp	r3, #1
    3740:	d903      	bls.n	374a <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    3742:	3b01      	subs	r3, #1
    3744:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    3746:	2000      	movs	r0, #0
}
    3748:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    374a:	f04f 0320 	mov.w	r3, #32
    374e:	f3ef 8511 	mrs	r5, BASEPRI
    3752:	f383 8812 	msr	BASEPRI_MAX, r3
    3756:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    375a:	6901      	ldr	r1, [r0, #16]
    375c:	6880      	ldr	r0, [r0, #8]
    375e:	f001 fbf1 	bl	4f44 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    3762:	4620      	mov	r0, r4
    3764:	f001 fc6d 	bl	5042 <z_unpend_first_thread>
	mutex->owner = new_owner;
    3768:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    376a:	b158      	cbz	r0, 3784 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    376c:	f990 200e 	ldrsb.w	r2, [r0, #14]
    3770:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    3772:	2200      	movs	r2, #0
    3774:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    3776:	f001 fc2e 	bl	4fd6 <z_ready_thread>
		z_reschedule(&lock, key);
    377a:	4629      	mov	r1, r5
    377c:	4808      	ldr	r0, [pc, #32]	; (37a0 <z_impl_k_mutex_unlock+0x74>)
    377e:	f000 f9ff 	bl	3b80 <z_reschedule>
    3782:	e7e0      	b.n	3746 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    3784:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    3786:	f385 8811 	msr	BASEPRI, r5
    378a:	f3bf 8f6f 	isb	sy
    378e:	e7da      	b.n	3746 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    3790:	f06f 0015 	mvn.w	r0, #21
    3794:	e7d8      	b.n	3748 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    3796:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    379a:	e7d5      	b.n	3748 <z_impl_k_mutex_unlock+0x1c>
    379c:	200009a4 	.word	0x200009a4
    37a0:	20000fc3 	.word	0x20000fc3

000037a4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    37a4:	b538      	push	{r3, r4, r5, lr}
    37a6:	4604      	mov	r4, r0
	__asm__ volatile(
    37a8:	f04f 0320 	mov.w	r3, #32
    37ac:	f3ef 8511 	mrs	r5, BASEPRI
    37b0:	f383 8812 	msr	BASEPRI_MAX, r3
    37b4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    37b8:	f001 fc43 	bl	5042 <z_unpend_first_thread>

	if (thread != NULL) {
    37bc:	b148      	cbz	r0, 37d2 <z_impl_k_sem_give+0x2e>
    37be:	2200      	movs	r2, #0
    37c0:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    37c2:	f001 fc08 	bl	4fd6 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    37c6:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    37c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    37cc:	4804      	ldr	r0, [pc, #16]	; (37e0 <z_impl_k_sem_give+0x3c>)
    37ce:	f000 b9d7 	b.w	3b80 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    37d2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    37d6:	429a      	cmp	r2, r3
    37d8:	bf18      	it	ne
    37da:	3301      	addne	r3, #1
    37dc:	60a3      	str	r3, [r4, #8]
}
    37de:	e7f2      	b.n	37c6 <z_impl_k_sem_give+0x22>
    37e0:	20000fc3 	.word	0x20000fc3

000037e4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    37e4:	b513      	push	{r0, r1, r4, lr}
    37e6:	f04f 0420 	mov.w	r4, #32
    37ea:	f3ef 8111 	mrs	r1, BASEPRI
    37ee:	f384 8812 	msr	BASEPRI_MAX, r4
    37f2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    37f6:	6884      	ldr	r4, [r0, #8]
    37f8:	b144      	cbz	r4, 380c <z_impl_k_sem_take+0x28>
		sem->count--;
    37fa:	3c01      	subs	r4, #1
    37fc:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    37fe:	f381 8811 	msr	BASEPRI, r1
    3802:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    3806:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    3808:	b002      	add	sp, #8
    380a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    380c:	ea52 0403 	orrs.w	r4, r2, r3
    3810:	d106      	bne.n	3820 <z_impl_k_sem_take+0x3c>
    3812:	f381 8811 	msr	BASEPRI, r1
    3816:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    381a:	f06f 000f 	mvn.w	r0, #15
    381e:	e7f3      	b.n	3808 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    3820:	e9cd 2300 	strd	r2, r3, [sp]
    3824:	4602      	mov	r2, r0
    3826:	4802      	ldr	r0, [pc, #8]	; (3830 <z_impl_k_sem_take+0x4c>)
    3828:	f000 f946 	bl	3ab8 <z_pend_curr>
	return ret;
    382c:	e7ec      	b.n	3808 <z_impl_k_sem_take+0x24>
    382e:	bf00      	nop
    3830:	20000fc3 	.word	0x20000fc3

00003834 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
    3834:	89c3      	ldrh	r3, [r0, #14]
    3836:	2b7f      	cmp	r3, #127	; 0x7f
    3838:	d812      	bhi.n	3860 <sliceable+0x2c>
	int ret = slice_ticks;
    383a:	4b0a      	ldr	r3, [pc, #40]	; (3864 <sliceable+0x30>)
    383c:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
    383e:	b163      	cbz	r3, 385a <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    3840:	4b09      	ldr	r3, [pc, #36]	; (3868 <sliceable+0x34>)
    3842:	f990 200e 	ldrsb.w	r2, [r0, #14]
    3846:	681b      	ldr	r3, [r3, #0]
    3848:	429a      	cmp	r2, r3
    384a:	db09      	blt.n	3860 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
    384c:	7b43      	ldrb	r3, [r0, #13]
    384e:	06db      	lsls	r3, r3, #27
    3850:	d106      	bne.n	3860 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    3852:	4b06      	ldr	r3, [pc, #24]	; (386c <sliceable+0x38>)
    3854:	1ac3      	subs	r3, r0, r3
    3856:	bf18      	it	ne
    3858:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    385a:	f003 0001 	and.w	r0, r3, #1
    385e:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
    3860:	2300      	movs	r3, #0
    3862:	e7fa      	b.n	385a <sliceable+0x26>
    3864:	200009d0 	.word	0x200009d0
    3868:	200009cc 	.word	0x200009cc
    386c:	20000198 	.word	0x20000198

00003870 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);

	slice_expired[cpu] = true;
    3870:	2201      	movs	r2, #1
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    3872:	4b04      	ldr	r3, [pc, #16]	; (3884 <slice_timeout+0x14>)
    3874:	1ac0      	subs	r0, r0, r3
    3876:	4b04      	ldr	r3, [pc, #16]	; (3888 <slice_timeout+0x18>)
    3878:	10c0      	asrs	r0, r0, #3
    387a:	4358      	muls	r0, r3
	slice_expired[cpu] = true;
    387c:	4b03      	ldr	r3, [pc, #12]	; (388c <slice_timeout+0x1c>)
    387e:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
    3880:	4770      	bx	lr
    3882:	bf00      	nop
    3884:	20000298 	.word	0x20000298
    3888:	aaaaaaab 	.word	0xaaaaaaab
    388c:	20000fc3 	.word	0x20000fc3

00003890 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
    3890:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
    3892:	4b0e      	ldr	r3, [pc, #56]	; (38cc <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
    3894:	4c0e      	ldr	r4, [pc, #56]	; (38d0 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
    3896:	7c1e      	ldrb	r6, [r3, #16]
{
    3898:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
    389a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    389e:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
    38a2:	4620      	mov	r0, r4
    38a4:	f001 fbff 	bl	50a6 <z_abort_timeout>
	slice_expired[cpu] = false;
    38a8:	2200      	movs	r2, #0
    38aa:	4b0a      	ldr	r3, [pc, #40]	; (38d4 <z_reset_time_slice+0x44>)
	if (sliceable(curr)) {
    38ac:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
    38ae:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
    38b0:	f7ff ffc0 	bl	3834 <sliceable>
    38b4:	b148      	cbz	r0, 38ca <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
    38b6:	4b08      	ldr	r3, [pc, #32]	; (38d8 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    38b8:	4620      	mov	r0, r4
			      K_TICKS(slice_time(curr) - 1));
	}
}
    38ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			      K_TICKS(slice_time(curr) - 1));
    38be:	681a      	ldr	r2, [r3, #0]
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    38c0:	4906      	ldr	r1, [pc, #24]	; (38dc <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
    38c2:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    38c4:	17d3      	asrs	r3, r2, #31
    38c6:	f000 bb57 	b.w	3f78 <z_add_timeout>
}
    38ca:	bd70      	pop	{r4, r5, r6, pc}
    38cc:	200009a4 	.word	0x200009a4
    38d0:	20000298 	.word	0x20000298
    38d4:	20000fc3 	.word	0x20000fc3
    38d8:	200009d0 	.word	0x200009d0
    38dc:	00003871 	.word	0x00003871

000038e0 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    38e0:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    38e2:	4d0d      	ldr	r5, [pc, #52]	; (3918 <update_cache+0x38>)
    38e4:	462b      	mov	r3, r5
    38e6:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    38ea:	429c      	cmp	r4, r3
    38ec:	d000      	beq.n	38f0 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    38ee:	b904      	cbnz	r4, 38f2 <update_cache+0x12>
    38f0:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    38f2:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    38f4:	b938      	cbnz	r0, 3906 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    38f6:	7b5a      	ldrb	r2, [r3, #13]
    38f8:	06d2      	lsls	r2, r2, #27
    38fa:	d104      	bne.n	3906 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    38fc:	69a2      	ldr	r2, [r4, #24]
    38fe:	b912      	cbnz	r2, 3906 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    3900:	89da      	ldrh	r2, [r3, #14]
    3902:	2a7f      	cmp	r2, #127	; 0x7f
    3904:	d805      	bhi.n	3912 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    3906:	429c      	cmp	r4, r3
    3908:	d002      	beq.n	3910 <update_cache+0x30>
			z_reset_time_slice(thread);
    390a:	4620      	mov	r0, r4
    390c:	f7ff ffc0 	bl	3890 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    3910:	4623      	mov	r3, r4
    3912:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    3914:	bd38      	pop	{r3, r4, r5, pc}
    3916:	bf00      	nop
    3918:	200009a4 	.word	0x200009a4

0000391c <move_thread_to_end_of_prio_q>:
{
    391c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    391e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    3922:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    3924:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    3926:	7b43      	ldrb	r3, [r0, #13]
    3928:	da04      	bge.n	3934 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    392a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    392e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    3930:	f001 fb17 	bl	4f62 <sys_dlist_remove>
	return list->head == list;
    3934:	4a15      	ldr	r2, [pc, #84]	; (398c <move_thread_to_end_of_prio_q+0x70>)
	thread->base.thread_state |= _THREAD_QUEUED;
    3936:	7b4b      	ldrb	r3, [r1, #13]
    3938:	4610      	mov	r0, r2
    393a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    393e:	734b      	strb	r3, [r1, #13]
    3940:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    3944:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3946:	4283      	cmp	r3, r0
    3948:	bf08      	it	eq
    394a:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    394c:	b923      	cbnz	r3, 3958 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    394e:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    3952:	6021      	str	r1, [r4, #0]
	list->tail = node;
    3954:	6211      	str	r1, [r2, #32]
}
    3956:	e00c      	b.n	3972 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    3958:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    395c:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    3960:	42b5      	cmp	r5, r6
    3962:	d00e      	beq.n	3982 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3964:	42ae      	cmp	r6, r5
    3966:	dd0c      	ble.n	3982 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    3968:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    396a:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    396e:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    3970:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    3972:	6890      	ldr	r0, [r2, #8]
}
    3974:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    3978:	1a43      	subs	r3, r0, r1
    397a:	4258      	negs	r0, r3
    397c:	4158      	adcs	r0, r3
    397e:	f7ff bfaf 	b.w	38e0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    3982:	429c      	cmp	r4, r3
    3984:	d0e3      	beq.n	394e <move_thread_to_end_of_prio_q+0x32>
    3986:	681b      	ldr	r3, [r3, #0]
    3988:	e7e0      	b.n	394c <move_thread_to_end_of_prio_q+0x30>
    398a:	bf00      	nop
    398c:	200009a4 	.word	0x200009a4

00003990 <ready_thread>:
{
    3990:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    3992:	f990 300d 	ldrsb.w	r3, [r0, #13]
    3996:	7b42      	ldrb	r2, [r0, #13]
    3998:	2b00      	cmp	r3, #0
    399a:	db29      	blt.n	39f0 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    399c:	06d3      	lsls	r3, r2, #27
    399e:	d127      	bne.n	39f0 <ready_thread+0x60>
	return node->next != NULL;
    39a0:	6983      	ldr	r3, [r0, #24]
    39a2:	bb2b      	cbnz	r3, 39f0 <ready_thread+0x60>
	return list->head == list;
    39a4:	4913      	ldr	r1, [pc, #76]	; (39f4 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    39a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
    39aa:	7342      	strb	r2, [r0, #13]
    39ac:	460a      	mov	r2, r1
    39ae:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    39b2:	4294      	cmp	r4, r2
    39b4:	bf18      	it	ne
    39b6:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    39b8:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    39ba:	b923      	cbnz	r3, 39c6 <ready_thread+0x36>
	node->prev = tail;
    39bc:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    39c0:	6020      	str	r0, [r4, #0]
	list->tail = node;
    39c2:	6208      	str	r0, [r1, #32]
}
    39c4:	e00c      	b.n	39e0 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    39c6:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    39ca:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    39ce:	42b5      	cmp	r5, r6
    39d0:	d00a      	beq.n	39e8 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    39d2:	42ae      	cmp	r6, r5
    39d4:	dd08      	ble.n	39e8 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    39d6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    39d8:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    39dc:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    39de:	6058      	str	r0, [r3, #4]
		update_cache(0);
    39e0:	2000      	movs	r0, #0
}
    39e2:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    39e4:	f7ff bf7c 	b.w	38e0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    39e8:	42a3      	cmp	r3, r4
    39ea:	d0e7      	beq.n	39bc <ready_thread+0x2c>
    39ec:	681b      	ldr	r3, [r3, #0]
    39ee:	e7e4      	b.n	39ba <ready_thread+0x2a>
}
    39f0:	bc70      	pop	{r4, r5, r6}
    39f2:	4770      	bx	lr
    39f4:	200009a4 	.word	0x200009a4

000039f8 <unready_thread>:
{
    39f8:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    39fa:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    39fe:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    3a00:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    3a02:	7b43      	ldrb	r3, [r0, #13]
    3a04:	da04      	bge.n	3a10 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3a06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3a0a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3a0c:	f001 faa9 	bl	4f62 <sys_dlist_remove>
	update_cache(thread == _current);
    3a10:	4b04      	ldr	r3, [pc, #16]	; (3a24 <unready_thread+0x2c>)
    3a12:	6898      	ldr	r0, [r3, #8]
    3a14:	1a43      	subs	r3, r0, r1
    3a16:	4258      	negs	r0, r3
    3a18:	4158      	adcs	r0, r3
}
    3a1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    3a1e:	f7ff bf5f 	b.w	38e0 <update_cache>
    3a22:	bf00      	nop
    3a24:	200009a4 	.word	0x200009a4

00003a28 <pend_locked>:
{
    3a28:	b570      	push	{r4, r5, r6, lr}
    3a2a:	4615      	mov	r5, r2
    3a2c:	461c      	mov	r4, r3
    3a2e:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    3a30:	f001 faa9 	bl	4f86 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3a34:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    3a38:	bf08      	it	eq
    3a3a:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    3a3e:	d008      	beq.n	3a52 <pend_locked+0x2a>
    3a40:	462a      	mov	r2, r5
    3a42:	4623      	mov	r3, r4
    3a44:	f106 0018 	add.w	r0, r6, #24
    3a48:	4902      	ldr	r1, [pc, #8]	; (3a54 <pend_locked+0x2c>)
}
    3a4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3a4e:	f000 ba93 	b.w	3f78 <z_add_timeout>
    3a52:	bd70      	pop	{r4, r5, r6, pc}
    3a54:	0000503b 	.word	0x0000503b

00003a58 <z_time_slice>:
{
    3a58:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    3a5a:	f04f 0320 	mov.w	r3, #32
    3a5e:	f3ef 8511 	mrs	r5, BASEPRI
    3a62:	f383 8812 	msr	BASEPRI_MAX, r3
    3a66:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
    3a6a:	4b10      	ldr	r3, [pc, #64]	; (3aac <z_time_slice+0x54>)
	if (pending_current == curr) {
    3a6c:	4a10      	ldr	r2, [pc, #64]	; (3ab0 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
    3a6e:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
    3a70:	6810      	ldr	r0, [r2, #0]
    3a72:	42a0      	cmp	r0, r4
    3a74:	d106      	bne.n	3a84 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
    3a76:	f7ff ff0b 	bl	3890 <z_reset_time_slice>
	__asm__ volatile(
    3a7a:	f385 8811 	msr	BASEPRI, r5
    3a7e:	f3bf 8f6f 	isb	sy
}
    3a82:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    3a84:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    3a86:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
    3a88:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    3a8a:	4a0a      	ldr	r2, [pc, #40]	; (3ab4 <z_time_slice+0x5c>)
    3a8c:	5cd3      	ldrb	r3, [r2, r3]
    3a8e:	2b00      	cmp	r3, #0
    3a90:	d0f3      	beq.n	3a7a <z_time_slice+0x22>
    3a92:	4620      	mov	r0, r4
    3a94:	f7ff fece 	bl	3834 <sliceable>
    3a98:	2800      	cmp	r0, #0
    3a9a:	d0ee      	beq.n	3a7a <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
    3a9c:	7b63      	ldrb	r3, [r4, #13]
    3a9e:	06db      	lsls	r3, r3, #27
    3aa0:	d102      	bne.n	3aa8 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
    3aa2:	4620      	mov	r0, r4
    3aa4:	f7ff ff3a 	bl	391c <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
    3aa8:	4620      	mov	r0, r4
    3aaa:	e7e4      	b.n	3a76 <z_time_slice+0x1e>
    3aac:	200009a4 	.word	0x200009a4
    3ab0:	200009c8 	.word	0x200009c8
    3ab4:	20000fc3 	.word	0x20000fc3

00003ab8 <z_pend_curr>:
{
    3ab8:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    3aba:	480c      	ldr	r0, [pc, #48]	; (3aec <z_pend_curr+0x34>)
    3abc:	4d0c      	ldr	r5, [pc, #48]	; (3af0 <z_pend_curr+0x38>)
    3abe:	6886      	ldr	r6, [r0, #8]
{
    3ac0:	460c      	mov	r4, r1
	pending_current = _current;
    3ac2:	602e      	str	r6, [r5, #0]
{
    3ac4:	4611      	mov	r1, r2
    3ac6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    3aca:	f04f 0620 	mov.w	r6, #32
    3ace:	f3ef 8511 	mrs	r5, BASEPRI
    3ad2:	f386 8812 	msr	BASEPRI_MAX, r6
    3ad6:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    3ada:	6880      	ldr	r0, [r0, #8]
    3adc:	f7ff ffa4 	bl	3a28 <pend_locked>
	ret = arch_swap(key);
    3ae0:	4620      	mov	r0, r4
}
    3ae2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3ae6:	f7fd bd4b 	b.w	1580 <arch_swap>
    3aea:	bf00      	nop
    3aec:	200009a4 	.word	0x200009a4
    3af0:	200009c8 	.word	0x200009c8

00003af4 <z_set_prio>:
{
    3af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3af6:	4604      	mov	r4, r0
    3af8:	f04f 0320 	mov.w	r3, #32
    3afc:	f3ef 8611 	mrs	r6, BASEPRI
    3b00:	f383 8812 	msr	BASEPRI_MAX, r3
    3b04:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    3b08:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    3b0a:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    3b0c:	06da      	lsls	r2, r3, #27
    3b0e:	d119      	bne.n	3b44 <z_set_prio+0x50>
	return node->next != NULL;
    3b10:	6985      	ldr	r5, [r0, #24]
    3b12:	b9bd      	cbnz	r5, 3b44 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3b18:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3b1a:	f001 fa22 	bl	4f62 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    3b1e:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    3b20:	4a16      	ldr	r2, [pc, #88]	; (3b7c <z_set_prio+0x88>)
    3b22:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3b26:	7343      	strb	r3, [r0, #13]
    3b28:	4613      	mov	r3, r2
				thread->base.prio = prio;
    3b2a:	7381      	strb	r1, [r0, #14]
    3b2c:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3b30:	4298      	cmp	r0, r3
    3b32:	bf18      	it	ne
    3b34:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    3b36:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3b38:	b95d      	cbnz	r5, 3b52 <z_set_prio+0x5e>
	node->prev = tail;
    3b3a:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    3b3e:	6004      	str	r4, [r0, #0]
	list->tail = node;
    3b40:	6214      	str	r4, [r2, #32]
}
    3b42:	e011      	b.n	3b68 <z_set_prio+0x74>
    3b44:	2000      	movs	r0, #0
			thread->base.prio = prio;
    3b46:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
    3b48:	f386 8811 	msr	BASEPRI, r6
    3b4c:	f3bf 8f6f 	isb	sy
}
    3b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    3b52:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    3b56:	42b9      	cmp	r1, r7
    3b58:	d00b      	beq.n	3b72 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3b5a:	428f      	cmp	r7, r1
    3b5c:	dd09      	ble.n	3b72 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    3b5e:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    3b60:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    3b64:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    3b66:	606c      	str	r4, [r5, #4]
			update_cache(1);
    3b68:	2001      	movs	r0, #1
    3b6a:	f7ff feb9 	bl	38e0 <update_cache>
    3b6e:	2001      	movs	r0, #1
    3b70:	e7ea      	b.n	3b48 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    3b72:	42a8      	cmp	r0, r5
    3b74:	d0e1      	beq.n	3b3a <z_set_prio+0x46>
    3b76:	682d      	ldr	r5, [r5, #0]
    3b78:	e7de      	b.n	3b38 <z_set_prio+0x44>
    3b7a:	bf00      	nop
    3b7c:	200009a4 	.word	0x200009a4

00003b80 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3b80:	b949      	cbnz	r1, 3b96 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3b82:	f3ef 8005 	mrs	r0, IPSR
    3b86:	b930      	cbnz	r0, 3b96 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    3b88:	4b05      	ldr	r3, [pc, #20]	; (3ba0 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    3b8a:	699a      	ldr	r2, [r3, #24]
    3b8c:	689b      	ldr	r3, [r3, #8]
    3b8e:	429a      	cmp	r2, r3
    3b90:	d001      	beq.n	3b96 <z_reschedule+0x16>
    3b92:	f7fd bcf5 	b.w	1580 <arch_swap>
    3b96:	f381 8811 	msr	BASEPRI, r1
    3b9a:	f3bf 8f6f 	isb	sy
}
    3b9e:	4770      	bx	lr
    3ba0:	200009a4 	.word	0x200009a4

00003ba4 <z_sched_start>:
{
    3ba4:	b510      	push	{r4, lr}
	__asm__ volatile(
    3ba6:	f04f 0220 	mov.w	r2, #32
    3baa:	f3ef 8411 	mrs	r4, BASEPRI
    3bae:	f382 8812 	msr	BASEPRI_MAX, r2
    3bb2:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    3bb6:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    3bb8:	0751      	lsls	r1, r2, #29
    3bba:	d404      	bmi.n	3bc6 <z_sched_start+0x22>
	__asm__ volatile(
    3bbc:	f384 8811 	msr	BASEPRI, r4
    3bc0:	f3bf 8f6f 	isb	sy
}
    3bc4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3bc6:	f022 0204 	bic.w	r2, r2, #4
    3bca:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    3bcc:	f7ff fee0 	bl	3990 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    3bd0:	4621      	mov	r1, r4
}
    3bd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    3bd6:	4801      	ldr	r0, [pc, #4]	; (3bdc <z_sched_start+0x38>)
    3bd8:	f7ff bfd2 	b.w	3b80 <z_reschedule>
    3bdc:	20000fc4 	.word	0x20000fc4

00003be0 <z_impl_k_thread_suspend>:
{
    3be0:	b570      	push	{r4, r5, r6, lr}
    3be2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    3be4:	3018      	adds	r0, #24
    3be6:	f001 fa5e 	bl	50a6 <z_abort_timeout>
	__asm__ volatile(
    3bea:	f04f 0320 	mov.w	r3, #32
    3bee:	f3ef 8611 	mrs	r6, BASEPRI
    3bf2:	f383 8812 	msr	BASEPRI_MAX, r3
    3bf6:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    3bfa:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    3bfe:	7b63      	ldrb	r3, [r4, #13]
    3c00:	2a00      	cmp	r2, #0
    3c02:	da05      	bge.n	3c10 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3c04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
    3c08:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3c0a:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3c0c:	f001 f9a9 	bl	4f62 <sys_dlist_remove>
		update_cache(thread == _current);
    3c10:	4d0b      	ldr	r5, [pc, #44]	; (3c40 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    3c12:	7b63      	ldrb	r3, [r4, #13]
    3c14:	68a8      	ldr	r0, [r5, #8]
    3c16:	f043 0310 	orr.w	r3, r3, #16
    3c1a:	7363      	strb	r3, [r4, #13]
    3c1c:	1b03      	subs	r3, r0, r4
    3c1e:	4258      	negs	r0, r3
    3c20:	4158      	adcs	r0, r3
    3c22:	f7ff fe5d 	bl	38e0 <update_cache>
	__asm__ volatile(
    3c26:	f386 8811 	msr	BASEPRI, r6
    3c2a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    3c2e:	68ab      	ldr	r3, [r5, #8]
    3c30:	42a3      	cmp	r3, r4
    3c32:	d103      	bne.n	3c3c <z_impl_k_thread_suspend+0x5c>
}
    3c34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    3c38:	f001 ba2b 	b.w	5092 <z_reschedule_unlocked>
}
    3c3c:	bd70      	pop	{r4, r5, r6, pc}
    3c3e:	bf00      	nop
    3c40:	200009a4 	.word	0x200009a4

00003c44 <k_sched_lock>:
	__asm__ volatile(
    3c44:	f04f 0320 	mov.w	r3, #32
    3c48:	f3ef 8111 	mrs	r1, BASEPRI
    3c4c:	f383 8812 	msr	BASEPRI_MAX, r3
    3c50:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    3c54:	4b04      	ldr	r3, [pc, #16]	; (3c68 <k_sched_lock+0x24>)
    3c56:	689a      	ldr	r2, [r3, #8]
    3c58:	7bd3      	ldrb	r3, [r2, #15]
    3c5a:	3b01      	subs	r3, #1
    3c5c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    3c5e:	f381 8811 	msr	BASEPRI, r1
    3c62:	f3bf 8f6f 	isb	sy
}
    3c66:	4770      	bx	lr
    3c68:	200009a4 	.word	0x200009a4

00003c6c <k_sched_unlock>:
{
    3c6c:	b510      	push	{r4, lr}
	__asm__ volatile(
    3c6e:	f04f 0320 	mov.w	r3, #32
    3c72:	f3ef 8411 	mrs	r4, BASEPRI
    3c76:	f383 8812 	msr	BASEPRI_MAX, r3
    3c7a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    3c7e:	4b08      	ldr	r3, [pc, #32]	; (3ca0 <k_sched_unlock+0x34>)
		update_cache(0);
    3c80:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    3c82:	689a      	ldr	r2, [r3, #8]
    3c84:	7bd3      	ldrb	r3, [r2, #15]
    3c86:	3301      	adds	r3, #1
    3c88:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    3c8a:	f7ff fe29 	bl	38e0 <update_cache>
	__asm__ volatile(
    3c8e:	f384 8811 	msr	BASEPRI, r4
    3c92:	f3bf 8f6f 	isb	sy
}
    3c96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    3c9a:	f001 b9fa 	b.w	5092 <z_reschedule_unlocked>
    3c9e:	bf00      	nop
    3ca0:	200009a4 	.word	0x200009a4

00003ca4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    3ca4:	4b02      	ldr	r3, [pc, #8]	; (3cb0 <z_sched_init+0xc>)
    3ca6:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
    3caa:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
    3cae:	4770      	bx	lr
    3cb0:	200009a4 	.word	0x200009a4

00003cb4 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    3cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    3cb6:	f04f 0320 	mov.w	r3, #32
    3cba:	f3ef 8511 	mrs	r5, BASEPRI
    3cbe:	f383 8812 	msr	BASEPRI_MAX, r3
    3cc2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    3cc6:	4919      	ldr	r1, [pc, #100]	; (3d2c <z_impl_k_yield+0x78>)
    3cc8:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3cca:	7b43      	ldrb	r3, [r0, #13]
    3ccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3cd0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3cd2:	f001 f946 	bl	4f62 <sys_dlist_remove>
	return list->head == list;
    3cd6:	4608      	mov	r0, r1
	}
	queue_thread(_current);
    3cd8:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    3cda:	7b5a      	ldrb	r2, [r3, #13]
    3cdc:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3ce0:	735a      	strb	r2, [r3, #13]
    3ce2:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
    3ce6:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3ce8:	4282      	cmp	r2, r0
    3cea:	bf08      	it	eq
    3cec:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3cee:	b922      	cbnz	r2, 3cfa <z_impl_k_yield+0x46>
	node->prev = tail;
    3cf0:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    3cf4:	6023      	str	r3, [r4, #0]
	list->tail = node;
    3cf6:	620b      	str	r3, [r1, #32]
}
    3cf8:	e00c      	b.n	3d14 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    3cfa:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    3cfe:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    3d02:	42be      	cmp	r6, r7
    3d04:	d00e      	beq.n	3d24 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3d06:	42b7      	cmp	r7, r6
    3d08:	dd0c      	ble.n	3d24 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    3d0a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    3d0c:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    3d10:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    3d12:	6053      	str	r3, [r2, #4]
	update_cache(1);
    3d14:	2001      	movs	r0, #1
    3d16:	f7ff fde3 	bl	38e0 <update_cache>
    3d1a:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    3d1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3d20:	f7fd bc2e 	b.w	1580 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    3d24:	42a2      	cmp	r2, r4
    3d26:	d0e3      	beq.n	3cf0 <z_impl_k_yield+0x3c>
    3d28:	6812      	ldr	r2, [r2, #0]
    3d2a:	e7e0      	b.n	3cee <z_impl_k_yield+0x3a>
    3d2c:	200009a4 	.word	0x200009a4

00003d30 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    3d30:	ea50 0301 	orrs.w	r3, r0, r1
{
    3d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d38:	4605      	mov	r5, r0
    3d3a:	460e      	mov	r6, r1
	if (ticks == 0) {
    3d3c:	d103      	bne.n	3d46 <z_tick_sleep+0x16>
	z_impl_k_yield();
    3d3e:	f7ff ffb9 	bl	3cb4 <z_impl_k_yield>
		k_yield();
		return 0;
    3d42:	2000      	movs	r0, #0
    3d44:	e02c      	b.n	3da0 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    3d46:	1c83      	adds	r3, r0, #2
    3d48:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    3d4c:	db2a      	blt.n	3da4 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    3d4e:	f001 f9d0 	bl	50f2 <sys_clock_tick_get_32>
    3d52:	182c      	adds	r4, r5, r0
    3d54:	f04f 0320 	mov.w	r3, #32
    3d58:	f3ef 8811 	mrs	r8, BASEPRI
    3d5c:	f383 8812 	msr	BASEPRI_MAX, r3
    3d60:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    3d64:	4f11      	ldr	r7, [pc, #68]	; (3dac <z_tick_sleep+0x7c>)
    3d66:	4b12      	ldr	r3, [pc, #72]	; (3db0 <z_tick_sleep+0x80>)
    3d68:	68b8      	ldr	r0, [r7, #8]
    3d6a:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    3d6c:	f7ff fe44 	bl	39f8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    3d70:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3d72:	4910      	ldr	r1, [pc, #64]	; (3db4 <z_tick_sleep+0x84>)
    3d74:	462a      	mov	r2, r5
    3d76:	4633      	mov	r3, r6
    3d78:	3018      	adds	r0, #24
    3d7a:	f000 f8fd 	bl	3f78 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    3d7e:	68ba      	ldr	r2, [r7, #8]
    3d80:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
    3d82:	7b53      	ldrb	r3, [r2, #13]
    3d84:	f043 0310 	orr.w	r3, r3, #16
    3d88:	7353      	strb	r3, [r2, #13]
    3d8a:	f7fd fbf9 	bl	1580 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    3d8e:	f001 f9b0 	bl	50f2 <sys_clock_tick_get_32>
    3d92:	1a20      	subs	r0, r4, r0
    3d94:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    3d98:	2801      	cmp	r0, #1
    3d9a:	f173 0300 	sbcs.w	r3, r3, #0
    3d9e:	dbd0      	blt.n	3d42 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    3da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    3da4:	f06f 0401 	mvn.w	r4, #1
    3da8:	1a24      	subs	r4, r4, r0
    3daa:	e7d3      	b.n	3d54 <z_tick_sleep+0x24>
    3dac:	200009a4 	.word	0x200009a4
    3db0:	200009c8 	.word	0x200009c8
    3db4:	0000503b 	.word	0x0000503b

00003db8 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3db8:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    3dbc:	bf08      	it	eq
    3dbe:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    3dc2:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3dc4:	d106      	bne.n	3dd4 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    3dc6:	4b08      	ldr	r3, [pc, #32]	; (3de8 <z_impl_k_sleep+0x30>)
    3dc8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    3dca:	f7ff ff09 	bl	3be0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    3dce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    3dd2:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    3dd4:	f7ff ffac 	bl	3d30 <z_tick_sleep>
    3dd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    3ddc:	fb80 0303 	smull	r0, r3, r0, r3
    3de0:	0bc0      	lsrs	r0, r0, #15
    3de2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    3de6:	e7f4      	b.n	3dd2 <z_impl_k_sleep+0x1a>
    3de8:	200009a4 	.word	0x200009a4

00003dec <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    3dec:	4b01      	ldr	r3, [pc, #4]	; (3df4 <z_impl_z_current_get+0x8>)
    3dee:	6898      	ldr	r0, [r3, #8]
    3df0:	4770      	bx	lr
    3df2:	bf00      	nop
    3df4:	200009a4 	.word	0x200009a4

00003df8 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    3df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3dfc:	4604      	mov	r4, r0
    3dfe:	f04f 0320 	mov.w	r3, #32
    3e02:	f3ef 8611 	mrs	r6, BASEPRI
    3e06:	f383 8812 	msr	BASEPRI_MAX, r3
    3e0a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    3e0e:	7b03      	ldrb	r3, [r0, #12]
    3e10:	07d9      	lsls	r1, r3, #31
    3e12:	d50b      	bpl.n	3e2c <z_thread_abort+0x34>
	__asm__ volatile(
    3e14:	f386 8811 	msr	BASEPRI, r6
    3e18:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    3e1c:	4040      	eors	r0, r0
    3e1e:	f380 8811 	msr	BASEPRI, r0
    3e22:	f04f 0004 	mov.w	r0, #4
    3e26:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    3e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    3e2c:	7b43      	ldrb	r3, [r0, #13]
    3e2e:	071a      	lsls	r2, r3, #28
    3e30:	d504      	bpl.n	3e3c <z_thread_abort+0x44>
    3e32:	f386 8811 	msr	BASEPRI, r6
    3e36:	f3bf 8f6f 	isb	sy
    3e3a:	e7f5      	b.n	3e28 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    3e3c:	f023 0220 	bic.w	r2, r3, #32
    3e40:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    3e44:	09d2      	lsrs	r2, r2, #7
    3e46:	d120      	bne.n	3e8a <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    3e48:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    3e4a:	68a3      	ldr	r3, [r4, #8]
    3e4c:	b113      	cbz	r3, 3e54 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    3e4e:	4620      	mov	r0, r4
    3e50:	f001 f88f 	bl	4f72 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    3e54:	f104 0018 	add.w	r0, r4, #24
    3e58:	f001 f925 	bl	50a6 <z_abort_timeout>
    3e5c:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    3e60:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    3e64:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3e66:	42bd      	cmp	r5, r7
    3e68:	d000      	beq.n	3e6c <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    3e6a:	b9b5      	cbnz	r5, 3e9a <z_thread_abort+0xa2>
		update_cache(1);
    3e6c:	2001      	movs	r0, #1
    3e6e:	f7ff fd37 	bl	38e0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    3e72:	4b10      	ldr	r3, [pc, #64]	; (3eb4 <z_thread_abort+0xbc>)
    3e74:	689b      	ldr	r3, [r3, #8]
    3e76:	42a3      	cmp	r3, r4
    3e78:	d1db      	bne.n	3e32 <z_thread_abort+0x3a>
    3e7a:	f3ef 8305 	mrs	r3, IPSR
    3e7e:	2b00      	cmp	r3, #0
    3e80:	d1d7      	bne.n	3e32 <z_thread_abort+0x3a>
    3e82:	4630      	mov	r0, r6
    3e84:	f7fd fb7c 	bl	1580 <arch_swap>
	return ret;
    3e88:	e7d3      	b.n	3e32 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3e8a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    3e8e:	f043 0308 	orr.w	r3, r3, #8
    3e92:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3e94:	f001 f865 	bl	4f62 <sys_dlist_remove>
}
    3e98:	e7d7      	b.n	3e4a <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    3e9a:	4628      	mov	r0, r5
    3e9c:	f001 f869 	bl	4f72 <unpend_thread_no_timeout>
    3ea0:	f105 0018 	add.w	r0, r5, #24
    3ea4:	f001 f8ff 	bl	50a6 <z_abort_timeout>
		ready_thread(thread);
    3ea8:	4628      	mov	r0, r5
    3eaa:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
    3eae:	f7ff fd6f 	bl	3990 <ready_thread>
    3eb2:	e7d7      	b.n	3e64 <z_thread_abort+0x6c>
    3eb4:	200009a4 	.word	0x200009a4

00003eb8 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    3eb8:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    3eba:	4806      	ldr	r0, [pc, #24]	; (3ed4 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    3ebc:	4a06      	ldr	r2, [pc, #24]	; (3ed8 <z_data_copy+0x20>)
    3ebe:	4907      	ldr	r1, [pc, #28]	; (3edc <z_data_copy+0x24>)
    3ec0:	1a12      	subs	r2, r2, r0
    3ec2:	f000 ffe3 	bl	4e8c <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    3ec6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    3eca:	4a05      	ldr	r2, [pc, #20]	; (3ee0 <z_data_copy+0x28>)
    3ecc:	4905      	ldr	r1, [pc, #20]	; (3ee4 <z_data_copy+0x2c>)
    3ece:	4806      	ldr	r0, [pc, #24]	; (3ee8 <z_data_copy+0x30>)
    3ed0:	f000 bfdc 	b.w	4e8c <z_early_memcpy>
    3ed4:	20000000 	.word	0x20000000
    3ed8:	20000174 	.word	0x20000174
    3edc:	00005878 	.word	0x00005878
    3ee0:	00000000 	.word	0x00000000
    3ee4:	00005878 	.word	0x00005878
    3ee8:	20000000 	.word	0x20000000

00003eec <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    3eec:	4b03      	ldr	r3, [pc, #12]	; (3efc <elapsed+0x10>)
    3eee:	681b      	ldr	r3, [r3, #0]
    3ef0:	b90b      	cbnz	r3, 3ef6 <elapsed+0xa>
    3ef2:	f7fe bc4b 	b.w	278c <sys_clock_elapsed>
}
    3ef6:	2000      	movs	r0, #0
    3ef8:	4770      	bx	lr
    3efa:	bf00      	nop
    3efc:	200009d4 	.word	0x200009d4

00003f00 <next_timeout>:

static int32_t next_timeout(void)
{
    3f00:	b510      	push	{r4, lr}
	return list->head == list;
    3f02:	4b0e      	ldr	r3, [pc, #56]	; (3f3c <next_timeout+0x3c>)
    3f04:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3f06:	429c      	cmp	r4, r3
    3f08:	d104      	bne.n	3f14 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    3f0a:	f7ff ffef 	bl	3eec <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    3f0e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
    3f12:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    3f14:	f7ff ffea 	bl	3eec <elapsed>
	if ((to == NULL) ||
    3f18:	2c00      	cmp	r4, #0
    3f1a:	d0f8      	beq.n	3f0e <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    3f1c:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    3f20:	1a1b      	subs	r3, r3, r0
    3f22:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    3f26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    3f2a:	f172 0100 	sbcs.w	r1, r2, #0
    3f2e:	daee      	bge.n	3f0e <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    3f30:	2a00      	cmp	r2, #0
    3f32:	bfac      	ite	ge
    3f34:	4618      	movge	r0, r3
    3f36:	2000      	movlt	r0, #0
	return ret;
    3f38:	e7eb      	b.n	3f12 <next_timeout+0x12>
    3f3a:	bf00      	nop
    3f3c:	200000b4 	.word	0x200000b4

00003f40 <remove_timeout>:
{
    3f40:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3f42:	b170      	cbz	r0, 3f62 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    3f44:	4b0b      	ldr	r3, [pc, #44]	; (3f74 <remove_timeout+0x34>)
    3f46:	685b      	ldr	r3, [r3, #4]
    3f48:	4298      	cmp	r0, r3
    3f4a:	d00a      	beq.n	3f62 <remove_timeout+0x22>
    3f4c:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    3f4e:	b143      	cbz	r3, 3f62 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    3f50:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    3f54:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    3f58:	1912      	adds	r2, r2, r4
    3f5a:	eb41 0105 	adc.w	r1, r1, r5
    3f5e:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    3f62:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    3f66:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    3f68:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    3f6a:	2300      	movs	r3, #0
	node->prev = NULL;
    3f6c:	e9c0 3300 	strd	r3, r3, [r0]
}
    3f70:	bd30      	pop	{r4, r5, pc}
    3f72:	bf00      	nop
    3f74:	200000b4 	.word	0x200000b4

00003f78 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3f78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    3f7c:	bf08      	it	eq
    3f7e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    3f82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f84:	4604      	mov	r4, r0
    3f86:	461d      	mov	r5, r3
    3f88:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3f8a:	d05c      	beq.n	4046 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x46>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    3f8c:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    3f8e:	f04f 0320 	mov.w	r3, #32
    3f92:	f3ef 8711 	mrs	r7, BASEPRI
    3f96:	f383 8812 	msr	BASEPRI_MAX, r3
    3f9a:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    3f9e:	3201      	adds	r2, #1
    3fa0:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    3fa4:	da24      	bge.n	3ff0 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    3fa6:	f06f 0301 	mvn.w	r3, #1
    3faa:	492c      	ldr	r1, [pc, #176]	; (405c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5c>)
    3fac:	e9d1 2000 	ldrd	r2, r0, [r1]
    3fb0:	1a9b      	subs	r3, r3, r2
    3fb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3fb6:	eb62 0000 	sbc.w	r0, r2, r0
    3fba:	1b9e      	subs	r6, r3, r6
    3fbc:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    3fc0:	2e01      	cmp	r6, #1
    3fc2:	f170 0300 	sbcs.w	r3, r0, #0
    3fc6:	da01      	bge.n	3fcc <z_add_timeout+0x54>
    3fc8:	2601      	movs	r6, #1
    3fca:	2000      	movs	r0, #0
    3fcc:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    3fd0:	4e23      	ldr	r6, [pc, #140]	; (4060 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x60>)
    3fd2:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    3fd6:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3fd8:	45b4      	cmp	ip, r6
    3fda:	bf08      	it	eq
    3fdc:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    3fe0:	f1bc 0f00 	cmp.w	ip, #0
    3fe4:	d10d      	bne.n	4002 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2>
	node->prev = tail;
    3fe6:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    3fea:	602c      	str	r4, [r5, #0]
	list->tail = node;
    3fec:	6074      	str	r4, [r6, #4]
}
    3fee:	e01c      	b.n	402a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2a>
			to->dticks = timeout.ticks + 1 + elapsed();
    3ff0:	f7ff ff7c 	bl	3eec <elapsed>
    3ff4:	3601      	adds	r6, #1
    3ff6:	f145 0500 	adc.w	r5, r5, #0
    3ffa:	1836      	adds	r6, r6, r0
    3ffc:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    4000:	e7e4      	b.n	3fcc <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    4002:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    4006:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    400a:	4293      	cmp	r3, r2
    400c:	eb71 0e00 	sbcs.w	lr, r1, r0
    4010:	da1a      	bge.n	4048 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x48>
				t->dticks -= to->dticks;
    4012:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    4014:	f8dc 3004 	ldr.w	r3, [ip, #4]
    4018:	eb60 0001 	sbc.w	r0, r0, r1
    401c:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    4020:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    4024:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    4026:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    402a:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    402c:	42b3      	cmp	r3, r6
    402e:	d006      	beq.n	403e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3e>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    4030:	429c      	cmp	r4, r3
    4032:	d104      	bne.n	403e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3e>
			sys_clock_set_timeout(next_timeout(), false);
    4034:	f7ff ff64 	bl	3f00 <next_timeout>
    4038:	2100      	movs	r1, #0
    403a:	f7fe fb75 	bl	2728 <sys_clock_set_timeout>
	__asm__ volatile(
    403e:	f387 8811 	msr	BASEPRI, r7
    4042:	f3bf 8f6f 	isb	sy
		}
	}
}
    4046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    4048:	1a9b      	subs	r3, r3, r2
    404a:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    404e:	45ac      	cmp	ip, r5
    4050:	e9c4 3104 	strd	r3, r1, [r4, #16]
    4054:	d0c7      	beq.n	3fe6 <z_add_timeout+0x6e>
    4056:	f8dc c000 	ldr.w	ip, [ip]
    405a:	e7c1      	b.n	3fe0 <z_add_timeout+0x68>
    405c:	200002b0 	.word	0x200002b0
    4060:	200000b4 	.word	0x200000b4

00004064 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    4064:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    4068:	f04f 0320 	mov.w	r3, #32
    406c:	f3ef 8c11 	mrs	ip, BASEPRI
    4070:	f383 8812 	msr	BASEPRI_MAX, r3
    4074:	f3bf 8f6f 	isb	sy
	return list->head == list;
    4078:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 412c <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    407c:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 4130 <sys_clock_announce+0xcc>
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
		t->dticks = 0;
    4080:	2400      	movs	r4, #0
	announce_remaining = ticks;
    4082:	f8c9 0000 	str.w	r0, [r9]
    4086:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
    408a:	2500      	movs	r5, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    408c:	4550      	cmp	r0, sl
    408e:	bf08      	it	eq
    4090:	2000      	moveq	r0, #0
		curr_tick += dt;
    4092:	4f28      	ldr	r7, [pc, #160]	; (4134 <sys_clock_announce+0xd0>)
    4094:	46e0      	mov	r8, ip
    4096:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
    409a:	f8d9 3000 	ldr.w	r3, [r9]
    409e:	b380      	cbz	r0, 4102 <sys_clock_announce+0x9e>
    40a0:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
    40a4:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    40a8:	42b3      	cmp	r3, r6
    40aa:	eb7e 0b0c 	sbcs.w	fp, lr, ip
    40ae:	da05      	bge.n	40bc <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    40b0:	1af6      	subs	r6, r6, r3
    40b2:	eb6c 040e 	sbc.w	r4, ip, lr
    40b6:	e9c0 6404 	strd	r6, r4, [r0, #16]
    40ba:	e022      	b.n	4102 <sys_clock_announce+0x9e>
		curr_tick += dt;
    40bc:	18b2      	adds	r2, r6, r2
    40be:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
    40c2:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
    40c6:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
    40ca:	f7ff ff39 	bl	3f40 <remove_timeout>
	__asm__ volatile(
    40ce:	f388 8811 	msr	BASEPRI, r8
    40d2:	f3bf 8f6f 	isb	sy
		t->fn(t);
    40d6:	6883      	ldr	r3, [r0, #8]
    40d8:	4798      	blx	r3
	__asm__ volatile(
    40da:	f04f 0320 	mov.w	r3, #32
    40de:	f3ef 8811 	mrs	r8, BASEPRI
    40e2:	f383 8812 	msr	BASEPRI_MAX, r3
    40e6:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    40ea:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
    40ee:	f8da 0000 	ldr.w	r0, [sl]
    40f2:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
    40f4:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
    40f6:	46c4      	mov	ip, r8
    40f8:	f8c9 3000 	str.w	r3, [r9]
    40fc:	d1ca      	bne.n	4094 <sys_clock_announce+0x30>
		curr_tick += dt;
    40fe:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    4102:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    4104:	189a      	adds	r2, r3, r2
    4106:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
    410a:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
    410e:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
    4112:	f7ff fef5 	bl	3f00 <next_timeout>
    4116:	4621      	mov	r1, r4
    4118:	f7fe fb06 	bl	2728 <sys_clock_set_timeout>
	__asm__ volatile(
    411c:	f388 8811 	msr	BASEPRI, r8
    4120:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
    4124:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
    4128:	f7ff bc96 	b.w	3a58 <z_time_slice>
    412c:	200000b4 	.word	0x200000b4
    4130:	200009d4 	.word	0x200009d4
    4134:	200002b0 	.word	0x200002b0

00004138 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    4138:	b510      	push	{r4, lr}
	__asm__ volatile(
    413a:	f04f 0320 	mov.w	r3, #32
    413e:	f3ef 8411 	mrs	r4, BASEPRI
    4142:	f383 8812 	msr	BASEPRI_MAX, r3
    4146:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    414a:	f7ff fecf 	bl	3eec <elapsed>
    414e:	4603      	mov	r3, r0
    4150:	4a05      	ldr	r2, [pc, #20]	; (4168 <sys_clock_tick_get+0x30>)
    4152:	e9d2 0100 	ldrd	r0, r1, [r2]
    4156:	1818      	adds	r0, r3, r0
    4158:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    415c:	f384 8811 	msr	BASEPRI, r4
    4160:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    4164:	bd10      	pop	{r4, pc}
    4166:	bf00      	nop
    4168:	200002b0 	.word	0x200002b0

0000416c <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    416c:	4801      	ldr	r0, [pc, #4]	; (4174 <boot_banner+0x8>)
    416e:	f000 b9ac 	b.w	44ca <printk>
    4172:	bf00      	nop
    4174:	00005846 	.word	0x00005846

00004178 <nrf_cc3xx_platform_init_no_rng>:
    4178:	b510      	push	{r4, lr}
    417a:	4c0a      	ldr	r4, [pc, #40]	; (41a4 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    417c:	6823      	ldr	r3, [r4, #0]
    417e:	b11b      	cbz	r3, 4188 <nrf_cc3xx_platform_init_no_rng+0x10>
    4180:	2301      	movs	r3, #1
    4182:	6023      	str	r3, [r4, #0]
    4184:	2000      	movs	r0, #0
    4186:	bd10      	pop	{r4, pc}
    4188:	f000 f8f4 	bl	4374 <CC_LibInitNoRng>
    418c:	2800      	cmp	r0, #0
    418e:	d0f7      	beq.n	4180 <nrf_cc3xx_platform_init_no_rng+0x8>
    4190:	3801      	subs	r0, #1
    4192:	2807      	cmp	r0, #7
    4194:	d803      	bhi.n	419e <nrf_cc3xx_platform_init_no_rng+0x26>
    4196:	4b04      	ldr	r3, [pc, #16]	; (41a8 <nrf_cc3xx_platform_init_no_rng+0x30>)
    4198:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    419c:	bd10      	pop	{r4, pc}
    419e:	4803      	ldr	r0, [pc, #12]	; (41ac <nrf_cc3xx_platform_init_no_rng+0x34>)
    41a0:	bd10      	pop	{r4, pc}
    41a2:	bf00      	nop
    41a4:	200009d8 	.word	0x200009d8
    41a8:	00005548 	.word	0x00005548
    41ac:	ffff8ffe 	.word	0xffff8ffe

000041b0 <nrf_cc3xx_platform_abort>:
    41b0:	f3bf 8f4f 	dsb	sy
    41b4:	4905      	ldr	r1, [pc, #20]	; (41cc <nrf_cc3xx_platform_abort+0x1c>)
    41b6:	4b06      	ldr	r3, [pc, #24]	; (41d0 <nrf_cc3xx_platform_abort+0x20>)
    41b8:	68ca      	ldr	r2, [r1, #12]
    41ba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    41be:	4313      	orrs	r3, r2
    41c0:	60cb      	str	r3, [r1, #12]
    41c2:	f3bf 8f4f 	dsb	sy
    41c6:	bf00      	nop
    41c8:	e7fd      	b.n	41c6 <nrf_cc3xx_platform_abort+0x16>
    41ca:	bf00      	nop
    41cc:	e000ed00 	.word	0xe000ed00
    41d0:	05fa0004 	.word	0x05fa0004

000041d4 <CC_PalAbort>:
    41d4:	b430      	push	{r4, r5}
    41d6:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    41da:	2500      	movs	r5, #0
    41dc:	4b0b      	ldr	r3, [pc, #44]	; (420c <CC_PalAbort+0x38>)
    41de:	4c0c      	ldr	r4, [pc, #48]	; (4210 <CC_PalAbort+0x3c>)
    41e0:	490c      	ldr	r1, [pc, #48]	; (4214 <CC_PalAbort+0x40>)
    41e2:	6849      	ldr	r1, [r1, #4]
    41e4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    41e8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    41ec:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    41f0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    41f4:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    41f8:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
    41fc:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    4200:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
    4204:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    4208:	bc30      	pop	{r4, r5}
    420a:	4708      	bx	r1
    420c:	50845000 	.word	0x50845000
    4210:	50844000 	.word	0x50844000
    4214:	200000bc 	.word	0x200000bc

00004218 <nrf_cc3xx_platform_set_abort>:
    4218:	4b02      	ldr	r3, [pc, #8]	; (4224 <nrf_cc3xx_platform_set_abort+0xc>)
    421a:	e9d0 1200 	ldrd	r1, r2, [r0]
    421e:	e9c3 1200 	strd	r1, r2, [r3]
    4222:	4770      	bx	lr
    4224:	200000bc 	.word	0x200000bc

00004228 <mutex_free>:
    4228:	b510      	push	{r4, lr}
    422a:	4604      	mov	r4, r0
    422c:	b150      	cbz	r0, 4244 <mutex_free+0x1c>
    422e:	6863      	ldr	r3, [r4, #4]
    4230:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    4234:	d005      	beq.n	4242 <mutex_free+0x1a>
    4236:	4a06      	ldr	r2, [pc, #24]	; (4250 <mutex_free+0x28>)
    4238:	4293      	cmp	r3, r2
    423a:	d002      	beq.n	4242 <mutex_free+0x1a>
    423c:	2300      	movs	r3, #0
    423e:	6062      	str	r2, [r4, #4]
    4240:	6023      	str	r3, [r4, #0]
    4242:	bd10      	pop	{r4, pc}
    4244:	4b03      	ldr	r3, [pc, #12]	; (4254 <mutex_free+0x2c>)
    4246:	4804      	ldr	r0, [pc, #16]	; (4258 <mutex_free+0x30>)
    4248:	685b      	ldr	r3, [r3, #4]
    424a:	4798      	blx	r3
    424c:	e7ef      	b.n	422e <mutex_free+0x6>
    424e:	bf00      	nop
    4250:	a95c5f2c 	.word	0xa95c5f2c
    4254:	200000bc 	.word	0x200000bc
    4258:	00005568 	.word	0x00005568

0000425c <mutex_lock>:
    425c:	b1c8      	cbz	r0, 4292 <mutex_lock+0x36>
    425e:	6843      	ldr	r3, [r0, #4]
    4260:	4a0d      	ldr	r2, [pc, #52]	; (4298 <mutex_lock+0x3c>)
    4262:	4293      	cmp	r3, r2
    4264:	d013      	beq.n	428e <mutex_lock+0x32>
    4266:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    426a:	d00e      	beq.n	428a <mutex_lock+0x2e>
    426c:	2301      	movs	r3, #1
    426e:	e850 2f00 	ldrex	r2, [r0]
    4272:	4619      	mov	r1, r3
    4274:	e840 1c00 	strex	ip, r1, [r0]
    4278:	f09c 0f00 	teq	ip, #0
    427c:	d1f7      	bne.n	426e <mutex_lock+0x12>
    427e:	2a01      	cmp	r2, #1
    4280:	d0f5      	beq.n	426e <mutex_lock+0x12>
    4282:	f3bf 8f5f 	dmb	sy
    4286:	2000      	movs	r0, #0
    4288:	4770      	bx	lr
    428a:	4804      	ldr	r0, [pc, #16]	; (429c <mutex_lock+0x40>)
    428c:	4770      	bx	lr
    428e:	4804      	ldr	r0, [pc, #16]	; (42a0 <mutex_lock+0x44>)
    4290:	4770      	bx	lr
    4292:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    4296:	4770      	bx	lr
    4298:	a95c5f2c 	.word	0xa95c5f2c
    429c:	ffff8fe9 	.word	0xffff8fe9
    42a0:	ffff8fea 	.word	0xffff8fea

000042a4 <mutex_unlock>:
    42a4:	4603      	mov	r3, r0
    42a6:	b180      	cbz	r0, 42ca <mutex_unlock+0x26>
    42a8:	6842      	ldr	r2, [r0, #4]
    42aa:	4909      	ldr	r1, [pc, #36]	; (42d0 <mutex_unlock+0x2c>)
    42ac:	428a      	cmp	r2, r1
    42ae:	d00a      	beq.n	42c6 <mutex_unlock+0x22>
    42b0:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    42b4:	d005      	beq.n	42c2 <mutex_unlock+0x1e>
    42b6:	f3bf 8f5f 	dmb	sy
    42ba:	2200      	movs	r2, #0
    42bc:	4610      	mov	r0, r2
    42be:	601a      	str	r2, [r3, #0]
    42c0:	4770      	bx	lr
    42c2:	4804      	ldr	r0, [pc, #16]	; (42d4 <mutex_unlock+0x30>)
    42c4:	4770      	bx	lr
    42c6:	4804      	ldr	r0, [pc, #16]	; (42d8 <mutex_unlock+0x34>)
    42c8:	4770      	bx	lr
    42ca:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    42ce:	4770      	bx	lr
    42d0:	a95c5f2c 	.word	0xa95c5f2c
    42d4:	ffff8fe9 	.word	0xffff8fe9
    42d8:	ffff8fea 	.word	0xffff8fea

000042dc <mutex_init>:
    42dc:	b510      	push	{r4, lr}
    42de:	4604      	mov	r4, r0
    42e0:	b120      	cbz	r0, 42ec <mutex_init+0x10>
    42e2:	2300      	movs	r3, #0
    42e4:	4a03      	ldr	r2, [pc, #12]	; (42f4 <mutex_init+0x18>)
    42e6:	6023      	str	r3, [r4, #0]
    42e8:	6062      	str	r2, [r4, #4]
    42ea:	bd10      	pop	{r4, pc}
    42ec:	4802      	ldr	r0, [pc, #8]	; (42f8 <mutex_init+0x1c>)
    42ee:	f7ff ff71 	bl	41d4 <CC_PalAbort>
    42f2:	e7f6      	b.n	42e2 <mutex_init+0x6>
    42f4:	3a00003a 	.word	0x3a00003a
    42f8:	00005590 	.word	0x00005590

000042fc <nrf_cc3xx_platform_set_mutexes>:
    42fc:	b570      	push	{r4, r5, r6, lr}
    42fe:	4c19      	ldr	r4, [pc, #100]	; (4364 <nrf_cc3xx_platform_set_mutexes+0x68>)
    4300:	f8d0 c004 	ldr.w	ip, [r0, #4]
    4304:	6806      	ldr	r6, [r0, #0]
    4306:	f8c4 c004 	str.w	ip, [r4, #4]
    430a:	f8d0 c008 	ldr.w	ip, [r0, #8]
    430e:	68c0      	ldr	r0, [r0, #12]
    4310:	f8c4 c008 	str.w	ip, [r4, #8]
    4314:	60e0      	str	r0, [r4, #12]
    4316:	6026      	str	r6, [r4, #0]
    4318:	6808      	ldr	r0, [r1, #0]
    431a:	4b13      	ldr	r3, [pc, #76]	; (4368 <nrf_cc3xx_platform_set_mutexes+0x6c>)
    431c:	4d13      	ldr	r5, [pc, #76]	; (436c <nrf_cc3xx_platform_set_mutexes+0x70>)
    431e:	6018      	str	r0, [r3, #0]
    4320:	6848      	ldr	r0, [r1, #4]
    4322:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
    4326:	6058      	str	r0, [r3, #4]
    4328:	6888      	ldr	r0, [r1, #8]
    432a:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    432e:	6098      	str	r0, [r3, #8]
    4330:	68c8      	ldr	r0, [r1, #12]
    4332:	6909      	ldr	r1, [r1, #16]
    4334:	60d8      	str	r0, [r3, #12]
    4336:	6119      	str	r1, [r3, #16]
    4338:	d012      	beq.n	4360 <nrf_cc3xx_platform_set_mutexes+0x64>
    433a:	2300      	movs	r3, #0
    433c:	4a0c      	ldr	r2, [pc, #48]	; (4370 <nrf_cc3xx_platform_set_mutexes+0x74>)
    433e:	f505 708a 	add.w	r0, r5, #276	; 0x114
    4342:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
    4346:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    434a:	f8c5 2118 	str.w	r2, [r5, #280]	; 0x118
    434e:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
    4352:	47b0      	blx	r6
    4354:	6823      	ldr	r3, [r4, #0]
    4356:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    435a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    435e:	4718      	bx	r3
    4360:	bd70      	pop	{r4, r5, r6, pc}
    4362:	bf00      	nop
    4364:	200000d8 	.word	0x200000d8
    4368:	200000c4 	.word	0x200000c4
    436c:	200009f0 	.word	0x200009f0
    4370:	a95c5f2c 	.word	0xa95c5f2c

00004374 <CC_LibInitNoRng>:
    4374:	b508      	push	{r3, lr}
    4376:	f000 f811 	bl	439c <CC_HalInit>
    437a:	b930      	cbnz	r0, 438a <CC_LibInitNoRng+0x16>
    437c:	f000 f810 	bl	43a0 <CC_PalInit>
    4380:	b938      	cbnz	r0, 4392 <CC_LibInitNoRng+0x1e>
    4382:	4a05      	ldr	r2, [pc, #20]	; (4398 <CC_LibInitNoRng+0x24>)
    4384:	f8c2 0a0c 	str.w	r0, [r2, #2572]	; 0xa0c
    4388:	bd08      	pop	{r3, pc}
    438a:	f000 f837 	bl	43fc <CC_PalTerminate>
    438e:	2003      	movs	r0, #3
    4390:	bd08      	pop	{r3, pc}
    4392:	2004      	movs	r0, #4
    4394:	bd08      	pop	{r3, pc}
    4396:	bf00      	nop
    4398:	50845000 	.word	0x50845000

0000439c <CC_HalInit>:
    439c:	2000      	movs	r0, #0
    439e:	4770      	bx	lr

000043a0 <CC_PalInit>:
    43a0:	b510      	push	{r4, lr}
    43a2:	4811      	ldr	r0, [pc, #68]	; (43e8 <CC_PalInit+0x48>)
    43a4:	f000 f848 	bl	4438 <CC_PalMutexCreate>
    43a8:	b100      	cbz	r0, 43ac <CC_PalInit+0xc>
    43aa:	bd10      	pop	{r4, pc}
    43ac:	480f      	ldr	r0, [pc, #60]	; (43ec <CC_PalInit+0x4c>)
    43ae:	f000 f843 	bl	4438 <CC_PalMutexCreate>
    43b2:	2800      	cmp	r0, #0
    43b4:	d1f9      	bne.n	43aa <CC_PalInit+0xa>
    43b6:	4c0e      	ldr	r4, [pc, #56]	; (43f0 <CC_PalInit+0x50>)
    43b8:	4620      	mov	r0, r4
    43ba:	f000 f83d 	bl	4438 <CC_PalMutexCreate>
    43be:	2800      	cmp	r0, #0
    43c0:	d1f3      	bne.n	43aa <CC_PalInit+0xa>
    43c2:	4b0c      	ldr	r3, [pc, #48]	; (43f4 <CC_PalInit+0x54>)
    43c4:	480c      	ldr	r0, [pc, #48]	; (43f8 <CC_PalInit+0x58>)
    43c6:	601c      	str	r4, [r3, #0]
    43c8:	f000 f836 	bl	4438 <CC_PalMutexCreate>
    43cc:	4601      	mov	r1, r0
    43ce:	2800      	cmp	r0, #0
    43d0:	d1eb      	bne.n	43aa <CC_PalInit+0xa>
    43d2:	f000 f82d 	bl	4430 <CC_PalDmaInit>
    43d6:	4604      	mov	r4, r0
    43d8:	b108      	cbz	r0, 43de <CC_PalInit+0x3e>
    43da:	4620      	mov	r0, r4
    43dc:	bd10      	pop	{r4, pc}
    43de:	f000 f83f 	bl	4460 <CC_PalPowerSaveModeInit>
    43e2:	4620      	mov	r0, r4
    43e4:	e7fa      	b.n	43dc <CC_PalInit+0x3c>
    43e6:	bf00      	nop
    43e8:	20000118 	.word	0x20000118
    43ec:	20000114 	.word	0x20000114
    43f0:	20000110 	.word	0x20000110
    43f4:	20000108 	.word	0x20000108
    43f8:	2000010c 	.word	0x2000010c

000043fc <CC_PalTerminate>:
    43fc:	b508      	push	{r3, lr}
    43fe:	4808      	ldr	r0, [pc, #32]	; (4420 <CC_PalTerminate+0x24>)
    4400:	f000 f824 	bl	444c <CC_PalMutexDestroy>
    4404:	4807      	ldr	r0, [pc, #28]	; (4424 <CC_PalTerminate+0x28>)
    4406:	f000 f821 	bl	444c <CC_PalMutexDestroy>
    440a:	4807      	ldr	r0, [pc, #28]	; (4428 <CC_PalTerminate+0x2c>)
    440c:	f000 f81e 	bl	444c <CC_PalMutexDestroy>
    4410:	4806      	ldr	r0, [pc, #24]	; (442c <CC_PalTerminate+0x30>)
    4412:	f000 f81b 	bl	444c <CC_PalMutexDestroy>
    4416:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    441a:	f000 b80b 	b.w	4434 <CC_PalDmaTerminate>
    441e:	bf00      	nop
    4420:	20000118 	.word	0x20000118
    4424:	20000114 	.word	0x20000114
    4428:	20000110 	.word	0x20000110
    442c:	2000010c 	.word	0x2000010c

00004430 <CC_PalDmaInit>:
    4430:	2000      	movs	r0, #0
    4432:	4770      	bx	lr

00004434 <CC_PalDmaTerminate>:
    4434:	4770      	bx	lr
    4436:	bf00      	nop

00004438 <CC_PalMutexCreate>:
    4438:	b508      	push	{r3, lr}
    443a:	4b03      	ldr	r3, [pc, #12]	; (4448 <CC_PalMutexCreate+0x10>)
    443c:	6802      	ldr	r2, [r0, #0]
    443e:	681b      	ldr	r3, [r3, #0]
    4440:	6810      	ldr	r0, [r2, #0]
    4442:	4798      	blx	r3
    4444:	2000      	movs	r0, #0
    4446:	bd08      	pop	{r3, pc}
    4448:	200000d8 	.word	0x200000d8

0000444c <CC_PalMutexDestroy>:
    444c:	b508      	push	{r3, lr}
    444e:	4b03      	ldr	r3, [pc, #12]	; (445c <CC_PalMutexDestroy+0x10>)
    4450:	6802      	ldr	r2, [r0, #0]
    4452:	685b      	ldr	r3, [r3, #4]
    4454:	6810      	ldr	r0, [r2, #0]
    4456:	4798      	blx	r3
    4458:	2000      	movs	r0, #0
    445a:	bd08      	pop	{r3, pc}
    445c:	200000d8 	.word	0x200000d8

00004460 <CC_PalPowerSaveModeInit>:
    4460:	b570      	push	{r4, r5, r6, lr}
    4462:	4c09      	ldr	r4, [pc, #36]	; (4488 <CC_PalPowerSaveModeInit+0x28>)
    4464:	4d09      	ldr	r5, [pc, #36]	; (448c <CC_PalPowerSaveModeInit+0x2c>)
    4466:	6920      	ldr	r0, [r4, #16]
    4468:	68ab      	ldr	r3, [r5, #8]
    446a:	4798      	blx	r3
    446c:	b118      	cbz	r0, 4476 <CC_PalPowerSaveModeInit+0x16>
    446e:	4b08      	ldr	r3, [pc, #32]	; (4490 <CC_PalPowerSaveModeInit+0x30>)
    4470:	4808      	ldr	r0, [pc, #32]	; (4494 <CC_PalPowerSaveModeInit+0x34>)
    4472:	685b      	ldr	r3, [r3, #4]
    4474:	4798      	blx	r3
    4476:	2100      	movs	r1, #0
    4478:	4a07      	ldr	r2, [pc, #28]	; (4498 <CC_PalPowerSaveModeInit+0x38>)
    447a:	68eb      	ldr	r3, [r5, #12]
    447c:	6011      	str	r1, [r2, #0]
    447e:	6920      	ldr	r0, [r4, #16]
    4480:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4484:	4718      	bx	r3
    4486:	bf00      	nop
    4488:	200000c4 	.word	0x200000c4
    448c:	200000d8 	.word	0x200000d8
    4490:	200000bc 	.word	0x200000bc
    4494:	000055b4 	.word	0x000055b4
    4498:	200009ec 	.word	0x200009ec

0000449c <gpio_pin_configure_dt>:
{
    449c:	4603      	mov	r3, r0
    449e:	b470      	push	{r4, r5, r6}
    44a0:	460c      	mov	r4, r1
				  spec->dt_flags | extra_flags);
    44a2:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
    44a4:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
    44a6:	7919      	ldrb	r1, [r3, #4]
	return gpio_pin_configure(spec->port,
    44a8:	4322      	orrs	r2, r4
		data->invert |= (gpio_port_pins_t)BIT(pin);
    44aa:	2401      	movs	r4, #1
	struct gpio_driver_data *data =
    44ac:	6905      	ldr	r5, [r0, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    44ae:	408c      	lsls	r4, r1
    44b0:	682b      	ldr	r3, [r5, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    44b2:	f012 0f01 	tst.w	r2, #1
	const struct gpio_driver_api *api =
    44b6:	6886      	ldr	r6, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    44b8:	bf14      	ite	ne
    44ba:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    44bc:	43a3      	biceq	r3, r4
    44be:	602b      	str	r3, [r5, #0]
	return api->pin_configure(port, pin, flags);
    44c0:	6833      	ldr	r3, [r6, #0]
}
    44c2:	bc70      	pop	{r4, r5, r6}
	return api->pin_configure(port, pin, flags);
    44c4:	4718      	bx	r3

000044c6 <arch_printk_char_out>:
}
    44c6:	2000      	movs	r0, #0
    44c8:	4770      	bx	lr

000044ca <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    44ca:	b40f      	push	{r0, r1, r2, r3}
    44cc:	b507      	push	{r0, r1, r2, lr}
    44ce:	a904      	add	r1, sp, #16
    44d0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    44d4:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    44d6:	f7fc f86b 	bl	5b0 <vprintk>

	va_end(ap);
}
    44da:	b003      	add	sp, #12
    44dc:	f85d eb04 	ldr.w	lr, [sp], #4
    44e0:	b004      	add	sp, #16
    44e2:	4770      	bx	lr

000044e4 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    44e4:	4604      	mov	r4, r0
    44e6:	b508      	push	{r3, lr}
    44e8:	4608      	mov	r0, r1
    44ea:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    44ec:	461a      	mov	r2, r3
    44ee:	47a0      	blx	r4
	return z_impl_z_current_get();
    44f0:	f7ff fc7c 	bl	3dec <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    44f4:	f7fd fac0 	bl	1a78 <z_impl_k_thread_abort>

000044f8 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    44f8:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    44fa:	f013 0307 	ands.w	r3, r3, #7
    44fe:	d105      	bne.n	450c <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    4500:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    4502:	2b00      	cmp	r3, #0
    4504:	bf0c      	ite	eq
    4506:	2000      	moveq	r0, #0
    4508:	2003      	movne	r0, #3
    450a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    450c:	2b02      	cmp	r3, #2
    450e:	d105      	bne.n	451c <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    4510:	8b40      	ldrh	r0, [r0, #26]
    4512:	fab0 f080 	clz	r0, r0
    4516:	0940      	lsrs	r0, r0, #5
    4518:	0080      	lsls	r0, r0, #2
    451a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    451c:	2b01      	cmp	r3, #1
    451e:	d105      	bne.n	452c <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    4520:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    4522:	2b00      	cmp	r3, #0
    4524:	bf0c      	ite	eq
    4526:	2000      	moveq	r0, #0
    4528:	2005      	movne	r0, #5
    452a:	4770      	bx	lr
	int evt = EVT_NOP;
    452c:	2000      	movs	r0, #0
}
    452e:	4770      	bx	lr

00004530 <validate_args>:
{
    4530:	b510      	push	{r4, lr}
    4532:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    4534:	b100      	cbz	r0, 4538 <validate_args+0x8>
    4536:	b911      	cbnz	r1, 453e <validate_args+0xe>
		return -EINVAL;
    4538:	f06f 0015 	mvn.w	r0, #21
}
    453c:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    453e:	1d08      	adds	r0, r1, #4
    4540:	f000 f895 	bl	466e <sys_notify_validate>
	if ((rv == 0)
    4544:	2800      	cmp	r0, #0
    4546:	d1f9      	bne.n	453c <validate_args+0xc>
	    && ((cli->notify.flags
    4548:	68a3      	ldr	r3, [r4, #8]
    454a:	2b03      	cmp	r3, #3
    454c:	d9f6      	bls.n	453c <validate_args+0xc>
    454e:	e7f3      	b.n	4538 <validate_args+0x8>

00004550 <notify_one>:
{
    4550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4554:	460d      	mov	r5, r1
    4556:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    4558:	4619      	mov	r1, r3
    455a:	1d28      	adds	r0, r5, #4
{
    455c:	4690      	mov	r8, r2
    455e:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    4560:	f000 f896 	bl	4690 <sys_notify_finalize>
	if (cb) {
    4564:	4604      	mov	r4, r0
    4566:	b138      	cbz	r0, 4578 <notify_one+0x28>
		cb(mgr, cli, state, res);
    4568:	4633      	mov	r3, r6
    456a:	4642      	mov	r2, r8
    456c:	4629      	mov	r1, r5
    456e:	4638      	mov	r0, r7
    4570:	46a4      	mov	ip, r4
}
    4572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    4576:	4760      	bx	ip
}
    4578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000457c <transition_complete>:
{
    457c:	b410      	push	{r4}
	__asm__ volatile(
    457e:	f04f 0420 	mov.w	r4, #32
    4582:	f3ef 8211 	mrs	r2, BASEPRI
    4586:	f384 8812 	msr	BASEPRI_MAX, r4
    458a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    458e:	6141      	str	r1, [r0, #20]
}
    4590:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    4592:	2101      	movs	r1, #1
    4594:	f7fc b81a 	b.w	5cc <process_event>

00004598 <onoff_manager_init>:
{
    4598:	b538      	push	{r3, r4, r5, lr}
    459a:	460c      	mov	r4, r1
	if ((mgr == NULL)
    459c:	4605      	mov	r5, r0
    459e:	b158      	cbz	r0, 45b8 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    45a0:	b151      	cbz	r1, 45b8 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    45a2:	680b      	ldr	r3, [r1, #0]
    45a4:	b143      	cbz	r3, 45b8 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    45a6:	684b      	ldr	r3, [r1, #4]
    45a8:	b133      	cbz	r3, 45b8 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    45aa:	221c      	movs	r2, #28
    45ac:	2100      	movs	r1, #0
    45ae:	f000 f944 	bl	483a <memset>
	return 0;
    45b2:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    45b4:	612c      	str	r4, [r5, #16]
}
    45b6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    45b8:	f06f 0015 	mvn.w	r0, #21
    45bc:	e7fb      	b.n	45b6 <onoff_manager_init+0x1e>

000045be <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    45be:	b570      	push	{r4, r5, r6, lr}
    45c0:	4605      	mov	r5, r0
    45c2:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    45c4:	f7ff ffb4 	bl	4530 <validate_args>

	if (rv < 0) {
    45c8:	1e04      	subs	r4, r0, #0
    45ca:	db15      	blt.n	45f8 <onoff_request+0x3a>
    45cc:	f04f 0320 	mov.w	r3, #32
    45d0:	f3ef 8211 	mrs	r2, BASEPRI
    45d4:	f383 8812 	msr	BASEPRI_MAX, r3
    45d8:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    45dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    45e0:	8b6b      	ldrh	r3, [r5, #26]
    45e2:	8b2c      	ldrh	r4, [r5, #24]
    45e4:	428b      	cmp	r3, r1
    45e6:	f004 0407 	and.w	r4, r4, #7
    45ea:	d107      	bne.n	45fc <onoff_request+0x3e>
	__asm__ volatile(
    45ec:	f382 8811 	msr	BASEPRI, r2
    45f0:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    45f4:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    45f8:	4620      	mov	r0, r4
    45fa:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    45fc:	2c02      	cmp	r4, #2
    45fe:	d10c      	bne.n	461a <onoff_request+0x5c>
		mgr->refs += 1U;
    4600:	3301      	adds	r3, #1
    4602:	836b      	strh	r3, [r5, #26]
    4604:	f382 8811 	msr	BASEPRI, r2
    4608:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    460c:	2300      	movs	r3, #0
    460e:	4622      	mov	r2, r4
    4610:	4631      	mov	r1, r6
    4612:	4628      	mov	r0, r5
    4614:	f7ff ff9c 	bl	4550 <notify_one>
    4618:	e7ee      	b.n	45f8 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    461a:	2c06      	cmp	r4, #6
    461c:	d814      	bhi.n	4648 <onoff_request+0x8a>
    461e:	e8df f004 	tbb	[pc, r4]
    4622:	1304      	.short	0x1304
    4624:	1a041313 	.word	0x1a041313
    4628:	04          	.byte	0x04
    4629:	00          	.byte	0x00
	parent->next = child;
    462a:	2300      	movs	r3, #0
    462c:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    462e:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    4630:	b93b      	cbnz	r3, 4642 <onoff_request+0x84>
	list->head = node;
    4632:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    4636:	b9ac      	cbnz	r4, 4664 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    4638:	2102      	movs	r1, #2
    463a:	4628      	mov	r0, r5
    463c:	f7fb ffc6 	bl	5cc <process_event>
    4640:	e7da      	b.n	45f8 <onoff_request+0x3a>
	parent->next = child;
    4642:	601e      	str	r6, [r3, #0]
	list->tail = node;
    4644:	606e      	str	r6, [r5, #4]
}
    4646:	e7f6      	b.n	4636 <onoff_request+0x78>
    4648:	f382 8811 	msr	BASEPRI, r2
    464c:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    4650:	f06f 0404 	mvn.w	r4, #4
    4654:	e7d0      	b.n	45f8 <onoff_request+0x3a>
    4656:	f382 8811 	msr	BASEPRI, r2
    465a:	f3bf 8f6f 	isb	sy
    465e:	f06f 0485 	mvn.w	r4, #133	; 0x85
    4662:	e7c9      	b.n	45f8 <onoff_request+0x3a>
    4664:	f382 8811 	msr	BASEPRI, r2
    4668:	f3bf 8f6f 	isb	sy
		if (notify) {
    466c:	e7c4      	b.n	45f8 <onoff_request+0x3a>

0000466e <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    466e:	4603      	mov	r3, r0
    4670:	b158      	cbz	r0, 468a <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4672:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    4674:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    4678:	2a01      	cmp	r2, #1
    467a:	d003      	beq.n	4684 <sys_notify_validate+0x16>
    467c:	2a03      	cmp	r2, #3
    467e:	d104      	bne.n	468a <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    4680:	6802      	ldr	r2, [r0, #0]
    4682:	b112      	cbz	r2, 468a <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    4684:	2000      	movs	r0, #0
    4686:	6098      	str	r0, [r3, #8]
    4688:	4770      	bx	lr
    468a:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    468e:	4770      	bx	lr

00004690 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4690:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    4692:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    4694:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    4698:	2a03      	cmp	r2, #3
    469a:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
    469e:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = NULL;
    46a0:	bf14      	ite	ne
    46a2:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    46a4:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    46a6:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    46a8:	4770      	bx	lr

000046aa <encode_uint>:
{
    46aa:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    46ae:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
    46b0:	78d3      	ldrb	r3, [r2, #3]
{
    46b2:	4680      	mov	r8, r0
	switch (specifier) {
    46b4:	2b6f      	cmp	r3, #111	; 0x6f
{
    46b6:	460f      	mov	r7, r1
    46b8:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    46ba:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    46be:	d029      	beq.n	4714 <encode_uint+0x6a>
    46c0:	d824      	bhi.n	470c <encode_uint+0x62>
		return 10;
    46c2:	2b58      	cmp	r3, #88	; 0x58
    46c4:	bf0c      	ite	eq
    46c6:	2610      	moveq	r6, #16
    46c8:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    46ca:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    46ce:	4632      	mov	r2, r6
    46d0:	2300      	movs	r3, #0
    46d2:	4640      	mov	r0, r8
    46d4:	4639      	mov	r1, r7
    46d6:	f7fb fd3d 	bl	154 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    46da:	2a09      	cmp	r2, #9
    46dc:	b2d4      	uxtb	r4, r2
    46de:	d81e      	bhi.n	471e <encode_uint+0x74>
    46e0:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    46e2:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    46e4:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    46e6:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    46ea:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    46ee:	d301      	bcc.n	46f4 <encode_uint+0x4a>
    46f0:	45d1      	cmp	r9, sl
    46f2:	d811      	bhi.n	4718 <encode_uint+0x6e>
	if (conv->flag_hash) {
    46f4:	782b      	ldrb	r3, [r5, #0]
    46f6:	069b      	lsls	r3, r3, #26
    46f8:	d505      	bpl.n	4706 <encode_uint+0x5c>
		if (radix == 8) {
    46fa:	2e08      	cmp	r6, #8
    46fc:	d115      	bne.n	472a <encode_uint+0x80>
			conv->altform_0 = true;
    46fe:	78ab      	ldrb	r3, [r5, #2]
    4700:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    4704:	70ab      	strb	r3, [r5, #2]
}
    4706:	4648      	mov	r0, r9
    4708:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    470c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    4710:	2b70      	cmp	r3, #112	; 0x70
    4712:	e7d7      	b.n	46c4 <encode_uint+0x1a>
	switch (specifier) {
    4714:	2608      	movs	r6, #8
    4716:	e7d8      	b.n	46ca <encode_uint+0x20>
		value /= radix;
    4718:	4680      	mov	r8, r0
    471a:	460f      	mov	r7, r1
    471c:	e7d7      	b.n	46ce <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    471e:	f1bb 0f19 	cmp.w	fp, #25
    4722:	bf94      	ite	ls
    4724:	3437      	addls	r4, #55	; 0x37
    4726:	3457      	addhi	r4, #87	; 0x57
    4728:	e7db      	b.n	46e2 <encode_uint+0x38>
		} else if (radix == 16) {
    472a:	2e10      	cmp	r6, #16
    472c:	d1eb      	bne.n	4706 <encode_uint+0x5c>
			conv->altform_0c = true;
    472e:	78ab      	ldrb	r3, [r5, #2]
    4730:	f043 0310 	orr.w	r3, r3, #16
    4734:	e7e6      	b.n	4704 <encode_uint+0x5a>

00004736 <outs>:
{
    4736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    473a:	4607      	mov	r7, r0
    473c:	4688      	mov	r8, r1
    473e:	4615      	mov	r5, r2
    4740:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    4742:	4614      	mov	r4, r2
    4744:	42b4      	cmp	r4, r6
    4746:	d305      	bcc.n	4754 <outs+0x1e>
    4748:	b10e      	cbz	r6, 474e <outs+0x18>
	return (int)count;
    474a:	1b60      	subs	r0, r4, r5
    474c:	e008      	b.n	4760 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    474e:	7823      	ldrb	r3, [r4, #0]
    4750:	2b00      	cmp	r3, #0
    4752:	d0fa      	beq.n	474a <outs+0x14>
		int rc = out((int)*sp++, ctx);
    4754:	4641      	mov	r1, r8
    4756:	f814 0b01 	ldrb.w	r0, [r4], #1
    475a:	47b8      	blx	r7
		if (rc < 0) {
    475c:	2800      	cmp	r0, #0
    475e:	daf1      	bge.n	4744 <outs+0xe>
}
    4760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004764 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    4764:	4770      	bx	lr

00004766 <pm_state_exit_post_ops>:
    4766:	2300      	movs	r3, #0
    4768:	f383 8811 	msr	BASEPRI, r3
    476c:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    4770:	4770      	bx	lr

00004772 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    4772:	2000      	movs	r0, #0
{
    4774:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    4776:	f7fc fbe9 	bl	f4c <sys_reboot>

0000477a <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    477a:	f000 bb6a 	b.w	4e52 <z_fatal_error>

0000477e <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    477e:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    4780:	6800      	ldr	r0, [r0, #0]
    4782:	f000 bb66 	b.w	4e52 <z_fatal_error>

00004786 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    4786:	2100      	movs	r1, #0
    4788:	2001      	movs	r0, #1
    478a:	f7ff bff6 	b.w	477a <z_arm_fatal_error>

0000478e <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    478e:	b508      	push	{r3, lr}
	handler();
    4790:	f7fc fed6 	bl	1540 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    4794:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    4798:	f7fc bf98 	b.w	16cc <z_arm_exc_exit>

0000479c <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    479c:	6e43      	ldr	r3, [r0, #100]	; 0x64
    479e:	f383 880b 	msr	PSPLIM, r3
}
    47a2:	4770      	bx	lr

000047a4 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    47a4:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
    47a8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    47ac:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
    47ae:	bf08      	it	eq
    47b0:	f06f 0015 	mvneq.w	r0, #21
    47b4:	4770      	bx	lr

000047b6 <mpu_configure_region>:
{
    47b6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	p_attr->rbar = attr->rbar &
    47b8:	890a      	ldrh	r2, [r1, #8]
    47ba:	894e      	ldrh	r6, [r1, #10]
	region_conf.base = new_region->start;
    47bc:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
    47be:	684d      	ldr	r5, [r1, #4]
    47c0:	f002 021f 	and.w	r2, r2, #31
    47c4:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
	region_conf.base = new_region->start;
    47c8:	9300      	str	r3, [sp, #0]
    47ca:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    47ce:	f023 031f 	bic.w	r3, r3, #31
    47d2:	1e6a      	subs	r2, r5, #1
    47d4:	4413      	add	r3, r2
    47d6:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    47da:	2807      	cmp	r0, #7
    47dc:	9303      	str	r3, [sp, #12]
    47de:	d804      	bhi.n	47ea <mpu_configure_region+0x34>
	region_init(index, region_conf);
    47e0:	4669      	mov	r1, sp
    47e2:	f7fd f97b 	bl	1adc <region_init>
}
    47e6:	b004      	add	sp, #16
    47e8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    47ea:	f06f 0015 	mvn.w	r0, #21
	return region_allocate_and_init(index,
    47ee:	e7fa      	b.n	47e6 <mpu_configure_region+0x30>

000047f0 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    47f0:	4603      	mov	r3, r0
    47f2:	3901      	subs	r1, #1
    47f4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    47f8:	b90a      	cbnz	r2, 47fe <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    47fa:	701a      	strb	r2, [r3, #0]

	return dest;
}
    47fc:	4770      	bx	lr
		*d = *s;
    47fe:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    4802:	e7f7      	b.n	47f4 <strcpy+0x4>

00004804 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    4804:	4603      	mov	r3, r0
	size_t n = 0;
    4806:	2000      	movs	r0, #0

	while (*s != '\0') {
    4808:	5c1a      	ldrb	r2, [r3, r0]
    480a:	b902      	cbnz	r2, 480e <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    480c:	4770      	bx	lr
		n++;
    480e:	3001      	adds	r0, #1
    4810:	e7fa      	b.n	4808 <strlen+0x4>

00004812 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    4812:	4603      	mov	r3, r0
	size_t n = 0;
    4814:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    4816:	5c1a      	ldrb	r2, [r3, r0]
    4818:	b10a      	cbz	r2, 481e <strnlen+0xc>
    481a:	4288      	cmp	r0, r1
    481c:	d100      	bne.n	4820 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    481e:	4770      	bx	lr
		n++;
    4820:	3001      	adds	r0, #1
    4822:	e7f8      	b.n	4816 <strnlen+0x4>

00004824 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    4824:	b510      	push	{r4, lr}
    4826:	1e43      	subs	r3, r0, #1
    4828:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    482a:	4291      	cmp	r1, r2
    482c:	d100      	bne.n	4830 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    482e:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    4830:	f811 4b01 	ldrb.w	r4, [r1], #1
    4834:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    4838:	e7f7      	b.n	482a <memcpy+0x6>

0000483a <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    483a:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
    483c:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    483e:	4402      	add	r2, r0
    4840:	4293      	cmp	r3, r2
    4842:	d100      	bne.n	4846 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    4844:	4770      	bx	lr
		*(d_byte++) = c_byte;
    4846:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    484a:	e7f9      	b.n	4840 <memset+0x6>

0000484c <_stdout_hook_default>:
}
    484c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4850:	4770      	bx	lr

00004852 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    4852:	220c      	movs	r2, #12
    4854:	6903      	ldr	r3, [r0, #16]
    4856:	b2c9      	uxtb	r1, r1
    4858:	fb01 3302 	mla	r3, r1, r2, r3
    485c:	6f98      	ldr	r0, [r3, #120]	; 0x78
}
    485e:	f000 0007 	and.w	r0, r0, #7
    4862:	4770      	bx	lr

00004864 <set_on_state>:
	__asm__ volatile(
    4864:	f04f 0320 	mov.w	r3, #32
    4868:	f3ef 8211 	mrs	r2, BASEPRI
    486c:	f383 8812 	msr	BASEPRI_MAX, r3
    4870:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    4874:	6803      	ldr	r3, [r0, #0]
    4876:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    487a:	f043 0302 	orr.w	r3, r3, #2
    487e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    4880:	f382 8811 	msr	BASEPRI, r2
    4884:	f3bf 8f6f 	isb	sy
}
    4888:	4770      	bx	lr

0000488a <stop>:
{
    488a:	b570      	push	{r4, r5, r6, lr}
    488c:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    488e:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    4890:	f04f 0420 	mov.w	r4, #32
    4894:	f3ef 8511 	mrs	r5, BASEPRI
    4898:	f384 8812 	msr	BASEPRI_MAX, r4
    489c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    48a0:	260c      	movs	r6, #12
    48a2:	fb06 3401 	mla	r4, r6, r1, r3
    48a6:	6fa4      	ldr	r4, [r4, #120]	; 0x78
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    48a8:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    48ac:	d008      	beq.n	48c0 <stop+0x36>
    48ae:	42a2      	cmp	r2, r4
    48b0:	d006      	beq.n	48c0 <stop+0x36>
	__asm__ volatile(
    48b2:	f385 8811 	msr	BASEPRI, r5
    48b6:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    48ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    48be:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    48c0:	2201      	movs	r2, #1
    48c2:	fb06 3301 	mla	r3, r6, r1, r3
    48c6:	679a      	str	r2, [r3, #120]	; 0x78
    48c8:	f385 8811 	msr	BASEPRI, r5
    48cc:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    48d0:	6843      	ldr	r3, [r0, #4]
    48d2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    48d6:	685b      	ldr	r3, [r3, #4]
    48d8:	4798      	blx	r3
	return 0;
    48da:	2000      	movs	r0, #0
    48dc:	e7ef      	b.n	48be <stop+0x34>

000048de <api_stop>:
	return stop(dev, subsys, CTX_API);
    48de:	2280      	movs	r2, #128	; 0x80
    48e0:	f7ff bfd3 	b.w	488a <stop>

000048e4 <async_start>:
{
    48e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48e6:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    48e8:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    48ea:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    48ec:	f04f 0520 	mov.w	r5, #32
    48f0:	f3ef 8611 	mrs	r6, BASEPRI
    48f4:	f385 8812 	msr	BASEPRI_MAX, r5
    48f8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    48fc:	250c      	movs	r5, #12
    48fe:	fb05 4401 	mla	r4, r5, r1, r4
    4902:	6fa5      	ldr	r5, [r4, #120]	; 0x78
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    4904:	f005 0c07 	and.w	ip, r5, #7
    4908:	f1bc 0f01 	cmp.w	ip, #1
    490c:	d10c      	bne.n	4928 <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    490e:	67a7      	str	r7, [r4, #120]	; 0x78
	__asm__ volatile(
    4910:	f386 8811 	msr	BASEPRI, r6
    4914:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    4918:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
	 get_sub_config(dev, type)->start();
    491c:	6843      	ldr	r3, [r0, #4]
    491e:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    4922:	4798      	blx	r3
	return 0;
    4924:	2000      	movs	r0, #0
}
    4926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    4928:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    492c:	42af      	cmp	r7, r5
    492e:	f386 8811 	msr	BASEPRI, r6
    4932:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    4936:	bf0c      	ite	eq
    4938:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    493c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    4940:	e7f1      	b.n	4926 <async_start+0x42>

00004942 <api_start>:
{
    4942:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    4944:	2480      	movs	r4, #128	; 0x80
    4946:	9400      	str	r4, [sp, #0]
    4948:	f7ff ffcc 	bl	48e4 <async_start>
}
    494c:	b002      	add	sp, #8
    494e:	bd10      	pop	{r4, pc}

00004950 <onoff_started_callback>:
{
    4950:	b410      	push	{r4}
	notify(mgr, 0);
    4952:	241c      	movs	r4, #28
	return &data->mgr[type];
    4954:	6900      	ldr	r0, [r0, #16]
    4956:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    4958:	fb03 0004 	mla	r0, r3, r4, r0
    495c:	2100      	movs	r1, #0
}
    495e:	bc10      	pop	{r4}
	notify(mgr, 0);
    4960:	4710      	bx	r2

00004962 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    4962:	2003      	movs	r0, #3
    4964:	f000 b957 	b.w	4c16 <nrfx_clock_start>

00004968 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    4968:	2002      	movs	r0, #2
    496a:	f000 b954 	b.w	4c16 <nrfx_clock_start>

0000496e <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    496e:	2000      	movs	r0, #0
    4970:	f000 b951 	b.w	4c16 <nrfx_clock_start>

00004974 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    4974:	2003      	movs	r0, #3
    4976:	f000 b9ad 	b.w	4cd4 <nrfx_clock_stop>

0000497a <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    497a:	2002      	movs	r0, #2
    497c:	f000 b9aa 	b.w	4cd4 <nrfx_clock_stop>

00004980 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    4980:	2000      	movs	r0, #0
    4982:	f000 b9a7 	b.w	4cd4 <nrfx_clock_stop>

00004986 <blocking_start_callback>:
{
    4986:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    4988:	f7fe bf0c 	b.w	37a4 <z_impl_k_sem_give>

0000498c <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    498c:	6843      	ldr	r3, [r0, #4]
}
    498e:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4990:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    4992:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    4994:	600b      	str	r3, [r1, #0]
}
    4996:	4770      	bx	lr

00004998 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4998:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
    499a:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    499e:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
    49a0:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    49a4:	6098      	str	r0, [r3, #8]
}
    49a6:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    49a8:	60d9      	str	r1, [r3, #12]
    49aa:	4770      	bx	lr

000049ac <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    49ac:	6843      	ldr	r3, [r0, #4]
}
    49ae:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    49b0:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    49b2:	6099      	str	r1, [r3, #8]
}
    49b4:	4770      	bx	lr

000049b6 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    49b6:	6843      	ldr	r3, [r0, #4]
}
    49b8:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    49ba:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    49bc:	60d9      	str	r1, [r3, #12]
}
    49be:	4770      	bx	lr

000049c0 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    49c0:	6843      	ldr	r3, [r0, #4]
    49c2:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    49c4:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
    49c6:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    49ca:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    49cc:	6090      	str	r0, [r2, #8]
}
    49ce:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    49d0:	60d3      	str	r3, [r2, #12]
    49d2:	4770      	bx	lr

000049d4 <gpio_nrfx_manage_callback>:
{
    49d4:	b510      	push	{r4, lr}
	return port->data;
    49d6:	6903      	ldr	r3, [r0, #16]
	return list->head;
    49d8:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    49da:	b1f8      	cbz	r0, 4a1c <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    49dc:	4288      	cmp	r0, r1
    49de:	d119      	bne.n	4a14 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    49e0:	689c      	ldr	r4, [r3, #8]
	return node->next;
    49e2:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    49e4:	42a1      	cmp	r1, r4
	list->head = node;
    49e6:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    49e8:	d100      	bne.n	49ec <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    49ea:	6098      	str	r0, [r3, #8]
	parent->next = child;
    49ec:	2000      	movs	r0, #0
    49ee:	6008      	str	r0, [r1, #0]
	if (set) {
    49f0:	b12a      	cbz	r2, 49fe <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    49f2:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    49f4:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    49f6:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    49f8:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    49fa:	b902      	cbnz	r2, 49fe <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    49fc:	6099      	str	r1, [r3, #8]
	return 0;
    49fe:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    4a00:	e010      	b.n	4a24 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4a02:	4281      	cmp	r1, r0
    4a04:	d106      	bne.n	4a14 <gpio_nrfx_manage_callback+0x40>
	return node->next;
    4a06:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    4a08:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    4a0a:	6898      	ldr	r0, [r3, #8]
    4a0c:	4281      	cmp	r1, r0
    4a0e:	d1ed      	bne.n	49ec <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    4a10:	609c      	str	r4, [r3, #8]
}
    4a12:	e7eb      	b.n	49ec <gpio_nrfx_manage_callback+0x18>
	return node->next;
    4a14:	4604      	mov	r4, r0
    4a16:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4a18:	2800      	cmp	r0, #0
    4a1a:	d1f2      	bne.n	4a02 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    4a1c:	2a00      	cmp	r2, #0
    4a1e:	d1e8      	bne.n	49f2 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    4a20:	f06f 0015 	mvn.w	r0, #21
}
    4a24:	bd10      	pop	{r4, pc}

00004a26 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    4a26:	4770      	bx	lr

00004a28 <event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4a28:	2200      	movs	r2, #0
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    4a2a:	f100 0350 	add.w	r3, r0, #80	; 0x50
    4a2e:	009b      	lsls	r3, r3, #2
    4a30:	b29b      	uxth	r3, r3
    4a32:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    4a36:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    4a3a:	601a      	str	r2, [r3, #0]
    4a3c:	681b      	ldr	r3, [r3, #0]
}
    4a3e:	4770      	bx	lr

00004a40 <sys_clock_cycle_get_32>:
{
    4a40:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    4a42:	f7fd fd17 	bl	2474 <z_nrf_rtc_timer_read>
}
    4a46:	bd08      	pop	{r3, pc}

00004a48 <k_sys_fatal_error_handler>:

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    4a48:	2000      	movs	r0, #0
{
    4a4a:	b508      	push	{r3, lr}
		sys_arch_reboot(0);
    4a4c:	f7fc ffca 	bl	19e4 <sys_arch_reboot>

00004a50 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    4a50:	f7ff bb92 	b.w	4178 <nrf_cc3xx_platform_init_no_rng>

00004a54 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(void)
{
    4a54:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    4a56:	f7fc fc0f 	bl	1278 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    4a5a:	f7fc fcf5 	bl	1448 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal();
	return res;
}
    4a5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    4a62:	f7ff bb89 	b.w	4178 <nrf_cc3xx_platform_init_no_rng>

00004a66 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    4a66:	4700      	bx	r0

00004a68 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    4a68:	f000 bb47 	b.w	50fa <z_impl_k_busy_wait>

00004a6c <clock_stop>:
{
    4a6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch (domain)
    4a6e:	2803      	cmp	r0, #3
    4a70:	f200 80a7 	bhi.w	4bc2 <clock_stop+0x156>
    4a74:	e8df f000 	tbb	[pc, r0]
    4a78:	35271902 	.word	0x35271902
    4a7c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4a80:	2202      	movs	r2, #2
    4a82:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4a86:	2200      	movs	r2, #0
    4a88:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    4a8c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4a90:	2201      	movs	r2, #1
    4a92:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    4a94:	2400      	movs	r4, #0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    4a96:	2301      	movs	r3, #1
    4a98:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
    4a9c:	2803      	cmp	r0, #3
    4a9e:	f200 8090 	bhi.w	4bc2 <clock_stop+0x156>
    4aa2:	e8df f000 	tbb	[pc, r0]
    4aa6:	692c      	.short	0x692c
    4aa8:	9a78      	.short	0x9a78
    p_reg->INTENCLR = mask;
    4aaa:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4aae:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4ab0:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
    4ab2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4ab6:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    4aba:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    4abe:	f10d 0407 	add.w	r4, sp, #7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4ac2:	605a      	str	r2, [r3, #4]
    4ac4:	e7e7      	b.n	4a96 <clock_stop+0x2a>
    p_reg->INTENCLR = mask;
    4ac6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4aca:	f44f 7200 	mov.w	r2, #512	; 0x200
    4ace:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4ad2:	2200      	movs	r2, #0
    4ad4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    4ad8:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4adc:	2201      	movs	r2, #1
    4ade:	625a      	str	r2, [r3, #36]	; 0x24
    4ae0:	e7d8      	b.n	4a94 <clock_stop+0x28>
    p_reg->INTENCLR = mask;
    4ae2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4ae6:	f44f 7280 	mov.w	r2, #256	; 0x100
    4aea:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4aee:	2200      	movs	r2, #0
    4af0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    4af4:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4af8:	2201      	movs	r2, #1
    4afa:	61da      	str	r2, [r3, #28]
    4afc:	e7ca      	b.n	4a94 <clock_stop+0x28>
    switch (domain)
    4afe:	f242 7510 	movw	r5, #10000	; 0x2710
    4b02:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
            if (p_clk_src != NULL)
    4b06:	b36c      	cbz	r4, 4b64 <clock_stop+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4b08:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    4b0c:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    4b10:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4b12:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    4b16:	03d9      	lsls	r1, r3, #15
    4b18:	d553      	bpl.n	4bc2 <clock_stop+0x156>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    4b1a:	f89d 0007 	ldrb.w	r0, [sp, #7]
    4b1e:	2801      	cmp	r0, #1
    4b20:	d14f      	bne.n	4bc2 <clock_stop+0x156>
    4b22:	f7ff ffa1 	bl	4a68 <nrfx_busy_wait>
    4b26:	3d01      	subs	r5, #1
    4b28:	d1ed      	bne.n	4b06 <clock_stop+0x9a>
    4b2a:	e04a      	b.n	4bc2 <clock_stop+0x156>
    4b2c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    4b30:	2801      	cmp	r0, #1
    4b32:	d146      	bne.n	4bc2 <clock_stop+0x156>
    4b34:	f7ff ff98 	bl	4a68 <nrfx_busy_wait>
    4b38:	3d01      	subs	r5, #1
    4b3a:	d152      	bne.n	4be2 <clock_stop+0x176>
    4b3c:	e041      	b.n	4bc2 <clock_stop+0x156>
    4b3e:	f89d 0007 	ldrb.w	r0, [sp, #7]
    4b42:	2801      	cmp	r0, #1
    4b44:	d13d      	bne.n	4bc2 <clock_stop+0x156>
    4b46:	f7ff ff8f 	bl	4a68 <nrfx_busy_wait>
    4b4a:	3d01      	subs	r5, #1
    4b4c:	d039      	beq.n	4bc2 <clock_stop+0x156>
            if (p_clk_src != NULL)
    4b4e:	b1c4      	cbz	r4, 4b82 <clock_stop+0x116>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4b50:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    4b54:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    4b58:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4b5a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    4b5e:	03db      	lsls	r3, r3, #15
    4b60:	d52f      	bpl.n	4bc2 <clock_stop+0x156>
    4b62:	e7ec      	b.n	4b3e <clock_stop+0xd2>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4b64:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    4b68:	03da      	lsls	r2, r3, #15
    4b6a:	d52a      	bpl.n	4bc2 <clock_stop+0x156>
    4b6c:	2001      	movs	r0, #1
    4b6e:	f7ff ff7b 	bl	4a68 <nrfx_busy_wait>
    4b72:	3d01      	subs	r5, #1
    4b74:	d1f6      	bne.n	4b64 <clock_stop+0xf8>
    4b76:	e024      	b.n	4bc2 <clock_stop+0x156>
    switch (domain)
    4b78:	f242 7510 	movw	r5, #10000	; 0x2710
    4b7c:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    4b80:	e7e5      	b.n	4b4e <clock_stop+0xe2>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4b82:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    4b86:	03d8      	lsls	r0, r3, #15
    4b88:	d51b      	bpl.n	4bc2 <clock_stop+0x156>
    4b8a:	2001      	movs	r0, #1
    4b8c:	f7ff ff6c 	bl	4a68 <nrfx_busy_wait>
    4b90:	3d01      	subs	r5, #1
    4b92:	d1f6      	bne.n	4b82 <clock_stop+0x116>
    4b94:	e015      	b.n	4bc2 <clock_stop+0x156>
    switch (domain)
    4b96:	f242 7510 	movw	r5, #10000	; 0x2710
    4b9a:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
            if (p_clk_src != NULL)
    4b9e:	b194      	cbz	r4, 4bc6 <clock_stop+0x15a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    4ba0:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    4ba4:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    4ba8:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    4baa:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    4bae:	03d9      	lsls	r1, r3, #15
    4bb0:	d507      	bpl.n	4bc2 <clock_stop+0x156>
    4bb2:	f89d 0007 	ldrb.w	r0, [sp, #7]
    4bb6:	2801      	cmp	r0, #1
    4bb8:	d103      	bne.n	4bc2 <clock_stop+0x156>
    4bba:	f7ff ff55 	bl	4a68 <nrfx_busy_wait>
    4bbe:	3d01      	subs	r5, #1
    4bc0:	d1ed      	bne.n	4b9e <clock_stop+0x132>
}
    4bc2:	b002      	add	sp, #8
    4bc4:	bd70      	pop	{r4, r5, r6, pc}
    4bc6:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    4bca:	03da      	lsls	r2, r3, #15
    4bcc:	d5f9      	bpl.n	4bc2 <clock_stop+0x156>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    4bce:	2001      	movs	r0, #1
    4bd0:	f7ff ff4a 	bl	4a68 <nrfx_busy_wait>
    4bd4:	3d01      	subs	r5, #1
    4bd6:	d1f6      	bne.n	4bc6 <clock_stop+0x15a>
    4bd8:	e7f3      	b.n	4bc2 <clock_stop+0x156>
    switch (domain)
    4bda:	f242 7510 	movw	r5, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    4bde:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    4be2:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
    4be6:	03db      	lsls	r3, r3, #15
    4be8:	d5eb      	bpl.n	4bc2 <clock_stop+0x156>
    4bea:	2c00      	cmp	r4, #0
    4bec:	d19e      	bne.n	4b2c <clock_stop+0xc0>
    4bee:	2001      	movs	r0, #1
    4bf0:	e7a0      	b.n	4b34 <clock_stop+0xc8>

00004bf2 <nrfx_clock_enable>:
{
    4bf2:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    4bf4:	2005      	movs	r0, #5
    4bf6:	f7fc fc7f 	bl	14f8 <arch_irq_is_enabled>
    4bfa:	b910      	cbnz	r0, 4c02 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    4bfc:	2005      	movs	r0, #5
    4bfe:	f7fc fc59 	bl	14b4 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4c02:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4c06:	2201      	movs	r2, #1
    4c08:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
    4c0c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    4c10:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
}
    4c14:	bd08      	pop	{r3, pc}

00004c16 <nrfx_clock_start>:
{
    4c16:	b508      	push	{r3, lr}
    switch (domain)
    4c18:	2803      	cmp	r0, #3
    4c1a:	d819      	bhi.n	4c50 <nrfx_clock_start+0x3a>
    4c1c:	e8df f000 	tbb	[pc, r0]
    4c20:	4c3e3202 	.word	0x4c3e3202
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4c24:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    4c28:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4c2c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    4c30:	03c9      	lsls	r1, r1, #15
    4c32:	d40e      	bmi.n	4c52 <nrfx_clock_start+0x3c>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    4c34:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    4c38:	07db      	lsls	r3, r3, #31
    4c3a:	d513      	bpl.n	4c64 <nrfx_clock_start+0x4e>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4c3c:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    4c40:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    4c44:	3b01      	subs	r3, #1
    4c46:	2b01      	cmp	r3, #1
    4c48:	d809      	bhi.n	4c5e <nrfx_clock_start+0x48>
    p_reg->INTENSET = mask;
    4c4a:	2302      	movs	r3, #2
    4c4c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    4c50:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4c52:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    4c56:	2b02      	cmp	r3, #2
    4c58:	d005      	beq.n	4c66 <nrfx_clock_start+0x50>
    4c5a:	2b01      	cmp	r3, #1
    4c5c:	d002      	beq.n	4c64 <nrfx_clock_start+0x4e>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    4c5e:	2000      	movs	r0, #0
    4c60:	f7ff ff04 	bl	4a6c <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    4c64:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
    4c66:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    4c6a:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4c6e:	2300      	movs	r3, #0
    4c70:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    4c74:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    4c78:	2302      	movs	r3, #2
    4c7a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4c7e:	2301      	movs	r3, #1
    4c80:	6093      	str	r3, [r2, #8]
}
    4c82:	e7e5      	b.n	4c50 <nrfx_clock_start+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4c84:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4c88:	2200      	movs	r2, #0
    4c8a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    4c8e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    4c92:	2201      	movs	r2, #1
    4c94:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4c98:	601a      	str	r2, [r3, #0]
}
    4c9a:	e7d9      	b.n	4c50 <nrfx_clock_start+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4c9c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4ca0:	2200      	movs	r2, #0
    4ca2:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    4ca6:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
    4caa:	f44f 7200 	mov.w	r2, #512	; 0x200
    4cae:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4cb2:	2201      	movs	r2, #1
    4cb4:	621a      	str	r2, [r3, #32]
}
    4cb6:	e7cb      	b.n	4c50 <nrfx_clock_start+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4cb8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4cbc:	2200      	movs	r2, #0
    4cbe:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    4cc2:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
    4cc6:	f44f 7280 	mov.w	r2, #256	; 0x100
    4cca:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4cce:	2201      	movs	r2, #1
    4cd0:	619a      	str	r2, [r3, #24]
}
    4cd2:	e7bd      	b.n	4c50 <nrfx_clock_start+0x3a>

00004cd4 <nrfx_clock_stop>:
    clock_stop(domain);
    4cd4:	f7ff beca 	b.w	4a6c <clock_stop>

00004cd8 <nrf_gpio_reconfigure>:
{
    4cd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4cda:	4616      	mov	r6, r2
    4cdc:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    4ce0:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4ce2:	a801      	add	r0, sp, #4
{
    4ce4:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4ce6:	f7fd ff07 	bl	2af8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4cea:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    4cec:	f1b6 0c00 	subs.w	ip, r6, #0
    4cf0:	bf18      	it	ne
    4cf2:	f04f 0c01 	movne.w	ip, #1
    4cf6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    4cfa:	1e0b      	subs	r3, r1, #0
    4cfc:	bf18      	it	ne
    4cfe:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    4d00:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    4d02:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    4d06:	bf14      	ite	ne
    4d08:	f04f 0c0c 	movne.w	ip, #12
    4d0c:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    4d10:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    4d12:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    4d16:	bf14      	ite	ne
    4d18:	f44f 6c70 	movne.w	ip, #3840	; 0xf00
    4d1c:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    4d20:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    4d22:	ea43 030c 	orr.w	r3, r3, ip
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    4d26:	bf14      	ite	ne
    4d28:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    4d2c:	f04f 0c00 	moveq.w	ip, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4d30:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    4d34:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    4d38:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4d3c:	b101      	cbz	r1, 4d40 <nrf_gpio_reconfigure+0x68>
    4d3e:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    4d40:	b10e      	cbz	r6, 4d46 <nrf_gpio_reconfigure+0x6e>
    4d42:	7836      	ldrb	r6, [r6, #0]
    4d44:	0076      	lsls	r6, r6, #1
    4d46:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4d48:	b10d      	cbz	r5, 4d4e <nrf_gpio_reconfigure+0x76>
    4d4a:	782d      	ldrb	r5, [r5, #0]
    4d4c:	00ad      	lsls	r5, r5, #2
    4d4e:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    4d50:	b10c      	cbz	r4, 4d56 <nrf_gpio_reconfigure+0x7e>
    4d52:	7824      	ldrb	r4, [r4, #0]
    4d54:	0224      	lsls	r4, r4, #8
    4d56:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    4d58:	b10f      	cbz	r7, 4d5e <nrf_gpio_reconfigure+0x86>
    4d5a:	783f      	ldrb	r7, [r7, #0]
    4d5c:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4d5e:	430c      	orrs	r4, r1
    4d60:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    4d62:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
    4d66:	b003      	add	sp, #12
    4d68:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004d6a <nrf_gpio_cfg_sense_set>:
{
    4d6a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    4d6c:	f10d 030f 	add.w	r3, sp, #15
    4d70:	9301      	str	r3, [sp, #4]
    4d72:	2300      	movs	r3, #0
{
    4d74:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    4d78:	461a      	mov	r2, r3
    4d7a:	4619      	mov	r1, r3
    4d7c:	9300      	str	r3, [sp, #0]
    4d7e:	f7ff ffab 	bl	4cd8 <nrf_gpio_reconfigure>
}
    4d82:	b005      	add	sp, #20
    4d84:	f85d fb04 	ldr.w	pc, [sp], #4

00004d88 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
    4d88:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    4d8a:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
    4d8c:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    4d8e:	bf9c      	itt	ls
    4d90:	6881      	ldrls	r1, [r0, #8]
    4d92:	185b      	addls	r3, r3, r1
    r = RdOff - WrOff - 1u;
    4d94:	3b01      	subs	r3, #1
    4d96:	1a98      	subs	r0, r3, r2
}
    4d98:	4770      	bx	lr

00004d9a <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    4d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d9e:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
    4da0:	e9d0 8402 	ldrd	r8, r4, [r0, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    4da4:	6840      	ldr	r0, [r0, #4]
  Rem = pRing->SizeOfBuffer - WrOff;
    4da6:	eba8 0604 	sub.w	r6, r8, r4
  if (Rem > NumBytes) {
    4daa:	4296      	cmp	r6, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    4dac:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    4dae:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
    4db0:	4414      	add	r4, r2
  if (Rem > NumBytes) {
    4db2:	d906      	bls.n	4dc2 <_WriteNoCheck+0x28>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    4db4:	f7ff fd36 	bl	4824 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    4db8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
    4dbc:	60ec      	str	r4, [r5, #12]
}
    4dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    4dc2:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
    4dc4:	eba4 0408 	sub.w	r4, r4, r8
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    4dc8:	f7ff fd2c 	bl	4824 <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    4dcc:	4622      	mov	r2, r4
    4dce:	6868      	ldr	r0, [r5, #4]
    4dd0:	19b9      	adds	r1, r7, r6
    4dd2:	e7ef      	b.n	4db4 <_WriteNoCheck+0x1a>

00004dd4 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    4dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4dd8:	4606      	mov	r6, r0
    4dda:	4689      	mov	r9, r1
    4ddc:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
    4dde:	f04f 0800 	mov.w	r8, #0
  WrOff = pRing->WrOff;
    4de2:	68c5      	ldr	r5, [r0, #12]
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    4de4:	6933      	ldr	r3, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    4de6:	68b4      	ldr	r4, [r6, #8]
    if (RdOff > WrOff) {
    4de8:	429d      	cmp	r5, r3
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    4dea:	bf28      	it	cs
    4dec:	191b      	addcs	r3, r3, r4
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    4dee:	1b64      	subs	r4, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    4df0:	42bc      	cmp	r4, r7
    4df2:	bf28      	it	cs
    4df4:	463c      	movcs	r4, r7
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    4df6:	3b01      	subs	r3, #1
    4df8:	1b5b      	subs	r3, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    4dfa:	429c      	cmp	r4, r3
    4dfc:	bf28      	it	cs
    4dfe:	461c      	movcs	r4, r3
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    4e00:	6870      	ldr	r0, [r6, #4]
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    4e02:	4649      	mov	r1, r9
    4e04:	4622      	mov	r2, r4
    4e06:	4428      	add	r0, r5
    4e08:	f7ff fd0c 	bl	4824 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
    4e0c:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
    4e0e:	4425      	add	r5, r4
      WrOff = 0u;
    4e10:	42ab      	cmp	r3, r5
    4e12:	bf08      	it	eq
    4e14:	2500      	moveq	r5, #0
    NumBytesWritten += NumBytesToWrite;
    4e16:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
    4e18:	44a1      	add	r9, r4
    NumBytes        -= NumBytesToWrite;
    4e1a:	1b3f      	subs	r7, r7, r4
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    4e1c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
    4e20:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    4e22:	2f00      	cmp	r7, #0
    4e24:	d1de      	bne.n	4de4 <_WriteBlocking+0x10>
}
    4e26:	4640      	mov	r0, r8
    4e28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00004e2c <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    4e2c:	f7fe b9ce 	b.w	31cc <_DoInit>

00004e30 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(void)
{
    4e30:	b508      	push	{r3, lr}

	SEGGER_RTT_Init();
    4e32:	f7ff fffb 	bl	4e2c <SEGGER_RTT_Init>

	return 0;
}
    4e36:	2000      	movs	r0, #0
    4e38:	bd08      	pop	{r3, pc}

00004e3a <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    4e3a:	4770      	bx	lr

00004e3c <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    4e3c:	b140      	cbz	r0, 4e50 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    4e3e:	68c3      	ldr	r3, [r0, #12]
    4e40:	7858      	ldrb	r0, [r3, #1]
    4e42:	f010 0001 	ands.w	r0, r0, #1
    4e46:	bf1e      	ittt	ne
    4e48:	7818      	ldrbne	r0, [r3, #0]
    4e4a:	fab0 f080 	clzne	r0, r0
    4e4e:	0940      	lsrne	r0, r0, #5
}
    4e50:	4770      	bx	lr

00004e52 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4e52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e54:	4605      	mov	r5, r0
    4e56:	460e      	mov	r6, r1
	__asm__ volatile(
    4e58:	f04f 0320 	mov.w	r3, #32
    4e5c:	f3ef 8711 	mrs	r7, BASEPRI
    4e60:	f383 8812 	msr	BASEPRI_MAX, r3
    4e64:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    4e68:	f7fe ffc0 	bl	3dec <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    4e6c:	4631      	mov	r1, r6
    4e6e:	4604      	mov	r4, r0
    4e70:	4628      	mov	r0, r5
    4e72:	f7ff fde9 	bl	4a48 <k_sys_fatal_error_handler>
	__asm__ volatile(
    4e76:	f387 8811 	msr	BASEPRI, r7
    4e7a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    4e7e:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    4e80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4e84:	f7fc bdf8 	b.w	1a78 <z_impl_k_thread_abort>

00004e88 <z_early_memset>:
	(void) memset(dst, c, n);
    4e88:	f7ff bcd7 	b.w	483a <memset>

00004e8c <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    4e8c:	f7ff bcca 	b.w	4824 <memcpy>

00004e90 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    4e90:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    4e94:	4313      	orrs	r3, r2
    4e96:	f013 0303 	ands.w	r3, r3, #3
    4e9a:	d10c      	bne.n	4eb6 <create_free_list+0x26>
	slab->free_list = NULL;
    4e9c:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    4e9e:	6881      	ldr	r1, [r0, #8]
    4ea0:	4299      	cmp	r1, r3
    4ea2:	d801      	bhi.n	4ea8 <create_free_list+0x18>
	return 0;
    4ea4:	2000      	movs	r0, #0
    4ea6:	4770      	bx	lr
		*(char **)p = slab->free_list;
    4ea8:	6941      	ldr	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    4eaa:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
    4eac:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
    4eae:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
    4eb0:	6142      	str	r2, [r0, #20]
		p += slab->block_size;
    4eb2:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    4eb4:	e7f3      	b.n	4e9e <create_free_list+0xe>
		return -EINVAL;
    4eb6:	f06f 0015 	mvn.w	r0, #21
}
    4eba:	4770      	bx	lr

00004ebc <k_mem_slab_init>:
{
    4ebc:	b510      	push	{r4, lr}
	slab->block_size = block_size;
    4ebe:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
    4ec2:	2300      	movs	r3, #0
	slab->buffer = buffer;
    4ec4:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    4ec6:	6183      	str	r3, [r0, #24]
{
    4ec8:	4604      	mov	r4, r0
	rc = create_free_list(slab);
    4eca:	f7ff ffe1 	bl	4e90 <create_free_list>
	if (rc < 0) {
    4ece:	2800      	cmp	r0, #0
	list->tail = (sys_dnode_t *)list;
    4ed0:	bfa8      	it	ge
    4ed2:	e9c4 4400 	strdge	r4, r4, [r4]
}
    4ed6:	bd10      	pop	{r4, pc}

00004ed8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    4ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4eda:	4604      	mov	r4, r0
    4edc:	460d      	mov	r5, r1
	__asm__ volatile(
    4ede:	f04f 0320 	mov.w	r3, #32
    4ee2:	f3ef 8611 	mrs	r6, BASEPRI
    4ee6:	f383 8812 	msr	BASEPRI_MAX, r3
    4eea:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    4eee:	6947      	ldr	r7, [r0, #20]
    4ef0:	b977      	cbnz	r7, 4f10 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    4ef2:	f000 f8a6 	bl	5042 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    4ef6:	b158      	cbz	r0, 4f10 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    4ef8:	682a      	ldr	r2, [r5, #0]
    4efa:	6787      	str	r7, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    4efc:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    4efe:	f000 f86a 	bl	4fd6 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    4f02:	4631      	mov	r1, r6
    4f04:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    4f08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    4f0c:	f7fe be38 	b.w	3b80 <z_reschedule>
	**(char ***) mem = slab->free_list;
    4f10:	682b      	ldr	r3, [r5, #0]
    4f12:	6962      	ldr	r2, [r4, #20]
    4f14:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    4f16:	682b      	ldr	r3, [r5, #0]
    4f18:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    4f1a:	69a3      	ldr	r3, [r4, #24]
    4f1c:	3b01      	subs	r3, #1
    4f1e:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    4f20:	f386 8811 	msr	BASEPRI, r6
    4f24:	f3bf 8f6f 	isb	sy
}
    4f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004f2a <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4f2a:	f3ef 8005 	mrs	r0, IPSR
}
    4f2e:	3800      	subs	r0, #0
    4f30:	bf18      	it	ne
    4f32:	2001      	movne	r0, #1
    4f34:	4770      	bx	lr

00004f36 <z_pm_save_idle_exit>:
{
    4f36:	b508      	push	{r3, lr}
	pm_system_resume();
    4f38:	f7fc f89e 	bl	1078 <pm_system_resume>
}
    4f3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    4f40:	f7ff bd71 	b.w	4a26 <sys_clock_idle_exit>

00004f44 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    4f44:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4f48:	428b      	cmp	r3, r1
    4f4a:	d001      	beq.n	4f50 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    4f4c:	f7fe bdd2 	b.w	3af4 <z_set_prio>
}
    4f50:	2000      	movs	r0, #0
    4f52:	4770      	bx	lr

00004f54 <z_impl_k_mutex_init>:
{
    4f54:	4603      	mov	r3, r0
	mutex->owner = NULL;
    4f56:	2000      	movs	r0, #0
    4f58:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
    4f5c:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
    4f60:	4770      	bx	lr

00004f62 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    4f62:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    4f66:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    4f68:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4f6a:	2300      	movs	r3, #0
	node->prev = NULL;
    4f6c:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    4f70:	4770      	bx	lr

00004f72 <unpend_thread_no_timeout>:
{
    4f72:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    4f74:	f7ff fff5 	bl	4f62 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    4f78:	7b43      	ldrb	r3, [r0, #13]
    4f7a:	f023 0302 	bic.w	r3, r3, #2
    4f7e:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    4f80:	2300      	movs	r3, #0
    4f82:	6083      	str	r3, [r0, #8]
}
    4f84:	bd08      	pop	{r3, pc}

00004f86 <add_to_waitq_locked>:
{
    4f86:	b538      	push	{r3, r4, r5, lr}
    4f88:	4604      	mov	r4, r0
    4f8a:	460d      	mov	r5, r1
	unready_thread(thread);
    4f8c:	f7fe fd34 	bl	39f8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    4f90:	7b63      	ldrb	r3, [r4, #13]
    4f92:	f043 0302 	orr.w	r3, r3, #2
    4f96:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    4f98:	b1e5      	cbz	r5, 4fd4 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    4f9a:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    4f9c:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4f9e:	429d      	cmp	r5, r3
    4fa0:	d109      	bne.n	4fb6 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    4fa2:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    4fa4:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    4fa8:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4faa:	606c      	str	r4, [r5, #4]
}
    4fac:	e012      	b.n	4fd4 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    4fae:	686a      	ldr	r2, [r5, #4]
    4fb0:	4293      	cmp	r3, r2
    4fb2:	d0f6      	beq.n	4fa2 <add_to_waitq_locked+0x1c>
    4fb4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4fb6:	2b00      	cmp	r3, #0
    4fb8:	d0f3      	beq.n	4fa2 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    4fba:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    4fbe:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    4fc2:	428a      	cmp	r2, r1
    4fc4:	d0f3      	beq.n	4fae <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4fc6:	4291      	cmp	r1, r2
    4fc8:	ddf1      	ble.n	4fae <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    4fca:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4fcc:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4fd0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4fd2:	605c      	str	r4, [r3, #4]
}
    4fd4:	bd38      	pop	{r3, r4, r5, pc}

00004fd6 <z_ready_thread>:
{
    4fd6:	b510      	push	{r4, lr}
	__asm__ volatile(
    4fd8:	f04f 0320 	mov.w	r3, #32
    4fdc:	f3ef 8411 	mrs	r4, BASEPRI
    4fe0:	f383 8812 	msr	BASEPRI_MAX, r3
    4fe4:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    4fe8:	f7fe fcd2 	bl	3990 <ready_thread>
	__asm__ volatile(
    4fec:	f384 8811 	msr	BASEPRI, r4
    4ff0:	f3bf 8f6f 	isb	sy
}
    4ff4:	bd10      	pop	{r4, pc}

00004ff6 <z_sched_wake_thread>:
{
    4ff6:	b538      	push	{r3, r4, r5, lr}
    4ff8:	4604      	mov	r4, r0
	__asm__ volatile(
    4ffa:	f04f 0320 	mov.w	r3, #32
    4ffe:	f3ef 8511 	mrs	r5, BASEPRI
    5002:	f383 8812 	msr	BASEPRI_MAX, r3
    5006:	f3bf 8f6f 	isb	sy
		if (!killed) {
    500a:	7b43      	ldrb	r3, [r0, #13]
    500c:	f013 0f28 	tst.w	r3, #40	; 0x28
    5010:	d10b      	bne.n	502a <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
    5012:	6883      	ldr	r3, [r0, #8]
    5014:	b10b      	cbz	r3, 501a <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
    5016:	f7ff ffac 	bl	4f72 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    501a:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
    501c:	b951      	cbnz	r1, 5034 <z_sched_wake_thread+0x3e>
    501e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
			ready_thread(thread);
    5022:	4620      	mov	r0, r4
    5024:	7363      	strb	r3, [r4, #13]
    5026:	f7fe fcb3 	bl	3990 <ready_thread>
	__asm__ volatile(
    502a:	f385 8811 	msr	BASEPRI, r5
    502e:	f3bf 8f6f 	isb	sy
}
    5032:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    5034:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
    5038:	e7f3      	b.n	5022 <z_sched_wake_thread+0x2c>

0000503a <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
    503a:	2101      	movs	r1, #1
    503c:	3818      	subs	r0, #24
    503e:	f7ff bfda 	b.w	4ff6 <z_sched_wake_thread>

00005042 <z_unpend_first_thread>:
{
    5042:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5044:	f04f 0320 	mov.w	r3, #32
    5048:	f3ef 8511 	mrs	r5, BASEPRI
    504c:	f383 8812 	msr	BASEPRI_MAX, r3
    5050:	f3bf 8f6f 	isb	sy
	return list->head == list;
    5054:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5056:	42a0      	cmp	r0, r4
    5058:	d00d      	beq.n	5076 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    505a:	b134      	cbz	r4, 506a <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    505c:	4620      	mov	r0, r4
    505e:	f7ff ff88 	bl	4f72 <unpend_thread_no_timeout>
    5062:	f104 0018 	add.w	r0, r4, #24
    5066:	f000 f81e 	bl	50a6 <z_abort_timeout>
	__asm__ volatile(
    506a:	f385 8811 	msr	BASEPRI, r5
    506e:	f3bf 8f6f 	isb	sy
}
    5072:	4620      	mov	r0, r4
    5074:	bd38      	pop	{r3, r4, r5, pc}
    5076:	2400      	movs	r4, #0
    5078:	e7f7      	b.n	506a <z_unpend_first_thread+0x28>

0000507a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    507a:	4603      	mov	r3, r0
    507c:	b920      	cbnz	r0, 5088 <z_reschedule_irqlock+0xe>
    507e:	f3ef 8205 	mrs	r2, IPSR
    5082:	b90a      	cbnz	r2, 5088 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    5084:	f7fc ba7c 	b.w	1580 <arch_swap>
    5088:	f383 8811 	msr	BASEPRI, r3
    508c:	f3bf 8f6f 	isb	sy
}
    5090:	4770      	bx	lr

00005092 <z_reschedule_unlocked>:
	__asm__ volatile(
    5092:	f04f 0320 	mov.w	r3, #32
    5096:	f3ef 8011 	mrs	r0, BASEPRI
    509a:	f383 8812 	msr	BASEPRI_MAX, r3
    509e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    50a2:	f7ff bfea 	b.w	507a <z_reschedule_irqlock>

000050a6 <z_abort_timeout>:
{
    50a6:	b510      	push	{r4, lr}
    50a8:	f04f 0220 	mov.w	r2, #32
    50ac:	f3ef 8411 	mrs	r4, BASEPRI
    50b0:	f382 8812 	msr	BASEPRI_MAX, r2
    50b4:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    50b8:	6803      	ldr	r3, [r0, #0]
    50ba:	b13b      	cbz	r3, 50cc <z_abort_timeout+0x26>
			remove_timeout(to);
    50bc:	f7fe ff40 	bl	3f40 <remove_timeout>
			ret = 0;
    50c0:	2000      	movs	r0, #0
	__asm__ volatile(
    50c2:	f384 8811 	msr	BASEPRI, r4
    50c6:	f3bf 8f6f 	isb	sy
}
    50ca:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    50cc:	f06f 0015 	mvn.w	r0, #21
    50d0:	e7f7      	b.n	50c2 <z_abort_timeout+0x1c>

000050d2 <z_get_next_timeout_expiry>:
{
    50d2:	b510      	push	{r4, lr}
	__asm__ volatile(
    50d4:	f04f 0320 	mov.w	r3, #32
    50d8:	f3ef 8411 	mrs	r4, BASEPRI
    50dc:	f383 8812 	msr	BASEPRI_MAX, r3
    50e0:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    50e4:	f7fe ff0c 	bl	3f00 <next_timeout>
	__asm__ volatile(
    50e8:	f384 8811 	msr	BASEPRI, r4
    50ec:	f3bf 8f6f 	isb	sy
}
    50f0:	bd10      	pop	{r4, pc}

000050f2 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    50f2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    50f4:	f7ff f820 	bl	4138 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    50f8:	bd08      	pop	{r3, pc}

000050fa <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    50fa:	b108      	cbz	r0, 5100 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    50fc:	f7fb bf6c 	b.w	fd8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    5100:	4770      	bx	lr

00005102 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    5102:	4770      	bx	lr
